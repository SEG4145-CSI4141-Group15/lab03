
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000753c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec0  0800770c  0800770c  0000870c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085cc  080085cc  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  080085cc  080085cc  000095cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085d4  080085d4  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085d4  080085d4  000095d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085d8  080085d8  000095d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080085dc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000502c  2000007c  08008658  0000a07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200050a8  08008658  0000a0a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019282  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003900  00000000  00000000  0002332e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  00026c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001144  00000000  00000000  00028268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002426a  00000000  00000000  000293ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ad03  00000000  00000000  0004d616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc101  00000000  00000000  00068319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014441a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062e4  00000000  00000000  00144460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0014a744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080076f4 	.word	0x080076f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	080076f4 	.word	0x080076f4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
	int done=1;
 80005d6:	2301      	movs	r3, #1
 80005d8:	607b      	str	r3, [r7, #4]
	while(done)
 80005da:	e19b      	b.n	8000914 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005e2:	48b3      	ldr	r0, [pc, #716]	@ (80008b0 <Get_Key+0x2e0>)
 80005e4:	f001 fc56 	bl	8001e94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 80005e8:	2200      	movs	r2, #0
 80005ea:	2110      	movs	r1, #16
 80005ec:	48b0      	ldr	r0, [pc, #704]	@ (80008b0 <Get_Key+0x2e0>)
 80005ee:	f001 fc51 	bl	8001e94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80005f2:	2200      	movs	r2, #0
 80005f4:	2120      	movs	r1, #32
 80005f6:	48ae      	ldr	r0, [pc, #696]	@ (80008b0 <Get_Key+0x2e0>)
 80005f8:	f001 fc4c 	bl	8001e94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80005fc:	2200      	movs	r2, #0
 80005fe:	2108      	movs	r1, #8
 8000600:	48ab      	ldr	r0, [pc, #684]	@ (80008b0 <Get_Key+0x2e0>)
 8000602:	f001 fc47 	bl	8001e94 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000606:	2140      	movs	r1, #64	@ 0x40
 8000608:	48a9      	ldr	r0, [pc, #676]	@ (80008b0 <Get_Key+0x2e0>)
 800060a:	f001 fc2b 	bl	8001e64 <HAL_GPIO_ReadPin>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d00b      	beq.n	800062c <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000614:	bf00      	nop
 8000616:	2140      	movs	r1, #64	@ 0x40
 8000618:	48a5      	ldr	r0, [pc, #660]	@ (80008b0 <Get_Key+0x2e0>)
 800061a:	f001 fc23 	bl	8001e64 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d1f8      	bne.n	8000616 <Get_Key+0x46>
		key='1';
 8000624:	4ba3      	ldr	r3, [pc, #652]	@ (80008b4 <Get_Key+0x2e4>)
 8000626:	2231      	movs	r2, #49	@ 0x31
 8000628:	701a      	strb	r2, [r3, #0]
		break;
 800062a:	e177      	b.n	800091c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800062c:	2180      	movs	r1, #128	@ 0x80
 800062e:	48a2      	ldr	r0, [pc, #648]	@ (80008b8 <Get_Key+0x2e8>)
 8000630:	f001 fc18 	bl	8001e64 <HAL_GPIO_ReadPin>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d00b      	beq.n	8000652 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800063a:	bf00      	nop
 800063c:	2180      	movs	r1, #128	@ 0x80
 800063e:	489e      	ldr	r0, [pc, #632]	@ (80008b8 <Get_Key+0x2e8>)
 8000640:	f001 fc10 	bl	8001e64 <HAL_GPIO_ReadPin>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d1f8      	bne.n	800063c <Get_Key+0x6c>
		key='4';
 800064a:	4b9a      	ldr	r3, [pc, #616]	@ (80008b4 <Get_Key+0x2e4>)
 800064c:	2234      	movs	r2, #52	@ 0x34
 800064e:	701a      	strb	r2, [r3, #0]
		break;
 8000650:	e164      	b.n	800091c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000652:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000656:	4899      	ldr	r0, [pc, #612]	@ (80008bc <Get_Key+0x2ec>)
 8000658:	f001 fc04 	bl	8001e64 <HAL_GPIO_ReadPin>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d00c      	beq.n	800067c <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000662:	bf00      	nop
 8000664:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000668:	4894      	ldr	r0, [pc, #592]	@ (80008bc <Get_Key+0x2ec>)
 800066a:	f001 fbfb 	bl	8001e64 <HAL_GPIO_ReadPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1f7      	bne.n	8000664 <Get_Key+0x94>
		key='7';
 8000674:	4b8f      	ldr	r3, [pc, #572]	@ (80008b4 <Get_Key+0x2e4>)
 8000676:	2237      	movs	r2, #55	@ 0x37
 8000678:	701a      	strb	r2, [r3, #0]
		break;
 800067a:	e14f      	b.n	800091c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800067c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000680:	488e      	ldr	r0, [pc, #568]	@ (80008bc <Get_Key+0x2ec>)
 8000682:	f001 fbef 	bl	8001e64 <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d00c      	beq.n	80006a6 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800068c:	bf00      	nop
 800068e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000692:	488a      	ldr	r0, [pc, #552]	@ (80008bc <Get_Key+0x2ec>)
 8000694:	f001 fbe6 	bl	8001e64 <HAL_GPIO_ReadPin>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d1f7      	bne.n	800068e <Get_Key+0xbe>
		key='*';
 800069e:	4b85      	ldr	r3, [pc, #532]	@ (80008b4 <Get_Key+0x2e4>)
 80006a0:	222a      	movs	r2, #42	@ 0x2a
 80006a2:	701a      	strb	r2, [r3, #0]
		break;
 80006a4:	e13a      	b.n	800091c <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ac:	4880      	ldr	r0, [pc, #512]	@ (80008b0 <Get_Key+0x2e0>)
 80006ae:	f001 fbf1 	bl	8001e94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 80006b2:	2201      	movs	r2, #1
 80006b4:	2110      	movs	r1, #16
 80006b6:	487e      	ldr	r0, [pc, #504]	@ (80008b0 <Get_Key+0x2e0>)
 80006b8:	f001 fbec 	bl	8001e94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80006bc:	2200      	movs	r2, #0
 80006be:	2120      	movs	r1, #32
 80006c0:	487b      	ldr	r0, [pc, #492]	@ (80008b0 <Get_Key+0x2e0>)
 80006c2:	f001 fbe7 	bl	8001e94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80006c6:	2200      	movs	r2, #0
 80006c8:	2108      	movs	r1, #8
 80006ca:	4879      	ldr	r0, [pc, #484]	@ (80008b0 <Get_Key+0x2e0>)
 80006cc:	f001 fbe2 	bl	8001e94 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006d0:	2140      	movs	r1, #64	@ 0x40
 80006d2:	4877      	ldr	r0, [pc, #476]	@ (80008b0 <Get_Key+0x2e0>)
 80006d4:	f001 fbc6 	bl	8001e64 <HAL_GPIO_ReadPin>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d00b      	beq.n	80006f6 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006de:	bf00      	nop
 80006e0:	2140      	movs	r1, #64	@ 0x40
 80006e2:	4873      	ldr	r0, [pc, #460]	@ (80008b0 <Get_Key+0x2e0>)
 80006e4:	f001 fbbe 	bl	8001e64 <HAL_GPIO_ReadPin>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d1f8      	bne.n	80006e0 <Get_Key+0x110>
		key='2';
 80006ee:	4b71      	ldr	r3, [pc, #452]	@ (80008b4 <Get_Key+0x2e4>)
 80006f0:	2232      	movs	r2, #50	@ 0x32
 80006f2:	701a      	strb	r2, [r3, #0]
		break;
 80006f4:	e112      	b.n	800091c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80006f6:	2180      	movs	r1, #128	@ 0x80
 80006f8:	486f      	ldr	r0, [pc, #444]	@ (80008b8 <Get_Key+0x2e8>)
 80006fa:	f001 fbb3 	bl	8001e64 <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d00b      	beq.n	800071c <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000704:	bf00      	nop
 8000706:	2180      	movs	r1, #128	@ 0x80
 8000708:	486b      	ldr	r0, [pc, #428]	@ (80008b8 <Get_Key+0x2e8>)
 800070a:	f001 fbab 	bl	8001e64 <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1f8      	bne.n	8000706 <Get_Key+0x136>
		key='5';
 8000714:	4b67      	ldr	r3, [pc, #412]	@ (80008b4 <Get_Key+0x2e4>)
 8000716:	2235      	movs	r2, #53	@ 0x35
 8000718:	701a      	strb	r2, [r3, #0]
		break;
 800071a:	e0ff      	b.n	800091c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800071c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000720:	4866      	ldr	r0, [pc, #408]	@ (80008bc <Get_Key+0x2ec>)
 8000722:	f001 fb9f 	bl	8001e64 <HAL_GPIO_ReadPin>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d00c      	beq.n	8000746 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800072c:	bf00      	nop
 800072e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000732:	4862      	ldr	r0, [pc, #392]	@ (80008bc <Get_Key+0x2ec>)
 8000734:	f001 fb96 	bl	8001e64 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1f7      	bne.n	800072e <Get_Key+0x15e>
		key='8';
 800073e:	4b5d      	ldr	r3, [pc, #372]	@ (80008b4 <Get_Key+0x2e4>)
 8000740:	2238      	movs	r2, #56	@ 0x38
 8000742:	701a      	strb	r2, [r3, #0]
		break;
 8000744:	e0ea      	b.n	800091c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000746:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800074a:	485c      	ldr	r0, [pc, #368]	@ (80008bc <Get_Key+0x2ec>)
 800074c:	f001 fb8a 	bl	8001e64 <HAL_GPIO_ReadPin>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d00c      	beq.n	8000770 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000756:	bf00      	nop
 8000758:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800075c:	4857      	ldr	r0, [pc, #348]	@ (80008bc <Get_Key+0x2ec>)
 800075e:	f001 fb81 	bl	8001e64 <HAL_GPIO_ReadPin>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1f7      	bne.n	8000758 <Get_Key+0x188>
		key='0';
 8000768:	4b52      	ldr	r3, [pc, #328]	@ (80008b4 <Get_Key+0x2e4>)
 800076a:	2230      	movs	r2, #48	@ 0x30
 800076c:	701a      	strb	r2, [r3, #0]
		break;
 800076e:	e0d5      	b.n	800091c <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000776:	484e      	ldr	r0, [pc, #312]	@ (80008b0 <Get_Key+0x2e0>)
 8000778:	f001 fb8c 	bl	8001e94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 800077c:	2200      	movs	r2, #0
 800077e:	2110      	movs	r1, #16
 8000780:	484b      	ldr	r0, [pc, #300]	@ (80008b0 <Get_Key+0x2e0>)
 8000782:	f001 fb87 	bl	8001e94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 8000786:	2201      	movs	r2, #1
 8000788:	2120      	movs	r1, #32
 800078a:	4849      	ldr	r0, [pc, #292]	@ (80008b0 <Get_Key+0x2e0>)
 800078c:	f001 fb82 	bl	8001e94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 8000790:	2200      	movs	r2, #0
 8000792:	2108      	movs	r1, #8
 8000794:	4846      	ldr	r0, [pc, #280]	@ (80008b0 <Get_Key+0x2e0>)
 8000796:	f001 fb7d 	bl	8001e94 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 800079a:	2140      	movs	r1, #64	@ 0x40
 800079c:	4844      	ldr	r0, [pc, #272]	@ (80008b0 <Get_Key+0x2e0>)
 800079e:	f001 fb61 	bl	8001e64 <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00b      	beq.n	80007c0 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80007a8:	bf00      	nop
 80007aa:	2140      	movs	r1, #64	@ 0x40
 80007ac:	4840      	ldr	r0, [pc, #256]	@ (80008b0 <Get_Key+0x2e0>)
 80007ae:	f001 fb59 	bl	8001e64 <HAL_GPIO_ReadPin>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1f8      	bne.n	80007aa <Get_Key+0x1da>
		key='3';
 80007b8:	4b3e      	ldr	r3, [pc, #248]	@ (80008b4 <Get_Key+0x2e4>)
 80007ba:	2233      	movs	r2, #51	@ 0x33
 80007bc:	701a      	strb	r2, [r3, #0]
		break;
 80007be:	e0ad      	b.n	800091c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007c0:	2180      	movs	r1, #128	@ 0x80
 80007c2:	483d      	ldr	r0, [pc, #244]	@ (80008b8 <Get_Key+0x2e8>)
 80007c4:	f001 fb4e 	bl	8001e64 <HAL_GPIO_ReadPin>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00b      	beq.n	80007e6 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007ce:	bf00      	nop
 80007d0:	2180      	movs	r1, #128	@ 0x80
 80007d2:	4839      	ldr	r0, [pc, #228]	@ (80008b8 <Get_Key+0x2e8>)
 80007d4:	f001 fb46 	bl	8001e64 <HAL_GPIO_ReadPin>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1f8      	bne.n	80007d0 <Get_Key+0x200>
		key='6';
 80007de:	4b35      	ldr	r3, [pc, #212]	@ (80008b4 <Get_Key+0x2e4>)
 80007e0:	2236      	movs	r2, #54	@ 0x36
 80007e2:	701a      	strb	r2, [r3, #0]
		break;
 80007e4:	e09a      	b.n	800091c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80007e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ea:	4834      	ldr	r0, [pc, #208]	@ (80008bc <Get_Key+0x2ec>)
 80007ec:	f001 fb3a 	bl	8001e64 <HAL_GPIO_ReadPin>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d00c      	beq.n	8000810 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80007f6:	bf00      	nop
 80007f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007fc:	482f      	ldr	r0, [pc, #188]	@ (80008bc <Get_Key+0x2ec>)
 80007fe:	f001 fb31 	bl	8001e64 <HAL_GPIO_ReadPin>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d1f7      	bne.n	80007f8 <Get_Key+0x228>
		key='9';
 8000808:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <Get_Key+0x2e4>)
 800080a:	2239      	movs	r2, #57	@ 0x39
 800080c:	701a      	strb	r2, [r3, #0]
		break;
 800080e:	e085      	b.n	800091c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000810:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000814:	4829      	ldr	r0, [pc, #164]	@ (80008bc <Get_Key+0x2ec>)
 8000816:	f001 fb25 	bl	8001e64 <HAL_GPIO_ReadPin>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00c      	beq.n	800083a <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000820:	bf00      	nop
 8000822:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000826:	4825      	ldr	r0, [pc, #148]	@ (80008bc <Get_Key+0x2ec>)
 8000828:	f001 fb1c 	bl	8001e64 <HAL_GPIO_ReadPin>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1f7      	bne.n	8000822 <Get_Key+0x252>
		key='#';
 8000832:	4b20      	ldr	r3, [pc, #128]	@ (80008b4 <Get_Key+0x2e4>)
 8000834:	2223      	movs	r2, #35	@ 0x23
 8000836:	701a      	strb	r2, [r3, #0]
		break;
 8000838:	e070      	b.n	800091c <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000840:	481b      	ldr	r0, [pc, #108]	@ (80008b0 <Get_Key+0x2e0>)
 8000842:	f001 fb27 	bl	8001e94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000846:	2200      	movs	r2, #0
 8000848:	2110      	movs	r1, #16
 800084a:	4819      	ldr	r0, [pc, #100]	@ (80008b0 <Get_Key+0x2e0>)
 800084c:	f001 fb22 	bl	8001e94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000850:	2200      	movs	r2, #0
 8000852:	2120      	movs	r1, #32
 8000854:	4816      	ldr	r0, [pc, #88]	@ (80008b0 <Get_Key+0x2e0>)
 8000856:	f001 fb1d 	bl	8001e94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 800085a:	2201      	movs	r2, #1
 800085c:	2108      	movs	r1, #8
 800085e:	4814      	ldr	r0, [pc, #80]	@ (80008b0 <Get_Key+0x2e0>)
 8000860:	f001 fb18 	bl	8001e94 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000864:	2140      	movs	r1, #64	@ 0x40
 8000866:	4812      	ldr	r0, [pc, #72]	@ (80008b0 <Get_Key+0x2e0>)
 8000868:	f001 fafc 	bl	8001e64 <HAL_GPIO_ReadPin>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d00b      	beq.n	800088a <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000872:	bf00      	nop
 8000874:	2140      	movs	r1, #64	@ 0x40
 8000876:	480e      	ldr	r0, [pc, #56]	@ (80008b0 <Get_Key+0x2e0>)
 8000878:	f001 faf4 	bl	8001e64 <HAL_GPIO_ReadPin>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d1f8      	bne.n	8000874 <Get_Key+0x2a4>
		key='A';
 8000882:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <Get_Key+0x2e4>)
 8000884:	2241      	movs	r2, #65	@ 0x41
 8000886:	701a      	strb	r2, [r3, #0]
		break;
 8000888:	e048      	b.n	800091c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800088a:	2180      	movs	r1, #128	@ 0x80
 800088c:	480a      	ldr	r0, [pc, #40]	@ (80008b8 <Get_Key+0x2e8>)
 800088e:	f001 fae9 	bl	8001e64 <HAL_GPIO_ReadPin>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d013      	beq.n	80008c0 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000898:	bf00      	nop
 800089a:	2180      	movs	r1, #128	@ 0x80
 800089c:	4806      	ldr	r0, [pc, #24]	@ (80008b8 <Get_Key+0x2e8>)
 800089e:	f001 fae1 	bl	8001e64 <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1f8      	bne.n	800089a <Get_Key+0x2ca>
		key='B';
 80008a8:	4b02      	ldr	r3, [pc, #8]	@ (80008b4 <Get_Key+0x2e4>)
 80008aa:	2242      	movs	r2, #66	@ 0x42
 80008ac:	701a      	strb	r2, [r3, #0]
		break;
 80008ae:	e035      	b.n	800091c <Get_Key+0x34c>
 80008b0:	40020400 	.word	0x40020400
 80008b4:	20000098 	.word	0x20000098
 80008b8:	40020800 	.word	0x40020800
 80008bc:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80008c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008c4:	481a      	ldr	r0, [pc, #104]	@ (8000930 <Get_Key+0x360>)
 80008c6:	f001 facd 	bl	8001e64 <HAL_GPIO_ReadPin>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d00c      	beq.n	80008ea <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80008d0:	bf00      	nop
 80008d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008d6:	4816      	ldr	r0, [pc, #88]	@ (8000930 <Get_Key+0x360>)
 80008d8:	f001 fac4 	bl	8001e64 <HAL_GPIO_ReadPin>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d1f7      	bne.n	80008d2 <Get_Key+0x302>
		key='C';
 80008e2:	4b14      	ldr	r3, [pc, #80]	@ (8000934 <Get_Key+0x364>)
 80008e4:	2243      	movs	r2, #67	@ 0x43
 80008e6:	701a      	strb	r2, [r3, #0]
		break;
 80008e8:	e018      	b.n	800091c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80008ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008ee:	4810      	ldr	r0, [pc, #64]	@ (8000930 <Get_Key+0x360>)
 80008f0:	f001 fab8 	bl	8001e64 <HAL_GPIO_ReadPin>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d00c      	beq.n	8000914 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80008fa:	bf00      	nop
 80008fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000900:	480b      	ldr	r0, [pc, #44]	@ (8000930 <Get_Key+0x360>)
 8000902:	f001 faaf 	bl	8001e64 <HAL_GPIO_ReadPin>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1f7      	bne.n	80008fc <Get_Key+0x32c>
		key='D';
 800090c:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <Get_Key+0x364>)
 800090e:	2244      	movs	r2, #68	@ 0x44
 8000910:	701a      	strb	r2, [r3, #0]
		break;
 8000912:	e003      	b.n	800091c <Get_Key+0x34c>
	while(done)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b00      	cmp	r3, #0
 8000918:	f47f ae60 	bne.w	80005dc <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800091c:	2120      	movs	r1, #32
 800091e:	4804      	ldr	r0, [pc, #16]	@ (8000930 <Get_Key+0x360>)
 8000920:	f001 fad1 	bl	8001ec6 <HAL_GPIO_TogglePin>
	return(key);
 8000924:	4b03      	ldr	r3, [pc, #12]	@ (8000934 <Get_Key+0x364>)
 8000926:	781b      	ldrb	r3, [r3, #0]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40020000 	.word	0x40020000
 8000934:	20000098 	.word	0x20000098

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093c:	f000 ffda 	bl	80018f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000940:	f000 f858 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000944:	f000 f8f2 	bl	8000b2c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000948:	f000 f8c2 	bl	8000ad0 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800094c:	f003 f98e 	bl	8003c6c <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
	xSemaphore = xSemaphoreCreateMutex();
 8000950:	2001      	movs	r0, #1
 8000952:	f003 fcca 	bl	80042ea <xQueueCreateMutex>
 8000956:	4603      	mov	r3, r0
 8000958:	4a16      	ldr	r2, [pc, #88]	@ (80009b4 <main+0x7c>)
 800095a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of KeypadTask */
  KeypadTaskHandle = osThreadNew(StartKeypadTask, NULL, &KeypadTask_attributes);
 800095c:	4a16      	ldr	r2, [pc, #88]	@ (80009b8 <main+0x80>)
 800095e:	2100      	movs	r1, #0
 8000960:	4816      	ldr	r0, [pc, #88]	@ (80009bc <main+0x84>)
 8000962:	f003 f9cd 	bl	8003d00 <osThreadNew>
 8000966:	4603      	mov	r3, r0
 8000968:	4a15      	ldr	r2, [pc, #84]	@ (80009c0 <main+0x88>)
 800096a:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(StartLCDTask, NULL, &LCDTask_attributes);
 800096c:	4a15      	ldr	r2, [pc, #84]	@ (80009c4 <main+0x8c>)
 800096e:	2100      	movs	r1, #0
 8000970:	4815      	ldr	r0, [pc, #84]	@ (80009c8 <main+0x90>)
 8000972:	f003 f9c5 	bl	8003d00 <osThreadNew>
 8000976:	4603      	mov	r3, r0
 8000978:	4a14      	ldr	r2, [pc, #80]	@ (80009cc <main+0x94>)
 800097a:	6013      	str	r3, [r2, #0]

  /* creation of LEDsTask */
  LEDsTaskHandle = osThreadNew(StartLEDsTask, NULL, &LEDsTask_attributes);
 800097c:	4a14      	ldr	r2, [pc, #80]	@ (80009d0 <main+0x98>)
 800097e:	2100      	movs	r1, #0
 8000980:	4814      	ldr	r0, [pc, #80]	@ (80009d4 <main+0x9c>)
 8000982:	f003 f9bd 	bl	8003d00 <osThreadNew>
 8000986:	4603      	mov	r3, r0
 8000988:	4a13      	ldr	r2, [pc, #76]	@ (80009d8 <main+0xa0>)
 800098a:	6013      	str	r3, [r2, #0]

  /* creation of PIRTask */
  PIRTaskHandle = osThreadNew(StartPIRTask, NULL, &PIRTask_attributes);
 800098c:	4a13      	ldr	r2, [pc, #76]	@ (80009dc <main+0xa4>)
 800098e:	2100      	movs	r1, #0
 8000990:	4813      	ldr	r0, [pc, #76]	@ (80009e0 <main+0xa8>)
 8000992:	f003 f9b5 	bl	8003d00 <osThreadNew>
 8000996:	4603      	mov	r3, r0
 8000998:	4a12      	ldr	r2, [pc, #72]	@ (80009e4 <main+0xac>)
 800099a:	6013      	str	r3, [r2, #0]

  /* creation of BuzzerTask */
  BuzzerTaskHandle = osThreadNew(StartBuzzerTask, NULL, &BuzzerTask_attributes);
 800099c:	4a12      	ldr	r2, [pc, #72]	@ (80009e8 <main+0xb0>)
 800099e:	2100      	movs	r1, #0
 80009a0:	4812      	ldr	r0, [pc, #72]	@ (80009ec <main+0xb4>)
 80009a2:	f003 f9ad 	bl	8003d00 <osThreadNew>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4a11      	ldr	r2, [pc, #68]	@ (80009f0 <main+0xb8>)
 80009aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009ac:	f003 f982 	bl	8003cb4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <main+0x78>
 80009b4:	2000011c 	.word	0x2000011c
 80009b8:	080084cc 	.word	0x080084cc
 80009bc:	08000cb9 	.word	0x08000cb9
 80009c0:	200000f0 	.word	0x200000f0
 80009c4:	080084f0 	.word	0x080084f0
 80009c8:	08000e19 	.word	0x08000e19
 80009cc:	200000f4 	.word	0x200000f4
 80009d0:	08008514 	.word	0x08008514
 80009d4:	08000f45 	.word	0x08000f45
 80009d8:	200000f8 	.word	0x200000f8
 80009dc:	08008538 	.word	0x08008538
 80009e0:	08000f99 	.word	0x08000f99
 80009e4:	200000fc 	.word	0x200000fc
 80009e8:	0800855c 	.word	0x0800855c
 80009ec:	08001001 	.word	0x08001001
 80009f0:	20000100 	.word	0x20000100

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b094      	sub	sp, #80	@ 0x50
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2234      	movs	r2, #52	@ 0x34
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f006 f998 	bl	8006d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac8 <SystemClock_Config+0xd4>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a20:	4a29      	ldr	r2, [pc, #164]	@ (8000ac8 <SystemClock_Config+0xd4>)
 8000a22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a28:	4b27      	ldr	r3, [pc, #156]	@ (8000ac8 <SystemClock_Config+0xd4>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a34:	2300      	movs	r3, #0
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	4b24      	ldr	r3, [pc, #144]	@ (8000acc <SystemClock_Config+0xd8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a40:	4a22      	ldr	r2, [pc, #136]	@ (8000acc <SystemClock_Config+0xd8>)
 8000a42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	4b20      	ldr	r3, [pc, #128]	@ (8000acc <SystemClock_Config+0xd8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a5c:	2310      	movs	r3, #16
 8000a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a60:	2302      	movs	r3, #2
 8000a62:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a64:	2300      	movs	r3, #0
 8000a66:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a68:	2310      	movs	r3, #16
 8000a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a6c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a70:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a72:	2304      	movs	r3, #4
 8000a74:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a76:	2302      	movs	r3, #2
 8000a78:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 fb6e 	bl	8003164 <HAL_RCC_OscConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a8e:	f000 fae5 	bl	800105c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a92:	230f      	movs	r3, #15
 8000a94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a96:	2302      	movs	r3, #2
 8000a98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	2102      	movs	r1, #2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 fff0 	bl	8002a94 <HAL_RCC_ClockConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000aba:	f000 facf 	bl	800105c <Error_Handler>
  }
}
 8000abe:	bf00      	nop
 8000ac0:	3750      	adds	r7, #80	@ 0x50
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40007000 	.word	0x40007000

08000ad0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000ad6:	4a13      	ldr	r2, [pc, #76]	@ (8000b24 <MX_I2C1_Init+0x54>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ada:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000adc:	4a12      	ldr	r2, [pc, #72]	@ (8000b28 <MX_I2C1_Init+0x58>)
 8000ade:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000aee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000af2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000b0e:	f001 f9f5 	bl	8001efc <HAL_I2C_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b18:	f000 faa0 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000009c 	.word	0x2000009c
 8000b24:	40005400 	.word	0x40005400
 8000b28:	00061a80 	.word	0x00061a80

08000b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	@ 0x28
 8000b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b58      	ldr	r3, [pc, #352]	@ (8000ca8 <MX_GPIO_Init+0x17c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a57      	ldr	r2, [pc, #348]	@ (8000ca8 <MX_GPIO_Init+0x17c>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b55      	ldr	r3, [pc, #340]	@ (8000ca8 <MX_GPIO_Init+0x17c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b51      	ldr	r3, [pc, #324]	@ (8000ca8 <MX_GPIO_Init+0x17c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a50      	ldr	r2, [pc, #320]	@ (8000ca8 <MX_GPIO_Init+0x17c>)
 8000b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b4e      	ldr	r3, [pc, #312]	@ (8000ca8 <MX_GPIO_Init+0x17c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8000ca8 <MX_GPIO_Init+0x17c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a49      	ldr	r2, [pc, #292]	@ (8000ca8 <MX_GPIO_Init+0x17c>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b47      	ldr	r3, [pc, #284]	@ (8000ca8 <MX_GPIO_Init+0x17c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b43      	ldr	r3, [pc, #268]	@ (8000ca8 <MX_GPIO_Init+0x17c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a42      	ldr	r2, [pc, #264]	@ (8000ca8 <MX_GPIO_Init+0x17c>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b40      	ldr	r3, [pc, #256]	@ (8000ca8 <MX_GPIO_Init+0x17c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 618c 	mov.w	r1, #1120	@ 0x460
 8000bb8:	483c      	ldr	r0, [pc, #240]	@ (8000cac <MX_GPIO_Init+0x180>)
 8000bba:	f001 f96b 	bl	8001e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 8000bc4:	483a      	ldr	r0, [pc, #232]	@ (8000cb0 <MX_GPIO_Init+0x184>)
 8000bc6:	f001 f965 	bl	8001e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4833      	ldr	r0, [pc, #204]	@ (8000cac <MX_GPIO_Init+0x180>)
 8000bde:	f000 ffad 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000be2:	230c      	movs	r3, #12
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf2:	2307      	movs	r3, #7
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	482b      	ldr	r0, [pc, #172]	@ (8000cac <MX_GPIO_Init+0x180>)
 8000bfe:	f000 ff9d 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
 8000c02:	f44f 638c 	mov.w	r3, #1120	@ 0x460
 8000c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4824      	ldr	r0, [pc, #144]	@ (8000cac <MX_GPIO_Init+0x180>)
 8000c1c:	f000 ff8e 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c20:	2380      	movs	r3, #128	@ 0x80
 8000c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	481e      	ldr	r0, [pc, #120]	@ (8000cac <MX_GPIO_Init+0x180>)
 8000c34:	f000 ff82 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin;
 8000c38:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4817      	ldr	r0, [pc, #92]	@ (8000cb0 <MX_GPIO_Init+0x184>)
 8000c52:	f000 ff73 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000c56:	2380      	movs	r3, #128	@ 0x80
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4812      	ldr	r0, [pc, #72]	@ (8000cb4 <MX_GPIO_Init+0x188>)
 8000c6a:	f000 ff67 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000c6e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	480a      	ldr	r0, [pc, #40]	@ (8000cac <MX_GPIO_Init+0x180>)
 8000c84:	f000 ff5a 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000c88:	2340      	movs	r3, #64	@ 0x40
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_GPIO_Init+0x184>)
 8000c9c:	f000 ff4e 	bl	8001b3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	@ 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020400 	.word	0x40020400
 8000cb4:	40020800 	.word	0x40020800

08000cb8 <StartKeypadTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartKeypadTask */
void StartKeypadTask(void *argument)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */

	char code[5];
	int numInputs = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]

	osDelay(1000);
 8000cc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cc8:	f003 f8ac 	bl	8003e24 <osDelay>

	for (;;) {

		if(sync_LCD == 0) {
 8000ccc:	4b4b      	ldr	r3, [pc, #300]	@ (8000dfc <StartKeypadTask+0x144>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f040 808d 	bne.w	8000df0 <StartKeypadTask+0x138>
			if(xSemaphoreTake(xSemaphore, ( TickType_t ) 10 ) == pdTRUE && sync_LCD == 0) {
 8000cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8000e00 <StartKeypadTask+0x148>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	210a      	movs	r1, #10
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f003 fd9f 	bl	8004820 <xQueueSemaphoreTake>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	f040 8083 	bne.w	8000df0 <StartKeypadTask+0x138>
 8000cea:	4b44      	ldr	r3, [pc, #272]	@ (8000dfc <StartKeypadTask+0x144>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d17e      	bne.n	8000df0 <StartKeypadTask+0x138>
				key = Get_Key();
 8000cf2:	f7ff fc6d 	bl	80005d0 <Get_Key>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b42      	ldr	r3, [pc, #264]	@ (8000e04 <StartKeypadTask+0x14c>)
 8000cfc:	701a      	strb	r2, [r3, #0]
				hold[numInputs] = key;
 8000cfe:	4b41      	ldr	r3, [pc, #260]	@ (8000e04 <StartKeypadTask+0x14c>)
 8000d00:	7819      	ldrb	r1, [r3, #0]
 8000d02:	4a41      	ldr	r2, [pc, #260]	@ (8000e08 <StartKeypadTask+0x150>)
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	4413      	add	r3, r2
 8000d08:	460a      	mov	r2, r1
 8000d0a:	701a      	strb	r2, [r3, #0]
				numInputs++;
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	61fb      	str	r3, [r7, #28]
				// Signal LCDTask to update the display after pressing each key
				//osEventFlagsSet(lcdEvent, 0x01);

				if (numInputs == 4) {
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	2b04      	cmp	r3, #4
 8000d16:	d161      	bne.n	8000ddc <StartKeypadTask+0x124>
					if (armed == 0) {
 8000d18:	4b3c      	ldr	r3, [pc, #240]	@ (8000e0c <StartKeypadTask+0x154>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d12f      	bne.n	8000d80 <StartKeypadTask+0xc8>
						strcpy(code, hold);
 8000d20:	f107 0308 	add.w	r3, r7, #8
 8000d24:	4938      	ldr	r1, [pc, #224]	@ (8000e08 <StartKeypadTask+0x150>)
 8000d26:	4618      	mov	r0, r3
 8000d28:	f006 f890 	bl	8006e4c <strcpy>
						xSemaphoreGive(xSemaphore);
 8000d2c:	4b34      	ldr	r3, [pc, #208]	@ (8000e00 <StartKeypadTask+0x148>)
 8000d2e:	6818      	ldr	r0, [r3, #0]
 8000d30:	2300      	movs	r3, #0
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	f003 faf1 	bl	800431c <xQueueGenericSend>
						for (int i = 0; i < 4; i++) {
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
 8000d3e:	e007      	b.n	8000d50 <StartKeypadTask+0x98>
							hold[i] = '\0';
 8000d40:	4a31      	ldr	r2, [pc, #196]	@ (8000e08 <StartKeypadTask+0x150>)
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	4413      	add	r3, r2
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
						for (int i = 0; i < 4; i++) {
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	61bb      	str	r3, [r7, #24]
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	ddf4      	ble.n	8000d40 <StartKeypadTask+0x88>
						}
						for(count_value = 60; count_value > 0; count_value--) {
 8000d56:	4b2e      	ldr	r3, [pc, #184]	@ (8000e10 <StartKeypadTask+0x158>)
 8000d58:	223c      	movs	r2, #60	@ 0x3c
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	e008      	b.n	8000d70 <StartKeypadTask+0xb8>
							osDelay(1000);
 8000d5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d62:	f003 f85f 	bl	8003e24 <osDelay>
						for(count_value = 60; count_value > 0; count_value--) {
 8000d66:	4b2a      	ldr	r3, [pc, #168]	@ (8000e10 <StartKeypadTask+0x158>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	4a28      	ldr	r2, [pc, #160]	@ (8000e10 <StartKeypadTask+0x158>)
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	4b27      	ldr	r3, [pc, #156]	@ (8000e10 <StartKeypadTask+0x158>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	dcf2      	bgt.n	8000d5e <StartKeypadTask+0xa6>
						}

						armed = 1;
 8000d78:	4b24      	ldr	r3, [pc, #144]	@ (8000e0c <StartKeypadTask+0x154>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	e01d      	b.n	8000dbc <StartKeypadTask+0x104>

					} else {
						if (strcmp(code, hold) == 0) {
 8000d80:	f107 0308 	add.w	r3, r7, #8
 8000d84:	4920      	ldr	r1, [pc, #128]	@ (8000e08 <StartKeypadTask+0x150>)
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fa42 	bl	8000210 <strcmp>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d114      	bne.n	8000dbc <StartKeypadTask+0x104>
							armed = 0;
 8000d92:	4b1e      	ldr	r3, [pc, #120]	@ (8000e0c <StartKeypadTask+0x154>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
							detected = 0;
 8000d98:	4b1e      	ldr	r3, [pc, #120]	@ (8000e14 <StartKeypadTask+0x15c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
							for (int i = 0; i < 4; i++) {
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	e008      	b.n	8000db6 <StartKeypadTask+0xfe>
								code[i] = '\0';
 8000da4:	f107 0208 	add.w	r2, r7, #8
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	4413      	add	r3, r2
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < 4; i++) {
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	3301      	adds	r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	ddf3      	ble.n	8000da4 <StartKeypadTask+0xec>
							}
						}
					}

					for (int i = 0; i < 4; i++) {
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	e007      	b.n	8000dd2 <StartKeypadTask+0x11a>
						hold[i] = '\0';
 8000dc2:	4a11      	ldr	r2, [pc, #68]	@ (8000e08 <StartKeypadTask+0x150>)
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 4; i++) {
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	ddf4      	ble.n	8000dc2 <StartKeypadTask+0x10a>
					}
					numInputs = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
				}

				xSemaphoreGive(xSemaphore);
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <StartKeypadTask+0x148>)
 8000dde:	6818      	ldr	r0, [r3, #0]
 8000de0:	2300      	movs	r3, #0
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	f003 fa99 	bl	800431c <xQueueGenericSend>
				sync_LCD = 1;
 8000dea:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <StartKeypadTask+0x144>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	601a      	str	r2, [r3, #0]
			}
		}
		osDelay(300);
 8000df0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000df4:	f003 f816 	bl	8003e24 <osDelay>
		if(sync_LCD == 0) {
 8000df8:	e768      	b.n	8000ccc <StartKeypadTask+0x14>
 8000dfa:	bf00      	nop
 8000dfc:	20000114 	.word	0x20000114
 8000e00:	2000011c 	.word	0x2000011c
 8000e04:	20000098 	.word	0x20000098
 8000e08:	20000104 	.word	0x20000104
 8000e0c:	2000010c 	.word	0x2000010c
 8000e10:	20000110 	.word	0x20000110
 8000e14:	20000118 	.word	0x20000118

08000e18 <StartLCDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLCDTask */
void StartLCDTask(void *argument)
{
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCDTask */
	SSD1306_Init();
 8000e20:	f000 f922 	bl	8001068 <SSD1306_Init>

	// Initial message on the LCD
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000e24:	2000      	movs	r0, #0
 8000e26:	f000 fa11 	bl	800124c <SSD1306_Fill>
	SSD1306_GotoXY(0, 0);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f000 fa85 	bl	800133c <SSD1306_GotoXY>
	SSD1306_Puts(armed_messages[armed], &Font_11x18, 1);
 8000e32:	4b3b      	ldr	r3, [pc, #236]	@ (8000f20 <StartLCDTask+0x108>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	4a39      	ldr	r2, [pc, #228]	@ (8000f24 <StartLCDTask+0x10c>)
 8000e40:	4413      	add	r3, r2
 8000e42:	2201      	movs	r2, #1
 8000e44:	4938      	ldr	r1, [pc, #224]	@ (8000f28 <StartLCDTask+0x110>)
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 fb0c 	bl	8001464 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000e4c:	f000 f9d0 	bl	80011f0 <SSD1306_UpdateScreen>

	osDelay(100);
 8000e50:	2064      	movs	r0, #100	@ 0x64
 8000e52:	f002 ffe7 	bl	8003e24 <osDelay>

	/* Infinite loop */
	for (;;) {
		// Wait for a keypad event
		//osEventFlagsWait(lcdEvent, 0x01, osFlagsWaitAny, osWaitForever)}
		if(xSemaphoreTake(xSemaphore, ( TickType_t ) 10 ) == pdTRUE) {
 8000e56:	4b35      	ldr	r3, [pc, #212]	@ (8000f2c <StartLCDTask+0x114>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	210a      	movs	r1, #10
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f003 fcdf 	bl	8004820 <xQueueSemaphoreTake>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d156      	bne.n	8000f16 <StartLCDTask+0xfe>
			SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f000 f9ef 	bl	800124c <SSD1306_Fill>
			SSD1306_GotoXY(0, 0);
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2000      	movs	r0, #0
 8000e72:	f000 fa63 	bl	800133c <SSD1306_GotoXY>
			SSD1306_Puts(armed_messages[armed], &Font_11x18, 1);
 8000e76:	4b2a      	ldr	r3, [pc, #168]	@ (8000f20 <StartLCDTask+0x108>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4a28      	ldr	r2, [pc, #160]	@ (8000f24 <StartLCDTask+0x10c>)
 8000e84:	4413      	add	r3, r2
 8000e86:	2201      	movs	r2, #1
 8000e88:	4927      	ldr	r1, [pc, #156]	@ (8000f28 <StartLCDTask+0x110>)
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 faea 	bl	8001464 <SSD1306_Puts>

			if (strlen(hold) > 0) {
 8000e90:	4b27      	ldr	r3, [pc, #156]	@ (8000f30 <StartLCDTask+0x118>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d01b      	beq.n	8000ed0 <StartLCDTask+0xb8>

				char stars[4][5] = { "*", "**", "***", "****" };
 8000e98:	4b26      	ldr	r3, [pc, #152]	@ (8000f34 <StartLCDTask+0x11c>)
 8000e9a:	f107 040c 	add.w	r4, r7, #12
 8000e9e:	461d      	mov	r5, r3
 8000ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea4:	682b      	ldr	r3, [r5, #0]
 8000ea6:	6023      	str	r3, [r4, #0]

				SSD1306_GotoXY(0, 30);
 8000ea8:	211e      	movs	r1, #30
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f000 fa46 	bl	800133c <SSD1306_GotoXY>
				SSD1306_Puts(stars[strlen(hold) - 1], &Font_11x18, 1);
 8000eb0:	481f      	ldr	r0, [pc, #124]	@ (8000f30 <StartLCDTask+0x118>)
 8000eb2:	f7ff f9b7 	bl	8000224 <strlen>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	1e5a      	subs	r2, r3, #1
 8000eba:	f107 010c 	add.w	r1, r7, #12
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4917      	ldr	r1, [pc, #92]	@ (8000f28 <StartLCDTask+0x110>)
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 faca 	bl	8001464 <SSD1306_Puts>
			}

			if(count_value > 0) {
 8000ed0:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <StartLCDTask+0x120>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	dd12      	ble.n	8000efe <StartLCDTask+0xe6>
				char str[3];
				sprintf(str, "%d", count_value);
 8000ed8:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <StartLCDTask+0x120>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	4916      	ldr	r1, [pc, #88]	@ (8000f3c <StartLCDTask+0x124>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f005 ff08 	bl	8006cf8 <siprintf>
				SSD1306_GotoXY(0, 30);
 8000ee8:	211e      	movs	r1, #30
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 fa26 	bl	800133c <SSD1306_GotoXY>
				SSD1306_Puts(str, &Font_11x18, 1);
 8000ef0:	f107 0308 	add.w	r3, r7, #8
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	490c      	ldr	r1, [pc, #48]	@ (8000f28 <StartLCDTask+0x110>)
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 fab3 	bl	8001464 <SSD1306_Puts>
			}

			SSD1306_UpdateScreen();
 8000efe:	f000 f977 	bl	80011f0 <SSD1306_UpdateScreen>
			xSemaphoreGive(xSemaphore);
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <StartLCDTask+0x114>)
 8000f04:	6818      	ldr	r0, [r3, #0]
 8000f06:	2300      	movs	r3, #0
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	f003 fa06 	bl	800431c <xQueueGenericSend>
			sync_LCD = 0;
 8000f10:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <StartLCDTask+0x128>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
		}
		osDelay(100);
 8000f16:	2064      	movs	r0, #100	@ 0x64
 8000f18:	f002 ff84 	bl	8003e24 <osDelay>
		if(xSemaphoreTake(xSemaphore, ( TickType_t ) 10 ) == pdTRUE) {
 8000f1c:	e79b      	b.n	8000e56 <StartLCDTask+0x3e>
 8000f1e:	bf00      	nop
 8000f20:	2000010c 	.word	0x2000010c
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	2000011c 	.word	0x2000011c
 8000f30:	20000104 	.word	0x20000104
 8000f34:	08007744 	.word	0x08007744
 8000f38:	20000110 	.word	0x20000110
 8000f3c:	08007740 	.word	0x08007740
 8000f40:	20000114 	.word	0x20000114

08000f44 <StartLEDsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLEDsTask */
void StartLEDsTask(void *argument)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDsTask */

	/* Infinite loop */
	for (;;) {
		// Not armed
		if (armed) {
 8000f4c:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <StartLEDsTask+0x4c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00a      	beq.n	8000f6a <StartLEDsTask+0x26>
			// Turn on Green LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2140      	movs	r1, #64	@ 0x40
 8000f58:	480e      	ldr	r0, [pc, #56]	@ (8000f94 <StartLEDsTask+0x50>)
 8000f5a:	f000 ff9b 	bl	8001e94 <HAL_GPIO_WritePin>

			// Turn off Red LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f64:	480b      	ldr	r0, [pc, #44]	@ (8000f94 <StartLEDsTask+0x50>)
 8000f66:	f000 ff95 	bl	8001e94 <HAL_GPIO_WritePin>
		}

		osDelay(10);
 8000f6a:	200a      	movs	r0, #10
 8000f6c:	f002 ff5a 	bl	8003e24 <osDelay>
		// Armed
		if (!armed) {
 8000f70:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <StartLEDsTask+0x4c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1e9      	bne.n	8000f4c <StartLEDsTask+0x8>
			// Turn off Green LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2140      	movs	r1, #64	@ 0x40
 8000f7c:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <StartLEDsTask+0x50>)
 8000f7e:	f000 ff89 	bl	8001e94 <HAL_GPIO_WritePin>

			// Turn on Red LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f88:	4802      	ldr	r0, [pc, #8]	@ (8000f94 <StartLEDsTask+0x50>)
 8000f8a:	f000 ff83 	bl	8001e94 <HAL_GPIO_WritePin>
		if (armed) {
 8000f8e:	e7dd      	b.n	8000f4c <StartLEDsTask+0x8>
 8000f90:	2000010c 	.word	0x2000010c
 8000f94:	40020000 	.word	0x40020000

08000f98 <StartPIRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPIRTask */
void StartPIRTask(void *argument)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPIRTask */
	/* Infinite loop */
	osDelay(1000);
 8000fa0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fa4:	f002 ff3e 	bl	8003e24 <osDelay>
	for (;;) {
		if(sync_LCD == 0) {
 8000fa8:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <StartPIRTask+0x58>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d11a      	bne.n	8000fe6 <StartPIRTask+0x4e>
			//if(xSemaphoreTake(xSemaphore, ( TickType_t ) 10 ) == pdTRUE) {
		// If the PIR detects something, wait 60 seconds to let the user enter the code to disarm the system, otherwise sound the buzzer
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET) {
 8000fb0:	2180      	movs	r1, #128	@ 0x80
 8000fb2:	4810      	ldr	r0, [pc, #64]	@ (8000ff4 <StartPIRTask+0x5c>)
 8000fb4:	f000 ff56 	bl	8001e64 <HAL_GPIO_ReadPin>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d113      	bne.n	8000fe6 <StartPIRTask+0x4e>
				// Delay 60 seconds
					if (armed) {
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <StartPIRTask+0x60>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00f      	beq.n	8000fe6 <StartPIRTask+0x4e>
						osDelay(2000);
 8000fc6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fca:	f002 ff2b 	bl	8003e24 <osDelay>
						if(armed) {
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <StartPIRTask+0x60>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d007      	beq.n	8000fe6 <StartPIRTask+0x4e>
							detected = 1;
 8000fd6:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <StartPIRTask+0x64>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	601a      	str	r2, [r3, #0]
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2120      	movs	r1, #32
 8000fe0:	4804      	ldr	r0, [pc, #16]	@ (8000ff4 <StartPIRTask+0x5c>)
 8000fe2:	f000 ff57 	bl	8001e94 <HAL_GPIO_WritePin>
					//}
					// After detection, keypad loses functionality
			}
		//}
	}
	osDelay(100);
 8000fe6:	2064      	movs	r0, #100	@ 0x64
 8000fe8:	f002 ff1c 	bl	8003e24 <osDelay>
		if(sync_LCD == 0) {
 8000fec:	e7dc      	b.n	8000fa8 <StartPIRTask+0x10>
 8000fee:	bf00      	nop
 8000ff0:	20000114 	.word	0x20000114
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	2000010c 	.word	0x2000010c
 8000ffc:	20000118 	.word	0x20000118

08001000 <StartBuzzerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBuzzerTask */
void StartBuzzerTask(void *argument)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBuzzerTask */

	/* Infinite loop */
	for (;;) {

		if(detected) {
 8001008:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <StartBuzzerTask+0x30>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d005      	beq.n	800101c <StartBuzzerTask+0x1c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	2120      	movs	r1, #32
 8001014:	4807      	ldr	r0, [pc, #28]	@ (8001034 <StartBuzzerTask+0x34>)
 8001016:	f000 ff3d 	bl	8001e94 <HAL_GPIO_WritePin>
 800101a:	e004      	b.n	8001026 <StartBuzzerTask+0x26>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2120      	movs	r1, #32
 8001020:	4804      	ldr	r0, [pc, #16]	@ (8001034 <StartBuzzerTask+0x34>)
 8001022:	f000 ff37 	bl	8001e94 <HAL_GPIO_WritePin>
		}

		osDelay(100);
 8001026:	2064      	movs	r0, #100	@ 0x64
 8001028:	f002 fefc 	bl	8003e24 <osDelay>
		if(detected) {
 800102c:	e7ec      	b.n	8001008 <StartBuzzerTask+0x8>
 800102e:	bf00      	nop
 8001030:	20000118 	.word	0x20000118
 8001034:	40020000 	.word	0x40020000

08001038 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d101      	bne.n	800104e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800104a:	f000 fc75 	bl	8001938 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40001000 	.word	0x40001000

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <Error_Handler+0x8>

08001068 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800106e:	f000 fa1f 	bl	80014b0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001072:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001076:	2201      	movs	r2, #1
 8001078:	2178      	movs	r1, #120	@ 0x78
 800107a:	485b      	ldr	r0, [pc, #364]	@ (80011e8 <SSD1306_Init+0x180>)
 800107c:	f001 f980 	bl	8002380 <HAL_I2C_IsDeviceReady>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001086:	2300      	movs	r3, #0
 8001088:	e0a9      	b.n	80011de <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800108a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800108e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001090:	e002      	b.n	8001098 <SSD1306_Init+0x30>
		p--;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3b01      	subs	r3, #1
 8001096:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f9      	bne.n	8001092 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800109e:	22ae      	movs	r2, #174	@ 0xae
 80010a0:	2100      	movs	r1, #0
 80010a2:	2078      	movs	r0, #120	@ 0x78
 80010a4:	f000 fa80 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80010a8:	2220      	movs	r2, #32
 80010aa:	2100      	movs	r1, #0
 80010ac:	2078      	movs	r0, #120	@ 0x78
 80010ae:	f000 fa7b 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80010b2:	2210      	movs	r2, #16
 80010b4:	2100      	movs	r1, #0
 80010b6:	2078      	movs	r0, #120	@ 0x78
 80010b8:	f000 fa76 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80010bc:	22b0      	movs	r2, #176	@ 0xb0
 80010be:	2100      	movs	r1, #0
 80010c0:	2078      	movs	r0, #120	@ 0x78
 80010c2:	f000 fa71 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80010c6:	22c8      	movs	r2, #200	@ 0xc8
 80010c8:	2100      	movs	r1, #0
 80010ca:	2078      	movs	r0, #120	@ 0x78
 80010cc:	f000 fa6c 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80010d0:	2200      	movs	r2, #0
 80010d2:	2100      	movs	r1, #0
 80010d4:	2078      	movs	r0, #120	@ 0x78
 80010d6:	f000 fa67 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80010da:	2210      	movs	r2, #16
 80010dc:	2100      	movs	r1, #0
 80010de:	2078      	movs	r0, #120	@ 0x78
 80010e0:	f000 fa62 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80010e4:	2240      	movs	r2, #64	@ 0x40
 80010e6:	2100      	movs	r1, #0
 80010e8:	2078      	movs	r0, #120	@ 0x78
 80010ea:	f000 fa5d 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80010ee:	2281      	movs	r2, #129	@ 0x81
 80010f0:	2100      	movs	r1, #0
 80010f2:	2078      	movs	r0, #120	@ 0x78
 80010f4:	f000 fa58 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80010f8:	22ff      	movs	r2, #255	@ 0xff
 80010fa:	2100      	movs	r1, #0
 80010fc:	2078      	movs	r0, #120	@ 0x78
 80010fe:	f000 fa53 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001102:	22a1      	movs	r2, #161	@ 0xa1
 8001104:	2100      	movs	r1, #0
 8001106:	2078      	movs	r0, #120	@ 0x78
 8001108:	f000 fa4e 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800110c:	22a6      	movs	r2, #166	@ 0xa6
 800110e:	2100      	movs	r1, #0
 8001110:	2078      	movs	r0, #120	@ 0x78
 8001112:	f000 fa49 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001116:	22a8      	movs	r2, #168	@ 0xa8
 8001118:	2100      	movs	r1, #0
 800111a:	2078      	movs	r0, #120	@ 0x78
 800111c:	f000 fa44 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001120:	223f      	movs	r2, #63	@ 0x3f
 8001122:	2100      	movs	r1, #0
 8001124:	2078      	movs	r0, #120	@ 0x78
 8001126:	f000 fa3f 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800112a:	22a4      	movs	r2, #164	@ 0xa4
 800112c:	2100      	movs	r1, #0
 800112e:	2078      	movs	r0, #120	@ 0x78
 8001130:	f000 fa3a 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001134:	22d3      	movs	r2, #211	@ 0xd3
 8001136:	2100      	movs	r1, #0
 8001138:	2078      	movs	r0, #120	@ 0x78
 800113a:	f000 fa35 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	2078      	movs	r0, #120	@ 0x78
 8001144:	f000 fa30 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001148:	22d5      	movs	r2, #213	@ 0xd5
 800114a:	2100      	movs	r1, #0
 800114c:	2078      	movs	r0, #120	@ 0x78
 800114e:	f000 fa2b 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001152:	22f0      	movs	r2, #240	@ 0xf0
 8001154:	2100      	movs	r1, #0
 8001156:	2078      	movs	r0, #120	@ 0x78
 8001158:	f000 fa26 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800115c:	22d9      	movs	r2, #217	@ 0xd9
 800115e:	2100      	movs	r1, #0
 8001160:	2078      	movs	r0, #120	@ 0x78
 8001162:	f000 fa21 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001166:	2222      	movs	r2, #34	@ 0x22
 8001168:	2100      	movs	r1, #0
 800116a:	2078      	movs	r0, #120	@ 0x78
 800116c:	f000 fa1c 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001170:	22da      	movs	r2, #218	@ 0xda
 8001172:	2100      	movs	r1, #0
 8001174:	2078      	movs	r0, #120	@ 0x78
 8001176:	f000 fa17 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800117a:	2212      	movs	r2, #18
 800117c:	2100      	movs	r1, #0
 800117e:	2078      	movs	r0, #120	@ 0x78
 8001180:	f000 fa12 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001184:	22db      	movs	r2, #219	@ 0xdb
 8001186:	2100      	movs	r1, #0
 8001188:	2078      	movs	r0, #120	@ 0x78
 800118a:	f000 fa0d 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800118e:	2220      	movs	r2, #32
 8001190:	2100      	movs	r1, #0
 8001192:	2078      	movs	r0, #120	@ 0x78
 8001194:	f000 fa08 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001198:	228d      	movs	r2, #141	@ 0x8d
 800119a:	2100      	movs	r1, #0
 800119c:	2078      	movs	r0, #120	@ 0x78
 800119e:	f000 fa03 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80011a2:	2214      	movs	r2, #20
 80011a4:	2100      	movs	r1, #0
 80011a6:	2078      	movs	r0, #120	@ 0x78
 80011a8:	f000 f9fe 	bl	80015a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80011ac:	22af      	movs	r2, #175	@ 0xaf
 80011ae:	2100      	movs	r1, #0
 80011b0:	2078      	movs	r0, #120	@ 0x78
 80011b2:	f000 f9f9 	bl	80015a8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80011b6:	222e      	movs	r2, #46	@ 0x2e
 80011b8:	2100      	movs	r1, #0
 80011ba:	2078      	movs	r0, #120	@ 0x78
 80011bc:	f000 f9f4 	bl	80015a8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f000 f843 	bl	800124c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80011c6:	f000 f813 	bl	80011f0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80011ca:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <SSD1306_Init+0x184>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <SSD1306_Init+0x184>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80011d6:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <SSD1306_Init+0x184>)
 80011d8:	2201      	movs	r2, #1
 80011da:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80011dc:	2301      	movs	r3, #1
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000009c 	.word	0x2000009c
 80011ec:	20000520 	.word	0x20000520

080011f0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	e01d      	b.n	8001238 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	3b50      	subs	r3, #80	@ 0x50
 8001200:	b2db      	uxtb	r3, r3
 8001202:	461a      	mov	r2, r3
 8001204:	2100      	movs	r1, #0
 8001206:	2078      	movs	r0, #120	@ 0x78
 8001208:	f000 f9ce 	bl	80015a8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2078      	movs	r0, #120	@ 0x78
 8001212:	f000 f9c9 	bl	80015a8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001216:	2210      	movs	r2, #16
 8001218:	2100      	movs	r1, #0
 800121a:	2078      	movs	r0, #120	@ 0x78
 800121c:	f000 f9c4 	bl	80015a8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	01db      	lsls	r3, r3, #7
 8001224:	4a08      	ldr	r2, [pc, #32]	@ (8001248 <SSD1306_UpdateScreen+0x58>)
 8001226:	441a      	add	r2, r3
 8001228:	2380      	movs	r3, #128	@ 0x80
 800122a:	2140      	movs	r1, #64	@ 0x40
 800122c:	2078      	movs	r0, #120	@ 0x78
 800122e:	f000 f955 	bl	80014dc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	3301      	adds	r3, #1
 8001236:	71fb      	strb	r3, [r7, #7]
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b07      	cmp	r3, #7
 800123c:	d9de      	bls.n	80011fc <SSD1306_UpdateScreen+0xc>
	}
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000120 	.word	0x20000120

0800124c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <SSD1306_Fill+0x14>
 800125c:	2300      	movs	r3, #0
 800125e:	e000      	b.n	8001262 <SSD1306_Fill+0x16>
 8001260:	23ff      	movs	r3, #255	@ 0xff
 8001262:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001266:	4619      	mov	r1, r3
 8001268:	4803      	ldr	r0, [pc, #12]	@ (8001278 <SSD1306_Fill+0x2c>)
 800126a:	f005 fd65 	bl	8006d38 <memset>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000120 	.word	0x20000120

0800127c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	80fb      	strh	r3, [r7, #6]
 8001286:	460b      	mov	r3, r1
 8001288:	80bb      	strh	r3, [r7, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	70fb      	strb	r3, [r7, #3]
	if (
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	2b7f      	cmp	r3, #127	@ 0x7f
 8001292:	d848      	bhi.n	8001326 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001294:	88bb      	ldrh	r3, [r7, #4]
 8001296:	2b3f      	cmp	r3, #63	@ 0x3f
 8001298:	d845      	bhi.n	8001326 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800129a:	4b26      	ldr	r3, [pc, #152]	@ (8001334 <SSD1306_DrawPixel+0xb8>)
 800129c:	791b      	ldrb	r3, [r3, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d006      	beq.n	80012b0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80012a2:	78fb      	ldrb	r3, [r7, #3]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	bf0c      	ite	eq
 80012a8:	2301      	moveq	r3, #1
 80012aa:	2300      	movne	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d11a      	bne.n	80012ec <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012b6:	88fa      	ldrh	r2, [r7, #6]
 80012b8:	88bb      	ldrh	r3, [r7, #4]
 80012ba:	08db      	lsrs	r3, r3, #3
 80012bc:	b298      	uxth	r0, r3
 80012be:	4603      	mov	r3, r0
 80012c0:	01db      	lsls	r3, r3, #7
 80012c2:	4413      	add	r3, r2
 80012c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001338 <SSD1306_DrawPixel+0xbc>)
 80012c6:	5cd3      	ldrb	r3, [r2, r3]
 80012c8:	b25a      	sxtb	r2, r3
 80012ca:	88bb      	ldrh	r3, [r7, #4]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	2101      	movs	r1, #1
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b259      	sxtb	r1, r3
 80012dc:	88fa      	ldrh	r2, [r7, #6]
 80012de:	4603      	mov	r3, r0
 80012e0:	01db      	lsls	r3, r3, #7
 80012e2:	4413      	add	r3, r2
 80012e4:	b2c9      	uxtb	r1, r1
 80012e6:	4a14      	ldr	r2, [pc, #80]	@ (8001338 <SSD1306_DrawPixel+0xbc>)
 80012e8:	54d1      	strb	r1, [r2, r3]
 80012ea:	e01d      	b.n	8001328 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012ec:	88fa      	ldrh	r2, [r7, #6]
 80012ee:	88bb      	ldrh	r3, [r7, #4]
 80012f0:	08db      	lsrs	r3, r3, #3
 80012f2:	b298      	uxth	r0, r3
 80012f4:	4603      	mov	r3, r0
 80012f6:	01db      	lsls	r3, r3, #7
 80012f8:	4413      	add	r3, r2
 80012fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001338 <SSD1306_DrawPixel+0xbc>)
 80012fc:	5cd3      	ldrb	r3, [r2, r3]
 80012fe:	b25a      	sxtb	r2, r3
 8001300:	88bb      	ldrh	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	2101      	movs	r1, #1
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	b25b      	sxtb	r3, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	b25b      	sxtb	r3, r3
 8001312:	4013      	ands	r3, r2
 8001314:	b259      	sxtb	r1, r3
 8001316:	88fa      	ldrh	r2, [r7, #6]
 8001318:	4603      	mov	r3, r0
 800131a:	01db      	lsls	r3, r3, #7
 800131c:	4413      	add	r3, r2
 800131e:	b2c9      	uxtb	r1, r1
 8001320:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <SSD1306_DrawPixel+0xbc>)
 8001322:	54d1      	strb	r1, [r2, r3]
 8001324:	e000      	b.n	8001328 <SSD1306_DrawPixel+0xac>
		return;
 8001326:	bf00      	nop
	}
}
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000520 	.word	0x20000520
 8001338:	20000120 	.word	0x20000120

0800133c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	460a      	mov	r2, r1
 8001346:	80fb      	strh	r3, [r7, #6]
 8001348:	4613      	mov	r3, r2
 800134a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800134c:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <SSD1306_GotoXY+0x28>)
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001352:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <SSD1306_GotoXY+0x28>)
 8001354:	88bb      	ldrh	r3, [r7, #4]
 8001356:	8053      	strh	r3, [r2, #2]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	20000520 	.word	0x20000520

08001368 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	4613      	mov	r3, r2
 8001376:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001378:	4b39      	ldr	r3, [pc, #228]	@ (8001460 <SSD1306_Putc+0xf8>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
	if (
 8001384:	2b7f      	cmp	r3, #127	@ 0x7f
 8001386:	dc07      	bgt.n	8001398 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001388:	4b35      	ldr	r3, [pc, #212]	@ (8001460 <SSD1306_Putc+0xf8>)
 800138a:	885b      	ldrh	r3, [r3, #2]
 800138c:	461a      	mov	r2, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	785b      	ldrb	r3, [r3, #1]
 8001392:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001394:	2b3f      	cmp	r3, #63	@ 0x3f
 8001396:	dd01      	ble.n	800139c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001398:	2300      	movs	r3, #0
 800139a:	e05d      	b.n	8001458 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e04b      	b.n	800143a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	3b20      	subs	r3, #32
 80013aa:	6839      	ldr	r1, [r7, #0]
 80013ac:	7849      	ldrb	r1, [r1, #1]
 80013ae:	fb01 f303 	mul.w	r3, r1, r3
 80013b2:	4619      	mov	r1, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	440b      	add	r3, r1
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	e030      	b.n	8001428 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d010      	beq.n	80013f8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80013d6:	4b22      	ldr	r3, [pc, #136]	@ (8001460 <SSD1306_Putc+0xf8>)
 80013d8:	881a      	ldrh	r2, [r3, #0]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	4413      	add	r3, r2
 80013e0:	b298      	uxth	r0, r3
 80013e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001460 <SSD1306_Putc+0xf8>)
 80013e4:	885a      	ldrh	r2, [r3, #2]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	4413      	add	r3, r2
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	79ba      	ldrb	r2, [r7, #6]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f7ff ff43 	bl	800127c <SSD1306_DrawPixel>
 80013f6:	e014      	b.n	8001422 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80013f8:	4b19      	ldr	r3, [pc, #100]	@ (8001460 <SSD1306_Putc+0xf8>)
 80013fa:	881a      	ldrh	r2, [r3, #0]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4413      	add	r3, r2
 8001402:	b298      	uxth	r0, r3
 8001404:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <SSD1306_Putc+0xf8>)
 8001406:	885a      	ldrh	r2, [r3, #2]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	b29b      	uxth	r3, r3
 800140c:	4413      	add	r3, r2
 800140e:	b299      	uxth	r1, r3
 8001410:	79bb      	ldrb	r3, [r7, #6]
 8001412:	2b00      	cmp	r3, #0
 8001414:	bf0c      	ite	eq
 8001416:	2301      	moveq	r3, #1
 8001418:	2300      	movne	r3, #0
 800141a:	b2db      	uxtb	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	f7ff ff2d 	bl	800127c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	3301      	adds	r3, #1
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4293      	cmp	r3, r2
 8001432:	d3c8      	bcc.n	80013c6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3301      	adds	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	785b      	ldrb	r3, [r3, #1]
 800143e:	461a      	mov	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	4293      	cmp	r3, r2
 8001444:	d3ad      	bcc.n	80013a2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <SSD1306_Putc+0xf8>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	7812      	ldrb	r2, [r2, #0]
 800144e:	4413      	add	r3, r2
 8001450:	b29a      	uxth	r2, r3
 8001452:	4b03      	ldr	r3, [pc, #12]	@ (8001460 <SSD1306_Putc+0xf8>)
 8001454:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001456:	79fb      	ldrb	r3, [r7, #7]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000520 	.word	0x20000520

08001464 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	4613      	mov	r3, r2
 8001470:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001472:	e012      	b.n	800149a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	79fa      	ldrb	r2, [r7, #7]
 800147a:	68b9      	ldr	r1, [r7, #8]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff73 	bl	8001368 <SSD1306_Putc>
 8001482:	4603      	mov	r3, r0
 8001484:	461a      	mov	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	d002      	beq.n	8001494 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	e008      	b.n	80014a6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3301      	adds	r3, #1
 8001498:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1e8      	bne.n	8001474 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	781b      	ldrb	r3, [r3, #0]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80014b6:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <ssd1306_I2C_Init+0x28>)
 80014b8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014ba:	e002      	b.n	80014c2 <ssd1306_I2C_Init+0x12>
		p--;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f9      	bne.n	80014bc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	0003d090 	.word	0x0003d090

080014dc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b0c7      	sub	sp, #284	@ 0x11c
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	4604      	mov	r4, r0
 80014e4:	4608      	mov	r0, r1
 80014e6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80014ea:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80014ee:	600a      	str	r2, [r1, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014f6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80014fa:	4622      	mov	r2, r4
 80014fc:	701a      	strb	r2, [r3, #0]
 80014fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001502:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001506:	4602      	mov	r2, r0
 8001508:	701a      	strb	r2, [r3, #0]
 800150a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800150e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001512:	460a      	mov	r2, r1
 8001514:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001516:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800151a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800151e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001522:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001526:	7812      	ldrb	r2, [r2, #0]
 8001528:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800152a:	2300      	movs	r3, #0
 800152c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001530:	e015      	b.n	800155e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001532:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001536:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800153a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	441a      	add	r2, r3
 8001542:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001546:	3301      	adds	r3, #1
 8001548:	7811      	ldrb	r1, [r2, #0]
 800154a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800154e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001552:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001554:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001558:	3301      	adds	r3, #1
 800155a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800155e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001562:	b29b      	uxth	r3, r3
 8001564:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001568:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800156c:	8812      	ldrh	r2, [r2, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d8df      	bhi.n	8001532 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001572:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001576:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b299      	uxth	r1, r3
 800157e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001582:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	b29b      	uxth	r3, r3
 800158c:	f107 020c 	add.w	r2, r7, #12
 8001590:	200a      	movs	r0, #10
 8001592:	9000      	str	r0, [sp, #0]
 8001594:	4803      	ldr	r0, [pc, #12]	@ (80015a4 <ssd1306_I2C_WriteMulti+0xc8>)
 8001596:	f000 fdf5 	bl	8002184 <HAL_I2C_Master_Transmit>
}
 800159a:	bf00      	nop
 800159c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd90      	pop	{r4, r7, pc}
 80015a4:	2000009c 	.word	0x2000009c

080015a8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af02      	add	r7, sp, #8
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
 80015b2:	460b      	mov	r3, r1
 80015b4:	71bb      	strb	r3, [r7, #6]
 80015b6:	4613      	mov	r3, r2
 80015b8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80015ba:	79bb      	ldrb	r3, [r7, #6]
 80015bc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80015be:	797b      	ldrb	r3, [r7, #5]
 80015c0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	b299      	uxth	r1, r3
 80015c6:	f107 020c 	add.w	r2, r7, #12
 80015ca:	230a      	movs	r3, #10
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2302      	movs	r3, #2
 80015d0:	4803      	ldr	r0, [pc, #12]	@ (80015e0 <ssd1306_I2C_Write+0x38>)
 80015d2:	f000 fdd7 	bl	8002184 <HAL_I2C_Master_Transmit>
}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000009c 	.word	0x2000009c

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <HAL_MspInit+0x54>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f2:	4a11      	ldr	r2, [pc, #68]	@ (8001638 <HAL_MspInit+0x54>)
 80015f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <HAL_MspInit+0x54>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <HAL_MspInit+0x54>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <HAL_MspInit+0x54>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001614:	6413      	str	r3, [r2, #64]	@ 0x40
 8001616:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <HAL_MspInit+0x54>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	210f      	movs	r1, #15
 8001626:	f06f 0001 	mvn.w	r0, #1
 800162a:	f000 fa5d 	bl	8001ae8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800

0800163c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a19      	ldr	r2, [pc, #100]	@ (80016c0 <HAL_I2C_MspInit+0x84>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d12c      	bne.n	80016b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b18      	ldr	r3, [pc, #96]	@ (80016c4 <HAL_I2C_MspInit+0x88>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	4a17      	ldr	r2, [pc, #92]	@ (80016c4 <HAL_I2C_MspInit+0x88>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6313      	str	r3, [r2, #48]	@ 0x30
 800166e:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <HAL_I2C_MspInit+0x88>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800167a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800167e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001680:	2312      	movs	r3, #18
 8001682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800168c:	2304      	movs	r3, #4
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4619      	mov	r1, r3
 8001696:	480c      	ldr	r0, [pc, #48]	@ (80016c8 <HAL_I2C_MspInit+0x8c>)
 8001698:	f000 fa50 	bl	8001b3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <HAL_I2C_MspInit+0x88>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <HAL_I2C_MspInit+0x88>)
 80016a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <HAL_I2C_MspInit+0x88>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016b8:	bf00      	nop
 80016ba:	3728      	adds	r7, #40	@ 0x28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40005400 	.word	0x40005400
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020400 	.word	0x40020400

080016cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08e      	sub	sp, #56	@ 0x38
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	4b33      	ldr	r3, [pc, #204]	@ (80017b0 <HAL_InitTick+0xe4>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e4:	4a32      	ldr	r2, [pc, #200]	@ (80017b0 <HAL_InitTick+0xe4>)
 80016e6:	f043 0310 	orr.w	r3, r3, #16
 80016ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ec:	4b30      	ldr	r3, [pc, #192]	@ (80017b0 <HAL_InitTick+0xe4>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016f8:	f107 0210 	add.w	r2, r7, #16
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f001 facc 	bl	8002ca0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800170c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800170e:	2b00      	cmp	r3, #0
 8001710:	d103      	bne.n	800171a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001712:	f001 fab1 	bl	8002c78 <HAL_RCC_GetPCLK1Freq>
 8001716:	6378      	str	r0, [r7, #52]	@ 0x34
 8001718:	e004      	b.n	8001724 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800171a:	f001 faad 	bl	8002c78 <HAL_RCC_GetPCLK1Freq>
 800171e:	4603      	mov	r3, r0
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001726:	4a23      	ldr	r2, [pc, #140]	@ (80017b4 <HAL_InitTick+0xe8>)
 8001728:	fba2 2303 	umull	r2, r3, r2, r3
 800172c:	0c9b      	lsrs	r3, r3, #18
 800172e:	3b01      	subs	r3, #1
 8001730:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001732:	4b21      	ldr	r3, [pc, #132]	@ (80017b8 <HAL_InitTick+0xec>)
 8001734:	4a21      	ldr	r2, [pc, #132]	@ (80017bc <HAL_InitTick+0xf0>)
 8001736:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001738:	4b1f      	ldr	r3, [pc, #124]	@ (80017b8 <HAL_InitTick+0xec>)
 800173a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800173e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001740:	4a1d      	ldr	r2, [pc, #116]	@ (80017b8 <HAL_InitTick+0xec>)
 8001742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001744:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001746:	4b1c      	ldr	r3, [pc, #112]	@ (80017b8 <HAL_InitTick+0xec>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174c:	4b1a      	ldr	r3, [pc, #104]	@ (80017b8 <HAL_InitTick+0xec>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001752:	4b19      	ldr	r3, [pc, #100]	@ (80017b8 <HAL_InitTick+0xec>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001758:	4817      	ldr	r0, [pc, #92]	@ (80017b8 <HAL_InitTick+0xec>)
 800175a:	f001 ffa1 	bl	80036a0 <HAL_TIM_Base_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001764:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001768:	2b00      	cmp	r3, #0
 800176a:	d11b      	bne.n	80017a4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800176c:	4812      	ldr	r0, [pc, #72]	@ (80017b8 <HAL_InitTick+0xec>)
 800176e:	f001 fff1 	bl	8003754 <HAL_TIM_Base_Start_IT>
 8001772:	4603      	mov	r3, r0
 8001774:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001778:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800177c:	2b00      	cmp	r3, #0
 800177e:	d111      	bne.n	80017a4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001780:	2036      	movs	r0, #54	@ 0x36
 8001782:	f000 f9cd 	bl	8001b20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b0f      	cmp	r3, #15
 800178a:	d808      	bhi.n	800179e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800178c:	2200      	movs	r2, #0
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	2036      	movs	r0, #54	@ 0x36
 8001792:	f000 f9a9 	bl	8001ae8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001796:	4a0a      	ldr	r2, [pc, #40]	@ (80017c0 <HAL_InitTick+0xf4>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	e002      	b.n	80017a4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3738      	adds	r7, #56	@ 0x38
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40023800 	.word	0x40023800
 80017b4:	431bde83 	.word	0x431bde83
 80017b8:	20000528 	.word	0x20000528
 80017bc:	40001000 	.word	0x40001000
 80017c0:	20000020 	.word	0x20000020

080017c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <NMI_Handler+0x4>

080017cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <HardFault_Handler+0x4>

080017d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <MemManage_Handler+0x4>

080017dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <BusFault_Handler+0x4>

080017e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <UsageFault_Handler+0x4>

080017ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <TIM6_DAC_IRQHandler+0x10>)
 8001802:	f002 f817 	bl	8003834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000528 	.word	0x20000528

08001810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001818:	4a14      	ldr	r2, [pc, #80]	@ (800186c <_sbrk+0x5c>)
 800181a:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <_sbrk+0x60>)
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001824:	4b13      	ldr	r3, [pc, #76]	@ (8001874 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800182c:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <_sbrk+0x64>)
 800182e:	4a12      	ldr	r2, [pc, #72]	@ (8001878 <_sbrk+0x68>)
 8001830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001832:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	429a      	cmp	r2, r3
 800183e:	d207      	bcs.n	8001850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001840:	f005 fad8 	bl	8006df4 <__errno>
 8001844:	4603      	mov	r3, r0
 8001846:	220c      	movs	r2, #12
 8001848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	e009      	b.n	8001864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001850:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001856:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	4a05      	ldr	r2, [pc, #20]	@ (8001874 <_sbrk+0x64>)
 8001860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20020000 	.word	0x20020000
 8001870:	00000400 	.word	0x00000400
 8001874:	20000570 	.word	0x20000570
 8001878:	200050a8 	.word	0x200050a8

0800187c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001880:	4b06      	ldr	r3, [pc, #24]	@ (800189c <SystemInit+0x20>)
 8001882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001886:	4a05      	ldr	r2, [pc, #20]	@ (800189c <SystemInit+0x20>)
 8001888:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800188c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018a4:	f7ff ffea 	bl	800187c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018a8:	480c      	ldr	r0, [pc, #48]	@ (80018dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018aa:	490d      	ldr	r1, [pc, #52]	@ (80018e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018ac:	4a0d      	ldr	r2, [pc, #52]	@ (80018e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b0:	e002      	b.n	80018b8 <LoopCopyDataInit>

080018b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b6:	3304      	adds	r3, #4

080018b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018bc:	d3f9      	bcc.n	80018b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018be:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018c0:	4c0a      	ldr	r4, [pc, #40]	@ (80018ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c4:	e001      	b.n	80018ca <LoopFillZerobss>

080018c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c8:	3204      	adds	r2, #4

080018ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018cc:	d3fb      	bcc.n	80018c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018ce:	f005 fa97 	bl	8006e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d2:	f7ff f831 	bl	8000938 <main>
  bx  lr    
 80018d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80018e4:	080085dc 	.word	0x080085dc
  ldr r2, =_sbss
 80018e8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80018ec:	200050a8 	.word	0x200050a8

080018f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC_IRQHandler>
	...

080018f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <HAL_Init+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001934 <HAL_Init+0x40>)
 80018fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001902:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <HAL_Init+0x40>)
 800190a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800190e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001910:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a07      	ldr	r2, [pc, #28]	@ (8001934 <HAL_Init+0x40>)
 8001916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800191a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191c:	2003      	movs	r0, #3
 800191e:	f000 f8d8 	bl	8001ad2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001922:	200f      	movs	r0, #15
 8001924:	f7ff fed2 	bl	80016cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001928:	f7ff fe5c 	bl	80015e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023c00 	.word	0x40023c00

08001938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <HAL_IncTick+0x20>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <HAL_IncTick+0x24>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a04      	ldr	r2, [pc, #16]	@ (800195c <HAL_IncTick+0x24>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000024 	.word	0x20000024
 800195c:	20000574 	.word	0x20000574

08001960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b03      	ldr	r3, [pc, #12]	@ (8001974 <HAL_GetTick+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000574 	.word	0x20000574

08001978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001988:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019aa:	4a04      	ldr	r2, [pc, #16]	@ (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	60d3      	str	r3, [r2, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c4:	4b04      	ldr	r3, [pc, #16]	@ (80019d8 <__NVIC_GetPriorityGrouping+0x18>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f003 0307 	and.w	r3, r3, #7
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db0b      	blt.n	8001a06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	f003 021f 	and.w	r2, r3, #31
 80019f4:	4907      	ldr	r1, [pc, #28]	@ (8001a14 <__NVIC_EnableIRQ+0x38>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	2001      	movs	r0, #1
 80019fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000e100 	.word	0xe000e100

08001a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	db0a      	blt.n	8001a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	490c      	ldr	r1, [pc, #48]	@ (8001a64 <__NVIC_SetPriority+0x4c>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	0112      	lsls	r2, r2, #4
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a40:	e00a      	b.n	8001a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4908      	ldr	r1, [pc, #32]	@ (8001a68 <__NVIC_SetPriority+0x50>)
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	3b04      	subs	r3, #4
 8001a50:	0112      	lsls	r2, r2, #4
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	440b      	add	r3, r1
 8001a56:	761a      	strb	r2, [r3, #24]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000e100 	.word	0xe000e100
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	@ 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f1c3 0307 	rsb	r3, r3, #7
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	bf28      	it	cs
 8001a8a:	2304      	movcs	r3, #4
 8001a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3304      	adds	r3, #4
 8001a92:	2b06      	cmp	r3, #6
 8001a94:	d902      	bls.n	8001a9c <NVIC_EncodePriority+0x30>
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3b03      	subs	r3, #3
 8001a9a:	e000      	b.n	8001a9e <NVIC_EncodePriority+0x32>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	401a      	ands	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	43d9      	mvns	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	4313      	orrs	r3, r2
         );
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3724      	adds	r7, #36	@ 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ff4c 	bl	8001978 <__NVIC_SetPriorityGrouping>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001afa:	f7ff ff61 	bl	80019c0 <__NVIC_GetPriorityGrouping>
 8001afe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	68b9      	ldr	r1, [r7, #8]
 8001b04:	6978      	ldr	r0, [r7, #20]
 8001b06:	f7ff ffb1 	bl	8001a6c <NVIC_EncodePriority>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff80 	bl	8001a18 <__NVIC_SetPriority>
}
 8001b18:	bf00      	nop
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff54 	bl	80019dc <__NVIC_EnableIRQ>
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	@ 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	e165      	b.n	8001e24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b58:	2201      	movs	r2, #1
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	f040 8154 	bne.w	8001e1e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d005      	beq.n	8001b8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d130      	bne.n	8001bf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 0201 	and.w	r2, r3, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d017      	beq.n	8001c2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d123      	bne.n	8001c80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	08da      	lsrs	r2, r3, #3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3208      	adds	r2, #8
 8001c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	220f      	movs	r2, #15
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	08da      	lsrs	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3208      	adds	r2, #8
 8001c7a:	69b9      	ldr	r1, [r7, #24]
 8001c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0203 	and.w	r2, r3, #3
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80ae 	beq.w	8001e1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b5d      	ldr	r3, [pc, #372]	@ (8001e3c <HAL_GPIO_Init+0x300>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cca:	4a5c      	ldr	r2, [pc, #368]	@ (8001e3c <HAL_GPIO_Init+0x300>)
 8001ccc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cd2:	4b5a      	ldr	r3, [pc, #360]	@ (8001e3c <HAL_GPIO_Init+0x300>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cde:	4a58      	ldr	r2, [pc, #352]	@ (8001e40 <HAL_GPIO_Init+0x304>)
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4f      	ldr	r2, [pc, #316]	@ (8001e44 <HAL_GPIO_Init+0x308>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d025      	beq.n	8001d56 <HAL_GPIO_Init+0x21a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4e      	ldr	r2, [pc, #312]	@ (8001e48 <HAL_GPIO_Init+0x30c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d01f      	beq.n	8001d52 <HAL_GPIO_Init+0x216>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4d      	ldr	r2, [pc, #308]	@ (8001e4c <HAL_GPIO_Init+0x310>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d019      	beq.n	8001d4e <HAL_GPIO_Init+0x212>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4c      	ldr	r2, [pc, #304]	@ (8001e50 <HAL_GPIO_Init+0x314>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_GPIO_Init+0x20e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4b      	ldr	r2, [pc, #300]	@ (8001e54 <HAL_GPIO_Init+0x318>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00d      	beq.n	8001d46 <HAL_GPIO_Init+0x20a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4a      	ldr	r2, [pc, #296]	@ (8001e58 <HAL_GPIO_Init+0x31c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d007      	beq.n	8001d42 <HAL_GPIO_Init+0x206>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a49      	ldr	r2, [pc, #292]	@ (8001e5c <HAL_GPIO_Init+0x320>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d101      	bne.n	8001d3e <HAL_GPIO_Init+0x202>
 8001d3a:	2306      	movs	r3, #6
 8001d3c:	e00c      	b.n	8001d58 <HAL_GPIO_Init+0x21c>
 8001d3e:	2307      	movs	r3, #7
 8001d40:	e00a      	b.n	8001d58 <HAL_GPIO_Init+0x21c>
 8001d42:	2305      	movs	r3, #5
 8001d44:	e008      	b.n	8001d58 <HAL_GPIO_Init+0x21c>
 8001d46:	2304      	movs	r3, #4
 8001d48:	e006      	b.n	8001d58 <HAL_GPIO_Init+0x21c>
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e004      	b.n	8001d58 <HAL_GPIO_Init+0x21c>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e002      	b.n	8001d58 <HAL_GPIO_Init+0x21c>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_GPIO_Init+0x21c>
 8001d56:	2300      	movs	r3, #0
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	f002 0203 	and.w	r2, r2, #3
 8001d5e:	0092      	lsls	r2, r2, #2
 8001d60:	4093      	lsls	r3, r2
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d68:	4935      	ldr	r1, [pc, #212]	@ (8001e40 <HAL_GPIO_Init+0x304>)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	3302      	adds	r3, #2
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d76:	4b3a      	ldr	r3, [pc, #232]	@ (8001e60 <HAL_GPIO_Init+0x324>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d9a:	4a31      	ldr	r2, [pc, #196]	@ (8001e60 <HAL_GPIO_Init+0x324>)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da0:	4b2f      	ldr	r3, [pc, #188]	@ (8001e60 <HAL_GPIO_Init+0x324>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc4:	4a26      	ldr	r2, [pc, #152]	@ (8001e60 <HAL_GPIO_Init+0x324>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dca:	4b25      	ldr	r3, [pc, #148]	@ (8001e60 <HAL_GPIO_Init+0x324>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dee:	4a1c      	ldr	r2, [pc, #112]	@ (8001e60 <HAL_GPIO_Init+0x324>)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e60 <HAL_GPIO_Init+0x324>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e18:	4a11      	ldr	r2, [pc, #68]	@ (8001e60 <HAL_GPIO_Init+0x324>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3301      	adds	r3, #1
 8001e22:	61fb      	str	r3, [r7, #28]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	2b0f      	cmp	r3, #15
 8001e28:	f67f ae96 	bls.w	8001b58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	3724      	adds	r7, #36	@ 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40013800 	.word	0x40013800
 8001e44:	40020000 	.word	0x40020000
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40020800 	.word	0x40020800
 8001e50:	40020c00 	.word	0x40020c00
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40021400 	.word	0x40021400
 8001e5c:	40021800 	.word	0x40021800
 8001e60:	40013c00 	.word	0x40013c00

08001e64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	887b      	ldrh	r3, [r7, #2]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	e001      	b.n	8001e86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea4:	787b      	ldrb	r3, [r7, #1]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eaa:	887a      	ldrh	r2, [r7, #2]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb0:	e003      	b.n	8001eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eb2:	887b      	ldrh	r3, [r7, #2]
 8001eb4:	041a      	lsls	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	619a      	str	r2, [r3, #24]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b085      	sub	sp, #20
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ed8:	887a      	ldrh	r2, [r7, #2]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4013      	ands	r3, r2
 8001ede:	041a      	lsls	r2, r3, #16
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	887b      	ldrh	r3, [r7, #2]
 8001ee6:	400b      	ands	r3, r1
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	619a      	str	r2, [r3, #24]
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e12b      	b.n	8002166 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d106      	bne.n	8001f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff fb8a 	bl	800163c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2224      	movs	r2, #36	@ 0x24
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f60:	f000 fe8a 	bl	8002c78 <HAL_RCC_GetPCLK1Freq>
 8001f64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4a81      	ldr	r2, [pc, #516]	@ (8002170 <HAL_I2C_Init+0x274>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d807      	bhi.n	8001f80 <HAL_I2C_Init+0x84>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4a80      	ldr	r2, [pc, #512]	@ (8002174 <HAL_I2C_Init+0x278>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	bf94      	ite	ls
 8001f78:	2301      	movls	r3, #1
 8001f7a:	2300      	movhi	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	e006      	b.n	8001f8e <HAL_I2C_Init+0x92>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4a7d      	ldr	r2, [pc, #500]	@ (8002178 <HAL_I2C_Init+0x27c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	bf94      	ite	ls
 8001f88:	2301      	movls	r3, #1
 8001f8a:	2300      	movhi	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e0e7      	b.n	8002166 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4a78      	ldr	r2, [pc, #480]	@ (800217c <HAL_I2C_Init+0x280>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	0c9b      	lsrs	r3, r3, #18
 8001fa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4a6a      	ldr	r2, [pc, #424]	@ (8002170 <HAL_I2C_Init+0x274>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d802      	bhi.n	8001fd0 <HAL_I2C_Init+0xd4>
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	e009      	b.n	8001fe4 <HAL_I2C_Init+0xe8>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	4a69      	ldr	r2, [pc, #420]	@ (8002180 <HAL_I2C_Init+0x284>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	099b      	lsrs	r3, r3, #6
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ff6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	495c      	ldr	r1, [pc, #368]	@ (8002170 <HAL_I2C_Init+0x274>)
 8002000:	428b      	cmp	r3, r1
 8002002:	d819      	bhi.n	8002038 <HAL_I2C_Init+0x13c>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1e59      	subs	r1, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002012:	1c59      	adds	r1, r3, #1
 8002014:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002018:	400b      	ands	r3, r1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00a      	beq.n	8002034 <HAL_I2C_Init+0x138>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1e59      	subs	r1, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fbb1 f3f3 	udiv	r3, r1, r3
 800202c:	3301      	adds	r3, #1
 800202e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002032:	e051      	b.n	80020d8 <HAL_I2C_Init+0x1dc>
 8002034:	2304      	movs	r3, #4
 8002036:	e04f      	b.n	80020d8 <HAL_I2C_Init+0x1dc>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d111      	bne.n	8002064 <HAL_I2C_Init+0x168>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1e58      	subs	r0, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6859      	ldr	r1, [r3, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	440b      	add	r3, r1
 800204e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002052:	3301      	adds	r3, #1
 8002054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002058:	2b00      	cmp	r3, #0
 800205a:	bf0c      	ite	eq
 800205c:	2301      	moveq	r3, #1
 800205e:	2300      	movne	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	e012      	b.n	800208a <HAL_I2C_Init+0x18e>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1e58      	subs	r0, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6859      	ldr	r1, [r3, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	0099      	lsls	r1, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	fbb0 f3f3 	udiv	r3, r0, r3
 800207a:	3301      	adds	r3, #1
 800207c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf0c      	ite	eq
 8002084:	2301      	moveq	r3, #1
 8002086:	2300      	movne	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_Init+0x196>
 800208e:	2301      	movs	r3, #1
 8002090:	e022      	b.n	80020d8 <HAL_I2C_Init+0x1dc>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10e      	bne.n	80020b8 <HAL_I2C_Init+0x1bc>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1e58      	subs	r0, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6859      	ldr	r1, [r3, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	440b      	add	r3, r1
 80020a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ac:	3301      	adds	r3, #1
 80020ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020b6:	e00f      	b.n	80020d8 <HAL_I2C_Init+0x1dc>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1e58      	subs	r0, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	0099      	lsls	r1, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ce:	3301      	adds	r3, #1
 80020d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	6809      	ldr	r1, [r1, #0]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69da      	ldr	r2, [r3, #28]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002106:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6911      	ldr	r1, [r2, #16]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68d2      	ldr	r2, [r2, #12]
 8002112:	4311      	orrs	r1, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	430b      	orrs	r3, r1
 800211a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	000186a0 	.word	0x000186a0
 8002174:	001e847f 	.word	0x001e847f
 8002178:	003d08ff 	.word	0x003d08ff
 800217c:	431bde83 	.word	0x431bde83
 8002180:	10624dd3 	.word	0x10624dd3

08002184 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af02      	add	r7, sp, #8
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	461a      	mov	r2, r3
 8002190:	460b      	mov	r3, r1
 8002192:	817b      	strh	r3, [r7, #10]
 8002194:	4613      	mov	r3, r2
 8002196:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002198:	f7ff fbe2 	bl	8001960 <HAL_GetTick>
 800219c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	f040 80e0 	bne.w	800236c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2319      	movs	r3, #25
 80021b2:	2201      	movs	r2, #1
 80021b4:	4970      	ldr	r1, [pc, #448]	@ (8002378 <HAL_I2C_Master_Transmit+0x1f4>)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fa92 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021c2:	2302      	movs	r3, #2
 80021c4:	e0d3      	b.n	800236e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_I2C_Master_Transmit+0x50>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e0cc      	b.n	800236e <HAL_I2C_Master_Transmit+0x1ea>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d007      	beq.n	80021fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0201 	orr.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002208:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2221      	movs	r2, #33	@ 0x21
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2210      	movs	r2, #16
 8002216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	893a      	ldrh	r2, [r7, #8]
 800222a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4a50      	ldr	r2, [pc, #320]	@ (800237c <HAL_I2C_Master_Transmit+0x1f8>)
 800223a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800223c:	8979      	ldrh	r1, [r7, #10]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	6a3a      	ldr	r2, [r7, #32]
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 f9ca 	bl	80025dc <I2C_MasterRequestWrite>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e08d      	b.n	800236e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002268:	e066      	b.n	8002338 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	6a39      	ldr	r1, [r7, #32]
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 fb50 	bl	8002914 <I2C_WaitOnTXEFlagUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00d      	beq.n	8002296 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	2b04      	cmp	r3, #4
 8002280:	d107      	bne.n	8002292 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002290:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e06b      	b.n	800236e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	781a      	ldrb	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d11b      	bne.n	800230c <HAL_I2C_Master_Transmit+0x188>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d017      	beq.n	800230c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e0:	781a      	ldrb	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	6a39      	ldr	r1, [r7, #32]
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 fb47 	bl	80029a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00d      	beq.n	8002338 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002320:	2b04      	cmp	r3, #4
 8002322:	d107      	bne.n	8002334 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002332:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e01a      	b.n	800236e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800233c:	2b00      	cmp	r3, #0
 800233e:	d194      	bne.n	800226a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800234e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	e000      	b.n	800236e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800236c:	2302      	movs	r3, #2
  }
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	00100002 	.word	0x00100002
 800237c:	ffff0000 	.word	0xffff0000

08002380 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	@ 0x28
 8002384:	af02      	add	r7, sp, #8
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	460b      	mov	r3, r1
 800238e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002390:	f7ff fae6 	bl	8001960 <HAL_GetTick>
 8002394:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b20      	cmp	r3, #32
 80023a4:	f040 8111 	bne.w	80025ca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	2319      	movs	r3, #25
 80023ae:	2201      	movs	r2, #1
 80023b0:	4988      	ldr	r1, [pc, #544]	@ (80025d4 <HAL_I2C_IsDeviceReady+0x254>)
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f994 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80023be:	2302      	movs	r3, #2
 80023c0:	e104      	b.n	80025cc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_I2C_IsDeviceReady+0x50>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e0fd      	b.n	80025cc <HAL_I2C_IsDeviceReady+0x24c>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d007      	beq.n	80023f6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0201 	orr.w	r2, r2, #1
 80023f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002404:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2224      	movs	r2, #36	@ 0x24
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4a70      	ldr	r2, [pc, #448]	@ (80025d8 <HAL_I2C_IsDeviceReady+0x258>)
 8002418:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002428:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2200      	movs	r2, #0
 8002432:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 f952 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00d      	beq.n	800245e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002450:	d103      	bne.n	800245a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002458:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e0b6      	b.n	80025cc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800245e:	897b      	ldrh	r3, [r7, #10]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800246c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800246e:	f7ff fa77 	bl	8001960 <HAL_GetTick>
 8002472:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b02      	cmp	r3, #2
 8002480:	bf0c      	ite	eq
 8002482:	2301      	moveq	r3, #1
 8002484:	2300      	movne	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002498:	bf0c      	ite	eq
 800249a:	2301      	moveq	r3, #1
 800249c:	2300      	movne	r3, #0
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024a2:	e025      	b.n	80024f0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024a4:	f7ff fa5c 	bl	8001960 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d302      	bcc.n	80024ba <HAL_I2C_IsDeviceReady+0x13a>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d103      	bne.n	80024c2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	22a0      	movs	r2, #160	@ 0xa0
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	bf0c      	ite	eq
 80024d0:	2301      	moveq	r3, #1
 80024d2:	2300      	movne	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024e6:	bf0c      	ite	eq
 80024e8:	2301      	moveq	r3, #1
 80024ea:	2300      	movne	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2ba0      	cmp	r3, #160	@ 0xa0
 80024fa:	d005      	beq.n	8002508 <HAL_I2C_IsDeviceReady+0x188>
 80024fc:	7dfb      	ldrb	r3, [r7, #23]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d102      	bne.n	8002508 <HAL_I2C_IsDeviceReady+0x188>
 8002502:	7dbb      	ldrb	r3, [r7, #22]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0cd      	beq.n	80024a4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b02      	cmp	r3, #2
 800251c:	d129      	bne.n	8002572 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800252c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	2319      	movs	r3, #25
 800254a:	2201      	movs	r2, #1
 800254c:	4921      	ldr	r1, [pc, #132]	@ (80025d4 <HAL_I2C_IsDeviceReady+0x254>)
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f8c6 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e036      	b.n	80025cc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	e02c      	b.n	80025cc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002580:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800258a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	2319      	movs	r3, #25
 8002592:	2201      	movs	r2, #1
 8002594:	490f      	ldr	r1, [pc, #60]	@ (80025d4 <HAL_I2C_IsDeviceReady+0x254>)
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f8a2 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e012      	b.n	80025cc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	3301      	adds	r3, #1
 80025aa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	f4ff af32 	bcc.w	800241a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80025ca:	2302      	movs	r3, #2
  }
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3720      	adds	r7, #32
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	00100002 	.word	0x00100002
 80025d8:	ffff0000 	.word	0xffff0000

080025dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	460b      	mov	r3, r1
 80025ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d006      	beq.n	8002606 <I2C_MasterRequestWrite+0x2a>
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d003      	beq.n	8002606 <I2C_MasterRequestWrite+0x2a>
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002604:	d108      	bne.n	8002618 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e00b      	b.n	8002630 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261c:	2b12      	cmp	r3, #18
 800261e:	d107      	bne.n	8002630 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800262e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f84f 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00d      	beq.n	8002664 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002656:	d103      	bne.n	8002660 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800265e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e035      	b.n	80026d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800266c:	d108      	bne.n	8002680 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800266e:	897b      	ldrh	r3, [r7, #10]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800267c:	611a      	str	r2, [r3, #16]
 800267e:	e01b      	b.n	80026b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002680:	897b      	ldrh	r3, [r7, #10]
 8002682:	11db      	asrs	r3, r3, #7
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f003 0306 	and.w	r3, r3, #6
 800268a:	b2db      	uxtb	r3, r3
 800268c:	f063 030f 	orn	r3, r3, #15
 8002690:	b2da      	uxtb	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	490e      	ldr	r1, [pc, #56]	@ (80026d8 <I2C_MasterRequestWrite+0xfc>)
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f898 	bl	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e010      	b.n	80026d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026ae:	897b      	ldrh	r3, [r7, #10]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4907      	ldr	r1, [pc, #28]	@ (80026dc <I2C_MasterRequestWrite+0x100>)
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f888 	bl	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	00010008 	.word	0x00010008
 80026dc:	00010002 	.word	0x00010002

080026e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026f0:	e048      	b.n	8002784 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d044      	beq.n	8002784 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fa:	f7ff f931 	bl	8001960 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d302      	bcc.n	8002710 <I2C_WaitOnFlagUntilTimeout+0x30>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d139      	bne.n	8002784 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	0c1b      	lsrs	r3, r3, #16
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b01      	cmp	r3, #1
 8002718:	d10d      	bne.n	8002736 <I2C_WaitOnFlagUntilTimeout+0x56>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	43da      	mvns	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	4013      	ands	r3, r2
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	e00c      	b.n	8002750 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	43da      	mvns	r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	4013      	ands	r3, r2
 8002742:	b29b      	uxth	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	bf0c      	ite	eq
 8002748:	2301      	moveq	r3, #1
 800274a:	2300      	movne	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	461a      	mov	r2, r3
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	429a      	cmp	r2, r3
 8002754:	d116      	bne.n	8002784 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002770:	f043 0220 	orr.w	r2, r3, #32
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e023      	b.n	80027cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	0c1b      	lsrs	r3, r3, #16
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b01      	cmp	r3, #1
 800278c:	d10d      	bne.n	80027aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	43da      	mvns	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	4013      	ands	r3, r2
 800279a:	b29b      	uxth	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf0c      	ite	eq
 80027a0:	2301      	moveq	r3, #1
 80027a2:	2300      	movne	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	e00c      	b.n	80027c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	43da      	mvns	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	4013      	ands	r3, r2
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	bf0c      	ite	eq
 80027bc:	2301      	moveq	r3, #1
 80027be:	2300      	movne	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d093      	beq.n	80026f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027e2:	e071      	b.n	80028c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027f2:	d123      	bne.n	800283c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002802:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800280c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002828:	f043 0204 	orr.w	r2, r3, #4
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e067      	b.n	800290c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002842:	d041      	beq.n	80028c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002844:	f7ff f88c 	bl	8001960 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	429a      	cmp	r2, r3
 8002852:	d302      	bcc.n	800285a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d136      	bne.n	80028c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	0c1b      	lsrs	r3, r3, #16
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d10c      	bne.n	800287e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	43da      	mvns	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4013      	ands	r3, r2
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	bf14      	ite	ne
 8002876:	2301      	movne	r3, #1
 8002878:	2300      	moveq	r3, #0
 800287a:	b2db      	uxtb	r3, r3
 800287c:	e00b      	b.n	8002896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	43da      	mvns	r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	4013      	ands	r3, r2
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf14      	ite	ne
 8002890:	2301      	movne	r3, #1
 8002892:	2300      	moveq	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d016      	beq.n	80028c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2220      	movs	r2, #32
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	f043 0220 	orr.w	r2, r3, #32
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e021      	b.n	800290c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	0c1b      	lsrs	r3, r3, #16
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d10c      	bne.n	80028ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	43da      	mvns	r2, r3
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	4013      	ands	r3, r2
 80028de:	b29b      	uxth	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bf14      	ite	ne
 80028e4:	2301      	movne	r3, #1
 80028e6:	2300      	moveq	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	e00b      	b.n	8002904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	43da      	mvns	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4013      	ands	r3, r2
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	bf14      	ite	ne
 80028fe:	2301      	movne	r3, #1
 8002900:	2300      	moveq	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	f47f af6d 	bne.w	80027e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002920:	e034      	b.n	800298c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f886 	bl	8002a34 <I2C_IsAcknowledgeFailed>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e034      	b.n	800299c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002938:	d028      	beq.n	800298c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800293a:	f7ff f811 	bl	8001960 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	429a      	cmp	r2, r3
 8002948:	d302      	bcc.n	8002950 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d11d      	bne.n	800298c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800295a:	2b80      	cmp	r3, #128	@ 0x80
 800295c:	d016      	beq.n	800298c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	f043 0220 	orr.w	r2, r3, #32
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e007      	b.n	800299c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002996:	2b80      	cmp	r3, #128	@ 0x80
 8002998:	d1c3      	bne.n	8002922 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029b0:	e034      	b.n	8002a1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f83e 	bl	8002a34 <I2C_IsAcknowledgeFailed>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e034      	b.n	8002a2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d028      	beq.n	8002a1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ca:	f7fe ffc9 	bl	8001960 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d302      	bcc.n	80029e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d11d      	bne.n	8002a1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d016      	beq.n	8002a1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a08:	f043 0220 	orr.w	r2, r3, #32
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e007      	b.n	8002a2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d1c3      	bne.n	80029b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a4a:	d11b      	bne.n	8002a84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a70:	f043 0204 	orr.w	r2, r3, #4
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0cc      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b68      	ldr	r3, [pc, #416]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d90c      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b65      	ldr	r3, [pc, #404]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b63      	ldr	r3, [pc, #396]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0b8      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae8:	4b59      	ldr	r3, [pc, #356]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a58      	ldr	r2, [pc, #352]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002af2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b00:	4b53      	ldr	r3, [pc, #332]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	4a52      	ldr	r2, [pc, #328]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b0c:	4b50      	ldr	r3, [pc, #320]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	494d      	ldr	r1, [pc, #308]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d044      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d107      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	4b47      	ldr	r3, [pc, #284]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d119      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e07f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d003      	beq.n	8002b52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b52:	4b3f      	ldr	r3, [pc, #252]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e06f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b62:	4b3b      	ldr	r3, [pc, #236]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e067      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b72:	4b37      	ldr	r3, [pc, #220]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f023 0203 	bic.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4934      	ldr	r1, [pc, #208]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b84:	f7fe feec 	bl	8001960 <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7fe fee8 	bl	8001960 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e04f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 020c 	and.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1eb      	bne.n	8002b8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b25      	ldr	r3, [pc, #148]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d20c      	bcs.n	8002bdc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b22      	ldr	r3, [pc, #136]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b20      	ldr	r3, [pc, #128]	@ (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e032      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be8:	4b19      	ldr	r3, [pc, #100]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	4916      	ldr	r1, [pc, #88]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d009      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c06:	4b12      	ldr	r3, [pc, #72]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	490e      	ldr	r1, [pc, #56]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c1a:	f000 f873 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	490a      	ldr	r1, [pc, #40]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2c:	5ccb      	ldrb	r3, [r1, r3]
 8002c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c32:	4a09      	ldr	r2, [pc, #36]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c36:	4b09      	ldr	r3, [pc, #36]	@ (8002c5c <HAL_RCC_ClockConfig+0x1c8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe fd46 	bl	80016cc <HAL_InitTick>

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023c00 	.word	0x40023c00
 8002c50:	40023800 	.word	0x40023800
 8002c54:	08008580 	.word	0x08008580
 8002c58:	2000001c 	.word	0x2000001c
 8002c5c:	20000020 	.word	0x20000020

08002c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c64:	4b03      	ldr	r3, [pc, #12]	@ (8002c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c66:	681b      	ldr	r3, [r3, #0]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	2000001c 	.word	0x2000001c

08002c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c7c:	f7ff fff0 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8002c80:	4602      	mov	r2, r0
 8002c82:	4b05      	ldr	r3, [pc, #20]	@ (8002c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	0a9b      	lsrs	r3, r3, #10
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	4903      	ldr	r1, [pc, #12]	@ (8002c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c8e:	5ccb      	ldrb	r3, [r1, r3]
 8002c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	08008590 	.word	0x08008590

08002ca0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	220f      	movs	r2, #15
 8002cae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cb0:	4b12      	ldr	r3, [pc, #72]	@ (8002cfc <HAL_RCC_GetClockConfig+0x5c>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0203 	and.w	r2, r3, #3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002cfc <HAL_RCC_GetClockConfig+0x5c>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cfc <HAL_RCC_GetClockConfig+0x5c>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002cd4:	4b09      	ldr	r3, [pc, #36]	@ (8002cfc <HAL_RCC_GetClockConfig+0x5c>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	08db      	lsrs	r3, r3, #3
 8002cda:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ce2:	4b07      	ldr	r3, [pc, #28]	@ (8002d00 <HAL_RCC_GetClockConfig+0x60>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 020f 	and.w	r2, r3, #15
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	601a      	str	r2, [r3, #0]
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40023c00 	.word	0x40023c00

08002d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d08:	b0ae      	sub	sp, #184	@ 0xb8
 8002d0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d2a:	4bcb      	ldr	r3, [pc, #812]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b0c      	cmp	r3, #12
 8002d34:	f200 8206 	bhi.w	8003144 <HAL_RCC_GetSysClockFreq+0x440>
 8002d38:	a201      	add	r2, pc, #4	@ (adr r2, 8002d40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3e:	bf00      	nop
 8002d40:	08002d75 	.word	0x08002d75
 8002d44:	08003145 	.word	0x08003145
 8002d48:	08003145 	.word	0x08003145
 8002d4c:	08003145 	.word	0x08003145
 8002d50:	08002d7d 	.word	0x08002d7d
 8002d54:	08003145 	.word	0x08003145
 8002d58:	08003145 	.word	0x08003145
 8002d5c:	08003145 	.word	0x08003145
 8002d60:	08002d85 	.word	0x08002d85
 8002d64:	08003145 	.word	0x08003145
 8002d68:	08003145 	.word	0x08003145
 8002d6c:	08003145 	.word	0x08003145
 8002d70:	08002f75 	.word	0x08002f75
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d74:	4bb9      	ldr	r3, [pc, #740]	@ (800305c <HAL_RCC_GetSysClockFreq+0x358>)
 8002d76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d7a:	e1e7      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d7c:	4bb8      	ldr	r3, [pc, #736]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d82:	e1e3      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d84:	4bb4      	ldr	r3, [pc, #720]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d90:	4bb1      	ldr	r3, [pc, #708]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d071      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9c:	4bae      	ldr	r3, [pc, #696]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	099b      	lsrs	r3, r3, #6
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002da8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002db8:	2300      	movs	r3, #0
 8002dba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002dbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002dc2:	4622      	mov	r2, r4
 8002dc4:	462b      	mov	r3, r5
 8002dc6:	f04f 0000 	mov.w	r0, #0
 8002dca:	f04f 0100 	mov.w	r1, #0
 8002dce:	0159      	lsls	r1, r3, #5
 8002dd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dd4:	0150      	lsls	r0, r2, #5
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4621      	mov	r1, r4
 8002ddc:	1a51      	subs	r1, r2, r1
 8002dde:	6439      	str	r1, [r7, #64]	@ 0x40
 8002de0:	4629      	mov	r1, r5
 8002de2:	eb63 0301 	sbc.w	r3, r3, r1
 8002de6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002df4:	4649      	mov	r1, r9
 8002df6:	018b      	lsls	r3, r1, #6
 8002df8:	4641      	mov	r1, r8
 8002dfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dfe:	4641      	mov	r1, r8
 8002e00:	018a      	lsls	r2, r1, #6
 8002e02:	4641      	mov	r1, r8
 8002e04:	1a51      	subs	r1, r2, r1
 8002e06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e08:	4649      	mov	r1, r9
 8002e0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002e1c:	4649      	mov	r1, r9
 8002e1e:	00cb      	lsls	r3, r1, #3
 8002e20:	4641      	mov	r1, r8
 8002e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e26:	4641      	mov	r1, r8
 8002e28:	00ca      	lsls	r2, r1, #3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4622      	mov	r2, r4
 8002e32:	189b      	adds	r3, r3, r2
 8002e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e36:	462b      	mov	r3, r5
 8002e38:	460a      	mov	r2, r1
 8002e3a:	eb42 0303 	adc.w	r3, r2, r3
 8002e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e4c:	4629      	mov	r1, r5
 8002e4e:	024b      	lsls	r3, r1, #9
 8002e50:	4621      	mov	r1, r4
 8002e52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e56:	4621      	mov	r1, r4
 8002e58:	024a      	lsls	r2, r1, #9
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e62:	2200      	movs	r2, #0
 8002e64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002e70:	f7fd fa36 	bl	80002e0 <__aeabi_uldivmod>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4613      	mov	r3, r2
 8002e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e7e:	e067      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e80:	4b75      	ldr	r3, [pc, #468]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	099b      	lsrs	r3, r3, #6
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e8c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002e90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e9e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	462b      	mov	r3, r5
 8002ea6:	f04f 0000 	mov.w	r0, #0
 8002eaa:	f04f 0100 	mov.w	r1, #0
 8002eae:	0159      	lsls	r1, r3, #5
 8002eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb4:	0150      	lsls	r0, r2, #5
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4621      	mov	r1, r4
 8002ebc:	1a51      	subs	r1, r2, r1
 8002ebe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002ed4:	4649      	mov	r1, r9
 8002ed6:	018b      	lsls	r3, r1, #6
 8002ed8:	4641      	mov	r1, r8
 8002eda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ede:	4641      	mov	r1, r8
 8002ee0:	018a      	lsls	r2, r1, #6
 8002ee2:	4641      	mov	r1, r8
 8002ee4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ee8:	4649      	mov	r1, r9
 8002eea:	eb63 0b01 	sbc.w	fp, r3, r1
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002efa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002efe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f02:	4692      	mov	sl, r2
 8002f04:	469b      	mov	fp, r3
 8002f06:	4623      	mov	r3, r4
 8002f08:	eb1a 0303 	adds.w	r3, sl, r3
 8002f0c:	623b      	str	r3, [r7, #32]
 8002f0e:	462b      	mov	r3, r5
 8002f10:	eb4b 0303 	adc.w	r3, fp, r3
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f22:	4629      	mov	r1, r5
 8002f24:	028b      	lsls	r3, r1, #10
 8002f26:	4621      	mov	r1, r4
 8002f28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	028a      	lsls	r2, r1, #10
 8002f30:	4610      	mov	r0, r2
 8002f32:	4619      	mov	r1, r3
 8002f34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f38:	2200      	movs	r2, #0
 8002f3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f3c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f3e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002f42:	f7fd f9cd 	bl	80002e0 <__aeabi_uldivmod>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f50:	4b41      	ldr	r3, [pc, #260]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	0c1b      	lsrs	r3, r3, #16
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002f62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f72:	e0eb      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f74:	4b38      	ldr	r3, [pc, #224]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f80:	4b35      	ldr	r3, [pc, #212]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d06b      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8c:	4b32      	ldr	r3, [pc, #200]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	099b      	lsrs	r3, r3, #6
 8002f92:	2200      	movs	r2, #0
 8002f94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fa4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002fa8:	4622      	mov	r2, r4
 8002faa:	462b      	mov	r3, r5
 8002fac:	f04f 0000 	mov.w	r0, #0
 8002fb0:	f04f 0100 	mov.w	r1, #0
 8002fb4:	0159      	lsls	r1, r3, #5
 8002fb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fba:	0150      	lsls	r0, r2, #5
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	1a51      	subs	r1, r2, r1
 8002fc4:	61b9      	str	r1, [r7, #24]
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	eb63 0301 	sbc.w	r3, r3, r1
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002fda:	4659      	mov	r1, fp
 8002fdc:	018b      	lsls	r3, r1, #6
 8002fde:	4651      	mov	r1, sl
 8002fe0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fe4:	4651      	mov	r1, sl
 8002fe6:	018a      	lsls	r2, r1, #6
 8002fe8:	4651      	mov	r1, sl
 8002fea:	ebb2 0801 	subs.w	r8, r2, r1
 8002fee:	4659      	mov	r1, fp
 8002ff0:	eb63 0901 	sbc.w	r9, r3, r1
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003000:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003004:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003008:	4690      	mov	r8, r2
 800300a:	4699      	mov	r9, r3
 800300c:	4623      	mov	r3, r4
 800300e:	eb18 0303 	adds.w	r3, r8, r3
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	462b      	mov	r3, r5
 8003016:	eb49 0303 	adc.w	r3, r9, r3
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003028:	4629      	mov	r1, r5
 800302a:	024b      	lsls	r3, r1, #9
 800302c:	4621      	mov	r1, r4
 800302e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003032:	4621      	mov	r1, r4
 8003034:	024a      	lsls	r2, r1, #9
 8003036:	4610      	mov	r0, r2
 8003038:	4619      	mov	r1, r3
 800303a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800303e:	2200      	movs	r2, #0
 8003040:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003042:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003044:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003048:	f7fd f94a 	bl	80002e0 <__aeabi_uldivmod>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4613      	mov	r3, r2
 8003052:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003056:	e065      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x420>
 8003058:	40023800 	.word	0x40023800
 800305c:	00f42400 	.word	0x00f42400
 8003060:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003064:	4b3d      	ldr	r3, [pc, #244]	@ (800315c <HAL_RCC_GetSysClockFreq+0x458>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	099b      	lsrs	r3, r3, #6
 800306a:	2200      	movs	r2, #0
 800306c:	4618      	mov	r0, r3
 800306e:	4611      	mov	r1, r2
 8003070:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003074:	653b      	str	r3, [r7, #80]	@ 0x50
 8003076:	2300      	movs	r3, #0
 8003078:	657b      	str	r3, [r7, #84]	@ 0x54
 800307a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800307e:	4642      	mov	r2, r8
 8003080:	464b      	mov	r3, r9
 8003082:	f04f 0000 	mov.w	r0, #0
 8003086:	f04f 0100 	mov.w	r1, #0
 800308a:	0159      	lsls	r1, r3, #5
 800308c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003090:	0150      	lsls	r0, r2, #5
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4641      	mov	r1, r8
 8003098:	1a51      	subs	r1, r2, r1
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	4649      	mov	r1, r9
 800309e:	eb63 0301 	sbc.w	r3, r3, r1
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80030b0:	4659      	mov	r1, fp
 80030b2:	018b      	lsls	r3, r1, #6
 80030b4:	4651      	mov	r1, sl
 80030b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030ba:	4651      	mov	r1, sl
 80030bc:	018a      	lsls	r2, r1, #6
 80030be:	4651      	mov	r1, sl
 80030c0:	1a54      	subs	r4, r2, r1
 80030c2:	4659      	mov	r1, fp
 80030c4:	eb63 0501 	sbc.w	r5, r3, r1
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	00eb      	lsls	r3, r5, #3
 80030d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030d6:	00e2      	lsls	r2, r4, #3
 80030d8:	4614      	mov	r4, r2
 80030da:	461d      	mov	r5, r3
 80030dc:	4643      	mov	r3, r8
 80030de:	18e3      	adds	r3, r4, r3
 80030e0:	603b      	str	r3, [r7, #0]
 80030e2:	464b      	mov	r3, r9
 80030e4:	eb45 0303 	adc.w	r3, r5, r3
 80030e8:	607b      	str	r3, [r7, #4]
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030f6:	4629      	mov	r1, r5
 80030f8:	028b      	lsls	r3, r1, #10
 80030fa:	4621      	mov	r1, r4
 80030fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003100:	4621      	mov	r1, r4
 8003102:	028a      	lsls	r2, r1, #10
 8003104:	4610      	mov	r0, r2
 8003106:	4619      	mov	r1, r3
 8003108:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800310c:	2200      	movs	r2, #0
 800310e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003110:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003112:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003116:	f7fd f8e3 	bl	80002e0 <__aeabi_uldivmod>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4613      	mov	r3, r2
 8003120:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003124:	4b0d      	ldr	r3, [pc, #52]	@ (800315c <HAL_RCC_GetSysClockFreq+0x458>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	0f1b      	lsrs	r3, r3, #28
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003132:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003136:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800313a:	fbb2 f3f3 	udiv	r3, r2, r3
 800313e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003142:	e003      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003144:	4b06      	ldr	r3, [pc, #24]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003146:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800314a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800314c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003150:	4618      	mov	r0, r3
 8003152:	37b8      	adds	r7, #184	@ 0xb8
 8003154:	46bd      	mov	sp, r7
 8003156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
 8003160:	00f42400 	.word	0x00f42400

08003164 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e28d      	b.n	8003692 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8083 	beq.w	800328a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003184:	4b94      	ldr	r3, [pc, #592]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 030c 	and.w	r3, r3, #12
 800318c:	2b04      	cmp	r3, #4
 800318e:	d019      	beq.n	80031c4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003190:	4b91      	ldr	r3, [pc, #580]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 030c 	and.w	r3, r3, #12
        || \
 8003198:	2b08      	cmp	r3, #8
 800319a:	d106      	bne.n	80031aa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800319c:	4b8e      	ldr	r3, [pc, #568]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031a8:	d00c      	beq.n	80031c4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031aa:	4b8b      	ldr	r3, [pc, #556]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80031b2:	2b0c      	cmp	r3, #12
 80031b4:	d112      	bne.n	80031dc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b6:	4b88      	ldr	r3, [pc, #544]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031c2:	d10b      	bne.n	80031dc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c4:	4b84      	ldr	r3, [pc, #528]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d05b      	beq.n	8003288 <HAL_RCC_OscConfig+0x124>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d157      	bne.n	8003288 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e25a      	b.n	8003692 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e4:	d106      	bne.n	80031f4 <HAL_RCC_OscConfig+0x90>
 80031e6:	4b7c      	ldr	r3, [pc, #496]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a7b      	ldr	r2, [pc, #492]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 80031ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	e01d      	b.n	8003230 <HAL_RCC_OscConfig+0xcc>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031fc:	d10c      	bne.n	8003218 <HAL_RCC_OscConfig+0xb4>
 80031fe:	4b76      	ldr	r3, [pc, #472]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a75      	ldr	r2, [pc, #468]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 8003204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	4b73      	ldr	r3, [pc, #460]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a72      	ldr	r2, [pc, #456]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 8003210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	e00b      	b.n	8003230 <HAL_RCC_OscConfig+0xcc>
 8003218:	4b6f      	ldr	r3, [pc, #444]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a6e      	ldr	r2, [pc, #440]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 800321e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	4b6c      	ldr	r3, [pc, #432]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a6b      	ldr	r2, [pc, #428]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 800322a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800322e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d013      	beq.n	8003260 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe fb92 	bl	8001960 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003240:	f7fe fb8e 	bl	8001960 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b64      	cmp	r3, #100	@ 0x64
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e21f      	b.n	8003692 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003252:	4b61      	ldr	r3, [pc, #388]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0xdc>
 800325e:	e014      	b.n	800328a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fe fb7e 	bl	8001960 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003268:	f7fe fb7a 	bl	8001960 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	@ 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e20b      	b.n	8003692 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800327a:	4b57      	ldr	r3, [pc, #348]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x104>
 8003286:	e000      	b.n	800328a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d06f      	beq.n	8003376 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003296:	4b50      	ldr	r3, [pc, #320]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d017      	beq.n	80032d2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80032a2:	4b4d      	ldr	r3, [pc, #308]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
        || \
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d105      	bne.n	80032ba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80032ae:	4b4a      	ldr	r3, [pc, #296]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00b      	beq.n	80032d2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ba:	4b47      	ldr	r3, [pc, #284]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80032c2:	2b0c      	cmp	r3, #12
 80032c4:	d11c      	bne.n	8003300 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032c6:	4b44      	ldr	r3, [pc, #272]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d116      	bne.n	8003300 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032d2:	4b41      	ldr	r3, [pc, #260]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d005      	beq.n	80032ea <HAL_RCC_OscConfig+0x186>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d001      	beq.n	80032ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e1d3      	b.n	8003692 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ea:	4b3b      	ldr	r3, [pc, #236]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	4937      	ldr	r1, [pc, #220]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fe:	e03a      	b.n	8003376 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d020      	beq.n	800334a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003308:	4b34      	ldr	r3, [pc, #208]	@ (80033dc <HAL_RCC_OscConfig+0x278>)
 800330a:	2201      	movs	r2, #1
 800330c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330e:	f7fe fb27 	bl	8001960 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003316:	f7fe fb23 	bl	8001960 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e1b4      	b.n	8003692 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003328:	4b2b      	ldr	r3, [pc, #172]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f0      	beq.n	8003316 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003334:	4b28      	ldr	r3, [pc, #160]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	4925      	ldr	r1, [pc, #148]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 8003344:	4313      	orrs	r3, r2
 8003346:	600b      	str	r3, [r1, #0]
 8003348:	e015      	b.n	8003376 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800334a:	4b24      	ldr	r3, [pc, #144]	@ (80033dc <HAL_RCC_OscConfig+0x278>)
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7fe fb06 	bl	8001960 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003358:	f7fe fb02 	bl	8001960 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e193      	b.n	8003692 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336a:	4b1b      	ldr	r3, [pc, #108]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d036      	beq.n	80033f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d016      	beq.n	80033b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800338a:	4b15      	ldr	r3, [pc, #84]	@ (80033e0 <HAL_RCC_OscConfig+0x27c>)
 800338c:	2201      	movs	r2, #1
 800338e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003390:	f7fe fae6 	bl	8001960 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003398:	f7fe fae2 	bl	8001960 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e173      	b.n	8003692 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033aa:	4b0b      	ldr	r3, [pc, #44]	@ (80033d8 <HAL_RCC_OscConfig+0x274>)
 80033ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0x234>
 80033b6:	e01b      	b.n	80033f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b8:	4b09      	ldr	r3, [pc, #36]	@ (80033e0 <HAL_RCC_OscConfig+0x27c>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033be:	f7fe facf 	bl	8001960 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c4:	e00e      	b.n	80033e4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c6:	f7fe facb 	bl	8001960 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d907      	bls.n	80033e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e15c      	b.n	8003692 <HAL_RCC_OscConfig+0x52e>
 80033d8:	40023800 	.word	0x40023800
 80033dc:	42470000 	.word	0x42470000
 80033e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e4:	4b8a      	ldr	r3, [pc, #552]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 80033e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1ea      	bne.n	80033c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 8097 	beq.w	800352c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033fe:	2300      	movs	r3, #0
 8003400:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003402:	4b83      	ldr	r3, [pc, #524]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10f      	bne.n	800342e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	4b7f      	ldr	r3, [pc, #508]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	4a7e      	ldr	r2, [pc, #504]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 8003418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800341c:	6413      	str	r3, [r2, #64]	@ 0x40
 800341e:	4b7c      	ldr	r3, [pc, #496]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800342a:	2301      	movs	r3, #1
 800342c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342e:	4b79      	ldr	r3, [pc, #484]	@ (8003614 <HAL_RCC_OscConfig+0x4b0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d118      	bne.n	800346c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800343a:	4b76      	ldr	r3, [pc, #472]	@ (8003614 <HAL_RCC_OscConfig+0x4b0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a75      	ldr	r2, [pc, #468]	@ (8003614 <HAL_RCC_OscConfig+0x4b0>)
 8003440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003446:	f7fe fa8b 	bl	8001960 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344e:	f7fe fa87 	bl	8001960 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e118      	b.n	8003692 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003460:	4b6c      	ldr	r3, [pc, #432]	@ (8003614 <HAL_RCC_OscConfig+0x4b0>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0f0      	beq.n	800344e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d106      	bne.n	8003482 <HAL_RCC_OscConfig+0x31e>
 8003474:	4b66      	ldr	r3, [pc, #408]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 8003476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003478:	4a65      	ldr	r2, [pc, #404]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003480:	e01c      	b.n	80034bc <HAL_RCC_OscConfig+0x358>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2b05      	cmp	r3, #5
 8003488:	d10c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x340>
 800348a:	4b61      	ldr	r3, [pc, #388]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348e:	4a60      	ldr	r2, [pc, #384]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 8003490:	f043 0304 	orr.w	r3, r3, #4
 8003494:	6713      	str	r3, [r2, #112]	@ 0x70
 8003496:	4b5e      	ldr	r3, [pc, #376]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 8003498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800349a:	4a5d      	ldr	r2, [pc, #372]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034a2:	e00b      	b.n	80034bc <HAL_RCC_OscConfig+0x358>
 80034a4:	4b5a      	ldr	r3, [pc, #360]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a8:	4a59      	ldr	r2, [pc, #356]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 80034aa:	f023 0301 	bic.w	r3, r3, #1
 80034ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80034b0:	4b57      	ldr	r3, [pc, #348]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b4:	4a56      	ldr	r2, [pc, #344]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 80034b6:	f023 0304 	bic.w	r3, r3, #4
 80034ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d015      	beq.n	80034f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c4:	f7fe fa4c 	bl	8001960 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034cc:	f7fe fa48 	bl	8001960 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e0d7      	b.n	8003692 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0ee      	beq.n	80034cc <HAL_RCC_OscConfig+0x368>
 80034ee:	e014      	b.n	800351a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7fe fa36 	bl	8001960 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f6:	e00a      	b.n	800350e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f8:	f7fe fa32 	bl	8001960 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e0c1      	b.n	8003692 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800350e:	4b40      	ldr	r3, [pc, #256]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1ee      	bne.n	80034f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800351a:	7dfb      	ldrb	r3, [r7, #23]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d105      	bne.n	800352c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003520:	4b3b      	ldr	r3, [pc, #236]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 8003522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003524:	4a3a      	ldr	r2, [pc, #232]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 8003526:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800352a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80ad 	beq.w	8003690 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003536:	4b36      	ldr	r3, [pc, #216]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b08      	cmp	r3, #8
 8003540:	d060      	beq.n	8003604 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d145      	bne.n	80035d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354a:	4b33      	ldr	r3, [pc, #204]	@ (8003618 <HAL_RCC_OscConfig+0x4b4>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003550:	f7fe fa06 	bl	8001960 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003558:	f7fe fa02 	bl	8001960 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e093      	b.n	8003692 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356a:	4b29      	ldr	r3, [pc, #164]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69da      	ldr	r2, [r3, #28]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	019b      	lsls	r3, r3, #6
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358c:	085b      	lsrs	r3, r3, #1
 800358e:	3b01      	subs	r3, #1
 8003590:	041b      	lsls	r3, r3, #16
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003598:	061b      	lsls	r3, r3, #24
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a0:	071b      	lsls	r3, r3, #28
 80035a2:	491b      	ldr	r1, [pc, #108]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003618 <HAL_RCC_OscConfig+0x4b4>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ae:	f7fe f9d7 	bl	8001960 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b6:	f7fe f9d3 	bl	8001960 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e064      	b.n	8003692 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c8:	4b11      	ldr	r3, [pc, #68]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f0      	beq.n	80035b6 <HAL_RCC_OscConfig+0x452>
 80035d4:	e05c      	b.n	8003690 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d6:	4b10      	ldr	r3, [pc, #64]	@ (8003618 <HAL_RCC_OscConfig+0x4b4>)
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fe f9c0 	bl	8001960 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e4:	f7fe f9bc 	bl	8001960 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e04d      	b.n	8003692 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f6:	4b06      	ldr	r3, [pc, #24]	@ (8003610 <HAL_RCC_OscConfig+0x4ac>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x480>
 8003602:	e045      	b.n	8003690 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d107      	bne.n	800361c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e040      	b.n	8003692 <HAL_RCC_OscConfig+0x52e>
 8003610:	40023800 	.word	0x40023800
 8003614:	40007000 	.word	0x40007000
 8003618:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800361c:	4b1f      	ldr	r3, [pc, #124]	@ (800369c <HAL_RCC_OscConfig+0x538>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d030      	beq.n	800368c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003634:	429a      	cmp	r2, r3
 8003636:	d129      	bne.n	800368c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003642:	429a      	cmp	r2, r3
 8003644:	d122      	bne.n	800368c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800364c:	4013      	ands	r3, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003652:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003654:	4293      	cmp	r3, r2
 8003656:	d119      	bne.n	800368c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	3b01      	subs	r3, #1
 8003666:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d10f      	bne.n	800368c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003676:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003678:	429a      	cmp	r2, r3
 800367a:	d107      	bne.n	800368c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003686:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003688:	429a      	cmp	r2, r3
 800368a:	d001      	beq.n	8003690 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800

080036a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e041      	b.n	8003736 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f839 	bl	800373e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3304      	adds	r3, #4
 80036dc:	4619      	mov	r1, r3
 80036de:	4610      	mov	r0, r2
 80036e0:	f000 f9c0 	bl	8003a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d001      	beq.n	800376c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e04e      	b.n	800380a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a23      	ldr	r2, [pc, #140]	@ (8003818 <HAL_TIM_Base_Start_IT+0xc4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d022      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0x80>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003796:	d01d      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0x80>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1f      	ldr	r2, [pc, #124]	@ (800381c <HAL_TIM_Base_Start_IT+0xc8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d018      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0x80>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003820 <HAL_TIM_Base_Start_IT+0xcc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d013      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0x80>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003824 <HAL_TIM_Base_Start_IT+0xd0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00e      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0x80>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003828 <HAL_TIM_Base_Start_IT+0xd4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d009      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0x80>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a19      	ldr	r2, [pc, #100]	@ (800382c <HAL_TIM_Base_Start_IT+0xd8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d004      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0x80>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a18      	ldr	r2, [pc, #96]	@ (8003830 <HAL_TIM_Base_Start_IT+0xdc>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d111      	bne.n	80037f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b06      	cmp	r3, #6
 80037e4:	d010      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f042 0201 	orr.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f6:	e007      	b.n	8003808 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40010000 	.word	0x40010000
 800381c:	40000400 	.word	0x40000400
 8003820:	40000800 	.word	0x40000800
 8003824:	40000c00 	.word	0x40000c00
 8003828:	40010400 	.word	0x40010400
 800382c:	40014000 	.word	0x40014000
 8003830:	40001800 	.word	0x40001800

08003834 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d020      	beq.n	8003898 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d01b      	beq.n	8003898 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0202 	mvn.w	r2, #2
 8003868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f8d2 	bl	8003a28 <HAL_TIM_IC_CaptureCallback>
 8003884:	e005      	b.n	8003892 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f8c4 	bl	8003a14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f8d5 	bl	8003a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d020      	beq.n	80038e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d01b      	beq.n	80038e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0204 	mvn.w	r2, #4
 80038b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2202      	movs	r2, #2
 80038ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f8ac 	bl	8003a28 <HAL_TIM_IC_CaptureCallback>
 80038d0:	e005      	b.n	80038de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f89e 	bl	8003a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f8af 	bl	8003a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d020      	beq.n	8003930 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01b      	beq.n	8003930 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0208 	mvn.w	r2, #8
 8003900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2204      	movs	r2, #4
 8003906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f886 	bl	8003a28 <HAL_TIM_IC_CaptureCallback>
 800391c:	e005      	b.n	800392a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f878 	bl	8003a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f889 	bl	8003a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b00      	cmp	r3, #0
 8003938:	d020      	beq.n	800397c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b00      	cmp	r3, #0
 8003942:	d01b      	beq.n	800397c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0210 	mvn.w	r2, #16
 800394c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2208      	movs	r2, #8
 8003952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f860 	bl	8003a28 <HAL_TIM_IC_CaptureCallback>
 8003968:	e005      	b.n	8003976 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f852 	bl	8003a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f863 	bl	8003a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00c      	beq.n	80039a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d007      	beq.n	80039a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0201 	mvn.w	r2, #1
 8003998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd fb4c 	bl	8001038 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00c      	beq.n	80039c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80039bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f906 	bl	8003bd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00c      	beq.n	80039e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d007      	beq.n	80039e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f834 	bl	8003a50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00c      	beq.n	8003a0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0220 	mvn.w	r2, #32
 8003a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f8d8 	bl	8003bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a46      	ldr	r2, [pc, #280]	@ (8003b90 <TIM_Base_SetConfig+0x12c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d013      	beq.n	8003aa4 <TIM_Base_SetConfig+0x40>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a82:	d00f      	beq.n	8003aa4 <TIM_Base_SetConfig+0x40>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a43      	ldr	r2, [pc, #268]	@ (8003b94 <TIM_Base_SetConfig+0x130>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00b      	beq.n	8003aa4 <TIM_Base_SetConfig+0x40>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a42      	ldr	r2, [pc, #264]	@ (8003b98 <TIM_Base_SetConfig+0x134>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d007      	beq.n	8003aa4 <TIM_Base_SetConfig+0x40>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a41      	ldr	r2, [pc, #260]	@ (8003b9c <TIM_Base_SetConfig+0x138>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d003      	beq.n	8003aa4 <TIM_Base_SetConfig+0x40>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a40      	ldr	r2, [pc, #256]	@ (8003ba0 <TIM_Base_SetConfig+0x13c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d108      	bne.n	8003ab6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a35      	ldr	r2, [pc, #212]	@ (8003b90 <TIM_Base_SetConfig+0x12c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d02b      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac4:	d027      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a32      	ldr	r2, [pc, #200]	@ (8003b94 <TIM_Base_SetConfig+0x130>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d023      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a31      	ldr	r2, [pc, #196]	@ (8003b98 <TIM_Base_SetConfig+0x134>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d01f      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a30      	ldr	r2, [pc, #192]	@ (8003b9c <TIM_Base_SetConfig+0x138>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d01b      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2f      	ldr	r2, [pc, #188]	@ (8003ba0 <TIM_Base_SetConfig+0x13c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d017      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a2e      	ldr	r2, [pc, #184]	@ (8003ba4 <TIM_Base_SetConfig+0x140>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2d      	ldr	r2, [pc, #180]	@ (8003ba8 <TIM_Base_SetConfig+0x144>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00f      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2c      	ldr	r2, [pc, #176]	@ (8003bac <TIM_Base_SetConfig+0x148>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00b      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb0 <TIM_Base_SetConfig+0x14c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d007      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a2a      	ldr	r2, [pc, #168]	@ (8003bb4 <TIM_Base_SetConfig+0x150>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a29      	ldr	r2, [pc, #164]	@ (8003bb8 <TIM_Base_SetConfig+0x154>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d108      	bne.n	8003b28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a10      	ldr	r2, [pc, #64]	@ (8003b90 <TIM_Base_SetConfig+0x12c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d003      	beq.n	8003b5c <TIM_Base_SetConfig+0xf8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a12      	ldr	r2, [pc, #72]	@ (8003ba0 <TIM_Base_SetConfig+0x13c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d103      	bne.n	8003b64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d105      	bne.n	8003b82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f023 0201 	bic.w	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	611a      	str	r2, [r3, #16]
  }
}
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40010000 	.word	0x40010000
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000800 	.word	0x40000800
 8003b9c:	40000c00 	.word	0x40000c00
 8003ba0:	40010400 	.word	0x40010400
 8003ba4:	40014000 	.word	0x40014000
 8003ba8:	40014400 	.word	0x40014400
 8003bac:	40014800 	.word	0x40014800
 8003bb0:	40001800 	.word	0x40001800
 8003bb4:	40001c00 	.word	0x40001c00
 8003bb8:	40002000 	.word	0x40002000

08003bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <__NVIC_SetPriority>:
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	6039      	str	r1, [r7, #0]
 8003bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	db0a      	blt.n	8003c0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	490c      	ldr	r1, [pc, #48]	@ (8003c30 <__NVIC_SetPriority+0x4c>)
 8003bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c02:	0112      	lsls	r2, r2, #4
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	440b      	add	r3, r1
 8003c08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003c0c:	e00a      	b.n	8003c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	4908      	ldr	r1, [pc, #32]	@ (8003c34 <__NVIC_SetPriority+0x50>)
 8003c14:	79fb      	ldrb	r3, [r7, #7]
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	3b04      	subs	r3, #4
 8003c1c:	0112      	lsls	r2, r2, #4
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	440b      	add	r3, r1
 8003c22:	761a      	strb	r2, [r3, #24]
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	e000e100 	.word	0xe000e100
 8003c34:	e000ed00 	.word	0xe000ed00

08003c38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003c3c:	4b05      	ldr	r3, [pc, #20]	@ (8003c54 <SysTick_Handler+0x1c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003c40:	f001 fedc 	bl	80059fc <xTaskGetSchedulerState>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d001      	beq.n	8003c4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003c4a:	f002 fdd5 	bl	80067f8 <xPortSysTickHandler>
  }
}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	e000e010 	.word	0xe000e010

08003c58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	f06f 0004 	mvn.w	r0, #4
 8003c62:	f7ff ffbf 	bl	8003be4 <__NVIC_SetPriority>
#endif
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c72:	f3ef 8305 	mrs	r3, IPSR
 8003c76:	603b      	str	r3, [r7, #0]
  return(result);
 8003c78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003c7e:	f06f 0305 	mvn.w	r3, #5
 8003c82:	607b      	str	r3, [r7, #4]
 8003c84:	e00c      	b.n	8003ca0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c86:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb0 <osKernelInitialize+0x44>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d105      	bne.n	8003c9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003c8e:	4b08      	ldr	r3, [pc, #32]	@ (8003cb0 <osKernelInitialize+0x44>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	607b      	str	r3, [r7, #4]
 8003c98:	e002      	b.n	8003ca0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ca0:	687b      	ldr	r3, [r7, #4]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	20000578 	.word	0x20000578

08003cb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cba:	f3ef 8305 	mrs	r3, IPSR
 8003cbe:	603b      	str	r3, [r7, #0]
  return(result);
 8003cc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <osKernelStart+0x1a>
    stat = osErrorISR;
 8003cc6:	f06f 0305 	mvn.w	r3, #5
 8003cca:	607b      	str	r3, [r7, #4]
 8003ccc:	e010      	b.n	8003cf0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003cce:	4b0b      	ldr	r3, [pc, #44]	@ (8003cfc <osKernelStart+0x48>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d109      	bne.n	8003cea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003cd6:	f7ff ffbf 	bl	8003c58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003cda:	4b08      	ldr	r3, [pc, #32]	@ (8003cfc <osKernelStart+0x48>)
 8003cdc:	2202      	movs	r2, #2
 8003cde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ce0:	f001 fa28 	bl	8005134 <vTaskStartScheduler>
      stat = osOK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	607b      	str	r3, [r7, #4]
 8003ce8:	e002      	b.n	8003cf0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003cea:	f04f 33ff 	mov.w	r3, #4294967295
 8003cee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003cf0:	687b      	ldr	r3, [r7, #4]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000578 	.word	0x20000578

08003d00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08e      	sub	sp, #56	@ 0x38
 8003d04:	af04      	add	r7, sp, #16
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d10:	f3ef 8305 	mrs	r3, IPSR
 8003d14:	617b      	str	r3, [r7, #20]
  return(result);
 8003d16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d17e      	bne.n	8003e1a <osThreadNew+0x11a>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d07b      	beq.n	8003e1a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003d22:	2380      	movs	r3, #128	@ 0x80
 8003d24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003d26:	2318      	movs	r3, #24
 8003d28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d045      	beq.n	8003dc6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <osThreadNew+0x48>
        name = attr->name;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <osThreadNew+0x6e>
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	2b38      	cmp	r3, #56	@ 0x38
 8003d60:	d805      	bhi.n	8003d6e <osThreadNew+0x6e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <osThreadNew+0x72>
        return (NULL);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e054      	b.n	8003e1c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	089b      	lsrs	r3, r3, #2
 8003d80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00e      	beq.n	8003da8 <osThreadNew+0xa8>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2ba7      	cmp	r3, #167	@ 0xa7
 8003d90:	d90a      	bls.n	8003da8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d006      	beq.n	8003da8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <osThreadNew+0xa8>
        mem = 1;
 8003da2:	2301      	movs	r3, #1
 8003da4:	61bb      	str	r3, [r7, #24]
 8003da6:	e010      	b.n	8003dca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10c      	bne.n	8003dca <osThreadNew+0xca>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d108      	bne.n	8003dca <osThreadNew+0xca>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d104      	bne.n	8003dca <osThreadNew+0xca>
          mem = 0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	e001      	b.n	8003dca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d110      	bne.n	8003df2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003dd8:	9202      	str	r2, [sp, #8]
 8003dda:	9301      	str	r3, [sp, #4]
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	6a3a      	ldr	r2, [r7, #32]
 8003de4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 ffb0 	bl	8004d4c <xTaskCreateStatic>
 8003dec:	4603      	mov	r3, r0
 8003dee:	613b      	str	r3, [r7, #16]
 8003df0:	e013      	b.n	8003e1a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d110      	bne.n	8003e1a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	f107 0310 	add.w	r3, r7, #16
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 fffe 	bl	8004e0c <xTaskCreate>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d001      	beq.n	8003e1a <osThreadNew+0x11a>
            hTask = NULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e1a:	693b      	ldr	r3, [r7, #16]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3728      	adds	r7, #40	@ 0x28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e2c:	f3ef 8305 	mrs	r3, IPSR
 8003e30:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e32:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <osDelay+0x1c>
    stat = osErrorISR;
 8003e38:	f06f 0305 	mvn.w	r3, #5
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	e007      	b.n	8003e50 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f001 f93c 	bl	80050c8 <vTaskDelay>
    }
  }

  return (stat);
 8003e50:	68fb      	ldr	r3, [r7, #12]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4a07      	ldr	r2, [pc, #28]	@ (8003e88 <vApplicationGetIdleTaskMemory+0x2c>)
 8003e6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	4a06      	ldr	r2, [pc, #24]	@ (8003e8c <vApplicationGetIdleTaskMemory+0x30>)
 8003e72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2280      	movs	r2, #128	@ 0x80
 8003e78:	601a      	str	r2, [r3, #0]
}
 8003e7a:	bf00      	nop
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	2000057c 	.word	0x2000057c
 8003e8c:	20000624 	.word	0x20000624

08003e90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4a07      	ldr	r2, [pc, #28]	@ (8003ebc <vApplicationGetTimerTaskMemory+0x2c>)
 8003ea0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	4a06      	ldr	r2, [pc, #24]	@ (8003ec0 <vApplicationGetTimerTaskMemory+0x30>)
 8003ea6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003eae:	601a      	str	r2, [r3, #0]
}
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	20000824 	.word	0x20000824
 8003ec0:	200008cc 	.word	0x200008cc

08003ec4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f103 0208 	add.w	r2, r3, #8
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8003edc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f103 0208 	add.w	r2, r3, #8
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f103 0208 	add.w	r2, r3, #8
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b085      	sub	sp, #20
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	601a      	str	r2, [r3, #0]
}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f66:	b480      	push	{r7}
 8003f68:	b085      	sub	sp, #20
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d103      	bne.n	8003f86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	e00c      	b.n	8003fa0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3308      	adds	r3, #8
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	e002      	b.n	8003f94 <vListInsert+0x2e>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d2f6      	bcs.n	8003f8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	601a      	str	r2, [r3, #0]
}
 8003fcc:	bf00      	nop
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6892      	ldr	r2, [r2, #8]
 8003fee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6852      	ldr	r2, [r2, #4]
 8003ff8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	429a      	cmp	r2, r3
 8004002:	d103      	bne.n	800400c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	1e5a      	subs	r2, r3, #1
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10b      	bne.n	8004058 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	e7fd      	b.n	8004054 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004058:	f002 fb3e 	bl	80066d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004064:	68f9      	ldr	r1, [r7, #12]
 8004066:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004068:	fb01 f303 	mul.w	r3, r1, r3
 800406c:	441a      	add	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004088:	3b01      	subs	r3, #1
 800408a:	68f9      	ldr	r1, [r7, #12]
 800408c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800408e:	fb01 f303 	mul.w	r3, r1, r3
 8004092:	441a      	add	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	22ff      	movs	r2, #255	@ 0xff
 800409c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	22ff      	movs	r2, #255	@ 0xff
 80040a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d114      	bne.n	80040d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d01a      	beq.n	80040ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3310      	adds	r3, #16
 80040ba:	4618      	mov	r0, r3
 80040bc:	f001 fad8 	bl	8005670 <xTaskRemoveFromEventList>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d012      	beq.n	80040ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040c6:	4b0d      	ldr	r3, [pc, #52]	@ (80040fc <xQueueGenericReset+0xd0>)
 80040c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	e009      	b.n	80040ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	3310      	adds	r3, #16
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff fef1 	bl	8003ec4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3324      	adds	r3, #36	@ 0x24
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff feec 	bl	8003ec4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80040ec:	f002 fb26 	bl	800673c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80040f0:	2301      	movs	r3, #1
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	e000ed04 	.word	0xe000ed04

08004100 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08e      	sub	sp, #56	@ 0x38
 8004104:	af02      	add	r7, sp, #8
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10b      	bne.n	800412c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004126:	bf00      	nop
 8004128:	bf00      	nop
 800412a:	e7fd      	b.n	8004128 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10b      	bne.n	800414a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop
 8004148:	e7fd      	b.n	8004146 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <xQueueGenericCreateStatic+0x56>
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <xQueueGenericCreateStatic+0x5a>
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <xQueueGenericCreateStatic+0x5c>
 800415a:	2300      	movs	r3, #0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10b      	bne.n	8004178 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	623b      	str	r3, [r7, #32]
}
 8004172:	bf00      	nop
 8004174:	bf00      	nop
 8004176:	e7fd      	b.n	8004174 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <xQueueGenericCreateStatic+0x84>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <xQueueGenericCreateStatic+0x88>
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <xQueueGenericCreateStatic+0x8a>
 8004188:	2300      	movs	r3, #0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10b      	bne.n	80041a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	61fb      	str	r3, [r7, #28]
}
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	e7fd      	b.n	80041a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80041a6:	2350      	movs	r3, #80	@ 0x50
 80041a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b50      	cmp	r3, #80	@ 0x50
 80041ae:	d00b      	beq.n	80041c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	61bb      	str	r3, [r7, #24]
}
 80041c2:	bf00      	nop
 80041c4:	bf00      	nop
 80041c6:	e7fd      	b.n	80041c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80041c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80041ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00d      	beq.n	80041f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80041d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80041e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	4613      	mov	r3, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f840 	bl	8004270 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3730      	adds	r7, #48	@ 0x30
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b08a      	sub	sp, #40	@ 0x28
 80041fe:	af02      	add	r7, sp, #8
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	4613      	mov	r3, r2
 8004206:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10b      	bne.n	8004226 <xQueueGenericCreate+0x2c>
	__asm volatile
 800420e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	613b      	str	r3, [r7, #16]
}
 8004220:	bf00      	nop
 8004222:	bf00      	nop
 8004224:	e7fd      	b.n	8004222 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	fb02 f303 	mul.w	r3, r2, r3
 800422e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	3350      	adds	r3, #80	@ 0x50
 8004234:	4618      	mov	r0, r3
 8004236:	f002 fb71 	bl	800691c <pvPortMalloc>
 800423a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d011      	beq.n	8004266 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	3350      	adds	r3, #80	@ 0x50
 800424a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004254:	79fa      	ldrb	r2, [r7, #7]
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	4613      	mov	r3, r2
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	68b9      	ldr	r1, [r7, #8]
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f805 	bl	8004270 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004266:	69bb      	ldr	r3, [r7, #24]
	}
 8004268:	4618      	mov	r0, r3
 800426a:	3720      	adds	r7, #32
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d103      	bne.n	800428c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	e002      	b.n	8004292 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800429e:	2101      	movs	r1, #1
 80042a0:	69b8      	ldr	r0, [r7, #24]
 80042a2:	f7ff fec3 	bl	800402c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	78fa      	ldrb	r2, [r7, #3]
 80042aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80042ae:	bf00      	nop
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00e      	beq.n	80042e2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80042d6:	2300      	movs	r3, #0
 80042d8:	2200      	movs	r2, #0
 80042da:	2100      	movs	r1, #0
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f81d 	bl	800431c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b086      	sub	sp, #24
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	4603      	mov	r3, r0
 80042f2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80042f4:	2301      	movs	r3, #1
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	2300      	movs	r3, #0
 80042fa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	461a      	mov	r2, r3
 8004300:	6939      	ldr	r1, [r7, #16]
 8004302:	6978      	ldr	r0, [r7, #20]
 8004304:	f7ff ff79 	bl	80041fa <xQueueGenericCreate>
 8004308:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f7ff ffd3 	bl	80042b6 <prvInitialiseMutex>

		return xNewQueue;
 8004310:	68fb      	ldr	r3, [r7, #12]
	}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08e      	sub	sp, #56	@ 0x38
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800432a:	2300      	movs	r3, #0
 800432c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10b      	bne.n	8004350 <xQueueGenericSend+0x34>
	__asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800434a:	bf00      	nop
 800434c:	bf00      	nop
 800434e:	e7fd      	b.n	800434c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d103      	bne.n	800435e <xQueueGenericSend+0x42>
 8004356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <xQueueGenericSend+0x46>
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <xQueueGenericSend+0x48>
 8004362:	2300      	movs	r3, #0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10b      	bne.n	8004380 <xQueueGenericSend+0x64>
	__asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800437a:	bf00      	nop
 800437c:	bf00      	nop
 800437e:	e7fd      	b.n	800437c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d103      	bne.n	800438e <xQueueGenericSend+0x72>
 8004386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <xQueueGenericSend+0x76>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <xQueueGenericSend+0x78>
 8004392:	2300      	movs	r3, #0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10b      	bne.n	80043b0 <xQueueGenericSend+0x94>
	__asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	623b      	str	r3, [r7, #32]
}
 80043aa:	bf00      	nop
 80043ac:	bf00      	nop
 80043ae:	e7fd      	b.n	80043ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043b0:	f001 fb24 	bl	80059fc <xTaskGetSchedulerState>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d102      	bne.n	80043c0 <xQueueGenericSend+0xa4>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <xQueueGenericSend+0xa8>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <xQueueGenericSend+0xaa>
 80043c4:	2300      	movs	r3, #0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10b      	bne.n	80043e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	61fb      	str	r3, [r7, #28]
}
 80043dc:	bf00      	nop
 80043de:	bf00      	nop
 80043e0:	e7fd      	b.n	80043de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043e2:	f002 f979 	bl	80066d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d302      	bcc.n	80043f8 <xQueueGenericSend+0xdc>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d129      	bne.n	800444c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043fe:	f000 fb37 	bl	8004a70 <prvCopyDataToQueue>
 8004402:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004408:	2b00      	cmp	r3, #0
 800440a:	d010      	beq.n	800442e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800440c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440e:	3324      	adds	r3, #36	@ 0x24
 8004410:	4618      	mov	r0, r3
 8004412:	f001 f92d 	bl	8005670 <xTaskRemoveFromEventList>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d013      	beq.n	8004444 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800441c:	4b3f      	ldr	r3, [pc, #252]	@ (800451c <xQueueGenericSend+0x200>)
 800441e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	e00a      	b.n	8004444 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800442e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004430:	2b00      	cmp	r3, #0
 8004432:	d007      	beq.n	8004444 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004434:	4b39      	ldr	r3, [pc, #228]	@ (800451c <xQueueGenericSend+0x200>)
 8004436:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004444:	f002 f97a 	bl	800673c <vPortExitCritical>
				return pdPASS;
 8004448:	2301      	movs	r3, #1
 800444a:	e063      	b.n	8004514 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d103      	bne.n	800445a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004452:	f002 f973 	bl	800673c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004456:	2300      	movs	r3, #0
 8004458:	e05c      	b.n	8004514 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800445a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800445c:	2b00      	cmp	r3, #0
 800445e:	d106      	bne.n	800446e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004460:	f107 0314 	add.w	r3, r7, #20
 8004464:	4618      	mov	r0, r3
 8004466:	f001 f967 	bl	8005738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800446a:	2301      	movs	r3, #1
 800446c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800446e:	f002 f965 	bl	800673c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004472:	f000 fecf 	bl	8005214 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004476:	f002 f92f 	bl	80066d8 <vPortEnterCritical>
 800447a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004480:	b25b      	sxtb	r3, r3
 8004482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004486:	d103      	bne.n	8004490 <xQueueGenericSend+0x174>
 8004488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004492:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004496:	b25b      	sxtb	r3, r3
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449c:	d103      	bne.n	80044a6 <xQueueGenericSend+0x18a>
 800449e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044a6:	f002 f949 	bl	800673c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044aa:	1d3a      	adds	r2, r7, #4
 80044ac:	f107 0314 	add.w	r3, r7, #20
 80044b0:	4611      	mov	r1, r2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f001 f956 	bl	8005764 <xTaskCheckForTimeOut>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d124      	bne.n	8004508 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044c0:	f000 fbce 	bl	8004c60 <prvIsQueueFull>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d018      	beq.n	80044fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044cc:	3310      	adds	r3, #16
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	4611      	mov	r1, r2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f001 f87a 	bl	80055cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80044d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044da:	f000 fb59 	bl	8004b90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80044de:	f000 fea7 	bl	8005230 <xTaskResumeAll>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f47f af7c 	bne.w	80043e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80044ea:	4b0c      	ldr	r3, [pc, #48]	@ (800451c <xQueueGenericSend+0x200>)
 80044ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	e772      	b.n	80043e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80044fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044fe:	f000 fb47 	bl	8004b90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004502:	f000 fe95 	bl	8005230 <xTaskResumeAll>
 8004506:	e76c      	b.n	80043e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004508:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800450a:	f000 fb41 	bl	8004b90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800450e:	f000 fe8f 	bl	8005230 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004512:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004514:	4618      	mov	r0, r3
 8004516:	3738      	adds	r7, #56	@ 0x38
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	e000ed04 	.word	0xe000ed04

08004520 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b090      	sub	sp, #64	@ 0x40
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10b      	bne.n	8004550 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800454a:	bf00      	nop
 800454c:	bf00      	nop
 800454e:	e7fd      	b.n	800454c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d103      	bne.n	800455e <xQueueGenericSendFromISR+0x3e>
 8004556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <xQueueGenericSendFromISR+0x42>
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <xQueueGenericSendFromISR+0x44>
 8004562:	2300      	movs	r3, #0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10b      	bne.n	8004580 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800457a:	bf00      	nop
 800457c:	bf00      	nop
 800457e:	e7fd      	b.n	800457c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d103      	bne.n	800458e <xQueueGenericSendFromISR+0x6e>
 8004586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <xQueueGenericSendFromISR+0x72>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <xQueueGenericSendFromISR+0x74>
 8004592:	2300      	movs	r3, #0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10b      	bne.n	80045b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	623b      	str	r3, [r7, #32]
}
 80045aa:	bf00      	nop
 80045ac:	bf00      	nop
 80045ae:	e7fd      	b.n	80045ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045b0:	f002 f972 	bl	8006898 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045b4:	f3ef 8211 	mrs	r2, BASEPRI
 80045b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	61fa      	str	r2, [r7, #28]
 80045ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d8:	429a      	cmp	r2, r3
 80045da:	d302      	bcc.n	80045e2 <xQueueGenericSendFromISR+0xc2>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d12f      	bne.n	8004642 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	68b9      	ldr	r1, [r7, #8]
 80045f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80045f8:	f000 fa3a 	bl	8004a70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004604:	d112      	bne.n	800462c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460a:	2b00      	cmp	r3, #0
 800460c:	d016      	beq.n	800463c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800460e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004610:	3324      	adds	r3, #36	@ 0x24
 8004612:	4618      	mov	r0, r3
 8004614:	f001 f82c 	bl	8005670 <xTaskRemoveFromEventList>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00e      	beq.n	800463c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00b      	beq.n	800463c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	e007      	b.n	800463c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800462c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004630:	3301      	adds	r3, #1
 8004632:	b2db      	uxtb	r3, r3
 8004634:	b25a      	sxtb	r2, r3
 8004636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800463c:	2301      	movs	r3, #1
 800463e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004640:	e001      	b.n	8004646 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004642:	2300      	movs	r3, #0
 8004644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004648:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004650:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004654:	4618      	mov	r0, r3
 8004656:	3740      	adds	r7, #64	@ 0x40
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08c      	sub	sp, #48	@ 0x30
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004668:	2300      	movs	r3, #0
 800466a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <xQueueReceive+0x32>
	__asm volatile
 8004676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	623b      	str	r3, [r7, #32]
}
 8004688:	bf00      	nop
 800468a:	bf00      	nop
 800468c:	e7fd      	b.n	800468a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d103      	bne.n	800469c <xQueueReceive+0x40>
 8004694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <xQueueReceive+0x44>
 800469c:	2301      	movs	r3, #1
 800469e:	e000      	b.n	80046a2 <xQueueReceive+0x46>
 80046a0:	2300      	movs	r3, #0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10b      	bne.n	80046be <xQueueReceive+0x62>
	__asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	61fb      	str	r3, [r7, #28]
}
 80046b8:	bf00      	nop
 80046ba:	bf00      	nop
 80046bc:	e7fd      	b.n	80046ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046be:	f001 f99d 	bl	80059fc <xTaskGetSchedulerState>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d102      	bne.n	80046ce <xQueueReceive+0x72>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <xQueueReceive+0x76>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <xQueueReceive+0x78>
 80046d2:	2300      	movs	r3, #0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10b      	bne.n	80046f0 <xQueueReceive+0x94>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	61bb      	str	r3, [r7, #24]
}
 80046ea:	bf00      	nop
 80046ec:	bf00      	nop
 80046ee:	e7fd      	b.n	80046ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046f0:	f001 fff2 	bl	80066d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01f      	beq.n	8004740 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004704:	f000 fa1e 	bl	8004b44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470a:	1e5a      	subs	r2, r3, #1
 800470c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00f      	beq.n	8004738 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471a:	3310      	adds	r3, #16
 800471c:	4618      	mov	r0, r3
 800471e:	f000 ffa7 	bl	8005670 <xTaskRemoveFromEventList>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d007      	beq.n	8004738 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004728:	4b3c      	ldr	r3, [pc, #240]	@ (800481c <xQueueReceive+0x1c0>)
 800472a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004738:	f002 f800 	bl	800673c <vPortExitCritical>
				return pdPASS;
 800473c:	2301      	movs	r3, #1
 800473e:	e069      	b.n	8004814 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d103      	bne.n	800474e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004746:	f001 fff9 	bl	800673c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800474a:	2300      	movs	r3, #0
 800474c:	e062      	b.n	8004814 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800474e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004750:	2b00      	cmp	r3, #0
 8004752:	d106      	bne.n	8004762 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004754:	f107 0310 	add.w	r3, r7, #16
 8004758:	4618      	mov	r0, r3
 800475a:	f000 ffed 	bl	8005738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800475e:	2301      	movs	r3, #1
 8004760:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004762:	f001 ffeb 	bl	800673c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004766:	f000 fd55 	bl	8005214 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800476a:	f001 ffb5 	bl	80066d8 <vPortEnterCritical>
 800476e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004770:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004774:	b25b      	sxtb	r3, r3
 8004776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477a:	d103      	bne.n	8004784 <xQueueReceive+0x128>
 800477c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004786:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800478a:	b25b      	sxtb	r3, r3
 800478c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004790:	d103      	bne.n	800479a <xQueueReceive+0x13e>
 8004792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800479a:	f001 ffcf 	bl	800673c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800479e:	1d3a      	adds	r2, r7, #4
 80047a0:	f107 0310 	add.w	r3, r7, #16
 80047a4:	4611      	mov	r1, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 ffdc 	bl	8005764 <xTaskCheckForTimeOut>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d123      	bne.n	80047fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047b4:	f000 fa3e 	bl	8004c34 <prvIsQueueEmpty>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d017      	beq.n	80047ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c0:	3324      	adds	r3, #36	@ 0x24
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	4611      	mov	r1, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 ff00 	bl	80055cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047ce:	f000 f9df 	bl	8004b90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047d2:	f000 fd2d 	bl	8005230 <xTaskResumeAll>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d189      	bne.n	80046f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80047dc:	4b0f      	ldr	r3, [pc, #60]	@ (800481c <xQueueReceive+0x1c0>)
 80047de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	e780      	b.n	80046f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047f0:	f000 f9ce 	bl	8004b90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047f4:	f000 fd1c 	bl	8005230 <xTaskResumeAll>
 80047f8:	e77a      	b.n	80046f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80047fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047fc:	f000 f9c8 	bl	8004b90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004800:	f000 fd16 	bl	8005230 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004804:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004806:	f000 fa15 	bl	8004c34 <prvIsQueueEmpty>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	f43f af6f 	beq.w	80046f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004812:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004814:	4618      	mov	r0, r3
 8004816:	3730      	adds	r7, #48	@ 0x30
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	e000ed04 	.word	0xe000ed04

08004820 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08e      	sub	sp, #56	@ 0x38
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800482a:	2300      	movs	r3, #0
 800482c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004832:	2300      	movs	r3, #0
 8004834:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10b      	bne.n	8004854 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800483c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	623b      	str	r3, [r7, #32]
}
 800484e:	bf00      	nop
 8004850:	bf00      	nop
 8004852:	e7fd      	b.n	8004850 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00b      	beq.n	8004874 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	61fb      	str	r3, [r7, #28]
}
 800486e:	bf00      	nop
 8004870:	bf00      	nop
 8004872:	e7fd      	b.n	8004870 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004874:	f001 f8c2 	bl	80059fc <xTaskGetSchedulerState>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d102      	bne.n	8004884 <xQueueSemaphoreTake+0x64>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <xQueueSemaphoreTake+0x68>
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <xQueueSemaphoreTake+0x6a>
 8004888:	2300      	movs	r3, #0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10b      	bne.n	80048a6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800488e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004892:	f383 8811 	msr	BASEPRI, r3
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	61bb      	str	r3, [r7, #24]
}
 80048a0:	bf00      	nop
 80048a2:	bf00      	nop
 80048a4:	e7fd      	b.n	80048a2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048a6:	f001 ff17 	bl	80066d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80048aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ae:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80048b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d024      	beq.n	8004900 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80048b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b8:	1e5a      	subs	r2, r3, #1
 80048ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048bc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d104      	bne.n	80048d0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80048c6:	f001 fa13 	bl	8005cf0 <pvTaskIncrementMutexHeldCount>
 80048ca:	4602      	mov	r2, r0
 80048cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ce:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00f      	beq.n	80048f8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048da:	3310      	adds	r3, #16
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 fec7 	bl	8005670 <xTaskRemoveFromEventList>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d007      	beq.n	80048f8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048e8:	4b54      	ldr	r3, [pc, #336]	@ (8004a3c <xQueueSemaphoreTake+0x21c>)
 80048ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048f8:	f001 ff20 	bl	800673c <vPortExitCritical>
				return pdPASS;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e098      	b.n	8004a32 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d112      	bne.n	800492c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00b      	beq.n	8004924 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	617b      	str	r3, [r7, #20]
}
 800491e:	bf00      	nop
 8004920:	bf00      	nop
 8004922:	e7fd      	b.n	8004920 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004924:	f001 ff0a 	bl	800673c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004928:	2300      	movs	r3, #0
 800492a:	e082      	b.n	8004a32 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800492c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004932:	f107 030c 	add.w	r3, r7, #12
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fefe 	bl	8005738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800493c:	2301      	movs	r3, #1
 800493e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004940:	f001 fefc 	bl	800673c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004944:	f000 fc66 	bl	8005214 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004948:	f001 fec6 	bl	80066d8 <vPortEnterCritical>
 800494c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800494e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004952:	b25b      	sxtb	r3, r3
 8004954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004958:	d103      	bne.n	8004962 <xQueueSemaphoreTake+0x142>
 800495a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004964:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004968:	b25b      	sxtb	r3, r3
 800496a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496e:	d103      	bne.n	8004978 <xQueueSemaphoreTake+0x158>
 8004970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004978:	f001 fee0 	bl	800673c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800497c:	463a      	mov	r2, r7
 800497e:	f107 030c 	add.w	r3, r7, #12
 8004982:	4611      	mov	r1, r2
 8004984:	4618      	mov	r0, r3
 8004986:	f000 feed 	bl	8005764 <xTaskCheckForTimeOut>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d132      	bne.n	80049f6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004990:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004992:	f000 f94f 	bl	8004c34 <prvIsQueueEmpty>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d026      	beq.n	80049ea <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800499c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d109      	bne.n	80049b8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80049a4:	f001 fe98 	bl	80066d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f001 f843 	bl	8005a38 <xTaskPriorityInherit>
 80049b2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80049b4:	f001 fec2 	bl	800673c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ba:	3324      	adds	r3, #36	@ 0x24
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	4611      	mov	r1, r2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fe03 	bl	80055cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049c8:	f000 f8e2 	bl	8004b90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049cc:	f000 fc30 	bl	8005230 <xTaskResumeAll>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f47f af67 	bne.w	80048a6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80049d8:	4b18      	ldr	r3, [pc, #96]	@ (8004a3c <xQueueSemaphoreTake+0x21c>)
 80049da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	e75d      	b.n	80048a6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80049ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049ec:	f000 f8d0 	bl	8004b90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049f0:	f000 fc1e 	bl	8005230 <xTaskResumeAll>
 80049f4:	e757      	b.n	80048a6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80049f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049f8:	f000 f8ca 	bl	8004b90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049fc:	f000 fc18 	bl	8005230 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004a02:	f000 f917 	bl	8004c34 <prvIsQueueEmpty>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f43f af4c 	beq.w	80048a6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00d      	beq.n	8004a30 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004a14:	f001 fe60 	bl	80066d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004a18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004a1a:	f000 f811 	bl	8004a40 <prvGetDisinheritPriorityAfterTimeout>
 8004a1e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a26:	4618      	mov	r0, r3
 8004a28:	f001 f8de 	bl	8005be8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004a2c:	f001 fe86 	bl	800673c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3738      	adds	r7, #56	@ 0x38
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	e000ed04 	.word	0xe000ed04

08004a40 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d006      	beq.n	8004a5e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e001      	b.n	8004a62 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004a62:	68fb      	ldr	r3, [r7, #12]
	}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10d      	bne.n	8004aaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d14d      	bne.n	8004b32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f001 f834 	bl	8005b08 <xTaskPriorityDisinherit>
 8004aa0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	609a      	str	r2, [r3, #8]
 8004aa8:	e043      	b.n	8004b32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d119      	bne.n	8004ae4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6858      	ldr	r0, [r3, #4]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab8:	461a      	mov	r2, r3
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	f002 f9ce 	bl	8006e5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac8:	441a      	add	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d32b      	bcc.n	8004b32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	605a      	str	r2, [r3, #4]
 8004ae2:	e026      	b.n	8004b32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	68d8      	ldr	r0, [r3, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aec:	461a      	mov	r2, r3
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	f002 f9b4 	bl	8006e5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afc:	425b      	negs	r3, r3
 8004afe:	441a      	add	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d207      	bcs.n	8004b20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b18:	425b      	negs	r3, r3
 8004b1a:	441a      	add	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d105      	bne.n	8004b32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004b3a:	697b      	ldr	r3, [r7, #20]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d018      	beq.n	8004b88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5e:	441a      	add	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d303      	bcc.n	8004b78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68d9      	ldr	r1, [r3, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b80:	461a      	mov	r2, r3
 8004b82:	6838      	ldr	r0, [r7, #0]
 8004b84:	f002 f96a 	bl	8006e5c <memcpy>
	}
}
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b98:	f001 fd9e 	bl	80066d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ba2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ba4:	e011      	b.n	8004bca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d012      	beq.n	8004bd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3324      	adds	r3, #36	@ 0x24
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fd5c 	bl	8005670 <xTaskRemoveFromEventList>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004bbe:	f000 fe35 	bl	800582c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	dce9      	bgt.n	8004ba6 <prvUnlockQueue+0x16>
 8004bd2:	e000      	b.n	8004bd6 <prvUnlockQueue+0x46>
					break;
 8004bd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	22ff      	movs	r2, #255	@ 0xff
 8004bda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004bde:	f001 fdad 	bl	800673c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004be2:	f001 fd79 	bl	80066d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bee:	e011      	b.n	8004c14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d012      	beq.n	8004c1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3310      	adds	r3, #16
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fd37 	bl	8005670 <xTaskRemoveFromEventList>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c08:	f000 fe10 	bl	800582c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c0c:	7bbb      	ldrb	r3, [r7, #14]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	dce9      	bgt.n	8004bf0 <prvUnlockQueue+0x60>
 8004c1c:	e000      	b.n	8004c20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	22ff      	movs	r2, #255	@ 0xff
 8004c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004c28:	f001 fd88 	bl	800673c <vPortExitCritical>
}
 8004c2c:	bf00      	nop
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c3c:	f001 fd4c 	bl	80066d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d102      	bne.n	8004c4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	e001      	b.n	8004c52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c52:	f001 fd73 	bl	800673c <vPortExitCritical>

	return xReturn;
 8004c56:	68fb      	ldr	r3, [r7, #12]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c68:	f001 fd36 	bl	80066d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d102      	bne.n	8004c7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	e001      	b.n	8004c82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c82:	f001 fd5b 	bl	800673c <vPortExitCritical>

	return xReturn;
 8004c86:	68fb      	ldr	r3, [r7, #12]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	e014      	b.n	8004cca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ca0:	4a0f      	ldr	r2, [pc, #60]	@ (8004ce0 <vQueueAddToRegistry+0x50>)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10b      	bne.n	8004cc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004cac:	490c      	ldr	r1, [pc, #48]	@ (8004ce0 <vQueueAddToRegistry+0x50>)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce0 <vQueueAddToRegistry+0x50>)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004cc2:	e006      	b.n	8004cd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b07      	cmp	r3, #7
 8004cce:	d9e7      	bls.n	8004ca0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004cd0:	bf00      	nop
 8004cd2:	bf00      	nop
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	20000ccc 	.word	0x20000ccc

08004ce4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004cf4:	f001 fcf0 	bl	80066d8 <vPortEnterCritical>
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cfe:	b25b      	sxtb	r3, r3
 8004d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d04:	d103      	bne.n	8004d0e <vQueueWaitForMessageRestricted+0x2a>
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d14:	b25b      	sxtb	r3, r3
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d103      	bne.n	8004d24 <vQueueWaitForMessageRestricted+0x40>
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d24:	f001 fd0a 	bl	800673c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d106      	bne.n	8004d3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	3324      	adds	r3, #36	@ 0x24
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	68b9      	ldr	r1, [r7, #8]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 fc6d 	bl	8005618 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d3e:	6978      	ldr	r0, [r7, #20]
 8004d40:	f7ff ff26 	bl	8004b90 <prvUnlockQueue>
	}
 8004d44:	bf00      	nop
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08e      	sub	sp, #56	@ 0x38
 8004d50:	af04      	add	r7, sp, #16
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10b      	bne.n	8004d78 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	623b      	str	r3, [r7, #32]
}
 8004d72:	bf00      	nop
 8004d74:	bf00      	nop
 8004d76:	e7fd      	b.n	8004d74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10b      	bne.n	8004d96 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	61fb      	str	r3, [r7, #28]
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	e7fd      	b.n	8004d92 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d96:	23a8      	movs	r3, #168	@ 0xa8
 8004d98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	2ba8      	cmp	r3, #168	@ 0xa8
 8004d9e:	d00b      	beq.n	8004db8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	61bb      	str	r3, [r7, #24]
}
 8004db2:	bf00      	nop
 8004db4:	bf00      	nop
 8004db6:	e7fd      	b.n	8004db4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004db8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d01e      	beq.n	8004dfe <xTaskCreateStatic+0xb2>
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d01b      	beq.n	8004dfe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004dce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004dd8:	2300      	movs	r3, #0
 8004dda:	9303      	str	r3, [sp, #12]
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dde:	9302      	str	r3, [sp, #8]
 8004de0:	f107 0314 	add.w	r3, r7, #20
 8004de4:	9301      	str	r3, [sp, #4]
 8004de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	68b9      	ldr	r1, [r7, #8]
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 f851 	bl	8004e98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004df6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004df8:	f000 f8f6 	bl	8004fe8 <prvAddNewTaskToReadyList>
 8004dfc:	e001      	b.n	8004e02 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e02:	697b      	ldr	r3, [r7, #20]
	}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3728      	adds	r7, #40	@ 0x28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08c      	sub	sp, #48	@ 0x30
 8004e10:	af04      	add	r7, sp, #16
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e1c:	88fb      	ldrh	r3, [r7, #6]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f001 fd7b 	bl	800691c <pvPortMalloc>
 8004e26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00e      	beq.n	8004e4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e2e:	20a8      	movs	r0, #168	@ 0xa8
 8004e30:	f001 fd74 	bl	800691c <pvPortMalloc>
 8004e34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e42:	e005      	b.n	8004e50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e44:	6978      	ldr	r0, [r7, #20]
 8004e46:	f001 fe37 	bl	8006ab8 <vPortFree>
 8004e4a:	e001      	b.n	8004e50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d017      	beq.n	8004e86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e5e:	88fa      	ldrh	r2, [r7, #6]
 8004e60:	2300      	movs	r3, #0
 8004e62:	9303      	str	r3, [sp, #12]
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	9302      	str	r3, [sp, #8]
 8004e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e6a:	9301      	str	r3, [sp, #4]
 8004e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f80f 	bl	8004e98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e7a:	69f8      	ldr	r0, [r7, #28]
 8004e7c:	f000 f8b4 	bl	8004fe8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e80:	2301      	movs	r3, #1
 8004e82:	61bb      	str	r3, [r7, #24]
 8004e84:	e002      	b.n	8004e8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e86:	f04f 33ff 	mov.w	r3, #4294967295
 8004e8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e8c:	69bb      	ldr	r3, [r7, #24]
	}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3720      	adds	r7, #32
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
	...

08004e98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	461a      	mov	r2, r3
 8004eb0:	21a5      	movs	r1, #165	@ 0xa5
 8004eb2:	f001 ff41 	bl	8006d38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	f023 0307 	bic.w	r3, r3, #7
 8004ece:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00b      	beq.n	8004ef2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	617b      	str	r3, [r7, #20]
}
 8004eec:	bf00      	nop
 8004eee:	bf00      	nop
 8004ef0:	e7fd      	b.n	8004eee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01f      	beq.n	8004f38 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61fb      	str	r3, [r7, #28]
 8004efc:	e012      	b.n	8004f24 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	4413      	add	r3, r2
 8004f04:	7819      	ldrb	r1, [r3, #0]
 8004f06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3334      	adds	r3, #52	@ 0x34
 8004f0e:	460a      	mov	r2, r1
 8004f10:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	4413      	add	r3, r2
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d006      	beq.n	8004f2c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	3301      	adds	r3, #1
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	2b0f      	cmp	r3, #15
 8004f28:	d9e9      	bls.n	8004efe <prvInitialiseNewTask+0x66>
 8004f2a:	e000      	b.n	8004f2e <prvInitialiseNewTask+0x96>
			{
				break;
 8004f2c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f36:	e003      	b.n	8004f40 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f42:	2b37      	cmp	r3, #55	@ 0x37
 8004f44:	d901      	bls.n	8004f4a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f46:	2337      	movs	r3, #55	@ 0x37
 8004f48:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f54:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f58:	2200      	movs	r2, #0
 8004f5a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fe ffcf 	bl	8003f04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f68:	3318      	adds	r3, #24
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fe ffca 	bl	8003f04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f74:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f78:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f84:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f98:	3354      	adds	r3, #84	@ 0x54
 8004f9a:	224c      	movs	r2, #76	@ 0x4c
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f001 feca 	bl	8006d38 <memset>
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa6:	4a0d      	ldr	r2, [pc, #52]	@ (8004fdc <prvInitialiseNewTask+0x144>)
 8004fa8:	659a      	str	r2, [r3, #88]	@ 0x58
 8004faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fac:	4a0c      	ldr	r2, [pc, #48]	@ (8004fe0 <prvInitialiseNewTask+0x148>)
 8004fae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8004fe4 <prvInitialiseNewTask+0x14c>)
 8004fb4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	68f9      	ldr	r1, [r7, #12]
 8004fba:	69b8      	ldr	r0, [r7, #24]
 8004fbc:	f001 fa5a 	bl	8006474 <pxPortInitialiseStack>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fd2:	bf00      	nop
 8004fd4:	3720      	adds	r7, #32
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20004f60 	.word	0x20004f60
 8004fe0:	20004fc8 	.word	0x20004fc8
 8004fe4:	20005030 	.word	0x20005030

08004fe8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ff0:	f001 fb72 	bl	80066d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ff4:	4b2d      	ldr	r3, [pc, #180]	@ (80050ac <prvAddNewTaskToReadyList+0xc4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	4a2c      	ldr	r2, [pc, #176]	@ (80050ac <prvAddNewTaskToReadyList+0xc4>)
 8004ffc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80050b0 <prvAddNewTaskToReadyList+0xc8>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d109      	bne.n	800501a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005006:	4a2a      	ldr	r2, [pc, #168]	@ (80050b0 <prvAddNewTaskToReadyList+0xc8>)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800500c:	4b27      	ldr	r3, [pc, #156]	@ (80050ac <prvAddNewTaskToReadyList+0xc4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d110      	bne.n	8005036 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005014:	f000 fc2e 	bl	8005874 <prvInitialiseTaskLists>
 8005018:	e00d      	b.n	8005036 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800501a:	4b26      	ldr	r3, [pc, #152]	@ (80050b4 <prvAddNewTaskToReadyList+0xcc>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d109      	bne.n	8005036 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005022:	4b23      	ldr	r3, [pc, #140]	@ (80050b0 <prvAddNewTaskToReadyList+0xc8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502c:	429a      	cmp	r2, r3
 800502e:	d802      	bhi.n	8005036 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005030:	4a1f      	ldr	r2, [pc, #124]	@ (80050b0 <prvAddNewTaskToReadyList+0xc8>)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005036:	4b20      	ldr	r3, [pc, #128]	@ (80050b8 <prvAddNewTaskToReadyList+0xd0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3301      	adds	r3, #1
 800503c:	4a1e      	ldr	r2, [pc, #120]	@ (80050b8 <prvAddNewTaskToReadyList+0xd0>)
 800503e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005040:	4b1d      	ldr	r3, [pc, #116]	@ (80050b8 <prvAddNewTaskToReadyList+0xd0>)
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800504c:	4b1b      	ldr	r3, [pc, #108]	@ (80050bc <prvAddNewTaskToReadyList+0xd4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d903      	bls.n	800505c <prvAddNewTaskToReadyList+0x74>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005058:	4a18      	ldr	r2, [pc, #96]	@ (80050bc <prvAddNewTaskToReadyList+0xd4>)
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005060:	4613      	mov	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4a15      	ldr	r2, [pc, #84]	@ (80050c0 <prvAddNewTaskToReadyList+0xd8>)
 800506a:	441a      	add	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3304      	adds	r3, #4
 8005070:	4619      	mov	r1, r3
 8005072:	4610      	mov	r0, r2
 8005074:	f7fe ff53 	bl	8003f1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005078:	f001 fb60 	bl	800673c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800507c:	4b0d      	ldr	r3, [pc, #52]	@ (80050b4 <prvAddNewTaskToReadyList+0xcc>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00e      	beq.n	80050a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005084:	4b0a      	ldr	r3, [pc, #40]	@ (80050b0 <prvAddNewTaskToReadyList+0xc8>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508e:	429a      	cmp	r2, r3
 8005090:	d207      	bcs.n	80050a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005092:	4b0c      	ldr	r3, [pc, #48]	@ (80050c4 <prvAddNewTaskToReadyList+0xdc>)
 8005094:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	200011e0 	.word	0x200011e0
 80050b0:	20000d0c 	.word	0x20000d0c
 80050b4:	200011ec 	.word	0x200011ec
 80050b8:	200011fc 	.word	0x200011fc
 80050bc:	200011e8 	.word	0x200011e8
 80050c0:	20000d10 	.word	0x20000d10
 80050c4:	e000ed04 	.word	0xe000ed04

080050c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d018      	beq.n	800510c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050da:	4b14      	ldr	r3, [pc, #80]	@ (800512c <vTaskDelay+0x64>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00b      	beq.n	80050fa <vTaskDelay+0x32>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	60bb      	str	r3, [r7, #8]
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop
 80050f8:	e7fd      	b.n	80050f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80050fa:	f000 f88b 	bl	8005214 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050fe:	2100      	movs	r1, #0
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 fe09 	bl	8005d18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005106:	f000 f893 	bl	8005230 <xTaskResumeAll>
 800510a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d107      	bne.n	8005122 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005112:	4b07      	ldr	r3, [pc, #28]	@ (8005130 <vTaskDelay+0x68>)
 8005114:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005122:	bf00      	nop
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20001208 	.word	0x20001208
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08a      	sub	sp, #40	@ 0x28
 8005138:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800513a:	2300      	movs	r3, #0
 800513c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800513e:	2300      	movs	r3, #0
 8005140:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005142:	463a      	mov	r2, r7
 8005144:	1d39      	adds	r1, r7, #4
 8005146:	f107 0308 	add.w	r3, r7, #8
 800514a:	4618      	mov	r0, r3
 800514c:	f7fe fe86 	bl	8003e5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005150:	6839      	ldr	r1, [r7, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	9202      	str	r2, [sp, #8]
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	2300      	movs	r3, #0
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	2300      	movs	r3, #0
 8005160:	460a      	mov	r2, r1
 8005162:	4924      	ldr	r1, [pc, #144]	@ (80051f4 <vTaskStartScheduler+0xc0>)
 8005164:	4824      	ldr	r0, [pc, #144]	@ (80051f8 <vTaskStartScheduler+0xc4>)
 8005166:	f7ff fdf1 	bl	8004d4c <xTaskCreateStatic>
 800516a:	4603      	mov	r3, r0
 800516c:	4a23      	ldr	r2, [pc, #140]	@ (80051fc <vTaskStartScheduler+0xc8>)
 800516e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005170:	4b22      	ldr	r3, [pc, #136]	@ (80051fc <vTaskStartScheduler+0xc8>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005178:	2301      	movs	r3, #1
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	e001      	b.n	8005182 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d102      	bne.n	800518e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005188:	f000 fe1a 	bl	8005dc0 <xTimerCreateTimerTask>
 800518c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d11b      	bne.n	80051cc <vTaskStartScheduler+0x98>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	613b      	str	r3, [r7, #16]
}
 80051a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051a8:	4b15      	ldr	r3, [pc, #84]	@ (8005200 <vTaskStartScheduler+0xcc>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3354      	adds	r3, #84	@ 0x54
 80051ae:	4a15      	ldr	r2, [pc, #84]	@ (8005204 <vTaskStartScheduler+0xd0>)
 80051b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051b2:	4b15      	ldr	r3, [pc, #84]	@ (8005208 <vTaskStartScheduler+0xd4>)
 80051b4:	f04f 32ff 	mov.w	r2, #4294967295
 80051b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051ba:	4b14      	ldr	r3, [pc, #80]	@ (800520c <vTaskStartScheduler+0xd8>)
 80051bc:	2201      	movs	r2, #1
 80051be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80051c0:	4b13      	ldr	r3, [pc, #76]	@ (8005210 <vTaskStartScheduler+0xdc>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051c6:	f001 f9e3 	bl	8006590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051ca:	e00f      	b.n	80051ec <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d2:	d10b      	bne.n	80051ec <vTaskStartScheduler+0xb8>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	60fb      	str	r3, [r7, #12]
}
 80051e6:	bf00      	nop
 80051e8:	bf00      	nop
 80051ea:	e7fd      	b.n	80051e8 <vTaskStartScheduler+0xb4>
}
 80051ec:	bf00      	nop
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	08007758 	.word	0x08007758
 80051f8:	08005845 	.word	0x08005845
 80051fc:	20001204 	.word	0x20001204
 8005200:	20000d0c 	.word	0x20000d0c
 8005204:	2000002c 	.word	0x2000002c
 8005208:	20001200 	.word	0x20001200
 800520c:	200011ec 	.word	0x200011ec
 8005210:	200011e4 	.word	0x200011e4

08005214 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005218:	4b04      	ldr	r3, [pc, #16]	@ (800522c <vTaskSuspendAll+0x18>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3301      	adds	r3, #1
 800521e:	4a03      	ldr	r2, [pc, #12]	@ (800522c <vTaskSuspendAll+0x18>)
 8005220:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005222:	bf00      	nop
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	20001208 	.word	0x20001208

08005230 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800523a:	2300      	movs	r3, #0
 800523c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800523e:	4b42      	ldr	r3, [pc, #264]	@ (8005348 <xTaskResumeAll+0x118>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10b      	bne.n	800525e <xTaskResumeAll+0x2e>
	__asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	603b      	str	r3, [r7, #0]
}
 8005258:	bf00      	nop
 800525a:	bf00      	nop
 800525c:	e7fd      	b.n	800525a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800525e:	f001 fa3b 	bl	80066d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005262:	4b39      	ldr	r3, [pc, #228]	@ (8005348 <xTaskResumeAll+0x118>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3b01      	subs	r3, #1
 8005268:	4a37      	ldr	r2, [pc, #220]	@ (8005348 <xTaskResumeAll+0x118>)
 800526a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800526c:	4b36      	ldr	r3, [pc, #216]	@ (8005348 <xTaskResumeAll+0x118>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d162      	bne.n	800533a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005274:	4b35      	ldr	r3, [pc, #212]	@ (800534c <xTaskResumeAll+0x11c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d05e      	beq.n	800533a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800527c:	e02f      	b.n	80052de <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800527e:	4b34      	ldr	r3, [pc, #208]	@ (8005350 <xTaskResumeAll+0x120>)
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	3318      	adds	r3, #24
 800528a:	4618      	mov	r0, r3
 800528c:	f7fe fea4 	bl	8003fd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	3304      	adds	r3, #4
 8005294:	4618      	mov	r0, r3
 8005296:	f7fe fe9f 	bl	8003fd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800529e:	4b2d      	ldr	r3, [pc, #180]	@ (8005354 <xTaskResumeAll+0x124>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d903      	bls.n	80052ae <xTaskResumeAll+0x7e>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005354 <xTaskResumeAll+0x124>)
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052b2:	4613      	mov	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4a27      	ldr	r2, [pc, #156]	@ (8005358 <xTaskResumeAll+0x128>)
 80052bc:	441a      	add	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	3304      	adds	r3, #4
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f7fe fe2a 	bl	8003f1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ce:	4b23      	ldr	r3, [pc, #140]	@ (800535c <xTaskResumeAll+0x12c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d302      	bcc.n	80052de <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80052d8:	4b21      	ldr	r3, [pc, #132]	@ (8005360 <xTaskResumeAll+0x130>)
 80052da:	2201      	movs	r2, #1
 80052dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052de:	4b1c      	ldr	r3, [pc, #112]	@ (8005350 <xTaskResumeAll+0x120>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1cb      	bne.n	800527e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052ec:	f000 fb66 	bl	80059bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80052f0:	4b1c      	ldr	r3, [pc, #112]	@ (8005364 <xTaskResumeAll+0x134>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d010      	beq.n	800531e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052fc:	f000 f846 	bl	800538c <xTaskIncrementTick>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005306:	4b16      	ldr	r3, [pc, #88]	@ (8005360 <xTaskResumeAll+0x130>)
 8005308:	2201      	movs	r2, #1
 800530a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3b01      	subs	r3, #1
 8005310:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f1      	bne.n	80052fc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005318:	4b12      	ldr	r3, [pc, #72]	@ (8005364 <xTaskResumeAll+0x134>)
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800531e:	4b10      	ldr	r3, [pc, #64]	@ (8005360 <xTaskResumeAll+0x130>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005326:	2301      	movs	r3, #1
 8005328:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800532a:	4b0f      	ldr	r3, [pc, #60]	@ (8005368 <xTaskResumeAll+0x138>)
 800532c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800533a:	f001 f9ff 	bl	800673c <vPortExitCritical>

	return xAlreadyYielded;
 800533e:	68bb      	ldr	r3, [r7, #8]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	20001208 	.word	0x20001208
 800534c:	200011e0 	.word	0x200011e0
 8005350:	200011a0 	.word	0x200011a0
 8005354:	200011e8 	.word	0x200011e8
 8005358:	20000d10 	.word	0x20000d10
 800535c:	20000d0c 	.word	0x20000d0c
 8005360:	200011f4 	.word	0x200011f4
 8005364:	200011f0 	.word	0x200011f0
 8005368:	e000ed04 	.word	0xe000ed04

0800536c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005372:	4b05      	ldr	r3, [pc, #20]	@ (8005388 <xTaskGetTickCount+0x1c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005378:	687b      	ldr	r3, [r7, #4]
}
 800537a:	4618      	mov	r0, r3
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	200011e4 	.word	0x200011e4

0800538c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005392:	2300      	movs	r3, #0
 8005394:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005396:	4b4f      	ldr	r3, [pc, #316]	@ (80054d4 <xTaskIncrementTick+0x148>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	f040 8090 	bne.w	80054c0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053a0:	4b4d      	ldr	r3, [pc, #308]	@ (80054d8 <xTaskIncrementTick+0x14c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3301      	adds	r3, #1
 80053a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053a8:	4a4b      	ldr	r2, [pc, #300]	@ (80054d8 <xTaskIncrementTick+0x14c>)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d121      	bne.n	80053f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80053b4:	4b49      	ldr	r3, [pc, #292]	@ (80054dc <xTaskIncrementTick+0x150>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00b      	beq.n	80053d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	603b      	str	r3, [r7, #0]
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	e7fd      	b.n	80053d2 <xTaskIncrementTick+0x46>
 80053d6:	4b41      	ldr	r3, [pc, #260]	@ (80054dc <xTaskIncrementTick+0x150>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	4b40      	ldr	r3, [pc, #256]	@ (80054e0 <xTaskIncrementTick+0x154>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a3e      	ldr	r2, [pc, #248]	@ (80054dc <xTaskIncrementTick+0x150>)
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	4a3e      	ldr	r2, [pc, #248]	@ (80054e0 <xTaskIncrementTick+0x154>)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	4b3e      	ldr	r3, [pc, #248]	@ (80054e4 <xTaskIncrementTick+0x158>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3301      	adds	r3, #1
 80053f0:	4a3c      	ldr	r2, [pc, #240]	@ (80054e4 <xTaskIncrementTick+0x158>)
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	f000 fae2 	bl	80059bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053f8:	4b3b      	ldr	r3, [pc, #236]	@ (80054e8 <xTaskIncrementTick+0x15c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d349      	bcc.n	8005496 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005402:	4b36      	ldr	r3, [pc, #216]	@ (80054dc <xTaskIncrementTick+0x150>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d104      	bne.n	8005416 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800540c:	4b36      	ldr	r3, [pc, #216]	@ (80054e8 <xTaskIncrementTick+0x15c>)
 800540e:	f04f 32ff 	mov.w	r2, #4294967295
 8005412:	601a      	str	r2, [r3, #0]
					break;
 8005414:	e03f      	b.n	8005496 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005416:	4b31      	ldr	r3, [pc, #196]	@ (80054dc <xTaskIncrementTick+0x150>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	429a      	cmp	r2, r3
 800542c:	d203      	bcs.n	8005436 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800542e:	4a2e      	ldr	r2, [pc, #184]	@ (80054e8 <xTaskIncrementTick+0x15c>)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005434:	e02f      	b.n	8005496 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	3304      	adds	r3, #4
 800543a:	4618      	mov	r0, r3
 800543c:	f7fe fdcc 	bl	8003fd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005444:	2b00      	cmp	r3, #0
 8005446:	d004      	beq.n	8005452 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	3318      	adds	r3, #24
 800544c:	4618      	mov	r0, r3
 800544e:	f7fe fdc3 	bl	8003fd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005456:	4b25      	ldr	r3, [pc, #148]	@ (80054ec <xTaskIncrementTick+0x160>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d903      	bls.n	8005466 <xTaskIncrementTick+0xda>
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005462:	4a22      	ldr	r2, [pc, #136]	@ (80054ec <xTaskIncrementTick+0x160>)
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800546a:	4613      	mov	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4a1f      	ldr	r2, [pc, #124]	@ (80054f0 <xTaskIncrementTick+0x164>)
 8005474:	441a      	add	r2, r3
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	3304      	adds	r3, #4
 800547a:	4619      	mov	r1, r3
 800547c:	4610      	mov	r0, r2
 800547e:	f7fe fd4e 	bl	8003f1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005486:	4b1b      	ldr	r3, [pc, #108]	@ (80054f4 <xTaskIncrementTick+0x168>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548c:	429a      	cmp	r2, r3
 800548e:	d3b8      	bcc.n	8005402 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005490:	2301      	movs	r3, #1
 8005492:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005494:	e7b5      	b.n	8005402 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005496:	4b17      	ldr	r3, [pc, #92]	@ (80054f4 <xTaskIncrementTick+0x168>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800549c:	4914      	ldr	r1, [pc, #80]	@ (80054f0 <xTaskIncrementTick+0x164>)
 800549e:	4613      	mov	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	440b      	add	r3, r1
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d901      	bls.n	80054b2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80054ae:	2301      	movs	r3, #1
 80054b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80054b2:	4b11      	ldr	r3, [pc, #68]	@ (80054f8 <xTaskIncrementTick+0x16c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80054ba:	2301      	movs	r3, #1
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	e004      	b.n	80054ca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80054c0:	4b0e      	ldr	r3, [pc, #56]	@ (80054fc <xTaskIncrementTick+0x170>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3301      	adds	r3, #1
 80054c6:	4a0d      	ldr	r2, [pc, #52]	@ (80054fc <xTaskIncrementTick+0x170>)
 80054c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80054ca:	697b      	ldr	r3, [r7, #20]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	20001208 	.word	0x20001208
 80054d8:	200011e4 	.word	0x200011e4
 80054dc:	20001198 	.word	0x20001198
 80054e0:	2000119c 	.word	0x2000119c
 80054e4:	200011f8 	.word	0x200011f8
 80054e8:	20001200 	.word	0x20001200
 80054ec:	200011e8 	.word	0x200011e8
 80054f0:	20000d10 	.word	0x20000d10
 80054f4:	20000d0c 	.word	0x20000d0c
 80054f8:	200011f4 	.word	0x200011f4
 80054fc:	200011f0 	.word	0x200011f0

08005500 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005506:	4b2b      	ldr	r3, [pc, #172]	@ (80055b4 <vTaskSwitchContext+0xb4>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800550e:	4b2a      	ldr	r3, [pc, #168]	@ (80055b8 <vTaskSwitchContext+0xb8>)
 8005510:	2201      	movs	r2, #1
 8005512:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005514:	e047      	b.n	80055a6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005516:	4b28      	ldr	r3, [pc, #160]	@ (80055b8 <vTaskSwitchContext+0xb8>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800551c:	4b27      	ldr	r3, [pc, #156]	@ (80055bc <vTaskSwitchContext+0xbc>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	e011      	b.n	8005548 <vTaskSwitchContext+0x48>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10b      	bne.n	8005542 <vTaskSwitchContext+0x42>
	__asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	607b      	str	r3, [r7, #4]
}
 800553c:	bf00      	nop
 800553e:	bf00      	nop
 8005540:	e7fd      	b.n	800553e <vTaskSwitchContext+0x3e>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	3b01      	subs	r3, #1
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	491d      	ldr	r1, [pc, #116]	@ (80055c0 <vTaskSwitchContext+0xc0>)
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d0e3      	beq.n	8005524 <vTaskSwitchContext+0x24>
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	4613      	mov	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4a16      	ldr	r2, [pc, #88]	@ (80055c0 <vTaskSwitchContext+0xc0>)
 8005568:	4413      	add	r3, r2
 800556a:	60bb      	str	r3, [r7, #8]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	605a      	str	r2, [r3, #4]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	3308      	adds	r3, #8
 800557e:	429a      	cmp	r2, r3
 8005580:	d104      	bne.n	800558c <vTaskSwitchContext+0x8c>
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	605a      	str	r2, [r3, #4]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	4a0c      	ldr	r2, [pc, #48]	@ (80055c4 <vTaskSwitchContext+0xc4>)
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	4a09      	ldr	r2, [pc, #36]	@ (80055bc <vTaskSwitchContext+0xbc>)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800559c:	4b09      	ldr	r3, [pc, #36]	@ (80055c4 <vTaskSwitchContext+0xc4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3354      	adds	r3, #84	@ 0x54
 80055a2:	4a09      	ldr	r2, [pc, #36]	@ (80055c8 <vTaskSwitchContext+0xc8>)
 80055a4:	6013      	str	r3, [r2, #0]
}
 80055a6:	bf00      	nop
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	20001208 	.word	0x20001208
 80055b8:	200011f4 	.word	0x200011f4
 80055bc:	200011e8 	.word	0x200011e8
 80055c0:	20000d10 	.word	0x20000d10
 80055c4:	20000d0c 	.word	0x20000d0c
 80055c8:	2000002c 	.word	0x2000002c

080055cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10b      	bne.n	80055f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	60fb      	str	r3, [r7, #12]
}
 80055ee:	bf00      	nop
 80055f0:	bf00      	nop
 80055f2:	e7fd      	b.n	80055f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055f4:	4b07      	ldr	r3, [pc, #28]	@ (8005614 <vTaskPlaceOnEventList+0x48>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3318      	adds	r3, #24
 80055fa:	4619      	mov	r1, r3
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7fe fcb2 	bl	8003f66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005602:	2101      	movs	r1, #1
 8005604:	6838      	ldr	r0, [r7, #0]
 8005606:	f000 fb87 	bl	8005d18 <prvAddCurrentTaskToDelayedList>
}
 800560a:	bf00      	nop
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	20000d0c 	.word	0x20000d0c

08005618 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10b      	bne.n	8005642 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	617b      	str	r3, [r7, #20]
}
 800563c:	bf00      	nop
 800563e:	bf00      	nop
 8005640:	e7fd      	b.n	800563e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005642:	4b0a      	ldr	r3, [pc, #40]	@ (800566c <vTaskPlaceOnEventListRestricted+0x54>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3318      	adds	r3, #24
 8005648:	4619      	mov	r1, r3
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f7fe fc67 	bl	8003f1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005656:	f04f 33ff 	mov.w	r3, #4294967295
 800565a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	68b8      	ldr	r0, [r7, #8]
 8005660:	f000 fb5a 	bl	8005d18 <prvAddCurrentTaskToDelayedList>
	}
 8005664:	bf00      	nop
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	20000d0c 	.word	0x20000d0c

08005670 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10b      	bne.n	800569e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	60fb      	str	r3, [r7, #12]
}
 8005698:	bf00      	nop
 800569a:	bf00      	nop
 800569c:	e7fd      	b.n	800569a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	3318      	adds	r3, #24
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fe fc98 	bl	8003fd8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005720 <xTaskRemoveFromEventList+0xb0>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d11d      	bne.n	80056ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	3304      	adds	r3, #4
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7fe fc8f 	bl	8003fd8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056be:	4b19      	ldr	r3, [pc, #100]	@ (8005724 <xTaskRemoveFromEventList+0xb4>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d903      	bls.n	80056ce <xTaskRemoveFromEventList+0x5e>
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ca:	4a16      	ldr	r2, [pc, #88]	@ (8005724 <xTaskRemoveFromEventList+0xb4>)
 80056cc:	6013      	str	r3, [r2, #0]
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4a13      	ldr	r2, [pc, #76]	@ (8005728 <xTaskRemoveFromEventList+0xb8>)
 80056dc:	441a      	add	r2, r3
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	3304      	adds	r3, #4
 80056e2:	4619      	mov	r1, r3
 80056e4:	4610      	mov	r0, r2
 80056e6:	f7fe fc1a 	bl	8003f1e <vListInsertEnd>
 80056ea:	e005      	b.n	80056f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	3318      	adds	r3, #24
 80056f0:	4619      	mov	r1, r3
 80056f2:	480e      	ldr	r0, [pc, #56]	@ (800572c <xTaskRemoveFromEventList+0xbc>)
 80056f4:	f7fe fc13 	bl	8003f1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005730 <xTaskRemoveFromEventList+0xc0>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005702:	429a      	cmp	r2, r3
 8005704:	d905      	bls.n	8005712 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005706:	2301      	movs	r3, #1
 8005708:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800570a:	4b0a      	ldr	r3, [pc, #40]	@ (8005734 <xTaskRemoveFromEventList+0xc4>)
 800570c:	2201      	movs	r2, #1
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	e001      	b.n	8005716 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005716:	697b      	ldr	r3, [r7, #20]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	20001208 	.word	0x20001208
 8005724:	200011e8 	.word	0x200011e8
 8005728:	20000d10 	.word	0x20000d10
 800572c:	200011a0 	.word	0x200011a0
 8005730:	20000d0c 	.word	0x20000d0c
 8005734:	200011f4 	.word	0x200011f4

08005738 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005740:	4b06      	ldr	r3, [pc, #24]	@ (800575c <vTaskInternalSetTimeOutState+0x24>)
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005748:	4b05      	ldr	r3, [pc, #20]	@ (8005760 <vTaskInternalSetTimeOutState+0x28>)
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	605a      	str	r2, [r3, #4]
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	200011f8 	.word	0x200011f8
 8005760:	200011e4 	.word	0x200011e4

08005764 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10b      	bne.n	800578c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	613b      	str	r3, [r7, #16]
}
 8005786:	bf00      	nop
 8005788:	bf00      	nop
 800578a:	e7fd      	b.n	8005788 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10b      	bne.n	80057aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	60fb      	str	r3, [r7, #12]
}
 80057a4:	bf00      	nop
 80057a6:	bf00      	nop
 80057a8:	e7fd      	b.n	80057a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80057aa:	f000 ff95 	bl	80066d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80057ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005824 <xTaskCheckForTimeOut+0xc0>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c6:	d102      	bne.n	80057ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80057c8:	2300      	movs	r3, #0
 80057ca:	61fb      	str	r3, [r7, #28]
 80057cc:	e023      	b.n	8005816 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4b15      	ldr	r3, [pc, #84]	@ (8005828 <xTaskCheckForTimeOut+0xc4>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d007      	beq.n	80057ea <xTaskCheckForTimeOut+0x86>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d302      	bcc.n	80057ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80057e4:	2301      	movs	r3, #1
 80057e6:	61fb      	str	r3, [r7, #28]
 80057e8:	e015      	b.n	8005816 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d20b      	bcs.n	800580c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	1ad2      	subs	r2, r2, r3
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff ff99 	bl	8005738 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005806:	2300      	movs	r3, #0
 8005808:	61fb      	str	r3, [r7, #28]
 800580a:	e004      	b.n	8005816 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2200      	movs	r2, #0
 8005810:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005812:	2301      	movs	r3, #1
 8005814:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005816:	f000 ff91 	bl	800673c <vPortExitCritical>

	return xReturn;
 800581a:	69fb      	ldr	r3, [r7, #28]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3720      	adds	r7, #32
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	200011e4 	.word	0x200011e4
 8005828:	200011f8 	.word	0x200011f8

0800582c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005830:	4b03      	ldr	r3, [pc, #12]	@ (8005840 <vTaskMissedYield+0x14>)
 8005832:	2201      	movs	r2, #1
 8005834:	601a      	str	r2, [r3, #0]
}
 8005836:	bf00      	nop
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	200011f4 	.word	0x200011f4

08005844 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800584c:	f000 f852 	bl	80058f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005850:	4b06      	ldr	r3, [pc, #24]	@ (800586c <prvIdleTask+0x28>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d9f9      	bls.n	800584c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005858:	4b05      	ldr	r3, [pc, #20]	@ (8005870 <prvIdleTask+0x2c>)
 800585a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005868:	e7f0      	b.n	800584c <prvIdleTask+0x8>
 800586a:	bf00      	nop
 800586c:	20000d10 	.word	0x20000d10
 8005870:	e000ed04 	.word	0xe000ed04

08005874 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800587a:	2300      	movs	r3, #0
 800587c:	607b      	str	r3, [r7, #4]
 800587e:	e00c      	b.n	800589a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4a12      	ldr	r2, [pc, #72]	@ (80058d4 <prvInitialiseTaskLists+0x60>)
 800588c:	4413      	add	r3, r2
 800588e:	4618      	mov	r0, r3
 8005890:	f7fe fb18 	bl	8003ec4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3301      	adds	r3, #1
 8005898:	607b      	str	r3, [r7, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b37      	cmp	r3, #55	@ 0x37
 800589e:	d9ef      	bls.n	8005880 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058a0:	480d      	ldr	r0, [pc, #52]	@ (80058d8 <prvInitialiseTaskLists+0x64>)
 80058a2:	f7fe fb0f 	bl	8003ec4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058a6:	480d      	ldr	r0, [pc, #52]	@ (80058dc <prvInitialiseTaskLists+0x68>)
 80058a8:	f7fe fb0c 	bl	8003ec4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058ac:	480c      	ldr	r0, [pc, #48]	@ (80058e0 <prvInitialiseTaskLists+0x6c>)
 80058ae:	f7fe fb09 	bl	8003ec4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058b2:	480c      	ldr	r0, [pc, #48]	@ (80058e4 <prvInitialiseTaskLists+0x70>)
 80058b4:	f7fe fb06 	bl	8003ec4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058b8:	480b      	ldr	r0, [pc, #44]	@ (80058e8 <prvInitialiseTaskLists+0x74>)
 80058ba:	f7fe fb03 	bl	8003ec4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058be:	4b0b      	ldr	r3, [pc, #44]	@ (80058ec <prvInitialiseTaskLists+0x78>)
 80058c0:	4a05      	ldr	r2, [pc, #20]	@ (80058d8 <prvInitialiseTaskLists+0x64>)
 80058c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058c4:	4b0a      	ldr	r3, [pc, #40]	@ (80058f0 <prvInitialiseTaskLists+0x7c>)
 80058c6:	4a05      	ldr	r2, [pc, #20]	@ (80058dc <prvInitialiseTaskLists+0x68>)
 80058c8:	601a      	str	r2, [r3, #0]
}
 80058ca:	bf00      	nop
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	20000d10 	.word	0x20000d10
 80058d8:	20001170 	.word	0x20001170
 80058dc:	20001184 	.word	0x20001184
 80058e0:	200011a0 	.word	0x200011a0
 80058e4:	200011b4 	.word	0x200011b4
 80058e8:	200011cc 	.word	0x200011cc
 80058ec:	20001198 	.word	0x20001198
 80058f0:	2000119c 	.word	0x2000119c

080058f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058fa:	e019      	b.n	8005930 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058fc:	f000 feec 	bl	80066d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005900:	4b10      	ldr	r3, [pc, #64]	@ (8005944 <prvCheckTasksWaitingTermination+0x50>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3304      	adds	r3, #4
 800590c:	4618      	mov	r0, r3
 800590e:	f7fe fb63 	bl	8003fd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005912:	4b0d      	ldr	r3, [pc, #52]	@ (8005948 <prvCheckTasksWaitingTermination+0x54>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3b01      	subs	r3, #1
 8005918:	4a0b      	ldr	r2, [pc, #44]	@ (8005948 <prvCheckTasksWaitingTermination+0x54>)
 800591a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800591c:	4b0b      	ldr	r3, [pc, #44]	@ (800594c <prvCheckTasksWaitingTermination+0x58>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3b01      	subs	r3, #1
 8005922:	4a0a      	ldr	r2, [pc, #40]	@ (800594c <prvCheckTasksWaitingTermination+0x58>)
 8005924:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005926:	f000 ff09 	bl	800673c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f810 	bl	8005950 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005930:	4b06      	ldr	r3, [pc, #24]	@ (800594c <prvCheckTasksWaitingTermination+0x58>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1e1      	bne.n	80058fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005938:	bf00      	nop
 800593a:	bf00      	nop
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	200011b4 	.word	0x200011b4
 8005948:	200011e0 	.word	0x200011e0
 800594c:	200011c8 	.word	0x200011c8

08005950 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3354      	adds	r3, #84	@ 0x54
 800595c:	4618      	mov	r0, r3
 800595e:	f001 f9f3 	bl	8006d48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005968:	2b00      	cmp	r3, #0
 800596a:	d108      	bne.n	800597e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005970:	4618      	mov	r0, r3
 8005972:	f001 f8a1 	bl	8006ab8 <vPortFree>
				vPortFree( pxTCB );
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f001 f89e 	bl	8006ab8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800597c:	e019      	b.n	80059b2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005984:	2b01      	cmp	r3, #1
 8005986:	d103      	bne.n	8005990 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f001 f895 	bl	8006ab8 <vPortFree>
	}
 800598e:	e010      	b.n	80059b2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005996:	2b02      	cmp	r3, #2
 8005998:	d00b      	beq.n	80059b2 <prvDeleteTCB+0x62>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	60fb      	str	r3, [r7, #12]
}
 80059ac:	bf00      	nop
 80059ae:	bf00      	nop
 80059b0:	e7fd      	b.n	80059ae <prvDeleteTCB+0x5e>
	}
 80059b2:	bf00      	nop
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
	...

080059bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059c2:	4b0c      	ldr	r3, [pc, #48]	@ (80059f4 <prvResetNextTaskUnblockTime+0x38>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d104      	bne.n	80059d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059cc:	4b0a      	ldr	r3, [pc, #40]	@ (80059f8 <prvResetNextTaskUnblockTime+0x3c>)
 80059ce:	f04f 32ff 	mov.w	r2, #4294967295
 80059d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80059d4:	e008      	b.n	80059e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059d6:	4b07      	ldr	r3, [pc, #28]	@ (80059f4 <prvResetNextTaskUnblockTime+0x38>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	4a04      	ldr	r2, [pc, #16]	@ (80059f8 <prvResetNextTaskUnblockTime+0x3c>)
 80059e6:	6013      	str	r3, [r2, #0]
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	20001198 	.word	0x20001198
 80059f8:	20001200 	.word	0x20001200

080059fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a02:	4b0b      	ldr	r3, [pc, #44]	@ (8005a30 <xTaskGetSchedulerState+0x34>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d102      	bne.n	8005a10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	607b      	str	r3, [r7, #4]
 8005a0e:	e008      	b.n	8005a22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a10:	4b08      	ldr	r3, [pc, #32]	@ (8005a34 <xTaskGetSchedulerState+0x38>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d102      	bne.n	8005a1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a18:	2302      	movs	r3, #2
 8005a1a:	607b      	str	r3, [r7, #4]
 8005a1c:	e001      	b.n	8005a22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a22:	687b      	ldr	r3, [r7, #4]
	}
 8005a24:	4618      	mov	r0, r3
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	200011ec 	.word	0x200011ec
 8005a34:	20001208 	.word	0x20001208

08005a38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005a44:	2300      	movs	r3, #0
 8005a46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d051      	beq.n	8005af2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a52:	4b2a      	ldr	r3, [pc, #168]	@ (8005afc <xTaskPriorityInherit+0xc4>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d241      	bcs.n	8005ae0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	db06      	blt.n	8005a72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a64:	4b25      	ldr	r3, [pc, #148]	@ (8005afc <xTaskPriorityInherit+0xc4>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6959      	ldr	r1, [r3, #20]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4a1f      	ldr	r2, [pc, #124]	@ (8005b00 <xTaskPriorityInherit+0xc8>)
 8005a84:	4413      	add	r3, r2
 8005a86:	4299      	cmp	r1, r3
 8005a88:	d122      	bne.n	8005ad0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fe faa2 	bl	8003fd8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a94:	4b19      	ldr	r3, [pc, #100]	@ (8005afc <xTaskPriorityInherit+0xc4>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aa2:	4b18      	ldr	r3, [pc, #96]	@ (8005b04 <xTaskPriorityInherit+0xcc>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d903      	bls.n	8005ab2 <xTaskPriorityInherit+0x7a>
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aae:	4a15      	ldr	r2, [pc, #84]	@ (8005b04 <xTaskPriorityInherit+0xcc>)
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4a10      	ldr	r2, [pc, #64]	@ (8005b00 <xTaskPriorityInherit+0xc8>)
 8005ac0:	441a      	add	r2, r3
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4610      	mov	r0, r2
 8005aca:	f7fe fa28 	bl	8003f1e <vListInsertEnd>
 8005ace:	e004      	b.n	8005ada <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8005afc <xTaskPriorityInherit+0xc4>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005ada:	2301      	movs	r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	e008      	b.n	8005af2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ae4:	4b05      	ldr	r3, [pc, #20]	@ (8005afc <xTaskPriorityInherit+0xc4>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d201      	bcs.n	8005af2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005aee:	2301      	movs	r3, #1
 8005af0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005af2:	68fb      	ldr	r3, [r7, #12]
	}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	20000d0c 	.word	0x20000d0c
 8005b00:	20000d10 	.word	0x20000d10
 8005b04:	200011e8 	.word	0x200011e8

08005b08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b14:	2300      	movs	r3, #0
 8005b16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d058      	beq.n	8005bd0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8005bdc <xTaskPriorityDisinherit+0xd4>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d00b      	beq.n	8005b40 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	60fb      	str	r3, [r7, #12]
}
 8005b3a:	bf00      	nop
 8005b3c:	bf00      	nop
 8005b3e:	e7fd      	b.n	8005b3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10b      	bne.n	8005b60 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	60bb      	str	r3, [r7, #8]
}
 8005b5a:	bf00      	nop
 8005b5c:	bf00      	nop
 8005b5e:	e7fd      	b.n	8005b5c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b64:	1e5a      	subs	r2, r3, #1
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d02c      	beq.n	8005bd0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d128      	bne.n	8005bd0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	3304      	adds	r3, #4
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fe fa28 	bl	8003fd8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b94:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8005be0 <xTaskPriorityDisinherit+0xd8>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d903      	bls.n	8005bb0 <xTaskPriorityDisinherit+0xa8>
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bac:	4a0c      	ldr	r2, [pc, #48]	@ (8005be0 <xTaskPriorityDisinherit+0xd8>)
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4a09      	ldr	r2, [pc, #36]	@ (8005be4 <xTaskPriorityDisinherit+0xdc>)
 8005bbe:	441a      	add	r2, r3
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	f7fe f9a9 	bl	8003f1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bd0:	697b      	ldr	r3, [r7, #20]
	}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000d0c 	.word	0x20000d0c
 8005be0:	200011e8 	.word	0x200011e8
 8005be4:	20000d10 	.word	0x20000d10

08005be8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d06c      	beq.n	8005cda <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10b      	bne.n	8005c20 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	60fb      	str	r3, [r7, #12]
}
 8005c1a:	bf00      	nop
 8005c1c:	bf00      	nop
 8005c1e:	e7fd      	b.n	8005c1c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d902      	bls.n	8005c30 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	61fb      	str	r3, [r7, #28]
 8005c2e:	e002      	b.n	8005c36 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c34:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c3a:	69fa      	ldr	r2, [r7, #28]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d04c      	beq.n	8005cda <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d147      	bne.n	8005cda <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005c4a:	4b26      	ldr	r3, [pc, #152]	@ (8005ce4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d10b      	bne.n	8005c6c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	60bb      	str	r3, [r7, #8]
}
 8005c66:	bf00      	nop
 8005c68:	bf00      	nop
 8005c6a:	e7fd      	b.n	8005c68 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c70:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	69fa      	ldr	r2, [r7, #28]
 8005c76:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	db04      	blt.n	8005c8a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	6959      	ldr	r1, [r3, #20]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4a13      	ldr	r2, [pc, #76]	@ (8005ce8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005c9a:	4413      	add	r3, r2
 8005c9c:	4299      	cmp	r1, r3
 8005c9e:	d11c      	bne.n	8005cda <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fe f997 	bl	8003fd8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cae:	4b0f      	ldr	r3, [pc, #60]	@ (8005cec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d903      	bls.n	8005cbe <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cba:	4a0c      	ldr	r2, [pc, #48]	@ (8005cec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4a07      	ldr	r2, [pc, #28]	@ (8005ce8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005ccc:	441a      	add	r2, r3
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	f7fe f922 	bl	8003f1e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cda:	bf00      	nop
 8005cdc:	3720      	adds	r7, #32
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000d0c 	.word	0x20000d0c
 8005ce8:	20000d10 	.word	0x20000d10
 8005cec:	200011e8 	.word	0x200011e8

08005cf0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005cf4:	4b07      	ldr	r3, [pc, #28]	@ (8005d14 <pvTaskIncrementMutexHeldCount+0x24>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d004      	beq.n	8005d06 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005cfc:	4b05      	ldr	r3, [pc, #20]	@ (8005d14 <pvTaskIncrementMutexHeldCount+0x24>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d02:	3201      	adds	r2, #1
 8005d04:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005d06:	4b03      	ldr	r3, [pc, #12]	@ (8005d14 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d08:	681b      	ldr	r3, [r3, #0]
	}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	20000d0c 	.word	0x20000d0c

08005d18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d22:	4b21      	ldr	r3, [pc, #132]	@ (8005da8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d28:	4b20      	ldr	r3, [pc, #128]	@ (8005dac <prvAddCurrentTaskToDelayedList+0x94>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fe f952 	bl	8003fd8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3a:	d10a      	bne.n	8005d52 <prvAddCurrentTaskToDelayedList+0x3a>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d007      	beq.n	8005d52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d42:	4b1a      	ldr	r3, [pc, #104]	@ (8005dac <prvAddCurrentTaskToDelayedList+0x94>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3304      	adds	r3, #4
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4819      	ldr	r0, [pc, #100]	@ (8005db0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005d4c:	f7fe f8e7 	bl	8003f1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d50:	e026      	b.n	8005da0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4413      	add	r3, r2
 8005d58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d5a:	4b14      	ldr	r3, [pc, #80]	@ (8005dac <prvAddCurrentTaskToDelayedList+0x94>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d209      	bcs.n	8005d7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d6a:	4b12      	ldr	r3, [pc, #72]	@ (8005db4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8005dac <prvAddCurrentTaskToDelayedList+0x94>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3304      	adds	r3, #4
 8005d74:	4619      	mov	r1, r3
 8005d76:	4610      	mov	r0, r2
 8005d78:	f7fe f8f5 	bl	8003f66 <vListInsert>
}
 8005d7c:	e010      	b.n	8005da0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005db8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	4b0a      	ldr	r3, [pc, #40]	@ (8005dac <prvAddCurrentTaskToDelayedList+0x94>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3304      	adds	r3, #4
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	f7fe f8eb 	bl	8003f66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d90:	4b0a      	ldr	r3, [pc, #40]	@ (8005dbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d202      	bcs.n	8005da0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d9a:	4a08      	ldr	r2, [pc, #32]	@ (8005dbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	6013      	str	r3, [r2, #0]
}
 8005da0:	bf00      	nop
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	200011e4 	.word	0x200011e4
 8005dac:	20000d0c 	.word	0x20000d0c
 8005db0:	200011cc 	.word	0x200011cc
 8005db4:	2000119c 	.word	0x2000119c
 8005db8:	20001198 	.word	0x20001198
 8005dbc:	20001200 	.word	0x20001200

08005dc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b08a      	sub	sp, #40	@ 0x28
 8005dc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005dca:	f000 fb13 	bl	80063f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005dce:	4b1d      	ldr	r3, [pc, #116]	@ (8005e44 <xTimerCreateTimerTask+0x84>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d021      	beq.n	8005e1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005dde:	1d3a      	adds	r2, r7, #4
 8005de0:	f107 0108 	add.w	r1, r7, #8
 8005de4:	f107 030c 	add.w	r3, r7, #12
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fe f851 	bl	8003e90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	9202      	str	r2, [sp, #8]
 8005df6:	9301      	str	r3, [sp, #4]
 8005df8:	2302      	movs	r3, #2
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	460a      	mov	r2, r1
 8005e00:	4911      	ldr	r1, [pc, #68]	@ (8005e48 <xTimerCreateTimerTask+0x88>)
 8005e02:	4812      	ldr	r0, [pc, #72]	@ (8005e4c <xTimerCreateTimerTask+0x8c>)
 8005e04:	f7fe ffa2 	bl	8004d4c <xTaskCreateStatic>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	4a11      	ldr	r2, [pc, #68]	@ (8005e50 <xTimerCreateTimerTask+0x90>)
 8005e0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e0e:	4b10      	ldr	r3, [pc, #64]	@ (8005e50 <xTimerCreateTimerTask+0x90>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e16:	2301      	movs	r3, #1
 8005e18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10b      	bne.n	8005e38 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	613b      	str	r3, [r7, #16]
}
 8005e32:	bf00      	nop
 8005e34:	bf00      	nop
 8005e36:	e7fd      	b.n	8005e34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005e38:	697b      	ldr	r3, [r7, #20]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	2000123c 	.word	0x2000123c
 8005e48:	08007760 	.word	0x08007760
 8005e4c:	08005f8d 	.word	0x08005f8d
 8005e50:	20001240 	.word	0x20001240

08005e54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08a      	sub	sp, #40	@ 0x28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10b      	bne.n	8005e84 <xTimerGenericCommand+0x30>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	623b      	str	r3, [r7, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	bf00      	nop
 8005e82:	e7fd      	b.n	8005e80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e84:	4b19      	ldr	r3, [pc, #100]	@ (8005eec <xTimerGenericCommand+0x98>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d02a      	beq.n	8005ee2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2b05      	cmp	r3, #5
 8005e9c:	dc18      	bgt.n	8005ed0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e9e:	f7ff fdad 	bl	80059fc <xTaskGetSchedulerState>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d109      	bne.n	8005ebc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ea8:	4b10      	ldr	r3, [pc, #64]	@ (8005eec <xTimerGenericCommand+0x98>)
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	f107 0110 	add.w	r1, r7, #16
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eb4:	f7fe fa32 	bl	800431c <xQueueGenericSend>
 8005eb8:	6278      	str	r0, [r7, #36]	@ 0x24
 8005eba:	e012      	b.n	8005ee2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8005eec <xTimerGenericCommand+0x98>)
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	f107 0110 	add.w	r1, r7, #16
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f7fe fa28 	bl	800431c <xQueueGenericSend>
 8005ecc:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ece:	e008      	b.n	8005ee2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ed0:	4b06      	ldr	r3, [pc, #24]	@ (8005eec <xTimerGenericCommand+0x98>)
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	f107 0110 	add.w	r1, r7, #16
 8005ed8:	2300      	movs	r3, #0
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	f7fe fb20 	bl	8004520 <xQueueGenericSendFromISR>
 8005ee0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3728      	adds	r7, #40	@ 0x28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	2000123c 	.word	0x2000123c

08005ef0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005efa:	4b23      	ldr	r3, [pc, #140]	@ (8005f88 <prvProcessExpiredTimer+0x98>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	3304      	adds	r3, #4
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fe f865 	bl	8003fd8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d023      	beq.n	8005f64 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	699a      	ldr	r2, [r3, #24]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	18d1      	adds	r1, r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	6978      	ldr	r0, [r7, #20]
 8005f2a:	f000 f8d5 	bl	80060d8 <prvInsertTimerInActiveList>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d020      	beq.n	8005f76 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f34:	2300      	movs	r3, #0
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	2300      	movs	r3, #0
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	6978      	ldr	r0, [r7, #20]
 8005f40:	f7ff ff88 	bl	8005e54 <xTimerGenericCommand>
 8005f44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d114      	bne.n	8005f76 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	60fb      	str	r3, [r7, #12]
}
 8005f5e:	bf00      	nop
 8005f60:	bf00      	nop
 8005f62:	e7fd      	b.n	8005f60 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f6a:	f023 0301 	bic.w	r3, r3, #1
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	6978      	ldr	r0, [r7, #20]
 8005f7c:	4798      	blx	r3
}
 8005f7e:	bf00      	nop
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20001234 	.word	0x20001234

08005f8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f94:	f107 0308 	add.w	r3, r7, #8
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 f859 	bl	8006050 <prvGetNextExpireTime>
 8005f9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 f805 	bl	8005fb4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005faa:	f000 f8d7 	bl	800615c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fae:	bf00      	nop
 8005fb0:	e7f0      	b.n	8005f94 <prvTimerTask+0x8>
	...

08005fb4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005fbe:	f7ff f929 	bl	8005214 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fc2:	f107 0308 	add.w	r3, r7, #8
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 f866 	bl	8006098 <prvSampleTimeNow>
 8005fcc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d130      	bne.n	8006036 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10a      	bne.n	8005ff0 <prvProcessTimerOrBlockTask+0x3c>
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d806      	bhi.n	8005ff0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005fe2:	f7ff f925 	bl	8005230 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005fe6:	68f9      	ldr	r1, [r7, #12]
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7ff ff81 	bl	8005ef0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005fee:	e024      	b.n	800603a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d008      	beq.n	8006008 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ff6:	4b13      	ldr	r3, [pc, #76]	@ (8006044 <prvProcessTimerOrBlockTask+0x90>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <prvProcessTimerOrBlockTask+0x50>
 8006000:	2301      	movs	r3, #1
 8006002:	e000      	b.n	8006006 <prvProcessTimerOrBlockTask+0x52>
 8006004:	2300      	movs	r3, #0
 8006006:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006008:	4b0f      	ldr	r3, [pc, #60]	@ (8006048 <prvProcessTimerOrBlockTask+0x94>)
 800600a:	6818      	ldr	r0, [r3, #0]
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	4619      	mov	r1, r3
 8006016:	f7fe fe65 	bl	8004ce4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800601a:	f7ff f909 	bl	8005230 <xTaskResumeAll>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10a      	bne.n	800603a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006024:	4b09      	ldr	r3, [pc, #36]	@ (800604c <prvProcessTimerOrBlockTask+0x98>)
 8006026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	f3bf 8f6f 	isb	sy
}
 8006034:	e001      	b.n	800603a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006036:	f7ff f8fb 	bl	8005230 <xTaskResumeAll>
}
 800603a:	bf00      	nop
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	20001238 	.word	0x20001238
 8006048:	2000123c 	.word	0x2000123c
 800604c:	e000ed04 	.word	0xe000ed04

08006050 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006058:	4b0e      	ldr	r3, [pc, #56]	@ (8006094 <prvGetNextExpireTime+0x44>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <prvGetNextExpireTime+0x16>
 8006062:	2201      	movs	r2, #1
 8006064:	e000      	b.n	8006068 <prvGetNextExpireTime+0x18>
 8006066:	2200      	movs	r2, #0
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d105      	bne.n	8006080 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006074:	4b07      	ldr	r3, [pc, #28]	@ (8006094 <prvGetNextExpireTime+0x44>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	60fb      	str	r3, [r7, #12]
 800607e:	e001      	b.n	8006084 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006084:	68fb      	ldr	r3, [r7, #12]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	20001234 	.word	0x20001234

08006098 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80060a0:	f7ff f964 	bl	800536c <xTaskGetTickCount>
 80060a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80060a6:	4b0b      	ldr	r3, [pc, #44]	@ (80060d4 <prvSampleTimeNow+0x3c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d205      	bcs.n	80060bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80060b0:	f000 f93a 	bl	8006328 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	e002      	b.n	80060c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80060c2:	4a04      	ldr	r2, [pc, #16]	@ (80060d4 <prvSampleTimeNow+0x3c>)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80060c8:	68fb      	ldr	r3, [r7, #12]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20001244 	.word	0x20001244

080060d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80060e6:	2300      	movs	r3, #0
 80060e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d812      	bhi.n	8006124 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	1ad2      	subs	r2, r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	429a      	cmp	r2, r3
 800610a:	d302      	bcc.n	8006112 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800610c:	2301      	movs	r3, #1
 800610e:	617b      	str	r3, [r7, #20]
 8006110:	e01b      	b.n	800614a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006112:	4b10      	ldr	r3, [pc, #64]	@ (8006154 <prvInsertTimerInActiveList+0x7c>)
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3304      	adds	r3, #4
 800611a:	4619      	mov	r1, r3
 800611c:	4610      	mov	r0, r2
 800611e:	f7fd ff22 	bl	8003f66 <vListInsert>
 8006122:	e012      	b.n	800614a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d206      	bcs.n	800613a <prvInsertTimerInActiveList+0x62>
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	429a      	cmp	r2, r3
 8006132:	d302      	bcc.n	800613a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006134:	2301      	movs	r3, #1
 8006136:	617b      	str	r3, [r7, #20]
 8006138:	e007      	b.n	800614a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800613a:	4b07      	ldr	r3, [pc, #28]	@ (8006158 <prvInsertTimerInActiveList+0x80>)
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3304      	adds	r3, #4
 8006142:	4619      	mov	r1, r3
 8006144:	4610      	mov	r0, r2
 8006146:	f7fd ff0e 	bl	8003f66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800614a:	697b      	ldr	r3, [r7, #20]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20001238 	.word	0x20001238
 8006158:	20001234 	.word	0x20001234

0800615c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b08e      	sub	sp, #56	@ 0x38
 8006160:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006162:	e0ce      	b.n	8006302 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	da19      	bge.n	800619e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800616a:	1d3b      	adds	r3, r7, #4
 800616c:	3304      	adds	r3, #4
 800616e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10b      	bne.n	800618e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	61fb      	str	r3, [r7, #28]
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	e7fd      	b.n	800618a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800618e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006194:	6850      	ldr	r0, [r2, #4]
 8006196:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006198:	6892      	ldr	r2, [r2, #8]
 800619a:	4611      	mov	r1, r2
 800619c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f2c0 80ae 	blt.w	8006302 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80061aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d004      	beq.n	80061bc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b4:	3304      	adds	r3, #4
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fd ff0e 	bl	8003fd8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061bc:	463b      	mov	r3, r7
 80061be:	4618      	mov	r0, r3
 80061c0:	f7ff ff6a 	bl	8006098 <prvSampleTimeNow>
 80061c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b09      	cmp	r3, #9
 80061ca:	f200 8097 	bhi.w	80062fc <prvProcessReceivedCommands+0x1a0>
 80061ce:	a201      	add	r2, pc, #4	@ (adr r2, 80061d4 <prvProcessReceivedCommands+0x78>)
 80061d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d4:	080061fd 	.word	0x080061fd
 80061d8:	080061fd 	.word	0x080061fd
 80061dc:	080061fd 	.word	0x080061fd
 80061e0:	08006273 	.word	0x08006273
 80061e4:	08006287 	.word	0x08006287
 80061e8:	080062d3 	.word	0x080062d3
 80061ec:	080061fd 	.word	0x080061fd
 80061f0:	080061fd 	.word	0x080061fd
 80061f4:	08006273 	.word	0x08006273
 80061f8:	08006287 	.word	0x08006287
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006202:	f043 0301 	orr.w	r3, r3, #1
 8006206:	b2da      	uxtb	r2, r3
 8006208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	18d1      	adds	r1, r2, r3
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800621a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800621c:	f7ff ff5c 	bl	80060d8 <prvInsertTimerInActiveList>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d06c      	beq.n	8006300 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800622c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800622e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006230:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d061      	beq.n	8006300 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	441a      	add	r2, r3
 8006244:	2300      	movs	r3, #0
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	2300      	movs	r3, #0
 800624a:	2100      	movs	r1, #0
 800624c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800624e:	f7ff fe01 	bl	8005e54 <xTimerGenericCommand>
 8006252:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d152      	bne.n	8006300 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800625a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	61bb      	str	r3, [r7, #24]
}
 800626c:	bf00      	nop
 800626e:	bf00      	nop
 8006270:	e7fd      	b.n	800626e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006274:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006278:	f023 0301 	bic.w	r3, r3, #1
 800627c:	b2da      	uxtb	r2, r3
 800627e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006280:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006284:	e03d      	b.n	8006302 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006288:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800628c:	f043 0301 	orr.w	r3, r3, #1
 8006290:	b2da      	uxtb	r2, r3
 8006292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006294:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800629c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800629e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10b      	bne.n	80062be <prvProcessReceivedCommands+0x162>
	__asm volatile
 80062a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	617b      	str	r3, [r7, #20]
}
 80062b8:	bf00      	nop
 80062ba:	bf00      	nop
 80062bc:	e7fd      	b.n	80062ba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80062be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c4:	18d1      	adds	r1, r2, r3
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062cc:	f7ff ff04 	bl	80060d8 <prvInsertTimerInActiveList>
					break;
 80062d0:	e017      	b.n	8006302 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80062d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d103      	bne.n	80062e8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80062e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062e2:	f000 fbe9 	bl	8006ab8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80062e6:	e00c      	b.n	8006302 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062ee:	f023 0301 	bic.w	r3, r3, #1
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80062fa:	e002      	b.n	8006302 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80062fc:	bf00      	nop
 80062fe:	e000      	b.n	8006302 <prvProcessReceivedCommands+0x1a6>
					break;
 8006300:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006302:	4b08      	ldr	r3, [pc, #32]	@ (8006324 <prvProcessReceivedCommands+0x1c8>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	1d39      	adds	r1, r7, #4
 8006308:	2200      	movs	r2, #0
 800630a:	4618      	mov	r0, r3
 800630c:	f7fe f9a6 	bl	800465c <xQueueReceive>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	f47f af26 	bne.w	8006164 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006318:	bf00      	nop
 800631a:	bf00      	nop
 800631c:	3730      	adds	r7, #48	@ 0x30
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	2000123c 	.word	0x2000123c

08006328 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b088      	sub	sp, #32
 800632c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800632e:	e049      	b.n	80063c4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006330:	4b2e      	ldr	r3, [pc, #184]	@ (80063ec <prvSwitchTimerLists+0xc4>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800633a:	4b2c      	ldr	r3, [pc, #176]	@ (80063ec <prvSwitchTimerLists+0xc4>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3304      	adds	r3, #4
 8006348:	4618      	mov	r0, r3
 800634a:	f7fd fe45 	bl	8003fd8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b00      	cmp	r3, #0
 8006362:	d02f      	beq.n	80063c4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4413      	add	r3, r2
 800636c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	429a      	cmp	r2, r3
 8006374:	d90e      	bls.n	8006394 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006382:	4b1a      	ldr	r3, [pc, #104]	@ (80063ec <prvSwitchTimerLists+0xc4>)
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	3304      	adds	r3, #4
 800638a:	4619      	mov	r1, r3
 800638c:	4610      	mov	r0, r2
 800638e:	f7fd fdea 	bl	8003f66 <vListInsert>
 8006392:	e017      	b.n	80063c4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006394:	2300      	movs	r3, #0
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	2300      	movs	r3, #0
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	2100      	movs	r1, #0
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f7ff fd58 	bl	8005e54 <xTimerGenericCommand>
 80063a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10b      	bne.n	80063c4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	603b      	str	r3, [r7, #0]
}
 80063be:	bf00      	nop
 80063c0:	bf00      	nop
 80063c2:	e7fd      	b.n	80063c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063c4:	4b09      	ldr	r3, [pc, #36]	@ (80063ec <prvSwitchTimerLists+0xc4>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1b0      	bne.n	8006330 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80063ce:	4b07      	ldr	r3, [pc, #28]	@ (80063ec <prvSwitchTimerLists+0xc4>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80063d4:	4b06      	ldr	r3, [pc, #24]	@ (80063f0 <prvSwitchTimerLists+0xc8>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a04      	ldr	r2, [pc, #16]	@ (80063ec <prvSwitchTimerLists+0xc4>)
 80063da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80063dc:	4a04      	ldr	r2, [pc, #16]	@ (80063f0 <prvSwitchTimerLists+0xc8>)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	6013      	str	r3, [r2, #0]
}
 80063e2:	bf00      	nop
 80063e4:	3718      	adds	r7, #24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20001234 	.word	0x20001234
 80063f0:	20001238 	.word	0x20001238

080063f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80063fa:	f000 f96d 	bl	80066d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80063fe:	4b15      	ldr	r3, [pc, #84]	@ (8006454 <prvCheckForValidListAndQueue+0x60>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d120      	bne.n	8006448 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006406:	4814      	ldr	r0, [pc, #80]	@ (8006458 <prvCheckForValidListAndQueue+0x64>)
 8006408:	f7fd fd5c 	bl	8003ec4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800640c:	4813      	ldr	r0, [pc, #76]	@ (800645c <prvCheckForValidListAndQueue+0x68>)
 800640e:	f7fd fd59 	bl	8003ec4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006412:	4b13      	ldr	r3, [pc, #76]	@ (8006460 <prvCheckForValidListAndQueue+0x6c>)
 8006414:	4a10      	ldr	r2, [pc, #64]	@ (8006458 <prvCheckForValidListAndQueue+0x64>)
 8006416:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006418:	4b12      	ldr	r3, [pc, #72]	@ (8006464 <prvCheckForValidListAndQueue+0x70>)
 800641a:	4a10      	ldr	r2, [pc, #64]	@ (800645c <prvCheckForValidListAndQueue+0x68>)
 800641c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800641e:	2300      	movs	r3, #0
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	4b11      	ldr	r3, [pc, #68]	@ (8006468 <prvCheckForValidListAndQueue+0x74>)
 8006424:	4a11      	ldr	r2, [pc, #68]	@ (800646c <prvCheckForValidListAndQueue+0x78>)
 8006426:	2110      	movs	r1, #16
 8006428:	200a      	movs	r0, #10
 800642a:	f7fd fe69 	bl	8004100 <xQueueGenericCreateStatic>
 800642e:	4603      	mov	r3, r0
 8006430:	4a08      	ldr	r2, [pc, #32]	@ (8006454 <prvCheckForValidListAndQueue+0x60>)
 8006432:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006434:	4b07      	ldr	r3, [pc, #28]	@ (8006454 <prvCheckForValidListAndQueue+0x60>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d005      	beq.n	8006448 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800643c:	4b05      	ldr	r3, [pc, #20]	@ (8006454 <prvCheckForValidListAndQueue+0x60>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	490b      	ldr	r1, [pc, #44]	@ (8006470 <prvCheckForValidListAndQueue+0x7c>)
 8006442:	4618      	mov	r0, r3
 8006444:	f7fe fc24 	bl	8004c90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006448:	f000 f978 	bl	800673c <vPortExitCritical>
}
 800644c:	bf00      	nop
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	2000123c 	.word	0x2000123c
 8006458:	2000120c 	.word	0x2000120c
 800645c:	20001220 	.word	0x20001220
 8006460:	20001234 	.word	0x20001234
 8006464:	20001238 	.word	0x20001238
 8006468:	200012e8 	.word	0x200012e8
 800646c:	20001248 	.word	0x20001248
 8006470:	08007768 	.word	0x08007768

08006474 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3b04      	subs	r3, #4
 8006484:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800648c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3b04      	subs	r3, #4
 8006492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f023 0201 	bic.w	r2, r3, #1
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3b04      	subs	r3, #4
 80064a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064a4:	4a0c      	ldr	r2, [pc, #48]	@ (80064d8 <pxPortInitialiseStack+0x64>)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3b14      	subs	r3, #20
 80064ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3b04      	subs	r3, #4
 80064ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f06f 0202 	mvn.w	r2, #2
 80064c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	3b20      	subs	r3, #32
 80064c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064ca:	68fb      	ldr	r3, [r7, #12]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	080064dd 	.word	0x080064dd

080064dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064e2:	2300      	movs	r3, #0
 80064e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064e6:	4b13      	ldr	r3, [pc, #76]	@ (8006534 <prvTaskExitError+0x58>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ee:	d00b      	beq.n	8006508 <prvTaskExitError+0x2c>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	60fb      	str	r3, [r7, #12]
}
 8006502:	bf00      	nop
 8006504:	bf00      	nop
 8006506:	e7fd      	b.n	8006504 <prvTaskExitError+0x28>
	__asm volatile
 8006508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	60bb      	str	r3, [r7, #8]
}
 800651a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800651c:	bf00      	nop
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0fc      	beq.n	800651e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20000028 	.word	0x20000028
	...

08006540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006540:	4b07      	ldr	r3, [pc, #28]	@ (8006560 <pxCurrentTCBConst2>)
 8006542:	6819      	ldr	r1, [r3, #0]
 8006544:	6808      	ldr	r0, [r1, #0]
 8006546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654a:	f380 8809 	msr	PSP, r0
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f04f 0000 	mov.w	r0, #0
 8006556:	f380 8811 	msr	BASEPRI, r0
 800655a:	4770      	bx	lr
 800655c:	f3af 8000 	nop.w

08006560 <pxCurrentTCBConst2>:
 8006560:	20000d0c 	.word	0x20000d0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop

08006568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006568:	4808      	ldr	r0, [pc, #32]	@ (800658c <prvPortStartFirstTask+0x24>)
 800656a:	6800      	ldr	r0, [r0, #0]
 800656c:	6800      	ldr	r0, [r0, #0]
 800656e:	f380 8808 	msr	MSP, r0
 8006572:	f04f 0000 	mov.w	r0, #0
 8006576:	f380 8814 	msr	CONTROL, r0
 800657a:	b662      	cpsie	i
 800657c:	b661      	cpsie	f
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	df00      	svc	0
 8006588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800658a:	bf00      	nop
 800658c:	e000ed08 	.word	0xe000ed08

08006590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006596:	4b47      	ldr	r3, [pc, #284]	@ (80066b4 <xPortStartScheduler+0x124>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a47      	ldr	r2, [pc, #284]	@ (80066b8 <xPortStartScheduler+0x128>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d10b      	bne.n	80065b8 <xPortStartScheduler+0x28>
	__asm volatile
 80065a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	613b      	str	r3, [r7, #16]
}
 80065b2:	bf00      	nop
 80065b4:	bf00      	nop
 80065b6:	e7fd      	b.n	80065b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065b8:	4b3e      	ldr	r3, [pc, #248]	@ (80066b4 <xPortStartScheduler+0x124>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a3f      	ldr	r2, [pc, #252]	@ (80066bc <xPortStartScheduler+0x12c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d10b      	bne.n	80065da <xPortStartScheduler+0x4a>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	60fb      	str	r3, [r7, #12]
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop
 80065d8:	e7fd      	b.n	80065d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065da:	4b39      	ldr	r3, [pc, #228]	@ (80066c0 <xPortStartScheduler+0x130>)
 80065dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	22ff      	movs	r2, #255	@ 0xff
 80065ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	4b31      	ldr	r3, [pc, #196]	@ (80066c4 <xPortStartScheduler+0x134>)
 8006600:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006602:	4b31      	ldr	r3, [pc, #196]	@ (80066c8 <xPortStartScheduler+0x138>)
 8006604:	2207      	movs	r2, #7
 8006606:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006608:	e009      	b.n	800661e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800660a:	4b2f      	ldr	r3, [pc, #188]	@ (80066c8 <xPortStartScheduler+0x138>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3b01      	subs	r3, #1
 8006610:	4a2d      	ldr	r2, [pc, #180]	@ (80066c8 <xPortStartScheduler+0x138>)
 8006612:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006614:	78fb      	ldrb	r3, [r7, #3]
 8006616:	b2db      	uxtb	r3, r3
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	b2db      	uxtb	r3, r3
 800661c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800661e:	78fb      	ldrb	r3, [r7, #3]
 8006620:	b2db      	uxtb	r3, r3
 8006622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006626:	2b80      	cmp	r3, #128	@ 0x80
 8006628:	d0ef      	beq.n	800660a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800662a:	4b27      	ldr	r3, [pc, #156]	@ (80066c8 <xPortStartScheduler+0x138>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f1c3 0307 	rsb	r3, r3, #7
 8006632:	2b04      	cmp	r3, #4
 8006634:	d00b      	beq.n	800664e <xPortStartScheduler+0xbe>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	60bb      	str	r3, [r7, #8]
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	e7fd      	b.n	800664a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800664e:	4b1e      	ldr	r3, [pc, #120]	@ (80066c8 <xPortStartScheduler+0x138>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	021b      	lsls	r3, r3, #8
 8006654:	4a1c      	ldr	r2, [pc, #112]	@ (80066c8 <xPortStartScheduler+0x138>)
 8006656:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006658:	4b1b      	ldr	r3, [pc, #108]	@ (80066c8 <xPortStartScheduler+0x138>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006660:	4a19      	ldr	r2, [pc, #100]	@ (80066c8 <xPortStartScheduler+0x138>)
 8006662:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	b2da      	uxtb	r2, r3
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800666c:	4b17      	ldr	r3, [pc, #92]	@ (80066cc <xPortStartScheduler+0x13c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a16      	ldr	r2, [pc, #88]	@ (80066cc <xPortStartScheduler+0x13c>)
 8006672:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006676:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006678:	4b14      	ldr	r3, [pc, #80]	@ (80066cc <xPortStartScheduler+0x13c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a13      	ldr	r2, [pc, #76]	@ (80066cc <xPortStartScheduler+0x13c>)
 800667e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006682:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006684:	f000 f8da 	bl	800683c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006688:	4b11      	ldr	r3, [pc, #68]	@ (80066d0 <xPortStartScheduler+0x140>)
 800668a:	2200      	movs	r2, #0
 800668c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800668e:	f000 f8f9 	bl	8006884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006692:	4b10      	ldr	r3, [pc, #64]	@ (80066d4 <xPortStartScheduler+0x144>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a0f      	ldr	r2, [pc, #60]	@ (80066d4 <xPortStartScheduler+0x144>)
 8006698:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800669c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800669e:	f7ff ff63 	bl	8006568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066a2:	f7fe ff2d 	bl	8005500 <vTaskSwitchContext>
	prvTaskExitError();
 80066a6:	f7ff ff19 	bl	80064dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	e000ed00 	.word	0xe000ed00
 80066b8:	410fc271 	.word	0x410fc271
 80066bc:	410fc270 	.word	0x410fc270
 80066c0:	e000e400 	.word	0xe000e400
 80066c4:	20001338 	.word	0x20001338
 80066c8:	2000133c 	.word	0x2000133c
 80066cc:	e000ed20 	.word	0xe000ed20
 80066d0:	20000028 	.word	0x20000028
 80066d4:	e000ef34 	.word	0xe000ef34

080066d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
}
 80066f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066f2:	4b10      	ldr	r3, [pc, #64]	@ (8006734 <vPortEnterCritical+0x5c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3301      	adds	r3, #1
 80066f8:	4a0e      	ldr	r2, [pc, #56]	@ (8006734 <vPortEnterCritical+0x5c>)
 80066fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006734 <vPortEnterCritical+0x5c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d110      	bne.n	8006726 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006704:	4b0c      	ldr	r3, [pc, #48]	@ (8006738 <vPortEnterCritical+0x60>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00b      	beq.n	8006726 <vPortEnterCritical+0x4e>
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	603b      	str	r3, [r7, #0]
}
 8006720:	bf00      	nop
 8006722:	bf00      	nop
 8006724:	e7fd      	b.n	8006722 <vPortEnterCritical+0x4a>
	}
}
 8006726:	bf00      	nop
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	20000028 	.word	0x20000028
 8006738:	e000ed04 	.word	0xe000ed04

0800673c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006742:	4b12      	ldr	r3, [pc, #72]	@ (800678c <vPortExitCritical+0x50>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10b      	bne.n	8006762 <vPortExitCritical+0x26>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	607b      	str	r3, [r7, #4]
}
 800675c:	bf00      	nop
 800675e:	bf00      	nop
 8006760:	e7fd      	b.n	800675e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006762:	4b0a      	ldr	r3, [pc, #40]	@ (800678c <vPortExitCritical+0x50>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3b01      	subs	r3, #1
 8006768:	4a08      	ldr	r2, [pc, #32]	@ (800678c <vPortExitCritical+0x50>)
 800676a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800676c:	4b07      	ldr	r3, [pc, #28]	@ (800678c <vPortExitCritical+0x50>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d105      	bne.n	8006780 <vPortExitCritical+0x44>
 8006774:	2300      	movs	r3, #0
 8006776:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	f383 8811 	msr	BASEPRI, r3
}
 800677e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	20000028 	.word	0x20000028

08006790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006790:	f3ef 8009 	mrs	r0, PSP
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	4b15      	ldr	r3, [pc, #84]	@ (80067f0 <pxCurrentTCBConst>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	f01e 0f10 	tst.w	lr, #16
 80067a0:	bf08      	it	eq
 80067a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067aa:	6010      	str	r0, [r2, #0]
 80067ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80067b4:	f380 8811 	msr	BASEPRI, r0
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f7fe fe9e 	bl	8005500 <vTaskSwitchContext>
 80067c4:	f04f 0000 	mov.w	r0, #0
 80067c8:	f380 8811 	msr	BASEPRI, r0
 80067cc:	bc09      	pop	{r0, r3}
 80067ce:	6819      	ldr	r1, [r3, #0]
 80067d0:	6808      	ldr	r0, [r1, #0]
 80067d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d6:	f01e 0f10 	tst.w	lr, #16
 80067da:	bf08      	it	eq
 80067dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067e0:	f380 8809 	msr	PSP, r0
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	f3af 8000 	nop.w

080067f0 <pxCurrentTCBConst>:
 80067f0:	20000d0c 	.word	0x20000d0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067f4:	bf00      	nop
 80067f6:	bf00      	nop

080067f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	607b      	str	r3, [r7, #4]
}
 8006810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006812:	f7fe fdbb 	bl	800538c <xTaskIncrementTick>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d003      	beq.n	8006824 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800681c:	4b06      	ldr	r3, [pc, #24]	@ (8006838 <xPortSysTickHandler+0x40>)
 800681e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	2300      	movs	r3, #0
 8006826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	f383 8811 	msr	BASEPRI, r3
}
 800682e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006830:	bf00      	nop
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	e000ed04 	.word	0xe000ed04

0800683c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006840:	4b0b      	ldr	r3, [pc, #44]	@ (8006870 <vPortSetupTimerInterrupt+0x34>)
 8006842:	2200      	movs	r2, #0
 8006844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006846:	4b0b      	ldr	r3, [pc, #44]	@ (8006874 <vPortSetupTimerInterrupt+0x38>)
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800684c:	4b0a      	ldr	r3, [pc, #40]	@ (8006878 <vPortSetupTimerInterrupt+0x3c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a0a      	ldr	r2, [pc, #40]	@ (800687c <vPortSetupTimerInterrupt+0x40>)
 8006852:	fba2 2303 	umull	r2, r3, r2, r3
 8006856:	099b      	lsrs	r3, r3, #6
 8006858:	4a09      	ldr	r2, [pc, #36]	@ (8006880 <vPortSetupTimerInterrupt+0x44>)
 800685a:	3b01      	subs	r3, #1
 800685c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800685e:	4b04      	ldr	r3, [pc, #16]	@ (8006870 <vPortSetupTimerInterrupt+0x34>)
 8006860:	2207      	movs	r2, #7
 8006862:	601a      	str	r2, [r3, #0]
}
 8006864:	bf00      	nop
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	e000e010 	.word	0xe000e010
 8006874:	e000e018 	.word	0xe000e018
 8006878:	2000001c 	.word	0x2000001c
 800687c:	10624dd3 	.word	0x10624dd3
 8006880:	e000e014 	.word	0xe000e014

08006884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006884:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006894 <vPortEnableVFP+0x10>
 8006888:	6801      	ldr	r1, [r0, #0]
 800688a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800688e:	6001      	str	r1, [r0, #0]
 8006890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006892:	bf00      	nop
 8006894:	e000ed88 	.word	0xe000ed88

08006898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800689e:	f3ef 8305 	mrs	r3, IPSR
 80068a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2b0f      	cmp	r3, #15
 80068a8:	d915      	bls.n	80068d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068aa:	4a18      	ldr	r2, [pc, #96]	@ (800690c <vPortValidateInterruptPriority+0x74>)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4413      	add	r3, r2
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068b4:	4b16      	ldr	r3, [pc, #88]	@ (8006910 <vPortValidateInterruptPriority+0x78>)
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	7afa      	ldrb	r2, [r7, #11]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d20b      	bcs.n	80068d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	607b      	str	r3, [r7, #4]
}
 80068d0:	bf00      	nop
 80068d2:	bf00      	nop
 80068d4:	e7fd      	b.n	80068d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006914 <vPortValidateInterruptPriority+0x7c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80068de:	4b0e      	ldr	r3, [pc, #56]	@ (8006918 <vPortValidateInterruptPriority+0x80>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d90b      	bls.n	80068fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80068e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	603b      	str	r3, [r7, #0]
}
 80068f8:	bf00      	nop
 80068fa:	bf00      	nop
 80068fc:	e7fd      	b.n	80068fa <vPortValidateInterruptPriority+0x62>
	}
 80068fe:	bf00      	nop
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	e000e3f0 	.word	0xe000e3f0
 8006910:	20001338 	.word	0x20001338
 8006914:	e000ed0c 	.word	0xe000ed0c
 8006918:	2000133c 	.word	0x2000133c

0800691c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b08a      	sub	sp, #40	@ 0x28
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006924:	2300      	movs	r3, #0
 8006926:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006928:	f7fe fc74 	bl	8005214 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800692c:	4b5c      	ldr	r3, [pc, #368]	@ (8006aa0 <pvPortMalloc+0x184>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006934:	f000 f924 	bl	8006b80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006938:	4b5a      	ldr	r3, [pc, #360]	@ (8006aa4 <pvPortMalloc+0x188>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4013      	ands	r3, r2
 8006940:	2b00      	cmp	r3, #0
 8006942:	f040 8095 	bne.w	8006a70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01e      	beq.n	800698a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800694c:	2208      	movs	r2, #8
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4413      	add	r3, r2
 8006952:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f003 0307 	and.w	r3, r3, #7
 800695a:	2b00      	cmp	r3, #0
 800695c:	d015      	beq.n	800698a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f023 0307 	bic.w	r3, r3, #7
 8006964:	3308      	adds	r3, #8
 8006966:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00b      	beq.n	800698a <pvPortMalloc+0x6e>
	__asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	617b      	str	r3, [r7, #20]
}
 8006984:	bf00      	nop
 8006986:	bf00      	nop
 8006988:	e7fd      	b.n	8006986 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d06f      	beq.n	8006a70 <pvPortMalloc+0x154>
 8006990:	4b45      	ldr	r3, [pc, #276]	@ (8006aa8 <pvPortMalloc+0x18c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	429a      	cmp	r2, r3
 8006998:	d86a      	bhi.n	8006a70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800699a:	4b44      	ldr	r3, [pc, #272]	@ (8006aac <pvPortMalloc+0x190>)
 800699c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800699e:	4b43      	ldr	r3, [pc, #268]	@ (8006aac <pvPortMalloc+0x190>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069a4:	e004      	b.n	80069b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80069a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d903      	bls.n	80069c2 <pvPortMalloc+0xa6>
 80069ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f1      	bne.n	80069a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069c2:	4b37      	ldr	r3, [pc, #220]	@ (8006aa0 <pvPortMalloc+0x184>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d051      	beq.n	8006a70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2208      	movs	r2, #8
 80069d2:	4413      	add	r3, r2
 80069d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	1ad2      	subs	r2, r2, r3
 80069e6:	2308      	movs	r3, #8
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d920      	bls.n	8006a30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4413      	add	r3, r2
 80069f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	f003 0307 	and.w	r3, r3, #7
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <pvPortMalloc+0xfc>
	__asm volatile
 8006a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	613b      	str	r3, [r7, #16]
}
 8006a12:	bf00      	nop
 8006a14:	bf00      	nop
 8006a16:	e7fd      	b.n	8006a14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	1ad2      	subs	r2, r2, r3
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a2a:	69b8      	ldr	r0, [r7, #24]
 8006a2c:	f000 f90a 	bl	8006c44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a30:	4b1d      	ldr	r3, [pc, #116]	@ (8006aa8 <pvPortMalloc+0x18c>)
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8006aa8 <pvPortMalloc+0x18c>)
 8006a3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8006aa8 <pvPortMalloc+0x18c>)
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	4b1b      	ldr	r3, [pc, #108]	@ (8006ab0 <pvPortMalloc+0x194>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d203      	bcs.n	8006a52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a4a:	4b17      	ldr	r3, [pc, #92]	@ (8006aa8 <pvPortMalloc+0x18c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a18      	ldr	r2, [pc, #96]	@ (8006ab0 <pvPortMalloc+0x194>)
 8006a50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	4b13      	ldr	r3, [pc, #76]	@ (8006aa4 <pvPortMalloc+0x188>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	431a      	orrs	r2, r3
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006a66:	4b13      	ldr	r3, [pc, #76]	@ (8006ab4 <pvPortMalloc+0x198>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	4a11      	ldr	r2, [pc, #68]	@ (8006ab4 <pvPortMalloc+0x198>)
 8006a6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a70:	f7fe fbde 	bl	8005230 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00b      	beq.n	8006a96 <pvPortMalloc+0x17a>
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	60fb      	str	r3, [r7, #12]
}
 8006a90:	bf00      	nop
 8006a92:	bf00      	nop
 8006a94:	e7fd      	b.n	8006a92 <pvPortMalloc+0x176>
	return pvReturn;
 8006a96:	69fb      	ldr	r3, [r7, #28]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3728      	adds	r7, #40	@ 0x28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20004f48 	.word	0x20004f48
 8006aa4:	20004f5c 	.word	0x20004f5c
 8006aa8:	20004f4c 	.word	0x20004f4c
 8006aac:	20004f40 	.word	0x20004f40
 8006ab0:	20004f50 	.word	0x20004f50
 8006ab4:	20004f54 	.word	0x20004f54

08006ab8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d04f      	beq.n	8006b6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006aca:	2308      	movs	r3, #8
 8006acc:	425b      	negs	r3, r3
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	4b25      	ldr	r3, [pc, #148]	@ (8006b74 <vPortFree+0xbc>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10b      	bne.n	8006afe <vPortFree+0x46>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	60fb      	str	r3, [r7, #12]
}
 8006af8:	bf00      	nop
 8006afa:	bf00      	nop
 8006afc:	e7fd      	b.n	8006afa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00b      	beq.n	8006b1e <vPortFree+0x66>
	__asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	60bb      	str	r3, [r7, #8]
}
 8006b18:	bf00      	nop
 8006b1a:	bf00      	nop
 8006b1c:	e7fd      	b.n	8006b1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	4b14      	ldr	r3, [pc, #80]	@ (8006b74 <vPortFree+0xbc>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4013      	ands	r3, r2
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d01e      	beq.n	8006b6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d11a      	bne.n	8006b6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	4b0e      	ldr	r3, [pc, #56]	@ (8006b74 <vPortFree+0xbc>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	43db      	mvns	r3, r3
 8006b3e:	401a      	ands	r2, r3
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b44:	f7fe fb66 	bl	8005214 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b78 <vPortFree+0xc0>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4413      	add	r3, r2
 8006b52:	4a09      	ldr	r2, [pc, #36]	@ (8006b78 <vPortFree+0xc0>)
 8006b54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b56:	6938      	ldr	r0, [r7, #16]
 8006b58:	f000 f874 	bl	8006c44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006b5c:	4b07      	ldr	r3, [pc, #28]	@ (8006b7c <vPortFree+0xc4>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3301      	adds	r3, #1
 8006b62:	4a06      	ldr	r2, [pc, #24]	@ (8006b7c <vPortFree+0xc4>)
 8006b64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006b66:	f7fe fb63 	bl	8005230 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b6a:	bf00      	nop
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	20004f5c 	.word	0x20004f5c
 8006b78:	20004f4c 	.word	0x20004f4c
 8006b7c:	20004f58 	.word	0x20004f58

08006b80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006b8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b8c:	4b27      	ldr	r3, [pc, #156]	@ (8006c2c <prvHeapInit+0xac>)
 8006b8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f003 0307 	and.w	r3, r3, #7
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00c      	beq.n	8006bb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3307      	adds	r3, #7
 8006b9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 0307 	bic.w	r3, r3, #7
 8006ba6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	4a1f      	ldr	r2, [pc, #124]	@ (8006c2c <prvHeapInit+0xac>)
 8006bb0:	4413      	add	r3, r2
 8006bb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c30 <prvHeapInit+0xb0>)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8006c30 <prvHeapInit+0xb0>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	4413      	add	r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006bcc:	2208      	movs	r2, #8
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	1a9b      	subs	r3, r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f023 0307 	bic.w	r3, r3, #7
 8006bda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4a15      	ldr	r2, [pc, #84]	@ (8006c34 <prvHeapInit+0xb4>)
 8006be0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006be2:	4b14      	ldr	r3, [pc, #80]	@ (8006c34 <prvHeapInit+0xb4>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2200      	movs	r2, #0
 8006be8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006bea:	4b12      	ldr	r3, [pc, #72]	@ (8006c34 <prvHeapInit+0xb4>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	1ad2      	subs	r2, r2, r3
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c00:	4b0c      	ldr	r3, [pc, #48]	@ (8006c34 <prvHeapInit+0xb4>)
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c38 <prvHeapInit+0xb8>)
 8006c0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	4a09      	ldr	r2, [pc, #36]	@ (8006c3c <prvHeapInit+0xbc>)
 8006c16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c18:	4b09      	ldr	r3, [pc, #36]	@ (8006c40 <prvHeapInit+0xc0>)
 8006c1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006c1e:	601a      	str	r2, [r3, #0]
}
 8006c20:	bf00      	nop
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	20001340 	.word	0x20001340
 8006c30:	20004f40 	.word	0x20004f40
 8006c34:	20004f48 	.word	0x20004f48
 8006c38:	20004f50 	.word	0x20004f50
 8006c3c:	20004f4c 	.word	0x20004f4c
 8006c40:	20004f5c 	.word	0x20004f5c

08006c44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c4c:	4b28      	ldr	r3, [pc, #160]	@ (8006cf0 <prvInsertBlockIntoFreeList+0xac>)
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	e002      	b.n	8006c58 <prvInsertBlockIntoFreeList+0x14>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d8f7      	bhi.n	8006c52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d108      	bne.n	8006c86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	441a      	add	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	441a      	add	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d118      	bne.n	8006ccc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	4b15      	ldr	r3, [pc, #84]	@ (8006cf4 <prvInsertBlockIntoFreeList+0xb0>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d00d      	beq.n	8006cc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	441a      	add	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	e008      	b.n	8006cd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8006cf4 <prvInsertBlockIntoFreeList+0xb0>)
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	e003      	b.n	8006cd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d002      	beq.n	8006ce2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ce2:	bf00      	nop
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	20004f40 	.word	0x20004f40
 8006cf4:	20004f48 	.word	0x20004f48

08006cf8 <siprintf>:
 8006cf8:	b40e      	push	{r1, r2, r3}
 8006cfa:	b500      	push	{lr}
 8006cfc:	b09c      	sub	sp, #112	@ 0x70
 8006cfe:	ab1d      	add	r3, sp, #116	@ 0x74
 8006d00:	9002      	str	r0, [sp, #8]
 8006d02:	9006      	str	r0, [sp, #24]
 8006d04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006d08:	4809      	ldr	r0, [pc, #36]	@ (8006d30 <siprintf+0x38>)
 8006d0a:	9107      	str	r1, [sp, #28]
 8006d0c:	9104      	str	r1, [sp, #16]
 8006d0e:	4909      	ldr	r1, [pc, #36]	@ (8006d34 <siprintf+0x3c>)
 8006d10:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d14:	9105      	str	r1, [sp, #20]
 8006d16:	6800      	ldr	r0, [r0, #0]
 8006d18:	9301      	str	r3, [sp, #4]
 8006d1a:	a902      	add	r1, sp, #8
 8006d1c:	f000 fa00 	bl	8007120 <_svfiprintf_r>
 8006d20:	9b02      	ldr	r3, [sp, #8]
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]
 8006d26:	b01c      	add	sp, #112	@ 0x70
 8006d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d2c:	b003      	add	sp, #12
 8006d2e:	4770      	bx	lr
 8006d30:	2000002c 	.word	0x2000002c
 8006d34:	ffff0208 	.word	0xffff0208

08006d38 <memset>:
 8006d38:	4402      	add	r2, r0
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d100      	bne.n	8006d42 <memset+0xa>
 8006d40:	4770      	bx	lr
 8006d42:	f803 1b01 	strb.w	r1, [r3], #1
 8006d46:	e7f9      	b.n	8006d3c <memset+0x4>

08006d48 <_reclaim_reent>:
 8006d48:	4b29      	ldr	r3, [pc, #164]	@ (8006df0 <_reclaim_reent+0xa8>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4283      	cmp	r3, r0
 8006d4e:	b570      	push	{r4, r5, r6, lr}
 8006d50:	4604      	mov	r4, r0
 8006d52:	d04b      	beq.n	8006dec <_reclaim_reent+0xa4>
 8006d54:	69c3      	ldr	r3, [r0, #28]
 8006d56:	b1ab      	cbz	r3, 8006d84 <_reclaim_reent+0x3c>
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	b16b      	cbz	r3, 8006d78 <_reclaim_reent+0x30>
 8006d5c:	2500      	movs	r5, #0
 8006d5e:	69e3      	ldr	r3, [r4, #28]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	5959      	ldr	r1, [r3, r5]
 8006d64:	2900      	cmp	r1, #0
 8006d66:	d13b      	bne.n	8006de0 <_reclaim_reent+0x98>
 8006d68:	3504      	adds	r5, #4
 8006d6a:	2d80      	cmp	r5, #128	@ 0x80
 8006d6c:	d1f7      	bne.n	8006d5e <_reclaim_reent+0x16>
 8006d6e:	69e3      	ldr	r3, [r4, #28]
 8006d70:	4620      	mov	r0, r4
 8006d72:	68d9      	ldr	r1, [r3, #12]
 8006d74:	f000 f880 	bl	8006e78 <_free_r>
 8006d78:	69e3      	ldr	r3, [r4, #28]
 8006d7a:	6819      	ldr	r1, [r3, #0]
 8006d7c:	b111      	cbz	r1, 8006d84 <_reclaim_reent+0x3c>
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f000 f87a 	bl	8006e78 <_free_r>
 8006d84:	6961      	ldr	r1, [r4, #20]
 8006d86:	b111      	cbz	r1, 8006d8e <_reclaim_reent+0x46>
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f000 f875 	bl	8006e78 <_free_r>
 8006d8e:	69e1      	ldr	r1, [r4, #28]
 8006d90:	b111      	cbz	r1, 8006d98 <_reclaim_reent+0x50>
 8006d92:	4620      	mov	r0, r4
 8006d94:	f000 f870 	bl	8006e78 <_free_r>
 8006d98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006d9a:	b111      	cbz	r1, 8006da2 <_reclaim_reent+0x5a>
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f000 f86b 	bl	8006e78 <_free_r>
 8006da2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006da4:	b111      	cbz	r1, 8006dac <_reclaim_reent+0x64>
 8006da6:	4620      	mov	r0, r4
 8006da8:	f000 f866 	bl	8006e78 <_free_r>
 8006dac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006dae:	b111      	cbz	r1, 8006db6 <_reclaim_reent+0x6e>
 8006db0:	4620      	mov	r0, r4
 8006db2:	f000 f861 	bl	8006e78 <_free_r>
 8006db6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006db8:	b111      	cbz	r1, 8006dc0 <_reclaim_reent+0x78>
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f000 f85c 	bl	8006e78 <_free_r>
 8006dc0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006dc2:	b111      	cbz	r1, 8006dca <_reclaim_reent+0x82>
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f000 f857 	bl	8006e78 <_free_r>
 8006dca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006dcc:	b111      	cbz	r1, 8006dd4 <_reclaim_reent+0x8c>
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f000 f852 	bl	8006e78 <_free_r>
 8006dd4:	6a23      	ldr	r3, [r4, #32]
 8006dd6:	b14b      	cbz	r3, 8006dec <_reclaim_reent+0xa4>
 8006dd8:	4620      	mov	r0, r4
 8006dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006dde:	4718      	bx	r3
 8006de0:	680e      	ldr	r6, [r1, #0]
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 f848 	bl	8006e78 <_free_r>
 8006de8:	4631      	mov	r1, r6
 8006dea:	e7bb      	b.n	8006d64 <_reclaim_reent+0x1c>
 8006dec:	bd70      	pop	{r4, r5, r6, pc}
 8006dee:	bf00      	nop
 8006df0:	2000002c 	.word	0x2000002c

08006df4 <__errno>:
 8006df4:	4b01      	ldr	r3, [pc, #4]	@ (8006dfc <__errno+0x8>)
 8006df6:	6818      	ldr	r0, [r3, #0]
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	2000002c 	.word	0x2000002c

08006e00 <__libc_init_array>:
 8006e00:	b570      	push	{r4, r5, r6, lr}
 8006e02:	4d0d      	ldr	r5, [pc, #52]	@ (8006e38 <__libc_init_array+0x38>)
 8006e04:	4c0d      	ldr	r4, [pc, #52]	@ (8006e3c <__libc_init_array+0x3c>)
 8006e06:	1b64      	subs	r4, r4, r5
 8006e08:	10a4      	asrs	r4, r4, #2
 8006e0a:	2600      	movs	r6, #0
 8006e0c:	42a6      	cmp	r6, r4
 8006e0e:	d109      	bne.n	8006e24 <__libc_init_array+0x24>
 8006e10:	4d0b      	ldr	r5, [pc, #44]	@ (8006e40 <__libc_init_array+0x40>)
 8006e12:	4c0c      	ldr	r4, [pc, #48]	@ (8006e44 <__libc_init_array+0x44>)
 8006e14:	f000 fc6e 	bl	80076f4 <_init>
 8006e18:	1b64      	subs	r4, r4, r5
 8006e1a:	10a4      	asrs	r4, r4, #2
 8006e1c:	2600      	movs	r6, #0
 8006e1e:	42a6      	cmp	r6, r4
 8006e20:	d105      	bne.n	8006e2e <__libc_init_array+0x2e>
 8006e22:	bd70      	pop	{r4, r5, r6, pc}
 8006e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e28:	4798      	blx	r3
 8006e2a:	3601      	adds	r6, #1
 8006e2c:	e7ee      	b.n	8006e0c <__libc_init_array+0xc>
 8006e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e32:	4798      	blx	r3
 8006e34:	3601      	adds	r6, #1
 8006e36:	e7f2      	b.n	8006e1e <__libc_init_array+0x1e>
 8006e38:	080085d4 	.word	0x080085d4
 8006e3c:	080085d4 	.word	0x080085d4
 8006e40:	080085d4 	.word	0x080085d4
 8006e44:	080085d8 	.word	0x080085d8

08006e48 <__retarget_lock_acquire_recursive>:
 8006e48:	4770      	bx	lr

08006e4a <__retarget_lock_release_recursive>:
 8006e4a:	4770      	bx	lr

08006e4c <strcpy>:
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e52:	f803 2b01 	strb.w	r2, [r3], #1
 8006e56:	2a00      	cmp	r2, #0
 8006e58:	d1f9      	bne.n	8006e4e <strcpy+0x2>
 8006e5a:	4770      	bx	lr

08006e5c <memcpy>:
 8006e5c:	440a      	add	r2, r1
 8006e5e:	4291      	cmp	r1, r2
 8006e60:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e64:	d100      	bne.n	8006e68 <memcpy+0xc>
 8006e66:	4770      	bx	lr
 8006e68:	b510      	push	{r4, lr}
 8006e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e72:	4291      	cmp	r1, r2
 8006e74:	d1f9      	bne.n	8006e6a <memcpy+0xe>
 8006e76:	bd10      	pop	{r4, pc}

08006e78 <_free_r>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	4605      	mov	r5, r0
 8006e7c:	2900      	cmp	r1, #0
 8006e7e:	d041      	beq.n	8006f04 <_free_r+0x8c>
 8006e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e84:	1f0c      	subs	r4, r1, #4
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	bfb8      	it	lt
 8006e8a:	18e4      	addlt	r4, r4, r3
 8006e8c:	f000 f8e0 	bl	8007050 <__malloc_lock>
 8006e90:	4a1d      	ldr	r2, [pc, #116]	@ (8006f08 <_free_r+0x90>)
 8006e92:	6813      	ldr	r3, [r2, #0]
 8006e94:	b933      	cbnz	r3, 8006ea4 <_free_r+0x2c>
 8006e96:	6063      	str	r3, [r4, #4]
 8006e98:	6014      	str	r4, [r2, #0]
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ea0:	f000 b8dc 	b.w	800705c <__malloc_unlock>
 8006ea4:	42a3      	cmp	r3, r4
 8006ea6:	d908      	bls.n	8006eba <_free_r+0x42>
 8006ea8:	6820      	ldr	r0, [r4, #0]
 8006eaa:	1821      	adds	r1, r4, r0
 8006eac:	428b      	cmp	r3, r1
 8006eae:	bf01      	itttt	eq
 8006eb0:	6819      	ldreq	r1, [r3, #0]
 8006eb2:	685b      	ldreq	r3, [r3, #4]
 8006eb4:	1809      	addeq	r1, r1, r0
 8006eb6:	6021      	streq	r1, [r4, #0]
 8006eb8:	e7ed      	b.n	8006e96 <_free_r+0x1e>
 8006eba:	461a      	mov	r2, r3
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	b10b      	cbz	r3, 8006ec4 <_free_r+0x4c>
 8006ec0:	42a3      	cmp	r3, r4
 8006ec2:	d9fa      	bls.n	8006eba <_free_r+0x42>
 8006ec4:	6811      	ldr	r1, [r2, #0]
 8006ec6:	1850      	adds	r0, r2, r1
 8006ec8:	42a0      	cmp	r0, r4
 8006eca:	d10b      	bne.n	8006ee4 <_free_r+0x6c>
 8006ecc:	6820      	ldr	r0, [r4, #0]
 8006ece:	4401      	add	r1, r0
 8006ed0:	1850      	adds	r0, r2, r1
 8006ed2:	4283      	cmp	r3, r0
 8006ed4:	6011      	str	r1, [r2, #0]
 8006ed6:	d1e0      	bne.n	8006e9a <_free_r+0x22>
 8006ed8:	6818      	ldr	r0, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	6053      	str	r3, [r2, #4]
 8006ede:	4408      	add	r0, r1
 8006ee0:	6010      	str	r0, [r2, #0]
 8006ee2:	e7da      	b.n	8006e9a <_free_r+0x22>
 8006ee4:	d902      	bls.n	8006eec <_free_r+0x74>
 8006ee6:	230c      	movs	r3, #12
 8006ee8:	602b      	str	r3, [r5, #0]
 8006eea:	e7d6      	b.n	8006e9a <_free_r+0x22>
 8006eec:	6820      	ldr	r0, [r4, #0]
 8006eee:	1821      	adds	r1, r4, r0
 8006ef0:	428b      	cmp	r3, r1
 8006ef2:	bf04      	itt	eq
 8006ef4:	6819      	ldreq	r1, [r3, #0]
 8006ef6:	685b      	ldreq	r3, [r3, #4]
 8006ef8:	6063      	str	r3, [r4, #4]
 8006efa:	bf04      	itt	eq
 8006efc:	1809      	addeq	r1, r1, r0
 8006efe:	6021      	streq	r1, [r4, #0]
 8006f00:	6054      	str	r4, [r2, #4]
 8006f02:	e7ca      	b.n	8006e9a <_free_r+0x22>
 8006f04:	bd38      	pop	{r3, r4, r5, pc}
 8006f06:	bf00      	nop
 8006f08:	200050a4 	.word	0x200050a4

08006f0c <sbrk_aligned>:
 8006f0c:	b570      	push	{r4, r5, r6, lr}
 8006f0e:	4e0f      	ldr	r6, [pc, #60]	@ (8006f4c <sbrk_aligned+0x40>)
 8006f10:	460c      	mov	r4, r1
 8006f12:	6831      	ldr	r1, [r6, #0]
 8006f14:	4605      	mov	r5, r0
 8006f16:	b911      	cbnz	r1, 8006f1e <sbrk_aligned+0x12>
 8006f18:	f000 fba6 	bl	8007668 <_sbrk_r>
 8006f1c:	6030      	str	r0, [r6, #0]
 8006f1e:	4621      	mov	r1, r4
 8006f20:	4628      	mov	r0, r5
 8006f22:	f000 fba1 	bl	8007668 <_sbrk_r>
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	d103      	bne.n	8006f32 <sbrk_aligned+0x26>
 8006f2a:	f04f 34ff 	mov.w	r4, #4294967295
 8006f2e:	4620      	mov	r0, r4
 8006f30:	bd70      	pop	{r4, r5, r6, pc}
 8006f32:	1cc4      	adds	r4, r0, #3
 8006f34:	f024 0403 	bic.w	r4, r4, #3
 8006f38:	42a0      	cmp	r0, r4
 8006f3a:	d0f8      	beq.n	8006f2e <sbrk_aligned+0x22>
 8006f3c:	1a21      	subs	r1, r4, r0
 8006f3e:	4628      	mov	r0, r5
 8006f40:	f000 fb92 	bl	8007668 <_sbrk_r>
 8006f44:	3001      	adds	r0, #1
 8006f46:	d1f2      	bne.n	8006f2e <sbrk_aligned+0x22>
 8006f48:	e7ef      	b.n	8006f2a <sbrk_aligned+0x1e>
 8006f4a:	bf00      	nop
 8006f4c:	200050a0 	.word	0x200050a0

08006f50 <_malloc_r>:
 8006f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f54:	1ccd      	adds	r5, r1, #3
 8006f56:	f025 0503 	bic.w	r5, r5, #3
 8006f5a:	3508      	adds	r5, #8
 8006f5c:	2d0c      	cmp	r5, #12
 8006f5e:	bf38      	it	cc
 8006f60:	250c      	movcc	r5, #12
 8006f62:	2d00      	cmp	r5, #0
 8006f64:	4606      	mov	r6, r0
 8006f66:	db01      	blt.n	8006f6c <_malloc_r+0x1c>
 8006f68:	42a9      	cmp	r1, r5
 8006f6a:	d904      	bls.n	8006f76 <_malloc_r+0x26>
 8006f6c:	230c      	movs	r3, #12
 8006f6e:	6033      	str	r3, [r6, #0]
 8006f70:	2000      	movs	r0, #0
 8006f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800704c <_malloc_r+0xfc>
 8006f7a:	f000 f869 	bl	8007050 <__malloc_lock>
 8006f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8006f82:	461c      	mov	r4, r3
 8006f84:	bb44      	cbnz	r4, 8006fd8 <_malloc_r+0x88>
 8006f86:	4629      	mov	r1, r5
 8006f88:	4630      	mov	r0, r6
 8006f8a:	f7ff ffbf 	bl	8006f0c <sbrk_aligned>
 8006f8e:	1c43      	adds	r3, r0, #1
 8006f90:	4604      	mov	r4, r0
 8006f92:	d158      	bne.n	8007046 <_malloc_r+0xf6>
 8006f94:	f8d8 4000 	ldr.w	r4, [r8]
 8006f98:	4627      	mov	r7, r4
 8006f9a:	2f00      	cmp	r7, #0
 8006f9c:	d143      	bne.n	8007026 <_malloc_r+0xd6>
 8006f9e:	2c00      	cmp	r4, #0
 8006fa0:	d04b      	beq.n	800703a <_malloc_r+0xea>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	4639      	mov	r1, r7
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	eb04 0903 	add.w	r9, r4, r3
 8006fac:	f000 fb5c 	bl	8007668 <_sbrk_r>
 8006fb0:	4581      	cmp	r9, r0
 8006fb2:	d142      	bne.n	800703a <_malloc_r+0xea>
 8006fb4:	6821      	ldr	r1, [r4, #0]
 8006fb6:	1a6d      	subs	r5, r5, r1
 8006fb8:	4629      	mov	r1, r5
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f7ff ffa6 	bl	8006f0c <sbrk_aligned>
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	d03a      	beq.n	800703a <_malloc_r+0xea>
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	442b      	add	r3, r5
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	f8d8 3000 	ldr.w	r3, [r8]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	bb62      	cbnz	r2, 800702c <_malloc_r+0xdc>
 8006fd2:	f8c8 7000 	str.w	r7, [r8]
 8006fd6:	e00f      	b.n	8006ff8 <_malloc_r+0xa8>
 8006fd8:	6822      	ldr	r2, [r4, #0]
 8006fda:	1b52      	subs	r2, r2, r5
 8006fdc:	d420      	bmi.n	8007020 <_malloc_r+0xd0>
 8006fde:	2a0b      	cmp	r2, #11
 8006fe0:	d917      	bls.n	8007012 <_malloc_r+0xc2>
 8006fe2:	1961      	adds	r1, r4, r5
 8006fe4:	42a3      	cmp	r3, r4
 8006fe6:	6025      	str	r5, [r4, #0]
 8006fe8:	bf18      	it	ne
 8006fea:	6059      	strne	r1, [r3, #4]
 8006fec:	6863      	ldr	r3, [r4, #4]
 8006fee:	bf08      	it	eq
 8006ff0:	f8c8 1000 	streq.w	r1, [r8]
 8006ff4:	5162      	str	r2, [r4, r5]
 8006ff6:	604b      	str	r3, [r1, #4]
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	f000 f82f 	bl	800705c <__malloc_unlock>
 8006ffe:	f104 000b 	add.w	r0, r4, #11
 8007002:	1d23      	adds	r3, r4, #4
 8007004:	f020 0007 	bic.w	r0, r0, #7
 8007008:	1ac2      	subs	r2, r0, r3
 800700a:	bf1c      	itt	ne
 800700c:	1a1b      	subne	r3, r3, r0
 800700e:	50a3      	strne	r3, [r4, r2]
 8007010:	e7af      	b.n	8006f72 <_malloc_r+0x22>
 8007012:	6862      	ldr	r2, [r4, #4]
 8007014:	42a3      	cmp	r3, r4
 8007016:	bf0c      	ite	eq
 8007018:	f8c8 2000 	streq.w	r2, [r8]
 800701c:	605a      	strne	r2, [r3, #4]
 800701e:	e7eb      	b.n	8006ff8 <_malloc_r+0xa8>
 8007020:	4623      	mov	r3, r4
 8007022:	6864      	ldr	r4, [r4, #4]
 8007024:	e7ae      	b.n	8006f84 <_malloc_r+0x34>
 8007026:	463c      	mov	r4, r7
 8007028:	687f      	ldr	r7, [r7, #4]
 800702a:	e7b6      	b.n	8006f9a <_malloc_r+0x4a>
 800702c:	461a      	mov	r2, r3
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	42a3      	cmp	r3, r4
 8007032:	d1fb      	bne.n	800702c <_malloc_r+0xdc>
 8007034:	2300      	movs	r3, #0
 8007036:	6053      	str	r3, [r2, #4]
 8007038:	e7de      	b.n	8006ff8 <_malloc_r+0xa8>
 800703a:	230c      	movs	r3, #12
 800703c:	6033      	str	r3, [r6, #0]
 800703e:	4630      	mov	r0, r6
 8007040:	f000 f80c 	bl	800705c <__malloc_unlock>
 8007044:	e794      	b.n	8006f70 <_malloc_r+0x20>
 8007046:	6005      	str	r5, [r0, #0]
 8007048:	e7d6      	b.n	8006ff8 <_malloc_r+0xa8>
 800704a:	bf00      	nop
 800704c:	200050a4 	.word	0x200050a4

08007050 <__malloc_lock>:
 8007050:	4801      	ldr	r0, [pc, #4]	@ (8007058 <__malloc_lock+0x8>)
 8007052:	f7ff bef9 	b.w	8006e48 <__retarget_lock_acquire_recursive>
 8007056:	bf00      	nop
 8007058:	2000509c 	.word	0x2000509c

0800705c <__malloc_unlock>:
 800705c:	4801      	ldr	r0, [pc, #4]	@ (8007064 <__malloc_unlock+0x8>)
 800705e:	f7ff bef4 	b.w	8006e4a <__retarget_lock_release_recursive>
 8007062:	bf00      	nop
 8007064:	2000509c 	.word	0x2000509c

08007068 <__ssputs_r>:
 8007068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800706c:	688e      	ldr	r6, [r1, #8]
 800706e:	461f      	mov	r7, r3
 8007070:	42be      	cmp	r6, r7
 8007072:	680b      	ldr	r3, [r1, #0]
 8007074:	4682      	mov	sl, r0
 8007076:	460c      	mov	r4, r1
 8007078:	4690      	mov	r8, r2
 800707a:	d82d      	bhi.n	80070d8 <__ssputs_r+0x70>
 800707c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007080:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007084:	d026      	beq.n	80070d4 <__ssputs_r+0x6c>
 8007086:	6965      	ldr	r5, [r4, #20]
 8007088:	6909      	ldr	r1, [r1, #16]
 800708a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800708e:	eba3 0901 	sub.w	r9, r3, r1
 8007092:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007096:	1c7b      	adds	r3, r7, #1
 8007098:	444b      	add	r3, r9
 800709a:	106d      	asrs	r5, r5, #1
 800709c:	429d      	cmp	r5, r3
 800709e:	bf38      	it	cc
 80070a0:	461d      	movcc	r5, r3
 80070a2:	0553      	lsls	r3, r2, #21
 80070a4:	d527      	bpl.n	80070f6 <__ssputs_r+0x8e>
 80070a6:	4629      	mov	r1, r5
 80070a8:	f7ff ff52 	bl	8006f50 <_malloc_r>
 80070ac:	4606      	mov	r6, r0
 80070ae:	b360      	cbz	r0, 800710a <__ssputs_r+0xa2>
 80070b0:	6921      	ldr	r1, [r4, #16]
 80070b2:	464a      	mov	r2, r9
 80070b4:	f7ff fed2 	bl	8006e5c <memcpy>
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80070be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070c2:	81a3      	strh	r3, [r4, #12]
 80070c4:	6126      	str	r6, [r4, #16]
 80070c6:	6165      	str	r5, [r4, #20]
 80070c8:	444e      	add	r6, r9
 80070ca:	eba5 0509 	sub.w	r5, r5, r9
 80070ce:	6026      	str	r6, [r4, #0]
 80070d0:	60a5      	str	r5, [r4, #8]
 80070d2:	463e      	mov	r6, r7
 80070d4:	42be      	cmp	r6, r7
 80070d6:	d900      	bls.n	80070da <__ssputs_r+0x72>
 80070d8:	463e      	mov	r6, r7
 80070da:	6820      	ldr	r0, [r4, #0]
 80070dc:	4632      	mov	r2, r6
 80070de:	4641      	mov	r1, r8
 80070e0:	f000 faa8 	bl	8007634 <memmove>
 80070e4:	68a3      	ldr	r3, [r4, #8]
 80070e6:	1b9b      	subs	r3, r3, r6
 80070e8:	60a3      	str	r3, [r4, #8]
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	4433      	add	r3, r6
 80070ee:	6023      	str	r3, [r4, #0]
 80070f0:	2000      	movs	r0, #0
 80070f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f6:	462a      	mov	r2, r5
 80070f8:	f000 fac6 	bl	8007688 <_realloc_r>
 80070fc:	4606      	mov	r6, r0
 80070fe:	2800      	cmp	r0, #0
 8007100:	d1e0      	bne.n	80070c4 <__ssputs_r+0x5c>
 8007102:	6921      	ldr	r1, [r4, #16]
 8007104:	4650      	mov	r0, sl
 8007106:	f7ff feb7 	bl	8006e78 <_free_r>
 800710a:	230c      	movs	r3, #12
 800710c:	f8ca 3000 	str.w	r3, [sl]
 8007110:	89a3      	ldrh	r3, [r4, #12]
 8007112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007116:	81a3      	strh	r3, [r4, #12]
 8007118:	f04f 30ff 	mov.w	r0, #4294967295
 800711c:	e7e9      	b.n	80070f2 <__ssputs_r+0x8a>
	...

08007120 <_svfiprintf_r>:
 8007120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007124:	4698      	mov	r8, r3
 8007126:	898b      	ldrh	r3, [r1, #12]
 8007128:	061b      	lsls	r3, r3, #24
 800712a:	b09d      	sub	sp, #116	@ 0x74
 800712c:	4607      	mov	r7, r0
 800712e:	460d      	mov	r5, r1
 8007130:	4614      	mov	r4, r2
 8007132:	d510      	bpl.n	8007156 <_svfiprintf_r+0x36>
 8007134:	690b      	ldr	r3, [r1, #16]
 8007136:	b973      	cbnz	r3, 8007156 <_svfiprintf_r+0x36>
 8007138:	2140      	movs	r1, #64	@ 0x40
 800713a:	f7ff ff09 	bl	8006f50 <_malloc_r>
 800713e:	6028      	str	r0, [r5, #0]
 8007140:	6128      	str	r0, [r5, #16]
 8007142:	b930      	cbnz	r0, 8007152 <_svfiprintf_r+0x32>
 8007144:	230c      	movs	r3, #12
 8007146:	603b      	str	r3, [r7, #0]
 8007148:	f04f 30ff 	mov.w	r0, #4294967295
 800714c:	b01d      	add	sp, #116	@ 0x74
 800714e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007152:	2340      	movs	r3, #64	@ 0x40
 8007154:	616b      	str	r3, [r5, #20]
 8007156:	2300      	movs	r3, #0
 8007158:	9309      	str	r3, [sp, #36]	@ 0x24
 800715a:	2320      	movs	r3, #32
 800715c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007160:	f8cd 800c 	str.w	r8, [sp, #12]
 8007164:	2330      	movs	r3, #48	@ 0x30
 8007166:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007304 <_svfiprintf_r+0x1e4>
 800716a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800716e:	f04f 0901 	mov.w	r9, #1
 8007172:	4623      	mov	r3, r4
 8007174:	469a      	mov	sl, r3
 8007176:	f813 2b01 	ldrb.w	r2, [r3], #1
 800717a:	b10a      	cbz	r2, 8007180 <_svfiprintf_r+0x60>
 800717c:	2a25      	cmp	r2, #37	@ 0x25
 800717e:	d1f9      	bne.n	8007174 <_svfiprintf_r+0x54>
 8007180:	ebba 0b04 	subs.w	fp, sl, r4
 8007184:	d00b      	beq.n	800719e <_svfiprintf_r+0x7e>
 8007186:	465b      	mov	r3, fp
 8007188:	4622      	mov	r2, r4
 800718a:	4629      	mov	r1, r5
 800718c:	4638      	mov	r0, r7
 800718e:	f7ff ff6b 	bl	8007068 <__ssputs_r>
 8007192:	3001      	adds	r0, #1
 8007194:	f000 80a7 	beq.w	80072e6 <_svfiprintf_r+0x1c6>
 8007198:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800719a:	445a      	add	r2, fp
 800719c:	9209      	str	r2, [sp, #36]	@ 0x24
 800719e:	f89a 3000 	ldrb.w	r3, [sl]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f000 809f 	beq.w	80072e6 <_svfiprintf_r+0x1c6>
 80071a8:	2300      	movs	r3, #0
 80071aa:	f04f 32ff 	mov.w	r2, #4294967295
 80071ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071b2:	f10a 0a01 	add.w	sl, sl, #1
 80071b6:	9304      	str	r3, [sp, #16]
 80071b8:	9307      	str	r3, [sp, #28]
 80071ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071be:	931a      	str	r3, [sp, #104]	@ 0x68
 80071c0:	4654      	mov	r4, sl
 80071c2:	2205      	movs	r2, #5
 80071c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071c8:	484e      	ldr	r0, [pc, #312]	@ (8007304 <_svfiprintf_r+0x1e4>)
 80071ca:	f7f9 f839 	bl	8000240 <memchr>
 80071ce:	9a04      	ldr	r2, [sp, #16]
 80071d0:	b9d8      	cbnz	r0, 800720a <_svfiprintf_r+0xea>
 80071d2:	06d0      	lsls	r0, r2, #27
 80071d4:	bf44      	itt	mi
 80071d6:	2320      	movmi	r3, #32
 80071d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071dc:	0711      	lsls	r1, r2, #28
 80071de:	bf44      	itt	mi
 80071e0:	232b      	movmi	r3, #43	@ 0x2b
 80071e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071e6:	f89a 3000 	ldrb.w	r3, [sl]
 80071ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80071ec:	d015      	beq.n	800721a <_svfiprintf_r+0xfa>
 80071ee:	9a07      	ldr	r2, [sp, #28]
 80071f0:	4654      	mov	r4, sl
 80071f2:	2000      	movs	r0, #0
 80071f4:	f04f 0c0a 	mov.w	ip, #10
 80071f8:	4621      	mov	r1, r4
 80071fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071fe:	3b30      	subs	r3, #48	@ 0x30
 8007200:	2b09      	cmp	r3, #9
 8007202:	d94b      	bls.n	800729c <_svfiprintf_r+0x17c>
 8007204:	b1b0      	cbz	r0, 8007234 <_svfiprintf_r+0x114>
 8007206:	9207      	str	r2, [sp, #28]
 8007208:	e014      	b.n	8007234 <_svfiprintf_r+0x114>
 800720a:	eba0 0308 	sub.w	r3, r0, r8
 800720e:	fa09 f303 	lsl.w	r3, r9, r3
 8007212:	4313      	orrs	r3, r2
 8007214:	9304      	str	r3, [sp, #16]
 8007216:	46a2      	mov	sl, r4
 8007218:	e7d2      	b.n	80071c0 <_svfiprintf_r+0xa0>
 800721a:	9b03      	ldr	r3, [sp, #12]
 800721c:	1d19      	adds	r1, r3, #4
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	9103      	str	r1, [sp, #12]
 8007222:	2b00      	cmp	r3, #0
 8007224:	bfbb      	ittet	lt
 8007226:	425b      	neglt	r3, r3
 8007228:	f042 0202 	orrlt.w	r2, r2, #2
 800722c:	9307      	strge	r3, [sp, #28]
 800722e:	9307      	strlt	r3, [sp, #28]
 8007230:	bfb8      	it	lt
 8007232:	9204      	strlt	r2, [sp, #16]
 8007234:	7823      	ldrb	r3, [r4, #0]
 8007236:	2b2e      	cmp	r3, #46	@ 0x2e
 8007238:	d10a      	bne.n	8007250 <_svfiprintf_r+0x130>
 800723a:	7863      	ldrb	r3, [r4, #1]
 800723c:	2b2a      	cmp	r3, #42	@ 0x2a
 800723e:	d132      	bne.n	80072a6 <_svfiprintf_r+0x186>
 8007240:	9b03      	ldr	r3, [sp, #12]
 8007242:	1d1a      	adds	r2, r3, #4
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	9203      	str	r2, [sp, #12]
 8007248:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800724c:	3402      	adds	r4, #2
 800724e:	9305      	str	r3, [sp, #20]
 8007250:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007314 <_svfiprintf_r+0x1f4>
 8007254:	7821      	ldrb	r1, [r4, #0]
 8007256:	2203      	movs	r2, #3
 8007258:	4650      	mov	r0, sl
 800725a:	f7f8 fff1 	bl	8000240 <memchr>
 800725e:	b138      	cbz	r0, 8007270 <_svfiprintf_r+0x150>
 8007260:	9b04      	ldr	r3, [sp, #16]
 8007262:	eba0 000a 	sub.w	r0, r0, sl
 8007266:	2240      	movs	r2, #64	@ 0x40
 8007268:	4082      	lsls	r2, r0
 800726a:	4313      	orrs	r3, r2
 800726c:	3401      	adds	r4, #1
 800726e:	9304      	str	r3, [sp, #16]
 8007270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007274:	4824      	ldr	r0, [pc, #144]	@ (8007308 <_svfiprintf_r+0x1e8>)
 8007276:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800727a:	2206      	movs	r2, #6
 800727c:	f7f8 ffe0 	bl	8000240 <memchr>
 8007280:	2800      	cmp	r0, #0
 8007282:	d036      	beq.n	80072f2 <_svfiprintf_r+0x1d2>
 8007284:	4b21      	ldr	r3, [pc, #132]	@ (800730c <_svfiprintf_r+0x1ec>)
 8007286:	bb1b      	cbnz	r3, 80072d0 <_svfiprintf_r+0x1b0>
 8007288:	9b03      	ldr	r3, [sp, #12]
 800728a:	3307      	adds	r3, #7
 800728c:	f023 0307 	bic.w	r3, r3, #7
 8007290:	3308      	adds	r3, #8
 8007292:	9303      	str	r3, [sp, #12]
 8007294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007296:	4433      	add	r3, r6
 8007298:	9309      	str	r3, [sp, #36]	@ 0x24
 800729a:	e76a      	b.n	8007172 <_svfiprintf_r+0x52>
 800729c:	fb0c 3202 	mla	r2, ip, r2, r3
 80072a0:	460c      	mov	r4, r1
 80072a2:	2001      	movs	r0, #1
 80072a4:	e7a8      	b.n	80071f8 <_svfiprintf_r+0xd8>
 80072a6:	2300      	movs	r3, #0
 80072a8:	3401      	adds	r4, #1
 80072aa:	9305      	str	r3, [sp, #20]
 80072ac:	4619      	mov	r1, r3
 80072ae:	f04f 0c0a 	mov.w	ip, #10
 80072b2:	4620      	mov	r0, r4
 80072b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072b8:	3a30      	subs	r2, #48	@ 0x30
 80072ba:	2a09      	cmp	r2, #9
 80072bc:	d903      	bls.n	80072c6 <_svfiprintf_r+0x1a6>
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d0c6      	beq.n	8007250 <_svfiprintf_r+0x130>
 80072c2:	9105      	str	r1, [sp, #20]
 80072c4:	e7c4      	b.n	8007250 <_svfiprintf_r+0x130>
 80072c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80072ca:	4604      	mov	r4, r0
 80072cc:	2301      	movs	r3, #1
 80072ce:	e7f0      	b.n	80072b2 <_svfiprintf_r+0x192>
 80072d0:	ab03      	add	r3, sp, #12
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	462a      	mov	r2, r5
 80072d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007310 <_svfiprintf_r+0x1f0>)
 80072d8:	a904      	add	r1, sp, #16
 80072da:	4638      	mov	r0, r7
 80072dc:	f3af 8000 	nop.w
 80072e0:	1c42      	adds	r2, r0, #1
 80072e2:	4606      	mov	r6, r0
 80072e4:	d1d6      	bne.n	8007294 <_svfiprintf_r+0x174>
 80072e6:	89ab      	ldrh	r3, [r5, #12]
 80072e8:	065b      	lsls	r3, r3, #25
 80072ea:	f53f af2d 	bmi.w	8007148 <_svfiprintf_r+0x28>
 80072ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072f0:	e72c      	b.n	800714c <_svfiprintf_r+0x2c>
 80072f2:	ab03      	add	r3, sp, #12
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	462a      	mov	r2, r5
 80072f8:	4b05      	ldr	r3, [pc, #20]	@ (8007310 <_svfiprintf_r+0x1f0>)
 80072fa:	a904      	add	r1, sp, #16
 80072fc:	4638      	mov	r0, r7
 80072fe:	f000 f879 	bl	80073f4 <_printf_i>
 8007302:	e7ed      	b.n	80072e0 <_svfiprintf_r+0x1c0>
 8007304:	08008598 	.word	0x08008598
 8007308:	080085a2 	.word	0x080085a2
 800730c:	00000000 	.word	0x00000000
 8007310:	08007069 	.word	0x08007069
 8007314:	0800859e 	.word	0x0800859e

08007318 <_printf_common>:
 8007318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800731c:	4616      	mov	r6, r2
 800731e:	4698      	mov	r8, r3
 8007320:	688a      	ldr	r2, [r1, #8]
 8007322:	690b      	ldr	r3, [r1, #16]
 8007324:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007328:	4293      	cmp	r3, r2
 800732a:	bfb8      	it	lt
 800732c:	4613      	movlt	r3, r2
 800732e:	6033      	str	r3, [r6, #0]
 8007330:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007334:	4607      	mov	r7, r0
 8007336:	460c      	mov	r4, r1
 8007338:	b10a      	cbz	r2, 800733e <_printf_common+0x26>
 800733a:	3301      	adds	r3, #1
 800733c:	6033      	str	r3, [r6, #0]
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	0699      	lsls	r1, r3, #26
 8007342:	bf42      	ittt	mi
 8007344:	6833      	ldrmi	r3, [r6, #0]
 8007346:	3302      	addmi	r3, #2
 8007348:	6033      	strmi	r3, [r6, #0]
 800734a:	6825      	ldr	r5, [r4, #0]
 800734c:	f015 0506 	ands.w	r5, r5, #6
 8007350:	d106      	bne.n	8007360 <_printf_common+0x48>
 8007352:	f104 0a19 	add.w	sl, r4, #25
 8007356:	68e3      	ldr	r3, [r4, #12]
 8007358:	6832      	ldr	r2, [r6, #0]
 800735a:	1a9b      	subs	r3, r3, r2
 800735c:	42ab      	cmp	r3, r5
 800735e:	dc26      	bgt.n	80073ae <_printf_common+0x96>
 8007360:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007364:	6822      	ldr	r2, [r4, #0]
 8007366:	3b00      	subs	r3, #0
 8007368:	bf18      	it	ne
 800736a:	2301      	movne	r3, #1
 800736c:	0692      	lsls	r2, r2, #26
 800736e:	d42b      	bmi.n	80073c8 <_printf_common+0xb0>
 8007370:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007374:	4641      	mov	r1, r8
 8007376:	4638      	mov	r0, r7
 8007378:	47c8      	blx	r9
 800737a:	3001      	adds	r0, #1
 800737c:	d01e      	beq.n	80073bc <_printf_common+0xa4>
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	6922      	ldr	r2, [r4, #16]
 8007382:	f003 0306 	and.w	r3, r3, #6
 8007386:	2b04      	cmp	r3, #4
 8007388:	bf02      	ittt	eq
 800738a:	68e5      	ldreq	r5, [r4, #12]
 800738c:	6833      	ldreq	r3, [r6, #0]
 800738e:	1aed      	subeq	r5, r5, r3
 8007390:	68a3      	ldr	r3, [r4, #8]
 8007392:	bf0c      	ite	eq
 8007394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007398:	2500      	movne	r5, #0
 800739a:	4293      	cmp	r3, r2
 800739c:	bfc4      	itt	gt
 800739e:	1a9b      	subgt	r3, r3, r2
 80073a0:	18ed      	addgt	r5, r5, r3
 80073a2:	2600      	movs	r6, #0
 80073a4:	341a      	adds	r4, #26
 80073a6:	42b5      	cmp	r5, r6
 80073a8:	d11a      	bne.n	80073e0 <_printf_common+0xc8>
 80073aa:	2000      	movs	r0, #0
 80073ac:	e008      	b.n	80073c0 <_printf_common+0xa8>
 80073ae:	2301      	movs	r3, #1
 80073b0:	4652      	mov	r2, sl
 80073b2:	4641      	mov	r1, r8
 80073b4:	4638      	mov	r0, r7
 80073b6:	47c8      	blx	r9
 80073b8:	3001      	adds	r0, #1
 80073ba:	d103      	bne.n	80073c4 <_printf_common+0xac>
 80073bc:	f04f 30ff 	mov.w	r0, #4294967295
 80073c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c4:	3501      	adds	r5, #1
 80073c6:	e7c6      	b.n	8007356 <_printf_common+0x3e>
 80073c8:	18e1      	adds	r1, r4, r3
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	2030      	movs	r0, #48	@ 0x30
 80073ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80073d2:	4422      	add	r2, r4
 80073d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80073d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80073dc:	3302      	adds	r3, #2
 80073de:	e7c7      	b.n	8007370 <_printf_common+0x58>
 80073e0:	2301      	movs	r3, #1
 80073e2:	4622      	mov	r2, r4
 80073e4:	4641      	mov	r1, r8
 80073e6:	4638      	mov	r0, r7
 80073e8:	47c8      	blx	r9
 80073ea:	3001      	adds	r0, #1
 80073ec:	d0e6      	beq.n	80073bc <_printf_common+0xa4>
 80073ee:	3601      	adds	r6, #1
 80073f0:	e7d9      	b.n	80073a6 <_printf_common+0x8e>
	...

080073f4 <_printf_i>:
 80073f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073f8:	7e0f      	ldrb	r7, [r1, #24]
 80073fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80073fc:	2f78      	cmp	r7, #120	@ 0x78
 80073fe:	4691      	mov	r9, r2
 8007400:	4680      	mov	r8, r0
 8007402:	460c      	mov	r4, r1
 8007404:	469a      	mov	sl, r3
 8007406:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800740a:	d807      	bhi.n	800741c <_printf_i+0x28>
 800740c:	2f62      	cmp	r7, #98	@ 0x62
 800740e:	d80a      	bhi.n	8007426 <_printf_i+0x32>
 8007410:	2f00      	cmp	r7, #0
 8007412:	f000 80d2 	beq.w	80075ba <_printf_i+0x1c6>
 8007416:	2f58      	cmp	r7, #88	@ 0x58
 8007418:	f000 80b9 	beq.w	800758e <_printf_i+0x19a>
 800741c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007420:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007424:	e03a      	b.n	800749c <_printf_i+0xa8>
 8007426:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800742a:	2b15      	cmp	r3, #21
 800742c:	d8f6      	bhi.n	800741c <_printf_i+0x28>
 800742e:	a101      	add	r1, pc, #4	@ (adr r1, 8007434 <_printf_i+0x40>)
 8007430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007434:	0800748d 	.word	0x0800748d
 8007438:	080074a1 	.word	0x080074a1
 800743c:	0800741d 	.word	0x0800741d
 8007440:	0800741d 	.word	0x0800741d
 8007444:	0800741d 	.word	0x0800741d
 8007448:	0800741d 	.word	0x0800741d
 800744c:	080074a1 	.word	0x080074a1
 8007450:	0800741d 	.word	0x0800741d
 8007454:	0800741d 	.word	0x0800741d
 8007458:	0800741d 	.word	0x0800741d
 800745c:	0800741d 	.word	0x0800741d
 8007460:	080075a1 	.word	0x080075a1
 8007464:	080074cb 	.word	0x080074cb
 8007468:	0800755b 	.word	0x0800755b
 800746c:	0800741d 	.word	0x0800741d
 8007470:	0800741d 	.word	0x0800741d
 8007474:	080075c3 	.word	0x080075c3
 8007478:	0800741d 	.word	0x0800741d
 800747c:	080074cb 	.word	0x080074cb
 8007480:	0800741d 	.word	0x0800741d
 8007484:	0800741d 	.word	0x0800741d
 8007488:	08007563 	.word	0x08007563
 800748c:	6833      	ldr	r3, [r6, #0]
 800748e:	1d1a      	adds	r2, r3, #4
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6032      	str	r2, [r6, #0]
 8007494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007498:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800749c:	2301      	movs	r3, #1
 800749e:	e09d      	b.n	80075dc <_printf_i+0x1e8>
 80074a0:	6833      	ldr	r3, [r6, #0]
 80074a2:	6820      	ldr	r0, [r4, #0]
 80074a4:	1d19      	adds	r1, r3, #4
 80074a6:	6031      	str	r1, [r6, #0]
 80074a8:	0606      	lsls	r6, r0, #24
 80074aa:	d501      	bpl.n	80074b0 <_printf_i+0xbc>
 80074ac:	681d      	ldr	r5, [r3, #0]
 80074ae:	e003      	b.n	80074b8 <_printf_i+0xc4>
 80074b0:	0645      	lsls	r5, r0, #25
 80074b2:	d5fb      	bpl.n	80074ac <_printf_i+0xb8>
 80074b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80074b8:	2d00      	cmp	r5, #0
 80074ba:	da03      	bge.n	80074c4 <_printf_i+0xd0>
 80074bc:	232d      	movs	r3, #45	@ 0x2d
 80074be:	426d      	negs	r5, r5
 80074c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074c4:	4859      	ldr	r0, [pc, #356]	@ (800762c <_printf_i+0x238>)
 80074c6:	230a      	movs	r3, #10
 80074c8:	e011      	b.n	80074ee <_printf_i+0xfa>
 80074ca:	6821      	ldr	r1, [r4, #0]
 80074cc:	6833      	ldr	r3, [r6, #0]
 80074ce:	0608      	lsls	r0, r1, #24
 80074d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80074d4:	d402      	bmi.n	80074dc <_printf_i+0xe8>
 80074d6:	0649      	lsls	r1, r1, #25
 80074d8:	bf48      	it	mi
 80074da:	b2ad      	uxthmi	r5, r5
 80074dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80074de:	4853      	ldr	r0, [pc, #332]	@ (800762c <_printf_i+0x238>)
 80074e0:	6033      	str	r3, [r6, #0]
 80074e2:	bf14      	ite	ne
 80074e4:	230a      	movne	r3, #10
 80074e6:	2308      	moveq	r3, #8
 80074e8:	2100      	movs	r1, #0
 80074ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80074ee:	6866      	ldr	r6, [r4, #4]
 80074f0:	60a6      	str	r6, [r4, #8]
 80074f2:	2e00      	cmp	r6, #0
 80074f4:	bfa2      	ittt	ge
 80074f6:	6821      	ldrge	r1, [r4, #0]
 80074f8:	f021 0104 	bicge.w	r1, r1, #4
 80074fc:	6021      	strge	r1, [r4, #0]
 80074fe:	b90d      	cbnz	r5, 8007504 <_printf_i+0x110>
 8007500:	2e00      	cmp	r6, #0
 8007502:	d04b      	beq.n	800759c <_printf_i+0x1a8>
 8007504:	4616      	mov	r6, r2
 8007506:	fbb5 f1f3 	udiv	r1, r5, r3
 800750a:	fb03 5711 	mls	r7, r3, r1, r5
 800750e:	5dc7      	ldrb	r7, [r0, r7]
 8007510:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007514:	462f      	mov	r7, r5
 8007516:	42bb      	cmp	r3, r7
 8007518:	460d      	mov	r5, r1
 800751a:	d9f4      	bls.n	8007506 <_printf_i+0x112>
 800751c:	2b08      	cmp	r3, #8
 800751e:	d10b      	bne.n	8007538 <_printf_i+0x144>
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	07df      	lsls	r7, r3, #31
 8007524:	d508      	bpl.n	8007538 <_printf_i+0x144>
 8007526:	6923      	ldr	r3, [r4, #16]
 8007528:	6861      	ldr	r1, [r4, #4]
 800752a:	4299      	cmp	r1, r3
 800752c:	bfde      	ittt	le
 800752e:	2330      	movle	r3, #48	@ 0x30
 8007530:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007534:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007538:	1b92      	subs	r2, r2, r6
 800753a:	6122      	str	r2, [r4, #16]
 800753c:	f8cd a000 	str.w	sl, [sp]
 8007540:	464b      	mov	r3, r9
 8007542:	aa03      	add	r2, sp, #12
 8007544:	4621      	mov	r1, r4
 8007546:	4640      	mov	r0, r8
 8007548:	f7ff fee6 	bl	8007318 <_printf_common>
 800754c:	3001      	adds	r0, #1
 800754e:	d14a      	bne.n	80075e6 <_printf_i+0x1f2>
 8007550:	f04f 30ff 	mov.w	r0, #4294967295
 8007554:	b004      	add	sp, #16
 8007556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	f043 0320 	orr.w	r3, r3, #32
 8007560:	6023      	str	r3, [r4, #0]
 8007562:	4833      	ldr	r0, [pc, #204]	@ (8007630 <_printf_i+0x23c>)
 8007564:	2778      	movs	r7, #120	@ 0x78
 8007566:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800756a:	6823      	ldr	r3, [r4, #0]
 800756c:	6831      	ldr	r1, [r6, #0]
 800756e:	061f      	lsls	r7, r3, #24
 8007570:	f851 5b04 	ldr.w	r5, [r1], #4
 8007574:	d402      	bmi.n	800757c <_printf_i+0x188>
 8007576:	065f      	lsls	r7, r3, #25
 8007578:	bf48      	it	mi
 800757a:	b2ad      	uxthmi	r5, r5
 800757c:	6031      	str	r1, [r6, #0]
 800757e:	07d9      	lsls	r1, r3, #31
 8007580:	bf44      	itt	mi
 8007582:	f043 0320 	orrmi.w	r3, r3, #32
 8007586:	6023      	strmi	r3, [r4, #0]
 8007588:	b11d      	cbz	r5, 8007592 <_printf_i+0x19e>
 800758a:	2310      	movs	r3, #16
 800758c:	e7ac      	b.n	80074e8 <_printf_i+0xf4>
 800758e:	4827      	ldr	r0, [pc, #156]	@ (800762c <_printf_i+0x238>)
 8007590:	e7e9      	b.n	8007566 <_printf_i+0x172>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	f023 0320 	bic.w	r3, r3, #32
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	e7f6      	b.n	800758a <_printf_i+0x196>
 800759c:	4616      	mov	r6, r2
 800759e:	e7bd      	b.n	800751c <_printf_i+0x128>
 80075a0:	6833      	ldr	r3, [r6, #0]
 80075a2:	6825      	ldr	r5, [r4, #0]
 80075a4:	6961      	ldr	r1, [r4, #20]
 80075a6:	1d18      	adds	r0, r3, #4
 80075a8:	6030      	str	r0, [r6, #0]
 80075aa:	062e      	lsls	r6, r5, #24
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	d501      	bpl.n	80075b4 <_printf_i+0x1c0>
 80075b0:	6019      	str	r1, [r3, #0]
 80075b2:	e002      	b.n	80075ba <_printf_i+0x1c6>
 80075b4:	0668      	lsls	r0, r5, #25
 80075b6:	d5fb      	bpl.n	80075b0 <_printf_i+0x1bc>
 80075b8:	8019      	strh	r1, [r3, #0]
 80075ba:	2300      	movs	r3, #0
 80075bc:	6123      	str	r3, [r4, #16]
 80075be:	4616      	mov	r6, r2
 80075c0:	e7bc      	b.n	800753c <_printf_i+0x148>
 80075c2:	6833      	ldr	r3, [r6, #0]
 80075c4:	1d1a      	adds	r2, r3, #4
 80075c6:	6032      	str	r2, [r6, #0]
 80075c8:	681e      	ldr	r6, [r3, #0]
 80075ca:	6862      	ldr	r2, [r4, #4]
 80075cc:	2100      	movs	r1, #0
 80075ce:	4630      	mov	r0, r6
 80075d0:	f7f8 fe36 	bl	8000240 <memchr>
 80075d4:	b108      	cbz	r0, 80075da <_printf_i+0x1e6>
 80075d6:	1b80      	subs	r0, r0, r6
 80075d8:	6060      	str	r0, [r4, #4]
 80075da:	6863      	ldr	r3, [r4, #4]
 80075dc:	6123      	str	r3, [r4, #16]
 80075de:	2300      	movs	r3, #0
 80075e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075e4:	e7aa      	b.n	800753c <_printf_i+0x148>
 80075e6:	6923      	ldr	r3, [r4, #16]
 80075e8:	4632      	mov	r2, r6
 80075ea:	4649      	mov	r1, r9
 80075ec:	4640      	mov	r0, r8
 80075ee:	47d0      	blx	sl
 80075f0:	3001      	adds	r0, #1
 80075f2:	d0ad      	beq.n	8007550 <_printf_i+0x15c>
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	079b      	lsls	r3, r3, #30
 80075f8:	d413      	bmi.n	8007622 <_printf_i+0x22e>
 80075fa:	68e0      	ldr	r0, [r4, #12]
 80075fc:	9b03      	ldr	r3, [sp, #12]
 80075fe:	4298      	cmp	r0, r3
 8007600:	bfb8      	it	lt
 8007602:	4618      	movlt	r0, r3
 8007604:	e7a6      	b.n	8007554 <_printf_i+0x160>
 8007606:	2301      	movs	r3, #1
 8007608:	4632      	mov	r2, r6
 800760a:	4649      	mov	r1, r9
 800760c:	4640      	mov	r0, r8
 800760e:	47d0      	blx	sl
 8007610:	3001      	adds	r0, #1
 8007612:	d09d      	beq.n	8007550 <_printf_i+0x15c>
 8007614:	3501      	adds	r5, #1
 8007616:	68e3      	ldr	r3, [r4, #12]
 8007618:	9903      	ldr	r1, [sp, #12]
 800761a:	1a5b      	subs	r3, r3, r1
 800761c:	42ab      	cmp	r3, r5
 800761e:	dcf2      	bgt.n	8007606 <_printf_i+0x212>
 8007620:	e7eb      	b.n	80075fa <_printf_i+0x206>
 8007622:	2500      	movs	r5, #0
 8007624:	f104 0619 	add.w	r6, r4, #25
 8007628:	e7f5      	b.n	8007616 <_printf_i+0x222>
 800762a:	bf00      	nop
 800762c:	080085a9 	.word	0x080085a9
 8007630:	080085ba 	.word	0x080085ba

08007634 <memmove>:
 8007634:	4288      	cmp	r0, r1
 8007636:	b510      	push	{r4, lr}
 8007638:	eb01 0402 	add.w	r4, r1, r2
 800763c:	d902      	bls.n	8007644 <memmove+0x10>
 800763e:	4284      	cmp	r4, r0
 8007640:	4623      	mov	r3, r4
 8007642:	d807      	bhi.n	8007654 <memmove+0x20>
 8007644:	1e43      	subs	r3, r0, #1
 8007646:	42a1      	cmp	r1, r4
 8007648:	d008      	beq.n	800765c <memmove+0x28>
 800764a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800764e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007652:	e7f8      	b.n	8007646 <memmove+0x12>
 8007654:	4402      	add	r2, r0
 8007656:	4601      	mov	r1, r0
 8007658:	428a      	cmp	r2, r1
 800765a:	d100      	bne.n	800765e <memmove+0x2a>
 800765c:	bd10      	pop	{r4, pc}
 800765e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007666:	e7f7      	b.n	8007658 <memmove+0x24>

08007668 <_sbrk_r>:
 8007668:	b538      	push	{r3, r4, r5, lr}
 800766a:	4d06      	ldr	r5, [pc, #24]	@ (8007684 <_sbrk_r+0x1c>)
 800766c:	2300      	movs	r3, #0
 800766e:	4604      	mov	r4, r0
 8007670:	4608      	mov	r0, r1
 8007672:	602b      	str	r3, [r5, #0]
 8007674:	f7fa f8cc 	bl	8001810 <_sbrk>
 8007678:	1c43      	adds	r3, r0, #1
 800767a:	d102      	bne.n	8007682 <_sbrk_r+0x1a>
 800767c:	682b      	ldr	r3, [r5, #0]
 800767e:	b103      	cbz	r3, 8007682 <_sbrk_r+0x1a>
 8007680:	6023      	str	r3, [r4, #0]
 8007682:	bd38      	pop	{r3, r4, r5, pc}
 8007684:	20005098 	.word	0x20005098

08007688 <_realloc_r>:
 8007688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800768c:	4680      	mov	r8, r0
 800768e:	4615      	mov	r5, r2
 8007690:	460c      	mov	r4, r1
 8007692:	b921      	cbnz	r1, 800769e <_realloc_r+0x16>
 8007694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007698:	4611      	mov	r1, r2
 800769a:	f7ff bc59 	b.w	8006f50 <_malloc_r>
 800769e:	b92a      	cbnz	r2, 80076ac <_realloc_r+0x24>
 80076a0:	f7ff fbea 	bl	8006e78 <_free_r>
 80076a4:	2400      	movs	r4, #0
 80076a6:	4620      	mov	r0, r4
 80076a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ac:	f000 f81a 	bl	80076e4 <_malloc_usable_size_r>
 80076b0:	4285      	cmp	r5, r0
 80076b2:	4606      	mov	r6, r0
 80076b4:	d802      	bhi.n	80076bc <_realloc_r+0x34>
 80076b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80076ba:	d8f4      	bhi.n	80076a6 <_realloc_r+0x1e>
 80076bc:	4629      	mov	r1, r5
 80076be:	4640      	mov	r0, r8
 80076c0:	f7ff fc46 	bl	8006f50 <_malloc_r>
 80076c4:	4607      	mov	r7, r0
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d0ec      	beq.n	80076a4 <_realloc_r+0x1c>
 80076ca:	42b5      	cmp	r5, r6
 80076cc:	462a      	mov	r2, r5
 80076ce:	4621      	mov	r1, r4
 80076d0:	bf28      	it	cs
 80076d2:	4632      	movcs	r2, r6
 80076d4:	f7ff fbc2 	bl	8006e5c <memcpy>
 80076d8:	4621      	mov	r1, r4
 80076da:	4640      	mov	r0, r8
 80076dc:	f7ff fbcc 	bl	8006e78 <_free_r>
 80076e0:	463c      	mov	r4, r7
 80076e2:	e7e0      	b.n	80076a6 <_realloc_r+0x1e>

080076e4 <_malloc_usable_size_r>:
 80076e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076e8:	1f18      	subs	r0, r3, #4
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	bfbc      	itt	lt
 80076ee:	580b      	ldrlt	r3, [r1, r0]
 80076f0:	18c0      	addlt	r0, r0, r3
 80076f2:	4770      	bx	lr

080076f4 <_init>:
 80076f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f6:	bf00      	nop
 80076f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076fa:	bc08      	pop	{r3}
 80076fc:	469e      	mov	lr, r3
 80076fe:	4770      	bx	lr

08007700 <_fini>:
 8007700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007702:	bf00      	nop
 8007704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007706:	bc08      	pop	{r3}
 8007708:	469e      	mov	lr, r3
 800770a:	4770      	bx	lr
