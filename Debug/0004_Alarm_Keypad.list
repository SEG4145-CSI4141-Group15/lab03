
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048fc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db8  08004acc  08004acc  00005acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005884  08005884  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  08005884  08005884  00006884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800588c  0800588c  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800588c  0800588c  0000688c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005890  08005890  00006890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005894  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  20000064  080058f8  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  080058f8  000076c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011178  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025f1  00000000  00000000  0001820c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  0001a800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc8  00000000  00000000  0001b830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f84  00000000  00000000  0001c4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152e1  00000000  00000000  0003f47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3c23  00000000  00000000  0005475d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128380  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049ac  00000000  00000000  001283c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0012cd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004ab4 	.word	0x08004ab4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08004ab4 	.word	0x08004ab4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	int done=1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	607b      	str	r3, [r7, #4]
	while(done)
 80005ba:	e19b      	b.n	80008f4 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005c2:	48b3      	ldr	r0, [pc, #716]	@ (8000890 <Get_Key+0x2e0>)
 80005c4:	f001 fb0e 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 80005c8:	2200      	movs	r2, #0
 80005ca:	2110      	movs	r1, #16
 80005cc:	48b0      	ldr	r0, [pc, #704]	@ (8000890 <Get_Key+0x2e0>)
 80005ce:	f001 fb09 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80005d2:	2200      	movs	r2, #0
 80005d4:	2120      	movs	r1, #32
 80005d6:	48ae      	ldr	r0, [pc, #696]	@ (8000890 <Get_Key+0x2e0>)
 80005d8:	f001 fb04 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80005dc:	2200      	movs	r2, #0
 80005de:	2108      	movs	r1, #8
 80005e0:	48ab      	ldr	r0, [pc, #684]	@ (8000890 <Get_Key+0x2e0>)
 80005e2:	f001 faff 	bl	8001be4 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80005e6:	2140      	movs	r1, #64	@ 0x40
 80005e8:	48a9      	ldr	r0, [pc, #676]	@ (8000890 <Get_Key+0x2e0>)
 80005ea:	f001 fae3 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d00b      	beq.n	800060c <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80005f4:	bf00      	nop
 80005f6:	2140      	movs	r1, #64	@ 0x40
 80005f8:	48a5      	ldr	r0, [pc, #660]	@ (8000890 <Get_Key+0x2e0>)
 80005fa:	f001 fadb 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1f8      	bne.n	80005f6 <Get_Key+0x46>
		key='1';
 8000604:	4ba3      	ldr	r3, [pc, #652]	@ (8000894 <Get_Key+0x2e4>)
 8000606:	2231      	movs	r2, #49	@ 0x31
 8000608:	701a      	strb	r2, [r3, #0]
		break;
 800060a:	e177      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800060c:	2180      	movs	r1, #128	@ 0x80
 800060e:	48a2      	ldr	r0, [pc, #648]	@ (8000898 <Get_Key+0x2e8>)
 8000610:	f001 fad0 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d00b      	beq.n	8000632 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800061a:	bf00      	nop
 800061c:	2180      	movs	r1, #128	@ 0x80
 800061e:	489e      	ldr	r0, [pc, #632]	@ (8000898 <Get_Key+0x2e8>)
 8000620:	f001 fac8 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1f8      	bne.n	800061c <Get_Key+0x6c>
		key='4';
 800062a:	4b9a      	ldr	r3, [pc, #616]	@ (8000894 <Get_Key+0x2e4>)
 800062c:	2234      	movs	r2, #52	@ 0x34
 800062e:	701a      	strb	r2, [r3, #0]
		break;
 8000630:	e164      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000632:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000636:	4899      	ldr	r0, [pc, #612]	@ (800089c <Get_Key+0x2ec>)
 8000638:	f001 fabc 	bl	8001bb4 <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d00c      	beq.n	800065c <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000642:	bf00      	nop
 8000644:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000648:	4894      	ldr	r0, [pc, #592]	@ (800089c <Get_Key+0x2ec>)
 800064a:	f001 fab3 	bl	8001bb4 <HAL_GPIO_ReadPin>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1f7      	bne.n	8000644 <Get_Key+0x94>
		key='7';
 8000654:	4b8f      	ldr	r3, [pc, #572]	@ (8000894 <Get_Key+0x2e4>)
 8000656:	2237      	movs	r2, #55	@ 0x37
 8000658:	701a      	strb	r2, [r3, #0]
		break;
 800065a:	e14f      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800065c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000660:	488e      	ldr	r0, [pc, #568]	@ (800089c <Get_Key+0x2ec>)
 8000662:	f001 faa7 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00c      	beq.n	8000686 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800066c:	bf00      	nop
 800066e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000672:	488a      	ldr	r0, [pc, #552]	@ (800089c <Get_Key+0x2ec>)
 8000674:	f001 fa9e 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d1f7      	bne.n	800066e <Get_Key+0xbe>
		key='*';
 800067e:	4b85      	ldr	r3, [pc, #532]	@ (8000894 <Get_Key+0x2e4>)
 8000680:	222a      	movs	r2, #42	@ 0x2a
 8000682:	701a      	strb	r2, [r3, #0]
		break;
 8000684:	e13a      	b.n	80008fc <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800068c:	4880      	ldr	r0, [pc, #512]	@ (8000890 <Get_Key+0x2e0>)
 800068e:	f001 faa9 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 8000692:	2201      	movs	r2, #1
 8000694:	2110      	movs	r1, #16
 8000696:	487e      	ldr	r0, [pc, #504]	@ (8000890 <Get_Key+0x2e0>)
 8000698:	f001 faa4 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800069c:	2200      	movs	r2, #0
 800069e:	2120      	movs	r1, #32
 80006a0:	487b      	ldr	r0, [pc, #492]	@ (8000890 <Get_Key+0x2e0>)
 80006a2:	f001 fa9f 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80006a6:	2200      	movs	r2, #0
 80006a8:	2108      	movs	r1, #8
 80006aa:	4879      	ldr	r0, [pc, #484]	@ (8000890 <Get_Key+0x2e0>)
 80006ac:	f001 fa9a 	bl	8001be4 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006b0:	2140      	movs	r1, #64	@ 0x40
 80006b2:	4877      	ldr	r0, [pc, #476]	@ (8000890 <Get_Key+0x2e0>)
 80006b4:	f001 fa7e 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d00b      	beq.n	80006d6 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006be:	bf00      	nop
 80006c0:	2140      	movs	r1, #64	@ 0x40
 80006c2:	4873      	ldr	r0, [pc, #460]	@ (8000890 <Get_Key+0x2e0>)
 80006c4:	f001 fa76 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1f8      	bne.n	80006c0 <Get_Key+0x110>
		key='2';
 80006ce:	4b71      	ldr	r3, [pc, #452]	@ (8000894 <Get_Key+0x2e4>)
 80006d0:	2232      	movs	r2, #50	@ 0x32
 80006d2:	701a      	strb	r2, [r3, #0]
		break;
 80006d4:	e112      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80006d6:	2180      	movs	r1, #128	@ 0x80
 80006d8:	486f      	ldr	r0, [pc, #444]	@ (8000898 <Get_Key+0x2e8>)
 80006da:	f001 fa6b 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d00b      	beq.n	80006fc <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80006e4:	bf00      	nop
 80006e6:	2180      	movs	r1, #128	@ 0x80
 80006e8:	486b      	ldr	r0, [pc, #428]	@ (8000898 <Get_Key+0x2e8>)
 80006ea:	f001 fa63 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f8      	bne.n	80006e6 <Get_Key+0x136>
		key='5';
 80006f4:	4b67      	ldr	r3, [pc, #412]	@ (8000894 <Get_Key+0x2e4>)
 80006f6:	2235      	movs	r2, #53	@ 0x35
 80006f8:	701a      	strb	r2, [r3, #0]
		break;
 80006fa:	e0ff      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80006fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000700:	4866      	ldr	r0, [pc, #408]	@ (800089c <Get_Key+0x2ec>)
 8000702:	f001 fa57 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d00c      	beq.n	8000726 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800070c:	bf00      	nop
 800070e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000712:	4862      	ldr	r0, [pc, #392]	@ (800089c <Get_Key+0x2ec>)
 8000714:	f001 fa4e 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1f7      	bne.n	800070e <Get_Key+0x15e>
		key='8';
 800071e:	4b5d      	ldr	r3, [pc, #372]	@ (8000894 <Get_Key+0x2e4>)
 8000720:	2238      	movs	r2, #56	@ 0x38
 8000722:	701a      	strb	r2, [r3, #0]
		break;
 8000724:	e0ea      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000726:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800072a:	485c      	ldr	r0, [pc, #368]	@ (800089c <Get_Key+0x2ec>)
 800072c:	f001 fa42 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d00c      	beq.n	8000750 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000736:	bf00      	nop
 8000738:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800073c:	4857      	ldr	r0, [pc, #348]	@ (800089c <Get_Key+0x2ec>)
 800073e:	f001 fa39 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1f7      	bne.n	8000738 <Get_Key+0x188>
		key='0';
 8000748:	4b52      	ldr	r3, [pc, #328]	@ (8000894 <Get_Key+0x2e4>)
 800074a:	2230      	movs	r2, #48	@ 0x30
 800074c:	701a      	strb	r2, [r3, #0]
		break;
 800074e:	e0d5      	b.n	80008fc <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000756:	484e      	ldr	r0, [pc, #312]	@ (8000890 <Get_Key+0x2e0>)
 8000758:	f001 fa44 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 800075c:	2200      	movs	r2, #0
 800075e:	2110      	movs	r1, #16
 8000760:	484b      	ldr	r0, [pc, #300]	@ (8000890 <Get_Key+0x2e0>)
 8000762:	f001 fa3f 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 8000766:	2201      	movs	r2, #1
 8000768:	2120      	movs	r1, #32
 800076a:	4849      	ldr	r0, [pc, #292]	@ (8000890 <Get_Key+0x2e0>)
 800076c:	f001 fa3a 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 8000770:	2200      	movs	r2, #0
 8000772:	2108      	movs	r1, #8
 8000774:	4846      	ldr	r0, [pc, #280]	@ (8000890 <Get_Key+0x2e0>)
 8000776:	f001 fa35 	bl	8001be4 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 800077a:	2140      	movs	r1, #64	@ 0x40
 800077c:	4844      	ldr	r0, [pc, #272]	@ (8000890 <Get_Key+0x2e0>)
 800077e:	f001 fa19 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00b      	beq.n	80007a0 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000788:	bf00      	nop
 800078a:	2140      	movs	r1, #64	@ 0x40
 800078c:	4840      	ldr	r0, [pc, #256]	@ (8000890 <Get_Key+0x2e0>)
 800078e:	f001 fa11 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1f8      	bne.n	800078a <Get_Key+0x1da>
		key='3';
 8000798:	4b3e      	ldr	r3, [pc, #248]	@ (8000894 <Get_Key+0x2e4>)
 800079a:	2233      	movs	r2, #51	@ 0x33
 800079c:	701a      	strb	r2, [r3, #0]
		break;
 800079e:	e0ad      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007a0:	2180      	movs	r1, #128	@ 0x80
 80007a2:	483d      	ldr	r0, [pc, #244]	@ (8000898 <Get_Key+0x2e8>)
 80007a4:	f001 fa06 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d00b      	beq.n	80007c6 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007ae:	bf00      	nop
 80007b0:	2180      	movs	r1, #128	@ 0x80
 80007b2:	4839      	ldr	r0, [pc, #228]	@ (8000898 <Get_Key+0x2e8>)
 80007b4:	f001 f9fe 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1f8      	bne.n	80007b0 <Get_Key+0x200>
		key='6';
 80007be:	4b35      	ldr	r3, [pc, #212]	@ (8000894 <Get_Key+0x2e4>)
 80007c0:	2236      	movs	r2, #54	@ 0x36
 80007c2:	701a      	strb	r2, [r3, #0]
		break;
 80007c4:	e09a      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80007c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ca:	4834      	ldr	r0, [pc, #208]	@ (800089c <Get_Key+0x2ec>)
 80007cc:	f001 f9f2 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d00c      	beq.n	80007f0 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80007d6:	bf00      	nop
 80007d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007dc:	482f      	ldr	r0, [pc, #188]	@ (800089c <Get_Key+0x2ec>)
 80007de:	f001 f9e9 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d1f7      	bne.n	80007d8 <Get_Key+0x228>
		key='9';
 80007e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <Get_Key+0x2e4>)
 80007ea:	2239      	movs	r2, #57	@ 0x39
 80007ec:	701a      	strb	r2, [r3, #0]
		break;
 80007ee:	e085      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80007f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007f4:	4829      	ldr	r0, [pc, #164]	@ (800089c <Get_Key+0x2ec>)
 80007f6:	f001 f9dd 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d00c      	beq.n	800081a <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000800:	bf00      	nop
 8000802:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000806:	4825      	ldr	r0, [pc, #148]	@ (800089c <Get_Key+0x2ec>)
 8000808:	f001 f9d4 	bl	8001bb4 <HAL_GPIO_ReadPin>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d1f7      	bne.n	8000802 <Get_Key+0x252>
		key='#';
 8000812:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <Get_Key+0x2e4>)
 8000814:	2223      	movs	r2, #35	@ 0x23
 8000816:	701a      	strb	r2, [r3, #0]
		break;
 8000818:	e070      	b.n	80008fc <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000820:	481b      	ldr	r0, [pc, #108]	@ (8000890 <Get_Key+0x2e0>)
 8000822:	f001 f9df 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000826:	2200      	movs	r2, #0
 8000828:	2110      	movs	r1, #16
 800082a:	4819      	ldr	r0, [pc, #100]	@ (8000890 <Get_Key+0x2e0>)
 800082c:	f001 f9da 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000830:	2200      	movs	r2, #0
 8000832:	2120      	movs	r1, #32
 8000834:	4816      	ldr	r0, [pc, #88]	@ (8000890 <Get_Key+0x2e0>)
 8000836:	f001 f9d5 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 800083a:	2201      	movs	r2, #1
 800083c:	2108      	movs	r1, #8
 800083e:	4814      	ldr	r0, [pc, #80]	@ (8000890 <Get_Key+0x2e0>)
 8000840:	f001 f9d0 	bl	8001be4 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000844:	2140      	movs	r1, #64	@ 0x40
 8000846:	4812      	ldr	r0, [pc, #72]	@ (8000890 <Get_Key+0x2e0>)
 8000848:	f001 f9b4 	bl	8001bb4 <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d00b      	beq.n	800086a <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000852:	bf00      	nop
 8000854:	2140      	movs	r1, #64	@ 0x40
 8000856:	480e      	ldr	r0, [pc, #56]	@ (8000890 <Get_Key+0x2e0>)
 8000858:	f001 f9ac 	bl	8001bb4 <HAL_GPIO_ReadPin>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1f8      	bne.n	8000854 <Get_Key+0x2a4>
		key='A';
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <Get_Key+0x2e4>)
 8000864:	2241      	movs	r2, #65	@ 0x41
 8000866:	701a      	strb	r2, [r3, #0]
		break;
 8000868:	e048      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800086a:	2180      	movs	r1, #128	@ 0x80
 800086c:	480a      	ldr	r0, [pc, #40]	@ (8000898 <Get_Key+0x2e8>)
 800086e:	f001 f9a1 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d013      	beq.n	80008a0 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000878:	bf00      	nop
 800087a:	2180      	movs	r1, #128	@ 0x80
 800087c:	4806      	ldr	r0, [pc, #24]	@ (8000898 <Get_Key+0x2e8>)
 800087e:	f001 f999 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1f8      	bne.n	800087a <Get_Key+0x2ca>
		key='B';
 8000888:	4b02      	ldr	r3, [pc, #8]	@ (8000894 <Get_Key+0x2e4>)
 800088a:	2242      	movs	r2, #66	@ 0x42
 800088c:	701a      	strb	r2, [r3, #0]
		break;
 800088e:	e035      	b.n	80008fc <Get_Key+0x34c>
 8000890:	40020400 	.word	0x40020400
 8000894:	20000080 	.word	0x20000080
 8000898:	40020800 	.word	0x40020800
 800089c:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80008a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008a4:	481a      	ldr	r0, [pc, #104]	@ (8000910 <Get_Key+0x360>)
 80008a6:	f001 f985 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d00c      	beq.n	80008ca <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80008b0:	bf00      	nop
 80008b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008b6:	4816      	ldr	r0, [pc, #88]	@ (8000910 <Get_Key+0x360>)
 80008b8:	f001 f97c 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1f7      	bne.n	80008b2 <Get_Key+0x302>
		key='C';
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <Get_Key+0x364>)
 80008c4:	2243      	movs	r2, #67	@ 0x43
 80008c6:	701a      	strb	r2, [r3, #0]
		break;
 80008c8:	e018      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80008ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008ce:	4810      	ldr	r0, [pc, #64]	@ (8000910 <Get_Key+0x360>)
 80008d0:	f001 f970 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d00c      	beq.n	80008f4 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80008da:	bf00      	nop
 80008dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008e0:	480b      	ldr	r0, [pc, #44]	@ (8000910 <Get_Key+0x360>)
 80008e2:	f001 f967 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1f7      	bne.n	80008dc <Get_Key+0x32c>
		key='D';
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <Get_Key+0x364>)
 80008ee:	2244      	movs	r2, #68	@ 0x44
 80008f0:	701a      	strb	r2, [r3, #0]
		break;
 80008f2:	e003      	b.n	80008fc <Get_Key+0x34c>
	while(done)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f47f ae60 	bne.w	80005bc <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008fc:	2120      	movs	r1, #32
 80008fe:	4804      	ldr	r0, [pc, #16]	@ (8000910 <Get_Key+0x360>)
 8000900:	f001 f989 	bl	8001c16 <HAL_GPIO_TogglePin>
	return(key);
 8000904:	4b03      	ldr	r3, [pc, #12]	@ (8000914 <Get_Key+0x364>)
 8000906:	781b      	ldrb	r3, [r3, #0]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40020000 	.word	0x40020000
 8000914:	20000080 	.word	0x20000080

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091c:	f000 fe6e 	bl	80015fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000920:	f000 f854 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000924:	f000 f918 	bl	8000b58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000928:	f000 f8ec 	bl	8000b04 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800092c:	f000 f8bc 	bl	8000aa8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
    SSD1306_Init();
 8000930:	f000 f9c6 	bl	8000cc0 <SSD1306_Init>
    SSD1306_GotoXY (0,0);
 8000934:	2100      	movs	r1, #0
 8000936:	2000      	movs	r0, #0
 8000938:	f000 fb2c 	bl	8000f94 <SSD1306_GotoXY>
    //SSD1306_Puts ("Voltage:", &Font_11x18, 1);
    SSD1306_Puts ("Enter Code:", &Font_11x18, 1);
 800093c:	2201      	movs	r2, #1
 800093e:	491d      	ldr	r1, [pc, #116]	@ (80009b4 <main+0x9c>)
 8000940:	481d      	ldr	r0, [pc, #116]	@ (80009b8 <main+0xa0>)
 8000942:	f000 fbbb 	bl	80010bc <SSD1306_Puts>
    SSD1306_GotoXY (0, 30);
 8000946:	211e      	movs	r1, #30
 8000948:	2000      	movs	r0, #0
 800094a:	f000 fb23 	bl	8000f94 <SSD1306_GotoXY>
    SSD1306_UpdateScreen();
 800094e:	f000 fa7b 	bl	8000e48 <SSD1306_UpdateScreen>
    SSD1306_UpdateScreen();
 8000952:	f000 fa79 	bl	8000e48 <SSD1306_UpdateScreen>
    HAL_Delay (500);
 8000956:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800095a:	f000 fe91 	bl	8001680 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/* D10 to D7 as input pins for row 0 to row 3. D6 to D3 as output for column pins C1 to C3*/
	  key = Get_Key();
 800095e:	f7ff fe27 	bl	80005b0 <Get_Key>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <main+0xa4>)
 8000968:	701a      	strb	r2, [r3, #0]
	  sprintf(hold, "%c", key);
 800096a:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <main+0xa4>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	4913      	ldr	r1, [pc, #76]	@ (80009c0 <main+0xa8>)
 8000972:	4814      	ldr	r0, [pc, #80]	@ (80009c4 <main+0xac>)
 8000974:	f003 fbfe 	bl	8004174 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)hold, strlen(hold), 100);
 8000978:	4812      	ldr	r0, [pc, #72]	@ (80009c4 <main+0xac>)
 800097a:	f7ff fc49 	bl	8000210 <strlen>
 800097e:	4603      	mov	r3, r0
 8000980:	b29a      	uxth	r2, r3
 8000982:	2364      	movs	r3, #100	@ 0x64
 8000984:	490f      	ldr	r1, [pc, #60]	@ (80009c4 <main+0xac>)
 8000986:	4810      	ldr	r0, [pc, #64]	@ (80009c8 <main+0xb0>)
 8000988:	f003 f838 	bl	80039fc <HAL_UART_Transmit>
	  SSD1306_GotoXY (0, 30);
 800098c:	211e      	movs	r1, #30
 800098e:	2000      	movs	r0, #0
 8000990:	f000 fb00 	bl	8000f94 <SSD1306_GotoXY>
	  SSD1306_UpdateScreen();
 8000994:	f000 fa58 	bl	8000e48 <SSD1306_UpdateScreen>
	  SSD1306_Puts (hold, &Font_11x18, 1);
 8000998:	2201      	movs	r2, #1
 800099a:	4906      	ldr	r1, [pc, #24]	@ (80009b4 <main+0x9c>)
 800099c:	4809      	ldr	r0, [pc, #36]	@ (80009c4 <main+0xac>)
 800099e:	f000 fb8d 	bl	80010bc <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80009a2:	f000 fa51 	bl	8000e48 <SSD1306_UpdateScreen>
	  HAL_Delay (500);
 80009a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009aa:	f000 fe69 	bl	8001680 <HAL_Delay>
	  key = Get_Key();
 80009ae:	bf00      	nop
 80009b0:	e7d5      	b.n	800095e <main+0x46>
 80009b2:	bf00      	nop
 80009b4:	20000000 	.word	0x20000000
 80009b8:	08004acc 	.word	0x08004acc
 80009bc:	20000080 	.word	0x20000080
 80009c0:	08004ad8 	.word	0x08004ad8
 80009c4:	20000120 	.word	0x20000120
 80009c8:	200000d8 	.word	0x200000d8

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b094      	sub	sp, #80	@ 0x50
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	2234      	movs	r2, #52	@ 0x34
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 fbea 	bl	80041b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa0 <SystemClock_Config+0xd4>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f8:	4a29      	ldr	r2, [pc, #164]	@ (8000aa0 <SystemClock_Config+0xd4>)
 80009fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a00:	4b27      	ldr	r3, [pc, #156]	@ (8000aa0 <SystemClock_Config+0xd4>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	4b24      	ldr	r3, [pc, #144]	@ (8000aa4 <SystemClock_Config+0xd8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a18:	4a22      	ldr	r2, [pc, #136]	@ (8000aa4 <SystemClock_Config+0xd8>)
 8000a1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	4b20      	ldr	r3, [pc, #128]	@ (8000aa4 <SystemClock_Config+0xd8>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a30:	2301      	movs	r3, #1
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a34:	2310      	movs	r3, #16
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a40:	2310      	movs	r3, #16
 8000a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a44:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a48:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a52:	2302      	movs	r3, #2
 8000a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f002 fa3e 	bl	8002edc <HAL_RCC_OscConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a66:	f000 f925 	bl	8000cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6a:	230f      	movs	r3, #15
 8000a6c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	2102      	movs	r1, #2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 feac 	bl	80027e4 <HAL_RCC_ClockConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a92:	f000 f90f 	bl	8000cb4 <Error_Handler>
  }
}
 8000a96:	bf00      	nop
 8000a98:	3750      	adds	r7, #80	@ 0x50
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40007000 	.word	0x40007000

08000aa8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000aae:	4a13      	ldr	r2, [pc, #76]	@ (8000afc <MX_I2C1_Init+0x54>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ab4:	4a12      	ldr	r2, [pc, #72]	@ (8000b00 <MX_I2C1_Init+0x58>)
 8000ab6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ac6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad8:	4b07      	ldr	r3, [pc, #28]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ae6:	f001 f8b1 	bl	8001c4c <HAL_I2C_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000af0:	f000 f8e0 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000084 	.word	0x20000084
 8000afc:	40005400 	.word	0x40005400
 8000b00:	00061a80 	.word	0x00061a80

08000b04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <MX_USART2_UART_Init+0x50>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b10:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b3c:	f002 ff0e 	bl	800395c <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b46:	f000 f8b5 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200000d8 	.word	0x200000d8
 8000b54:	40004400 	.word	0x40004400

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b43      	ldr	r3, [pc, #268]	@ (8000c80 <MX_GPIO_Init+0x128>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a42      	ldr	r2, [pc, #264]	@ (8000c80 <MX_GPIO_Init+0x128>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b40      	ldr	r3, [pc, #256]	@ (8000c80 <MX_GPIO_Init+0x128>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c80 <MX_GPIO_Init+0x128>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a3b      	ldr	r2, [pc, #236]	@ (8000c80 <MX_GPIO_Init+0x128>)
 8000b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b39      	ldr	r3, [pc, #228]	@ (8000c80 <MX_GPIO_Init+0x128>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	4b35      	ldr	r3, [pc, #212]	@ (8000c80 <MX_GPIO_Init+0x128>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a34      	ldr	r2, [pc, #208]	@ (8000c80 <MX_GPIO_Init+0x128>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b32      	ldr	r3, [pc, #200]	@ (8000c80 <MX_GPIO_Init+0x128>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8000c80 <MX_GPIO_Init+0x128>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a2d      	ldr	r2, [pc, #180]	@ (8000c80 <MX_GPIO_Init+0x128>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8000c80 <MX_GPIO_Init+0x128>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2120      	movs	r1, #32
 8000be2:	4828      	ldr	r0, [pc, #160]	@ (8000c84 <MX_GPIO_Init+0x12c>)
 8000be4:	f000 fffe 	bl	8001be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 8000bee:	4826      	ldr	r0, [pc, #152]	@ (8000c88 <MX_GPIO_Init+0x130>)
 8000bf0:	f000 fff8 	bl	8001be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	481e      	ldr	r0, [pc, #120]	@ (8000c84 <MX_GPIO_Init+0x12c>)
 8000c0c:	f000 fe3e 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin;
 8000c10:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4817      	ldr	r0, [pc, #92]	@ (8000c88 <MX_GPIO_Init+0x130>)
 8000c2a:	f000 fe2f 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000c2e:	2380      	movs	r3, #128	@ 0x80
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4812      	ldr	r0, [pc, #72]	@ (8000c8c <MX_GPIO_Init+0x134>)
 8000c42:	f000 fe23 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000c46:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480a      	ldr	r0, [pc, #40]	@ (8000c84 <MX_GPIO_Init+0x12c>)
 8000c5c:	f000 fe16 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000c60:	2340      	movs	r3, #64	@ 0x40
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <MX_GPIO_Init+0x130>)
 8000c74:	f000 fe0a 	bl	800188c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c78:	bf00      	nop
 8000c7a:	3728      	adds	r7, #40	@ 0x28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020000 	.word	0x40020000
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	40020800 	.word	0x40020800

08000c90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d101      	bne.n	8000ca6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ca2:	f000 fccd 	bl	8001640 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40001000 	.word	0x40001000

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <Error_Handler+0x8>

08000cc0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000cc6:	f000 fa1f 	bl	8001108 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000cca:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2178      	movs	r1, #120	@ 0x78
 8000cd2:	485b      	ldr	r0, [pc, #364]	@ (8000e40 <SSD1306_Init+0x180>)
 8000cd4:	f001 f9fc 	bl	80020d0 <HAL_I2C_IsDeviceReady>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e0a9      	b.n	8000e36 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000ce2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000ce6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ce8:	e002      	b.n	8000cf0 <SSD1306_Init+0x30>
		p--;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d1f9      	bne.n	8000cea <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000cf6:	22ae      	movs	r2, #174	@ 0xae
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2078      	movs	r0, #120	@ 0x78
 8000cfc:	f000 fa80 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000d00:	2220      	movs	r2, #32
 8000d02:	2100      	movs	r1, #0
 8000d04:	2078      	movs	r0, #120	@ 0x78
 8000d06:	f000 fa7b 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000d0a:	2210      	movs	r2, #16
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2078      	movs	r0, #120	@ 0x78
 8000d10:	f000 fa76 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d14:	22b0      	movs	r2, #176	@ 0xb0
 8000d16:	2100      	movs	r1, #0
 8000d18:	2078      	movs	r0, #120	@ 0x78
 8000d1a:	f000 fa71 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000d1e:	22c8      	movs	r2, #200	@ 0xc8
 8000d20:	2100      	movs	r1, #0
 8000d22:	2078      	movs	r0, #120	@ 0x78
 8000d24:	f000 fa6c 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2078      	movs	r0, #120	@ 0x78
 8000d2e:	f000 fa67 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000d32:	2210      	movs	r2, #16
 8000d34:	2100      	movs	r1, #0
 8000d36:	2078      	movs	r0, #120	@ 0x78
 8000d38:	f000 fa62 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000d3c:	2240      	movs	r2, #64	@ 0x40
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2078      	movs	r0, #120	@ 0x78
 8000d42:	f000 fa5d 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000d46:	2281      	movs	r2, #129	@ 0x81
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2078      	movs	r0, #120	@ 0x78
 8000d4c:	f000 fa58 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000d50:	22ff      	movs	r2, #255	@ 0xff
 8000d52:	2100      	movs	r1, #0
 8000d54:	2078      	movs	r0, #120	@ 0x78
 8000d56:	f000 fa53 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000d5a:	22a1      	movs	r2, #161	@ 0xa1
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2078      	movs	r0, #120	@ 0x78
 8000d60:	f000 fa4e 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000d64:	22a6      	movs	r2, #166	@ 0xa6
 8000d66:	2100      	movs	r1, #0
 8000d68:	2078      	movs	r0, #120	@ 0x78
 8000d6a:	f000 fa49 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000d6e:	22a8      	movs	r2, #168	@ 0xa8
 8000d70:	2100      	movs	r1, #0
 8000d72:	2078      	movs	r0, #120	@ 0x78
 8000d74:	f000 fa44 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000d78:	223f      	movs	r2, #63	@ 0x3f
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2078      	movs	r0, #120	@ 0x78
 8000d7e:	f000 fa3f 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000d82:	22a4      	movs	r2, #164	@ 0xa4
 8000d84:	2100      	movs	r1, #0
 8000d86:	2078      	movs	r0, #120	@ 0x78
 8000d88:	f000 fa3a 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000d8c:	22d3      	movs	r2, #211	@ 0xd3
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2078      	movs	r0, #120	@ 0x78
 8000d92:	f000 fa35 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2078      	movs	r0, #120	@ 0x78
 8000d9c:	f000 fa30 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000da0:	22d5      	movs	r2, #213	@ 0xd5
 8000da2:	2100      	movs	r1, #0
 8000da4:	2078      	movs	r0, #120	@ 0x78
 8000da6:	f000 fa2b 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000daa:	22f0      	movs	r2, #240	@ 0xf0
 8000dac:	2100      	movs	r1, #0
 8000dae:	2078      	movs	r0, #120	@ 0x78
 8000db0:	f000 fa26 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000db4:	22d9      	movs	r2, #217	@ 0xd9
 8000db6:	2100      	movs	r1, #0
 8000db8:	2078      	movs	r0, #120	@ 0x78
 8000dba:	f000 fa21 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000dbe:	2222      	movs	r2, #34	@ 0x22
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2078      	movs	r0, #120	@ 0x78
 8000dc4:	f000 fa1c 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000dc8:	22da      	movs	r2, #218	@ 0xda
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2078      	movs	r0, #120	@ 0x78
 8000dce:	f000 fa17 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000dd2:	2212      	movs	r2, #18
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2078      	movs	r0, #120	@ 0x78
 8000dd8:	f000 fa12 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000ddc:	22db      	movs	r2, #219	@ 0xdb
 8000dde:	2100      	movs	r1, #0
 8000de0:	2078      	movs	r0, #120	@ 0x78
 8000de2:	f000 fa0d 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000de6:	2220      	movs	r2, #32
 8000de8:	2100      	movs	r1, #0
 8000dea:	2078      	movs	r0, #120	@ 0x78
 8000dec:	f000 fa08 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000df0:	228d      	movs	r2, #141	@ 0x8d
 8000df2:	2100      	movs	r1, #0
 8000df4:	2078      	movs	r0, #120	@ 0x78
 8000df6:	f000 fa03 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000dfa:	2214      	movs	r2, #20
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2078      	movs	r0, #120	@ 0x78
 8000e00:	f000 f9fe 	bl	8001200 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000e04:	22af      	movs	r2, #175	@ 0xaf
 8000e06:	2100      	movs	r1, #0
 8000e08:	2078      	movs	r0, #120	@ 0x78
 8000e0a:	f000 f9f9 	bl	8001200 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000e0e:	222e      	movs	r2, #46	@ 0x2e
 8000e10:	2100      	movs	r1, #0
 8000e12:	2078      	movs	r0, #120	@ 0x78
 8000e14:	f000 f9f4 	bl	8001200 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f000 f843 	bl	8000ea4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000e1e:	f000 f813 	bl	8000e48 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000e22:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <SSD1306_Init+0x184>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <SSD1306_Init+0x184>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000e2e:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <SSD1306_Init+0x184>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000e34:	2301      	movs	r3, #1
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000084 	.word	0x20000084
 8000e44:	20000524 	.word	0x20000524

08000e48 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000e4e:	2300      	movs	r3, #0
 8000e50:	71fb      	strb	r3, [r7, #7]
 8000e52:	e01d      	b.n	8000e90 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	3b50      	subs	r3, #80	@ 0x50
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2078      	movs	r0, #120	@ 0x78
 8000e60:	f000 f9ce 	bl	8001200 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2100      	movs	r1, #0
 8000e68:	2078      	movs	r0, #120	@ 0x78
 8000e6a:	f000 f9c9 	bl	8001200 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000e6e:	2210      	movs	r2, #16
 8000e70:	2100      	movs	r1, #0
 8000e72:	2078      	movs	r0, #120	@ 0x78
 8000e74:	f000 f9c4 	bl	8001200 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	01db      	lsls	r3, r3, #7
 8000e7c:	4a08      	ldr	r2, [pc, #32]	@ (8000ea0 <SSD1306_UpdateScreen+0x58>)
 8000e7e:	441a      	add	r2, r3
 8000e80:	2380      	movs	r3, #128	@ 0x80
 8000e82:	2140      	movs	r1, #64	@ 0x40
 8000e84:	2078      	movs	r0, #120	@ 0x78
 8000e86:	f000 f955 	bl	8001134 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	71fb      	strb	r3, [r7, #7]
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	2b07      	cmp	r3, #7
 8000e94:	d9de      	bls.n	8000e54 <SSD1306_UpdateScreen+0xc>
	}
}
 8000e96:	bf00      	nop
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000124 	.word	0x20000124

08000ea4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <SSD1306_Fill+0x14>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	e000      	b.n	8000eba <SSD1306_Fill+0x16>
 8000eb8:	23ff      	movs	r3, #255	@ 0xff
 8000eba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4803      	ldr	r0, [pc, #12]	@ (8000ed0 <SSD1306_Fill+0x2c>)
 8000ec2:	f003 f977 	bl	80041b4 <memset>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000124 	.word	0x20000124

08000ed4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	80fb      	strh	r3, [r7, #6]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	80bb      	strh	r3, [r7, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	70fb      	strb	r3, [r7, #3]
	if (
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000eea:	d848      	bhi.n	8000f7e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000eec:	88bb      	ldrh	r3, [r7, #4]
 8000eee:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ef0:	d845      	bhi.n	8000f7e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000ef2:	4b26      	ldr	r3, [pc, #152]	@ (8000f8c <SSD1306_DrawPixel+0xb8>)
 8000ef4:	791b      	ldrb	r3, [r3, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d006      	beq.n	8000f08 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	bf0c      	ite	eq
 8000f00:	2301      	moveq	r3, #1
 8000f02:	2300      	movne	r3, #0
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000f08:	78fb      	ldrb	r3, [r7, #3]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d11a      	bne.n	8000f44 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000f0e:	88fa      	ldrh	r2, [r7, #6]
 8000f10:	88bb      	ldrh	r3, [r7, #4]
 8000f12:	08db      	lsrs	r3, r3, #3
 8000f14:	b298      	uxth	r0, r3
 8000f16:	4603      	mov	r3, r0
 8000f18:	01db      	lsls	r3, r3, #7
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000f90 <SSD1306_DrawPixel+0xbc>)
 8000f1e:	5cd3      	ldrb	r3, [r2, r3]
 8000f20:	b25a      	sxtb	r2, r3
 8000f22:	88bb      	ldrh	r3, [r7, #4]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	2101      	movs	r1, #1
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	b25b      	sxtb	r3, r3
 8000f30:	4313      	orrs	r3, r2
 8000f32:	b259      	sxtb	r1, r3
 8000f34:	88fa      	ldrh	r2, [r7, #6]
 8000f36:	4603      	mov	r3, r0
 8000f38:	01db      	lsls	r3, r3, #7
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b2c9      	uxtb	r1, r1
 8000f3e:	4a14      	ldr	r2, [pc, #80]	@ (8000f90 <SSD1306_DrawPixel+0xbc>)
 8000f40:	54d1      	strb	r1, [r2, r3]
 8000f42:	e01d      	b.n	8000f80 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000f44:	88fa      	ldrh	r2, [r7, #6]
 8000f46:	88bb      	ldrh	r3, [r7, #4]
 8000f48:	08db      	lsrs	r3, r3, #3
 8000f4a:	b298      	uxth	r0, r3
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	01db      	lsls	r3, r3, #7
 8000f50:	4413      	add	r3, r2
 8000f52:	4a0f      	ldr	r2, [pc, #60]	@ (8000f90 <SSD1306_DrawPixel+0xbc>)
 8000f54:	5cd3      	ldrb	r3, [r2, r3]
 8000f56:	b25a      	sxtb	r2, r3
 8000f58:	88bb      	ldrh	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	2101      	movs	r1, #1
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	b25b      	sxtb	r3, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	b25b      	sxtb	r3, r3
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	b259      	sxtb	r1, r3
 8000f6e:	88fa      	ldrh	r2, [r7, #6]
 8000f70:	4603      	mov	r3, r0
 8000f72:	01db      	lsls	r3, r3, #7
 8000f74:	4413      	add	r3, r2
 8000f76:	b2c9      	uxtb	r1, r1
 8000f78:	4a05      	ldr	r2, [pc, #20]	@ (8000f90 <SSD1306_DrawPixel+0xbc>)
 8000f7a:	54d1      	strb	r1, [r2, r3]
 8000f7c:	e000      	b.n	8000f80 <SSD1306_DrawPixel+0xac>
		return;
 8000f7e:	bf00      	nop
	}
}
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000524 	.word	0x20000524
 8000f90:	20000124 	.word	0x20000124

08000f94 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	80fb      	strh	r3, [r7, #6]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000fa4:	4a05      	ldr	r2, [pc, #20]	@ (8000fbc <SSD1306_GotoXY+0x28>)
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000faa:	4a04      	ldr	r2, [pc, #16]	@ (8000fbc <SSD1306_GotoXY+0x28>)
 8000fac:	88bb      	ldrh	r3, [r7, #4]
 8000fae:	8053      	strh	r3, [r2, #2]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	20000524 	.word	0x20000524

08000fc0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000fd0:	4b39      	ldr	r3, [pc, #228]	@ (80010b8 <SSD1306_Putc+0xf8>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
	if (
 8000fdc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fde:	dc07      	bgt.n	8000ff0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000fe0:	4b35      	ldr	r3, [pc, #212]	@ (80010b8 <SSD1306_Putc+0xf8>)
 8000fe2:	885b      	ldrh	r3, [r3, #2]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	785b      	ldrb	r3, [r3, #1]
 8000fea:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000fec:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fee:	dd01      	ble.n	8000ff4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e05d      	b.n	80010b0 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	e04b      	b.n	8001092 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	3b20      	subs	r3, #32
 8001002:	6839      	ldr	r1, [r7, #0]
 8001004:	7849      	ldrb	r1, [r1, #1]
 8001006:	fb01 f303 	mul.w	r3, r1, r3
 800100a:	4619      	mov	r1, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	440b      	add	r3, r1
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	4413      	add	r3, r2
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	e030      	b.n	8001080 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d010      	beq.n	8001050 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800102e:	4b22      	ldr	r3, [pc, #136]	@ (80010b8 <SSD1306_Putc+0xf8>)
 8001030:	881a      	ldrh	r2, [r3, #0]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	b29b      	uxth	r3, r3
 8001036:	4413      	add	r3, r2
 8001038:	b298      	uxth	r0, r3
 800103a:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <SSD1306_Putc+0xf8>)
 800103c:	885a      	ldrh	r2, [r3, #2]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	b29b      	uxth	r3, r3
 8001042:	4413      	add	r3, r2
 8001044:	b29b      	uxth	r3, r3
 8001046:	79ba      	ldrb	r2, [r7, #6]
 8001048:	4619      	mov	r1, r3
 800104a:	f7ff ff43 	bl	8000ed4 <SSD1306_DrawPixel>
 800104e:	e014      	b.n	800107a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001050:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <SSD1306_Putc+0xf8>)
 8001052:	881a      	ldrh	r2, [r3, #0]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	b29b      	uxth	r3, r3
 8001058:	4413      	add	r3, r2
 800105a:	b298      	uxth	r0, r3
 800105c:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <SSD1306_Putc+0xf8>)
 800105e:	885a      	ldrh	r2, [r3, #2]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	b29b      	uxth	r3, r3
 8001064:	4413      	add	r3, r2
 8001066:	b299      	uxth	r1, r3
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	2b00      	cmp	r3, #0
 800106c:	bf0c      	ite	eq
 800106e:	2301      	moveq	r3, #1
 8001070:	2300      	movne	r3, #0
 8001072:	b2db      	uxtb	r3, r3
 8001074:	461a      	mov	r2, r3
 8001076:	f7ff ff2d 	bl	8000ed4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	3301      	adds	r3, #1
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4293      	cmp	r3, r2
 800108a:	d3c8      	bcc.n	800101e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	3301      	adds	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	785b      	ldrb	r3, [r3, #1]
 8001096:	461a      	mov	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	4293      	cmp	r3, r2
 800109c:	d3ad      	bcc.n	8000ffa <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <SSD1306_Putc+0xf8>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	7812      	ldrb	r2, [r2, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <SSD1306_Putc+0xf8>)
 80010ac:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80010ae:	79fb      	ldrb	r3, [r7, #7]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000524 	.word	0x20000524

080010bc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	4613      	mov	r3, r2
 80010c8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80010ca:	e012      	b.n	80010f2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	79fa      	ldrb	r2, [r7, #7]
 80010d2:	68b9      	ldr	r1, [r7, #8]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff73 	bl	8000fc0 <SSD1306_Putc>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d002      	beq.n	80010ec <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	e008      	b.n	80010fe <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3301      	adds	r3, #1
 80010f0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1e8      	bne.n	80010cc <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	781b      	ldrb	r3, [r3, #0]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <ssd1306_I2C_Init+0x28>)
 8001110:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001112:	e002      	b.n	800111a <ssd1306_I2C_Init+0x12>
		p--;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	607b      	str	r3, [r7, #4]
	while(p>0)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1f9      	bne.n	8001114 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	0003d090 	.word	0x0003d090

08001134 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b0c7      	sub	sp, #284	@ 0x11c
 8001138:	af02      	add	r7, sp, #8
 800113a:	4604      	mov	r4, r0
 800113c:	4608      	mov	r0, r1
 800113e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001142:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001146:	600a      	str	r2, [r1, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800114e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001152:	4622      	mov	r2, r4
 8001154:	701a      	strb	r2, [r3, #0]
 8001156:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800115a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800115e:	4602      	mov	r2, r0
 8001160:	701a      	strb	r2, [r3, #0]
 8001162:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001166:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800116a:	460a      	mov	r2, r1
 800116c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800116e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001172:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001176:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800117a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800117e:	7812      	ldrb	r2, [r2, #0]
 8001180:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001182:	2300      	movs	r3, #0
 8001184:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001188:	e015      	b.n	80011b6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800118a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800118e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001192:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001196:	6812      	ldr	r2, [r2, #0]
 8001198:	441a      	add	r2, r3
 800119a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800119e:	3301      	adds	r3, #1
 80011a0:	7811      	ldrb	r1, [r2, #0]
 80011a2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80011a6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80011aa:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80011ac:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80011b0:	3301      	adds	r3, #1
 80011b2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80011b6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80011c0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80011c4:	8812      	ldrh	r2, [r2, #0]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d8df      	bhi.n	800118a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80011ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011ce:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b299      	uxth	r1, r3
 80011d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	f107 020c 	add.w	r2, r7, #12
 80011e8:	200a      	movs	r0, #10
 80011ea:	9000      	str	r0, [sp, #0]
 80011ec:	4803      	ldr	r0, [pc, #12]	@ (80011fc <ssd1306_I2C_WriteMulti+0xc8>)
 80011ee:	f000 fe71 	bl	8001ed4 <HAL_I2C_Master_Transmit>
}
 80011f2:	bf00      	nop
 80011f4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd90      	pop	{r4, r7, pc}
 80011fc:	20000084 	.word	0x20000084

08001200 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af02      	add	r7, sp, #8
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	460b      	mov	r3, r1
 800120c:	71bb      	strb	r3, [r7, #6]
 800120e:	4613      	mov	r3, r2
 8001210:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001212:	79bb      	ldrb	r3, [r7, #6]
 8001214:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001216:	797b      	ldrb	r3, [r7, #5]
 8001218:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	b299      	uxth	r1, r3
 800121e:	f107 020c 	add.w	r2, r7, #12
 8001222:	230a      	movs	r3, #10
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2302      	movs	r3, #2
 8001228:	4803      	ldr	r0, [pc, #12]	@ (8001238 <ssd1306_I2C_Write+0x38>)
 800122a:	f000 fe53 	bl	8001ed4 <HAL_I2C_Master_Transmit>
}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000084 	.word	0x20000084

0800123c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <HAL_MspInit+0x4c>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124a:	4a0f      	ldr	r2, [pc, #60]	@ (8001288 <HAL_MspInit+0x4c>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001250:	6453      	str	r3, [r2, #68]	@ 0x44
 8001252:	4b0d      	ldr	r3, [pc, #52]	@ (8001288 <HAL_MspInit+0x4c>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <HAL_MspInit+0x4c>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	4a08      	ldr	r2, [pc, #32]	@ (8001288 <HAL_MspInit+0x4c>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126c:	6413      	str	r3, [r2, #64]	@ 0x40
 800126e:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <HAL_MspInit+0x4c>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800127a:	2007      	movs	r0, #7
 800127c:	f000 fad1 	bl	8001822 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40023800 	.word	0x40023800

0800128c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	@ 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a19      	ldr	r2, [pc, #100]	@ (8001310 <HAL_I2C_MspInit+0x84>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d12c      	bne.n	8001308 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b18      	ldr	r3, [pc, #96]	@ (8001314 <HAL_I2C_MspInit+0x88>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a17      	ldr	r2, [pc, #92]	@ (8001314 <HAL_I2C_MspInit+0x88>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <HAL_I2C_MspInit+0x88>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d0:	2312      	movs	r3, #18
 80012d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012dc:	2304      	movs	r3, #4
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	480c      	ldr	r0, [pc, #48]	@ (8001318 <HAL_I2C_MspInit+0x8c>)
 80012e8:	f000 fad0 	bl	800188c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <HAL_I2C_MspInit+0x88>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	4a07      	ldr	r2, [pc, #28]	@ (8001314 <HAL_I2C_MspInit+0x88>)
 80012f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fc:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <HAL_I2C_MspInit+0x88>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001300:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	@ 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40005400 	.word	0x40005400
 8001314:	40023800 	.word	0x40023800
 8001318:	40020400 	.word	0x40020400

0800131c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a19      	ldr	r2, [pc, #100]	@ (80013a0 <HAL_UART_MspInit+0x84>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d12b      	bne.n	8001396 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	4a17      	ldr	r2, [pc, #92]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 8001348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800134c:	6413      	str	r3, [r2, #64]	@ 0x40
 800134e:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	4a10      	ldr	r2, [pc, #64]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6313      	str	r3, [r2, #48]	@ 0x30
 800136a:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001376:	230c      	movs	r3, #12
 8001378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001382:	2303      	movs	r3, #3
 8001384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001386:	2307      	movs	r3, #7
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <HAL_UART_MspInit+0x8c>)
 8001392:	f000 fa7b 	bl	800188c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	@ 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40004400 	.word	0x40004400
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020000 	.word	0x40020000

080013ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08e      	sub	sp, #56	@ 0x38
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	4b33      	ldr	r3, [pc, #204]	@ (8001490 <HAL_InitTick+0xe4>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c4:	4a32      	ldr	r2, [pc, #200]	@ (8001490 <HAL_InitTick+0xe4>)
 80013c6:	f043 0310 	orr.w	r3, r3, #16
 80013ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80013cc:	4b30      	ldr	r3, [pc, #192]	@ (8001490 <HAL_InitTick+0xe4>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d0:	f003 0310 	and.w	r3, r3, #16
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013d8:	f107 0210 	add.w	r2, r7, #16
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 fb18 	bl	8002a18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d103      	bne.n	80013fa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013f2:	f001 fae9 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 80013f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80013f8:	e004      	b.n	8001404 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013fa:	f001 fae5 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 80013fe:	4603      	mov	r3, r0
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001406:	4a23      	ldr	r2, [pc, #140]	@ (8001494 <HAL_InitTick+0xe8>)
 8001408:	fba2 2303 	umull	r2, r3, r2, r3
 800140c:	0c9b      	lsrs	r3, r3, #18
 800140e:	3b01      	subs	r3, #1
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001412:	4b21      	ldr	r3, [pc, #132]	@ (8001498 <HAL_InitTick+0xec>)
 8001414:	4a21      	ldr	r2, [pc, #132]	@ (800149c <HAL_InitTick+0xf0>)
 8001416:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001418:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <HAL_InitTick+0xec>)
 800141a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800141e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001420:	4a1d      	ldr	r2, [pc, #116]	@ (8001498 <HAL_InitTick+0xec>)
 8001422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001424:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001426:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <HAL_InitTick+0xec>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142c:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <HAL_InitTick+0xec>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001432:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <HAL_InitTick+0xec>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001438:	4817      	ldr	r0, [pc, #92]	@ (8001498 <HAL_InitTick+0xec>)
 800143a:	f001 ffed 	bl	8003418 <HAL_TIM_Base_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001444:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001448:	2b00      	cmp	r3, #0
 800144a:	d11b      	bne.n	8001484 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800144c:	4812      	ldr	r0, [pc, #72]	@ (8001498 <HAL_InitTick+0xec>)
 800144e:	f002 f83d 	bl	80034cc <HAL_TIM_Base_Start_IT>
 8001452:	4603      	mov	r3, r0
 8001454:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001458:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800145c:	2b00      	cmp	r3, #0
 800145e:	d111      	bne.n	8001484 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001460:	2036      	movs	r0, #54	@ 0x36
 8001462:	f000 fa05 	bl	8001870 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b0f      	cmp	r3, #15
 800146a:	d808      	bhi.n	800147e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800146c:	2200      	movs	r2, #0
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	2036      	movs	r0, #54	@ 0x36
 8001472:	f000 f9e1 	bl	8001838 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001476:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <HAL_InitTick+0xf4>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	e002      	b.n	8001484 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001484:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001488:	4618      	mov	r0, r3
 800148a:	3738      	adds	r7, #56	@ 0x38
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800
 8001494:	431bde83 	.word	0x431bde83
 8001498:	2000052c 	.word	0x2000052c
 800149c:	40001000 	.word	0x40001000
 80014a0:	2000000c 	.word	0x2000000c

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <NMI_Handler+0x4>

080014ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <MemManage_Handler+0x4>

080014bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <UsageFault_Handler+0x4>

080014cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001508:	4802      	ldr	r0, [pc, #8]	@ (8001514 <TIM6_DAC_IRQHandler+0x10>)
 800150a:	f002 f84f 	bl	80035ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000052c 	.word	0x2000052c

08001518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001520:	4a14      	ldr	r2, [pc, #80]	@ (8001574 <_sbrk+0x5c>)
 8001522:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <_sbrk+0x60>)
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800152c:	4b13      	ldr	r3, [pc, #76]	@ (800157c <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001534:	4b11      	ldr	r3, [pc, #68]	@ (800157c <_sbrk+0x64>)
 8001536:	4a12      	ldr	r2, [pc, #72]	@ (8001580 <_sbrk+0x68>)
 8001538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	429a      	cmp	r2, r3
 8001546:	d207      	bcs.n	8001558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001548:	f002 fe3c 	bl	80041c4 <__errno>
 800154c:	4603      	mov	r3, r0
 800154e:	220c      	movs	r2, #12
 8001550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	e009      	b.n	800156c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001558:	4b08      	ldr	r3, [pc, #32]	@ (800157c <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155e:	4b07      	ldr	r3, [pc, #28]	@ (800157c <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	4a05      	ldr	r2, [pc, #20]	@ (800157c <_sbrk+0x64>)
 8001568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20020000 	.word	0x20020000
 8001578:	00000400 	.word	0x00000400
 800157c:	20000574 	.word	0x20000574
 8001580:	200006c8 	.word	0x200006c8

08001584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <SystemInit+0x20>)
 800158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800158e:	4a05      	ldr	r2, [pc, #20]	@ (80015a4 <SystemInit+0x20>)
 8001590:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001594:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015ac:	f7ff ffea 	bl	8001584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015b0:	480c      	ldr	r0, [pc, #48]	@ (80015e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015b2:	490d      	ldr	r1, [pc, #52]	@ (80015e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015b4:	4a0d      	ldr	r2, [pc, #52]	@ (80015ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b8:	e002      	b.n	80015c0 <LoopCopyDataInit>

080015ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015be:	3304      	adds	r3, #4

080015c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c4:	d3f9      	bcc.n	80015ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c6:	4a0a      	ldr	r2, [pc, #40]	@ (80015f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015c8:	4c0a      	ldr	r4, [pc, #40]	@ (80015f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015cc:	e001      	b.n	80015d2 <LoopFillZerobss>

080015ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d0:	3204      	adds	r2, #4

080015d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d4:	d3fb      	bcc.n	80015ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015d6:	f002 fdfb 	bl	80041d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015da:	f7ff f99d 	bl	8000918 <main>
  bx  lr    
 80015de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80015ec:	08005894 	.word	0x08005894
  ldr r2, =_sbss
 80015f0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80015f4:	200006c4 	.word	0x200006c4

080015f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC_IRQHandler>
	...

080015fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001600:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <HAL_Init+0x40>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0d      	ldr	r2, [pc, #52]	@ (800163c <HAL_Init+0x40>)
 8001606:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800160a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800160c:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <HAL_Init+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0a      	ldr	r2, [pc, #40]	@ (800163c <HAL_Init+0x40>)
 8001612:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001616:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001618:	4b08      	ldr	r3, [pc, #32]	@ (800163c <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a07      	ldr	r2, [pc, #28]	@ (800163c <HAL_Init+0x40>)
 800161e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001624:	2003      	movs	r0, #3
 8001626:	f000 f8fc 	bl	8001822 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162a:	2000      	movs	r0, #0
 800162c:	f7ff febe 	bl	80013ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001630:	f7ff fe04 	bl	800123c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023c00 	.word	0x40023c00

08001640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_IncTick+0x20>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_IncTick+0x24>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a04      	ldr	r2, [pc, #16]	@ (8001664 <HAL_IncTick+0x24>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000010 	.word	0x20000010
 8001664:	20000578 	.word	0x20000578

08001668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b03      	ldr	r3, [pc, #12]	@ (800167c <HAL_GetTick+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000578 	.word	0x20000578

08001680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001688:	f7ff ffee 	bl	8001668 <HAL_GetTick>
 800168c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001698:	d005      	beq.n	80016a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169a:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <HAL_Delay+0x44>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016a6:	bf00      	nop
 80016a8:	f7ff ffde 	bl	8001668 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d8f7      	bhi.n	80016a8 <HAL_Delay+0x28>
  {
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000010 	.word	0x20000010

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fa:	4a04      	ldr	r2, [pc, #16]	@ (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	@ (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	db0b      	blt.n	8001756 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	f003 021f 	and.w	r2, r3, #31
 8001744:	4907      	ldr	r1, [pc, #28]	@ (8001764 <__NVIC_EnableIRQ+0x38>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2001      	movs	r0, #1
 800174e:	fa00 f202 	lsl.w	r2, r0, r2
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100

08001768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	2b00      	cmp	r3, #0
 800177a:	db0a      	blt.n	8001792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	490c      	ldr	r1, [pc, #48]	@ (80017b4 <__NVIC_SetPriority+0x4c>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	0112      	lsls	r2, r2, #4
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	440b      	add	r3, r1
 800178c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001790:	e00a      	b.n	80017a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4908      	ldr	r1, [pc, #32]	@ (80017b8 <__NVIC_SetPriority+0x50>)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	3b04      	subs	r3, #4
 80017a0:	0112      	lsls	r2, r2, #4
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	440b      	add	r3, r1
 80017a6:	761a      	strb	r2, [r3, #24]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000e100 	.word	0xe000e100
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	@ 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f1c3 0307 	rsb	r3, r3, #7
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	bf28      	it	cs
 80017da:	2304      	movcs	r3, #4
 80017dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3304      	adds	r3, #4
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	d902      	bls.n	80017ec <NVIC_EncodePriority+0x30>
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3b03      	subs	r3, #3
 80017ea:	e000      	b.n	80017ee <NVIC_EncodePriority+0x32>
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43da      	mvns	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	401a      	ands	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001804:	f04f 31ff 	mov.w	r1, #4294967295
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43d9      	mvns	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	4313      	orrs	r3, r2
         );
}
 8001816:	4618      	mov	r0, r3
 8001818:	3724      	adds	r7, #36	@ 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ff4c 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800184a:	f7ff ff61 	bl	8001710 <__NVIC_GetPriorityGrouping>
 800184e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	68b9      	ldr	r1, [r7, #8]
 8001854:	6978      	ldr	r0, [r7, #20]
 8001856:	f7ff ffb1 	bl	80017bc <NVIC_EncodePriority>
 800185a:	4602      	mov	r2, r0
 800185c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff80 	bl	8001768 <__NVIC_SetPriority>
}
 8001868:	bf00      	nop
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff54 	bl	800172c <__NVIC_EnableIRQ>
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	@ 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	e165      	b.n	8001b74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a8:	2201      	movs	r2, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 8154 	bne.w	8001b6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d005      	beq.n	80018de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d130      	bne.n	8001940 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	2203      	movs	r2, #3
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001914:	2201      	movs	r2, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 0201 	and.w	r2, r3, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b03      	cmp	r3, #3
 800194a:	d017      	beq.n	800197c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d123      	bne.n	80019d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	08da      	lsrs	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3208      	adds	r2, #8
 8001990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	08da      	lsrs	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3208      	adds	r2, #8
 80019ca:	69b9      	ldr	r1, [r7, #24]
 80019cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0203 	and.w	r2, r3, #3
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80ae 	beq.w	8001b6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b5d      	ldr	r3, [pc, #372]	@ (8001b8c <HAL_GPIO_Init+0x300>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1a:	4a5c      	ldr	r2, [pc, #368]	@ (8001b8c <HAL_GPIO_Init+0x300>)
 8001a1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a22:	4b5a      	ldr	r3, [pc, #360]	@ (8001b8c <HAL_GPIO_Init+0x300>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a2e:	4a58      	ldr	r2, [pc, #352]	@ (8001b90 <HAL_GPIO_Init+0x304>)
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	3302      	adds	r3, #2
 8001a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	220f      	movs	r2, #15
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4f      	ldr	r2, [pc, #316]	@ (8001b94 <HAL_GPIO_Init+0x308>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d025      	beq.n	8001aa6 <HAL_GPIO_Init+0x21a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4e      	ldr	r2, [pc, #312]	@ (8001b98 <HAL_GPIO_Init+0x30c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d01f      	beq.n	8001aa2 <HAL_GPIO_Init+0x216>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4d      	ldr	r2, [pc, #308]	@ (8001b9c <HAL_GPIO_Init+0x310>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d019      	beq.n	8001a9e <HAL_GPIO_Init+0x212>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ba0 <HAL_GPIO_Init+0x314>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d013      	beq.n	8001a9a <HAL_GPIO_Init+0x20e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4b      	ldr	r2, [pc, #300]	@ (8001ba4 <HAL_GPIO_Init+0x318>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00d      	beq.n	8001a96 <HAL_GPIO_Init+0x20a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a4a      	ldr	r2, [pc, #296]	@ (8001ba8 <HAL_GPIO_Init+0x31c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d007      	beq.n	8001a92 <HAL_GPIO_Init+0x206>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a49      	ldr	r2, [pc, #292]	@ (8001bac <HAL_GPIO_Init+0x320>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d101      	bne.n	8001a8e <HAL_GPIO_Init+0x202>
 8001a8a:	2306      	movs	r3, #6
 8001a8c:	e00c      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001a8e:	2307      	movs	r3, #7
 8001a90:	e00a      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001a92:	2305      	movs	r3, #5
 8001a94:	e008      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001a96:	2304      	movs	r3, #4
 8001a98:	e006      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e004      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e002      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	69fa      	ldr	r2, [r7, #28]
 8001aaa:	f002 0203 	and.w	r2, r2, #3
 8001aae:	0092      	lsls	r2, r2, #2
 8001ab0:	4093      	lsls	r3, r2
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab8:	4935      	ldr	r1, [pc, #212]	@ (8001b90 <HAL_GPIO_Init+0x304>)
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	3302      	adds	r3, #2
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ac6:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb0 <HAL_GPIO_Init+0x324>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aea:	4a31      	ldr	r2, [pc, #196]	@ (8001bb0 <HAL_GPIO_Init+0x324>)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af0:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb0 <HAL_GPIO_Init+0x324>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b14:	4a26      	ldr	r2, [pc, #152]	@ (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b1a:	4b25      	ldr	r3, [pc, #148]	@ (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b44:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b68:	4a11      	ldr	r2, [pc, #68]	@ (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3301      	adds	r3, #1
 8001b72:	61fb      	str	r3, [r7, #28]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	2b0f      	cmp	r3, #15
 8001b78:	f67f ae96 	bls.w	80018a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	3724      	adds	r7, #36	@ 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40013800 	.word	0x40013800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	40020800 	.word	0x40020800
 8001ba0:	40020c00 	.word	0x40020c00
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40021400 	.word	0x40021400
 8001bac:	40021800 	.word	0x40021800
 8001bb0:	40013c00 	.word	0x40013c00

08001bb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d002      	beq.n	8001bd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	73fb      	strb	r3, [r7, #15]
 8001bd0:	e001      	b.n	8001bd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf4:	787b      	ldrb	r3, [r7, #1]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfa:	887a      	ldrh	r2, [r7, #2]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c00:	e003      	b.n	8001c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c02:	887b      	ldrh	r3, [r7, #2]
 8001c04:	041a      	lsls	r2, r3, #16
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	619a      	str	r2, [r3, #24]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b085      	sub	sp, #20
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c28:	887a      	ldrh	r2, [r7, #2]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	041a      	lsls	r2, r3, #16
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	887b      	ldrh	r3, [r7, #2]
 8001c36:	400b      	ands	r3, r1
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	619a      	str	r2, [r3, #24]
}
 8001c3e:	bf00      	nop
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e12b      	b.n	8001eb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d106      	bne.n	8001c78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff fb0a 	bl	800128c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2224      	movs	r2, #36	@ 0x24
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0201 	bic.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cb0:	f000 fe8a 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8001cb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	4a81      	ldr	r2, [pc, #516]	@ (8001ec0 <HAL_I2C_Init+0x274>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d807      	bhi.n	8001cd0 <HAL_I2C_Init+0x84>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4a80      	ldr	r2, [pc, #512]	@ (8001ec4 <HAL_I2C_Init+0x278>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	bf94      	ite	ls
 8001cc8:	2301      	movls	r3, #1
 8001cca:	2300      	movhi	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	e006      	b.n	8001cde <HAL_I2C_Init+0x92>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4a7d      	ldr	r2, [pc, #500]	@ (8001ec8 <HAL_I2C_Init+0x27c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	bf94      	ite	ls
 8001cd8:	2301      	movls	r3, #1
 8001cda:	2300      	movhi	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e0e7      	b.n	8001eb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4a78      	ldr	r2, [pc, #480]	@ (8001ecc <HAL_I2C_Init+0x280>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	0c9b      	lsrs	r3, r3, #18
 8001cf0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	4a6a      	ldr	r2, [pc, #424]	@ (8001ec0 <HAL_I2C_Init+0x274>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d802      	bhi.n	8001d20 <HAL_I2C_Init+0xd4>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	e009      	b.n	8001d34 <HAL_I2C_Init+0xe8>
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	4a69      	ldr	r2, [pc, #420]	@ (8001ed0 <HAL_I2C_Init+0x284>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	099b      	lsrs	r3, r3, #6
 8001d32:	3301      	adds	r3, #1
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	495c      	ldr	r1, [pc, #368]	@ (8001ec0 <HAL_I2C_Init+0x274>)
 8001d50:	428b      	cmp	r3, r1
 8001d52:	d819      	bhi.n	8001d88 <HAL_I2C_Init+0x13c>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1e59      	subs	r1, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d62:	1c59      	adds	r1, r3, #1
 8001d64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d68:	400b      	ands	r3, r1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00a      	beq.n	8001d84 <HAL_I2C_Init+0x138>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1e59      	subs	r1, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d82:	e051      	b.n	8001e28 <HAL_I2C_Init+0x1dc>
 8001d84:	2304      	movs	r3, #4
 8001d86:	e04f      	b.n	8001e28 <HAL_I2C_Init+0x1dc>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d111      	bne.n	8001db4 <HAL_I2C_Init+0x168>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1e58      	subs	r0, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6859      	ldr	r1, [r3, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	440b      	add	r3, r1
 8001d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da2:	3301      	adds	r3, #1
 8001da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	bf0c      	ite	eq
 8001dac:	2301      	moveq	r3, #1
 8001dae:	2300      	movne	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	e012      	b.n	8001dda <HAL_I2C_Init+0x18e>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1e58      	subs	r0, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6859      	ldr	r1, [r3, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	0099      	lsls	r1, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf0c      	ite	eq
 8001dd4:	2301      	moveq	r3, #1
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_I2C_Init+0x196>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e022      	b.n	8001e28 <HAL_I2C_Init+0x1dc>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10e      	bne.n	8001e08 <HAL_I2C_Init+0x1bc>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	1e58      	subs	r0, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6859      	ldr	r1, [r3, #4]
 8001df2:	460b      	mov	r3, r1
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	440b      	add	r3, r1
 8001df8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e06:	e00f      	b.n	8001e28 <HAL_I2C_Init+0x1dc>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1e58      	subs	r0, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6859      	ldr	r1, [r3, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	0099      	lsls	r1, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e1e:	3301      	adds	r3, #1
 8001e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	6809      	ldr	r1, [r1, #0]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69da      	ldr	r2, [r3, #28]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6911      	ldr	r1, [r2, #16]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68d2      	ldr	r2, [r2, #12]
 8001e62:	4311      	orrs	r1, r2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	430b      	orrs	r3, r1
 8001e6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	000186a0 	.word	0x000186a0
 8001ec4:	001e847f 	.word	0x001e847f
 8001ec8:	003d08ff 	.word	0x003d08ff
 8001ecc:	431bde83 	.word	0x431bde83
 8001ed0:	10624dd3 	.word	0x10624dd3

08001ed4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	817b      	strh	r3, [r7, #10]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ee8:	f7ff fbbe 	bl	8001668 <HAL_GetTick>
 8001eec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	f040 80e0 	bne.w	80020bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	2319      	movs	r3, #25
 8001f02:	2201      	movs	r2, #1
 8001f04:	4970      	ldr	r1, [pc, #448]	@ (80020c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 fa92 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f12:	2302      	movs	r3, #2
 8001f14:	e0d3      	b.n	80020be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_I2C_Master_Transmit+0x50>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e0cc      	b.n	80020be <HAL_I2C_Master_Transmit+0x1ea>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d007      	beq.n	8001f4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2221      	movs	r2, #33	@ 0x21
 8001f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2210      	movs	r2, #16
 8001f66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	893a      	ldrh	r2, [r7, #8]
 8001f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4a50      	ldr	r2, [pc, #320]	@ (80020cc <HAL_I2C_Master_Transmit+0x1f8>)
 8001f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f8c:	8979      	ldrh	r1, [r7, #10]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	6a3a      	ldr	r2, [r7, #32]
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f9ca 	bl	800232c <I2C_MasterRequestWrite>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e08d      	b.n	80020be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fb8:	e066      	b.n	8002088 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	6a39      	ldr	r1, [r7, #32]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 fb50 	bl	8002664 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00d      	beq.n	8001fe6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d107      	bne.n	8001fe2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fe0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e06b      	b.n	80020be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fea:	781a      	ldrb	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002000:	b29b      	uxth	r3, r3
 8002002:	3b01      	subs	r3, #1
 8002004:	b29a      	uxth	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800200e:	3b01      	subs	r3, #1
 8002010:	b29a      	uxth	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b04      	cmp	r3, #4
 8002022:	d11b      	bne.n	800205c <HAL_I2C_Master_Transmit+0x188>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002028:	2b00      	cmp	r3, #0
 800202a:	d017      	beq.n	800205c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002030:	781a      	ldrb	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002046:	b29b      	uxth	r3, r3
 8002048:	3b01      	subs	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	6a39      	ldr	r1, [r7, #32]
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 fb47 	bl	80026f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00d      	beq.n	8002088 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	2b04      	cmp	r3, #4
 8002072:	d107      	bne.n	8002084 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002082:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e01a      	b.n	80020be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800208c:	2b00      	cmp	r3, #0
 800208e:	d194      	bne.n	8001fba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800209e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	e000      	b.n	80020be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020bc:	2302      	movs	r3, #2
  }
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	00100002 	.word	0x00100002
 80020cc:	ffff0000 	.word	0xffff0000

080020d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	@ 0x28
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	460b      	mov	r3, r1
 80020de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80020e0:	f7ff fac2 	bl	8001668 <HAL_GetTick>
 80020e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b20      	cmp	r3, #32
 80020f4:	f040 8111 	bne.w	800231a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2319      	movs	r3, #25
 80020fe:	2201      	movs	r2, #1
 8002100:	4988      	ldr	r1, [pc, #544]	@ (8002324 <HAL_I2C_IsDeviceReady+0x254>)
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f994 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800210e:	2302      	movs	r3, #2
 8002110:	e104      	b.n	800231c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_I2C_IsDeviceReady+0x50>
 800211c:	2302      	movs	r3, #2
 800211e:	e0fd      	b.n	800231c <HAL_I2C_IsDeviceReady+0x24c>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b01      	cmp	r3, #1
 8002134:	d007      	beq.n	8002146 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0201 	orr.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002154:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2224      	movs	r2, #36	@ 0x24
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4a70      	ldr	r2, [pc, #448]	@ (8002328 <HAL_I2C_IsDeviceReady+0x258>)
 8002168:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002178:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2200      	movs	r2, #0
 8002182:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 f952 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00d      	beq.n	80021ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021a0:	d103      	bne.n	80021aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021a8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e0b6      	b.n	800231c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021ae:	897b      	ldrh	r3, [r7, #10]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	461a      	mov	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80021bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80021be:	f7ff fa53 	bl	8001668 <HAL_GetTick>
 80021c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	bf0c      	ite	eq
 80021d2:	2301      	moveq	r3, #1
 80021d4:	2300      	movne	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80021f2:	e025      	b.n	8002240 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021f4:	f7ff fa38 	bl	8001668 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d302      	bcc.n	800220a <HAL_I2C_IsDeviceReady+0x13a>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d103      	bne.n	8002212 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	22a0      	movs	r2, #160	@ 0xa0
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b02      	cmp	r3, #2
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2ba0      	cmp	r3, #160	@ 0xa0
 800224a:	d005      	beq.n	8002258 <HAL_I2C_IsDeviceReady+0x188>
 800224c:	7dfb      	ldrb	r3, [r7, #23]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d102      	bne.n	8002258 <HAL_I2C_IsDeviceReady+0x188>
 8002252:	7dbb      	ldrb	r3, [r7, #22]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0cd      	beq.n	80021f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b02      	cmp	r3, #2
 800226c:	d129      	bne.n	80022c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800227c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2319      	movs	r3, #25
 800229a:	2201      	movs	r2, #1
 800229c:	4921      	ldr	r1, [pc, #132]	@ (8002324 <HAL_I2C_IsDeviceReady+0x254>)
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 f8c6 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e036      	b.n	800231c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2220      	movs	r2, #32
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e02c      	b.n	800231c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	2319      	movs	r3, #25
 80022e2:	2201      	movs	r2, #1
 80022e4:	490f      	ldr	r1, [pc, #60]	@ (8002324 <HAL_I2C_IsDeviceReady+0x254>)
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f8a2 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e012      	b.n	800231c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	3301      	adds	r3, #1
 80022fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	f4ff af32 	bcc.w	800216a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800231a:	2302      	movs	r3, #2
  }
}
 800231c:	4618      	mov	r0, r3
 800231e:	3720      	adds	r7, #32
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	00100002 	.word	0x00100002
 8002328:	ffff0000 	.word	0xffff0000

0800232c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	460b      	mov	r3, r1
 800233a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002340:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b08      	cmp	r3, #8
 8002346:	d006      	beq.n	8002356 <I2C_MasterRequestWrite+0x2a>
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d003      	beq.n	8002356 <I2C_MasterRequestWrite+0x2a>
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002354:	d108      	bne.n	8002368 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	e00b      	b.n	8002380 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236c:	2b12      	cmp	r3, #18
 800236e:	d107      	bne.n	8002380 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800237e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f84f 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00d      	beq.n	80023b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023a6:	d103      	bne.n	80023b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e035      	b.n	8002420 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023bc:	d108      	bne.n	80023d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023be:	897b      	ldrh	r3, [r7, #10]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80023cc:	611a      	str	r2, [r3, #16]
 80023ce:	e01b      	b.n	8002408 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023d0:	897b      	ldrh	r3, [r7, #10]
 80023d2:	11db      	asrs	r3, r3, #7
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	f003 0306 	and.w	r3, r3, #6
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f063 030f 	orn	r3, r3, #15
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	490e      	ldr	r1, [pc, #56]	@ (8002428 <I2C_MasterRequestWrite+0xfc>)
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f898 	bl	8002524 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e010      	b.n	8002420 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023fe:	897b      	ldrh	r3, [r7, #10]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	4907      	ldr	r1, [pc, #28]	@ (800242c <I2C_MasterRequestWrite+0x100>)
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f888 	bl	8002524 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	00010008 	.word	0x00010008
 800242c:	00010002 	.word	0x00010002

08002430 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	4613      	mov	r3, r2
 800243e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002440:	e048      	b.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d044      	beq.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244a:	f7ff f90d 	bl	8001668 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <I2C_WaitOnFlagUntilTimeout+0x30>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d139      	bne.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	0c1b      	lsrs	r3, r3, #16
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d10d      	bne.n	8002486 <I2C_WaitOnFlagUntilTimeout+0x56>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	43da      	mvns	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	4013      	ands	r3, r2
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	e00c      	b.n	80024a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	43da      	mvns	r2, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	4013      	ands	r3, r2
 8002492:	b29b      	uxth	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	bf0c      	ite	eq
 8002498:	2301      	moveq	r3, #1
 800249a:	2300      	movne	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	461a      	mov	r2, r3
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d116      	bne.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c0:	f043 0220 	orr.w	r2, r3, #32
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e023      	b.n	800251c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	0c1b      	lsrs	r3, r3, #16
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d10d      	bne.n	80024fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	43da      	mvns	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	4013      	ands	r3, r2
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bf0c      	ite	eq
 80024f0:	2301      	moveq	r3, #1
 80024f2:	2300      	movne	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	e00c      	b.n	8002514 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	43da      	mvns	r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	4013      	ands	r3, r2
 8002506:	b29b      	uxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	429a      	cmp	r2, r3
 8002518:	d093      	beq.n	8002442 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002532:	e071      	b.n	8002618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800253e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002542:	d123      	bne.n	800258c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002552:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800255c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002578:	f043 0204 	orr.w	r2, r3, #4
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e067      	b.n	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002592:	d041      	beq.n	8002618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002594:	f7ff f868 	bl	8001668 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d302      	bcc.n	80025aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d136      	bne.n	8002618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	0c1b      	lsrs	r3, r3, #16
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d10c      	bne.n	80025ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	43da      	mvns	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4013      	ands	r3, r2
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	bf14      	ite	ne
 80025c6:	2301      	movne	r3, #1
 80025c8:	2300      	moveq	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	e00b      	b.n	80025e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	43da      	mvns	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	4013      	ands	r3, r2
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf14      	ite	ne
 80025e0:	2301      	movne	r3, #1
 80025e2:	2300      	moveq	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d016      	beq.n	8002618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002604:	f043 0220 	orr.w	r2, r3, #32
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e021      	b.n	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	0c1b      	lsrs	r3, r3, #16
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b01      	cmp	r3, #1
 8002620:	d10c      	bne.n	800263c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	43da      	mvns	r2, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	4013      	ands	r3, r2
 800262e:	b29b      	uxth	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf14      	ite	ne
 8002634:	2301      	movne	r3, #1
 8002636:	2300      	moveq	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	e00b      	b.n	8002654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	43da      	mvns	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4013      	ands	r3, r2
 8002648:	b29b      	uxth	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	bf14      	ite	ne
 800264e:	2301      	movne	r3, #1
 8002650:	2300      	moveq	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	f47f af6d 	bne.w	8002534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002670:	e034      	b.n	80026dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f886 	bl	8002784 <I2C_IsAcknowledgeFailed>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e034      	b.n	80026ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002688:	d028      	beq.n	80026dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268a:	f7fe ffed 	bl	8001668 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	429a      	cmp	r2, r3
 8002698:	d302      	bcc.n	80026a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d11d      	bne.n	80026dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026aa:	2b80      	cmp	r3, #128	@ 0x80
 80026ac:	d016      	beq.n	80026dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c8:	f043 0220 	orr.w	r2, r3, #32
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e007      	b.n	80026ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026e6:	2b80      	cmp	r3, #128	@ 0x80
 80026e8:	d1c3      	bne.n	8002672 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002700:	e034      	b.n	800276c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 f83e 	bl	8002784 <I2C_IsAcknowledgeFailed>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e034      	b.n	800277c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002718:	d028      	beq.n	800276c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271a:	f7fe ffa5 	bl	8001668 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	429a      	cmp	r2, r3
 8002728:	d302      	bcc.n	8002730 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d11d      	bne.n	800276c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b04      	cmp	r3, #4
 800273c:	d016      	beq.n	800276c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	f043 0220 	orr.w	r2, r3, #32
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e007      	b.n	800277c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b04      	cmp	r3, #4
 8002778:	d1c3      	bne.n	8002702 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800279a:	d11b      	bne.n	80027d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c0:	f043 0204 	orr.w	r2, r3, #4
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0cc      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b68      	ldr	r3, [pc, #416]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d90c      	bls.n	8002820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b65      	ldr	r3, [pc, #404]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b63      	ldr	r3, [pc, #396]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0b8      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d020      	beq.n	800286e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002838:	4b59      	ldr	r3, [pc, #356]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4a58      	ldr	r2, [pc, #352]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002842:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002850:	4b53      	ldr	r3, [pc, #332]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4a52      	ldr	r2, [pc, #328]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800285a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800285c:	4b50      	ldr	r3, [pc, #320]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	494d      	ldr	r1, [pc, #308]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	4313      	orrs	r3, r2
 800286c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d044      	beq.n	8002904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	4b47      	ldr	r3, [pc, #284]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d119      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e07f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d003      	beq.n	80028a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d107      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a2:	4b3f      	ldr	r3, [pc, #252]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e06f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b2:	4b3b      	ldr	r3, [pc, #236]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e067      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c2:	4b37      	ldr	r3, [pc, #220]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f023 0203 	bic.w	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4934      	ldr	r1, [pc, #208]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d4:	f7fe fec8 	bl	8001668 <HAL_GetTick>
 80028d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028dc:	f7fe fec4 	bl	8001668 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e04f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	4b2b      	ldr	r3, [pc, #172]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 020c 	and.w	r2, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	429a      	cmp	r2, r3
 8002902:	d1eb      	bne.n	80028dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002904:	4b25      	ldr	r3, [pc, #148]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d20c      	bcs.n	800292c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b22      	ldr	r3, [pc, #136]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b20      	ldr	r3, [pc, #128]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e032      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002938:	4b19      	ldr	r3, [pc, #100]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4916      	ldr	r1, [pc, #88]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002956:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	490e      	ldr	r1, [pc, #56]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800296a:	f000 f887 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 800296e:	4602      	mov	r2, r0
 8002970:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	490a      	ldr	r1, [pc, #40]	@ (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	5ccb      	ldrb	r3, [r1, r3]
 800297e:	fa22 f303 	lsr.w	r3, r2, r3
 8002982:	4a09      	ldr	r2, [pc, #36]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002986:	4b09      	ldr	r3, [pc, #36]	@ (80029ac <HAL_RCC_ClockConfig+0x1c8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe fd0e 	bl	80013ac <HAL_InitTick>

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023c00 	.word	0x40023c00
 80029a0:	40023800 	.word	0x40023800
 80029a4:	08005838 	.word	0x08005838
 80029a8:	20000008 	.word	0x20000008
 80029ac:	2000000c 	.word	0x2000000c

080029b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b4:	4b03      	ldr	r3, [pc, #12]	@ (80029c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000008 	.word	0x20000008

080029c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029cc:	f7ff fff0 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b05      	ldr	r3, [pc, #20]	@ (80029e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	0a9b      	lsrs	r3, r3, #10
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	4903      	ldr	r1, [pc, #12]	@ (80029ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40023800 	.word	0x40023800
 80029ec:	08005848 	.word	0x08005848

080029f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029f4:	f7ff ffdc 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029f8:	4602      	mov	r2, r0
 80029fa:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	0b5b      	lsrs	r3, r3, #13
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	4903      	ldr	r1, [pc, #12]	@ (8002a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a06:	5ccb      	ldrb	r3, [r1, r3]
 8002a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40023800 	.word	0x40023800
 8002a14:	08005848 	.word	0x08005848

08002a18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	220f      	movs	r2, #15
 8002a26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a28:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <HAL_RCC_GetClockConfig+0x5c>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 0203 	and.w	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a34:	4b0f      	ldr	r3, [pc, #60]	@ (8002a74 <HAL_RCC_GetClockConfig+0x5c>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a40:	4b0c      	ldr	r3, [pc, #48]	@ (8002a74 <HAL_RCC_GetClockConfig+0x5c>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a4c:	4b09      	ldr	r3, [pc, #36]	@ (8002a74 <HAL_RCC_GetClockConfig+0x5c>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	08db      	lsrs	r3, r3, #3
 8002a52:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a5a:	4b07      	ldr	r3, [pc, #28]	@ (8002a78 <HAL_RCC_GetClockConfig+0x60>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 020f 	and.w	r2, r3, #15
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	601a      	str	r2, [r3, #0]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40023c00 	.word	0x40023c00

08002a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a80:	b0ae      	sub	sp, #184	@ 0xb8
 8002a82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa2:	4bcb      	ldr	r3, [pc, #812]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b0c      	cmp	r3, #12
 8002aac:	f200 8206 	bhi.w	8002ebc <HAL_RCC_GetSysClockFreq+0x440>
 8002ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab6:	bf00      	nop
 8002ab8:	08002aed 	.word	0x08002aed
 8002abc:	08002ebd 	.word	0x08002ebd
 8002ac0:	08002ebd 	.word	0x08002ebd
 8002ac4:	08002ebd 	.word	0x08002ebd
 8002ac8:	08002af5 	.word	0x08002af5
 8002acc:	08002ebd 	.word	0x08002ebd
 8002ad0:	08002ebd 	.word	0x08002ebd
 8002ad4:	08002ebd 	.word	0x08002ebd
 8002ad8:	08002afd 	.word	0x08002afd
 8002adc:	08002ebd 	.word	0x08002ebd
 8002ae0:	08002ebd 	.word	0x08002ebd
 8002ae4:	08002ebd 	.word	0x08002ebd
 8002ae8:	08002ced 	.word	0x08002ced
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aec:	4bb9      	ldr	r3, [pc, #740]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002aee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002af2:	e1e7      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002af4:	4bb8      	ldr	r3, [pc, #736]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002af6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002afa:	e1e3      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002afc:	4bb4      	ldr	r3, [pc, #720]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b08:	4bb1      	ldr	r3, [pc, #708]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d071      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b14:	4bae      	ldr	r3, [pc, #696]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	099b      	lsrs	r3, r3, #6
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b20:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b3a:	4622      	mov	r2, r4
 8002b3c:	462b      	mov	r3, r5
 8002b3e:	f04f 0000 	mov.w	r0, #0
 8002b42:	f04f 0100 	mov.w	r1, #0
 8002b46:	0159      	lsls	r1, r3, #5
 8002b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b4c:	0150      	lsls	r0, r2, #5
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4621      	mov	r1, r4
 8002b54:	1a51      	subs	r1, r2, r1
 8002b56:	6439      	str	r1, [r7, #64]	@ 0x40
 8002b58:	4629      	mov	r1, r5
 8002b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002b6c:	4649      	mov	r1, r9
 8002b6e:	018b      	lsls	r3, r1, #6
 8002b70:	4641      	mov	r1, r8
 8002b72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b76:	4641      	mov	r1, r8
 8002b78:	018a      	lsls	r2, r1, #6
 8002b7a:	4641      	mov	r1, r8
 8002b7c:	1a51      	subs	r1, r2, r1
 8002b7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b80:	4649      	mov	r1, r9
 8002b82:	eb63 0301 	sbc.w	r3, r3, r1
 8002b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002b94:	4649      	mov	r1, r9
 8002b96:	00cb      	lsls	r3, r1, #3
 8002b98:	4641      	mov	r1, r8
 8002b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b9e:	4641      	mov	r1, r8
 8002ba0:	00ca      	lsls	r2, r1, #3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4622      	mov	r2, r4
 8002baa:	189b      	adds	r3, r3, r2
 8002bac:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bae:	462b      	mov	r3, r5
 8002bb0:	460a      	mov	r2, r1
 8002bb2:	eb42 0303 	adc.w	r3, r2, r3
 8002bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bc4:	4629      	mov	r1, r5
 8002bc6:	024b      	lsls	r3, r1, #9
 8002bc8:	4621      	mov	r1, r4
 8002bca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bce:	4621      	mov	r1, r4
 8002bd0:	024a      	lsls	r2, r1, #9
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002be0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002be4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002be8:	f7fd fb6a 	bl	80002c0 <__aeabi_uldivmod>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bf6:	e067      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf8:	4b75      	ldr	r3, [pc, #468]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	099b      	lsrs	r3, r3, #6
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c04:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002c08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c12:	2300      	movs	r3, #0
 8002c14:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c16:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002c1a:	4622      	mov	r2, r4
 8002c1c:	462b      	mov	r3, r5
 8002c1e:	f04f 0000 	mov.w	r0, #0
 8002c22:	f04f 0100 	mov.w	r1, #0
 8002c26:	0159      	lsls	r1, r3, #5
 8002c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c2c:	0150      	lsls	r0, r2, #5
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4621      	mov	r1, r4
 8002c34:	1a51      	subs	r1, r2, r1
 8002c36:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002c38:	4629      	mov	r1, r5
 8002c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002c4c:	4649      	mov	r1, r9
 8002c4e:	018b      	lsls	r3, r1, #6
 8002c50:	4641      	mov	r1, r8
 8002c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c56:	4641      	mov	r1, r8
 8002c58:	018a      	lsls	r2, r1, #6
 8002c5a:	4641      	mov	r1, r8
 8002c5c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c60:	4649      	mov	r1, r9
 8002c62:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c72:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c7a:	4692      	mov	sl, r2
 8002c7c:	469b      	mov	fp, r3
 8002c7e:	4623      	mov	r3, r4
 8002c80:	eb1a 0303 	adds.w	r3, sl, r3
 8002c84:	623b      	str	r3, [r7, #32]
 8002c86:	462b      	mov	r3, r5
 8002c88:	eb4b 0303 	adc.w	r3, fp, r3
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	028b      	lsls	r3, r1, #10
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	028a      	lsls	r2, r1, #10
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cb4:	677a      	str	r2, [r7, #116]	@ 0x74
 8002cb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002cba:	f7fd fb01 	bl	80002c0 <__aeabi_uldivmod>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cc8:	4b41      	ldr	r3, [pc, #260]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	0c1b      	lsrs	r3, r3, #16
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002cda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002cea:	e0eb      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cec:	4b38      	ldr	r3, [pc, #224]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cf8:	4b35      	ldr	r3, [pc, #212]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d06b      	beq.n	8002ddc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d04:	4b32      	ldr	r3, [pc, #200]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	099b      	lsrs	r3, r3, #6
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d16:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d18:	2300      	movs	r3, #0
 8002d1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d1c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002d20:	4622      	mov	r2, r4
 8002d22:	462b      	mov	r3, r5
 8002d24:	f04f 0000 	mov.w	r0, #0
 8002d28:	f04f 0100 	mov.w	r1, #0
 8002d2c:	0159      	lsls	r1, r3, #5
 8002d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d32:	0150      	lsls	r0, r2, #5
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4621      	mov	r1, r4
 8002d3a:	1a51      	subs	r1, r2, r1
 8002d3c:	61b9      	str	r1, [r7, #24]
 8002d3e:	4629      	mov	r1, r5
 8002d40:	eb63 0301 	sbc.w	r3, r3, r1
 8002d44:	61fb      	str	r3, [r7, #28]
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d52:	4659      	mov	r1, fp
 8002d54:	018b      	lsls	r3, r1, #6
 8002d56:	4651      	mov	r1, sl
 8002d58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d5c:	4651      	mov	r1, sl
 8002d5e:	018a      	lsls	r2, r1, #6
 8002d60:	4651      	mov	r1, sl
 8002d62:	ebb2 0801 	subs.w	r8, r2, r1
 8002d66:	4659      	mov	r1, fp
 8002d68:	eb63 0901 	sbc.w	r9, r3, r1
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d80:	4690      	mov	r8, r2
 8002d82:	4699      	mov	r9, r3
 8002d84:	4623      	mov	r3, r4
 8002d86:	eb18 0303 	adds.w	r3, r8, r3
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	462b      	mov	r3, r5
 8002d8e:	eb49 0303 	adc.w	r3, r9, r3
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002da0:	4629      	mov	r1, r5
 8002da2:	024b      	lsls	r3, r1, #9
 8002da4:	4621      	mov	r1, r4
 8002da6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002daa:	4621      	mov	r1, r4
 8002dac:	024a      	lsls	r2, r1, #9
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002db6:	2200      	movs	r2, #0
 8002db8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002dba:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002dbc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002dc0:	f7fd fa7e 	bl	80002c0 <__aeabi_uldivmod>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4613      	mov	r3, r2
 8002dca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dce:	e065      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x420>
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	00f42400 	.word	0x00f42400
 8002dd8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ddc:	4b3d      	ldr	r3, [pc, #244]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	099b      	lsrs	r3, r3, #6
 8002de2:	2200      	movs	r2, #0
 8002de4:	4618      	mov	r0, r3
 8002de6:	4611      	mov	r1, r2
 8002de8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dec:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dee:	2300      	movs	r3, #0
 8002df0:	657b      	str	r3, [r7, #84]	@ 0x54
 8002df2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002df6:	4642      	mov	r2, r8
 8002df8:	464b      	mov	r3, r9
 8002dfa:	f04f 0000 	mov.w	r0, #0
 8002dfe:	f04f 0100 	mov.w	r1, #0
 8002e02:	0159      	lsls	r1, r3, #5
 8002e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e08:	0150      	lsls	r0, r2, #5
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4641      	mov	r1, r8
 8002e10:	1a51      	subs	r1, r2, r1
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	4649      	mov	r1, r9
 8002e16:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e28:	4659      	mov	r1, fp
 8002e2a:	018b      	lsls	r3, r1, #6
 8002e2c:	4651      	mov	r1, sl
 8002e2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e32:	4651      	mov	r1, sl
 8002e34:	018a      	lsls	r2, r1, #6
 8002e36:	4651      	mov	r1, sl
 8002e38:	1a54      	subs	r4, r2, r1
 8002e3a:	4659      	mov	r1, fp
 8002e3c:	eb63 0501 	sbc.w	r5, r3, r1
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	00eb      	lsls	r3, r5, #3
 8002e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e4e:	00e2      	lsls	r2, r4, #3
 8002e50:	4614      	mov	r4, r2
 8002e52:	461d      	mov	r5, r3
 8002e54:	4643      	mov	r3, r8
 8002e56:	18e3      	adds	r3, r4, r3
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	464b      	mov	r3, r9
 8002e5c:	eb45 0303 	adc.w	r3, r5, r3
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e6e:	4629      	mov	r1, r5
 8002e70:	028b      	lsls	r3, r1, #10
 8002e72:	4621      	mov	r1, r4
 8002e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e78:	4621      	mov	r1, r4
 8002e7a:	028a      	lsls	r2, r1, #10
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e84:	2200      	movs	r2, #0
 8002e86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e88:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002e8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e8e:	f7fd fa17 	bl	80002c0 <__aeabi_uldivmod>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4613      	mov	r3, r2
 8002e98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	0f1b      	lsrs	r3, r3, #28
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002eaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002eae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002eba:	e003      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ebc:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ec2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	37b8      	adds	r7, #184	@ 0xb8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	00f42400 	.word	0x00f42400

08002edc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e28d      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 8083 	beq.w	8003002 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002efc:	4b94      	ldr	r3, [pc, #592]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 030c 	and.w	r3, r3, #12
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d019      	beq.n	8002f3c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f08:	4b91      	ldr	r3, [pc, #580]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f14:	4b8e      	ldr	r3, [pc, #568]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f20:	d00c      	beq.n	8002f3c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f22:	4b8b      	ldr	r3, [pc, #556]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f2a:	2b0c      	cmp	r3, #12
 8002f2c:	d112      	bne.n	8002f54 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2e:	4b88      	ldr	r3, [pc, #544]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f3a:	d10b      	bne.n	8002f54 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	4b84      	ldr	r3, [pc, #528]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d05b      	beq.n	8003000 <HAL_RCC_OscConfig+0x124>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d157      	bne.n	8003000 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e25a      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f5c:	d106      	bne.n	8002f6c <HAL_RCC_OscConfig+0x90>
 8002f5e:	4b7c      	ldr	r3, [pc, #496]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a7b      	ldr	r2, [pc, #492]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e01d      	b.n	8002fa8 <HAL_RCC_OscConfig+0xcc>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCC_OscConfig+0xb4>
 8002f76:	4b76      	ldr	r3, [pc, #472]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a75      	ldr	r2, [pc, #468]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	4b73      	ldr	r3, [pc, #460]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a72      	ldr	r2, [pc, #456]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e00b      	b.n	8002fa8 <HAL_RCC_OscConfig+0xcc>
 8002f90:	4b6f      	ldr	r3, [pc, #444]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a6e      	ldr	r2, [pc, #440]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	4b6c      	ldr	r3, [pc, #432]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a6b      	ldr	r2, [pc, #428]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002fa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d013      	beq.n	8002fd8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fb5a 	bl	8001668 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7fe fb56 	bl	8001668 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	@ 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e21f      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	4b61      	ldr	r3, [pc, #388]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0xdc>
 8002fd6:	e014      	b.n	8003002 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fe fb46 	bl	8001668 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fe fb42 	bl	8001668 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	@ 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e20b      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff2:	4b57      	ldr	r3, [pc, #348]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x104>
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d06f      	beq.n	80030ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800300e:	4b50      	ldr	r3, [pc, #320]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b00      	cmp	r3, #0
 8003018:	d017      	beq.n	800304a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800301a:	4b4d      	ldr	r3, [pc, #308]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003022:	2b08      	cmp	r3, #8
 8003024:	d105      	bne.n	8003032 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003026:	4b4a      	ldr	r3, [pc, #296]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003032:	4b47      	ldr	r3, [pc, #284]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800303a:	2b0c      	cmp	r3, #12
 800303c:	d11c      	bne.n	8003078 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303e:	4b44      	ldr	r3, [pc, #272]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d116      	bne.n	8003078 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304a:	4b41      	ldr	r3, [pc, #260]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <HAL_RCC_OscConfig+0x186>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d001      	beq.n	8003062 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e1d3      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003062:	4b3b      	ldr	r3, [pc, #236]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4937      	ldr	r1, [pc, #220]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003076:	e03a      	b.n	80030ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d020      	beq.n	80030c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003080:	4b34      	ldr	r3, [pc, #208]	@ (8003154 <HAL_RCC_OscConfig+0x278>)
 8003082:	2201      	movs	r2, #1
 8003084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7fe faef 	bl	8001668 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308e:	f7fe faeb 	bl	8001668 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e1b4      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0f0      	beq.n	800308e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ac:	4b28      	ldr	r3, [pc, #160]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4925      	ldr	r1, [pc, #148]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]
 80030c0:	e015      	b.n	80030ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c2:	4b24      	ldr	r3, [pc, #144]	@ (8003154 <HAL_RCC_OscConfig+0x278>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7fe face 	bl	8001668 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d0:	f7fe faca 	bl	8001668 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e193      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d036      	beq.n	8003168 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d016      	beq.n	8003130 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003102:	4b15      	ldr	r3, [pc, #84]	@ (8003158 <HAL_RCC_OscConfig+0x27c>)
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003108:	f7fe faae 	bl	8001668 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003110:	f7fe faaa 	bl	8001668 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e173      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003122:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x234>
 800312e:	e01b      	b.n	8003168 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003130:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <HAL_RCC_OscConfig+0x27c>)
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003136:	f7fe fa97 	bl	8001668 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313c:	e00e      	b.n	800315c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800313e:	f7fe fa93 	bl	8001668 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d907      	bls.n	800315c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e15c      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
 8003150:	40023800 	.word	0x40023800
 8003154:	42470000 	.word	0x42470000
 8003158:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800315c:	4b8a      	ldr	r3, [pc, #552]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800315e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1ea      	bne.n	800313e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 8097 	beq.w	80032a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003176:	2300      	movs	r3, #0
 8003178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317a:	4b83      	ldr	r3, [pc, #524]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10f      	bne.n	80031a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	4b7f      	ldr	r3, [pc, #508]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	4a7e      	ldr	r2, [pc, #504]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003194:	6413      	str	r3, [r2, #64]	@ 0x40
 8003196:	4b7c      	ldr	r3, [pc, #496]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a2:	2301      	movs	r3, #1
 80031a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a6:	4b79      	ldr	r3, [pc, #484]	@ (800338c <HAL_RCC_OscConfig+0x4b0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d118      	bne.n	80031e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b2:	4b76      	ldr	r3, [pc, #472]	@ (800338c <HAL_RCC_OscConfig+0x4b0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a75      	ldr	r2, [pc, #468]	@ (800338c <HAL_RCC_OscConfig+0x4b0>)
 80031b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031be:	f7fe fa53 	bl	8001668 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c6:	f7fe fa4f 	bl	8001668 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e118      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d8:	4b6c      	ldr	r3, [pc, #432]	@ (800338c <HAL_RCC_OscConfig+0x4b0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d106      	bne.n	80031fa <HAL_RCC_OscConfig+0x31e>
 80031ec:	4b66      	ldr	r3, [pc, #408]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 80031ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f0:	4a65      	ldr	r2, [pc, #404]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f8:	e01c      	b.n	8003234 <HAL_RCC_OscConfig+0x358>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b05      	cmp	r3, #5
 8003200:	d10c      	bne.n	800321c <HAL_RCC_OscConfig+0x340>
 8003202:	4b61      	ldr	r3, [pc, #388]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003206:	4a60      	ldr	r2, [pc, #384]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003208:	f043 0304 	orr.w	r3, r3, #4
 800320c:	6713      	str	r3, [r2, #112]	@ 0x70
 800320e:	4b5e      	ldr	r3, [pc, #376]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003212:	4a5d      	ldr	r2, [pc, #372]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	6713      	str	r3, [r2, #112]	@ 0x70
 800321a:	e00b      	b.n	8003234 <HAL_RCC_OscConfig+0x358>
 800321c:	4b5a      	ldr	r3, [pc, #360]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003220:	4a59      	ldr	r2, [pc, #356]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003222:	f023 0301 	bic.w	r3, r3, #1
 8003226:	6713      	str	r3, [r2, #112]	@ 0x70
 8003228:	4b57      	ldr	r3, [pc, #348]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800322a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322c:	4a56      	ldr	r2, [pc, #344]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800322e:	f023 0304 	bic.w	r3, r3, #4
 8003232:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d015      	beq.n	8003268 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323c:	f7fe fa14 	bl	8001668 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003242:	e00a      	b.n	800325a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003244:	f7fe fa10 	bl	8001668 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e0d7      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325a:	4b4b      	ldr	r3, [pc, #300]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0ee      	beq.n	8003244 <HAL_RCC_OscConfig+0x368>
 8003266:	e014      	b.n	8003292 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fe f9fe 	bl	8001668 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326e:	e00a      	b.n	8003286 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003270:	f7fe f9fa 	bl	8001668 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e0c1      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003286:	4b40      	ldr	r3, [pc, #256]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1ee      	bne.n	8003270 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003292:	7dfb      	ldrb	r3, [r7, #23]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d105      	bne.n	80032a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003298:	4b3b      	ldr	r3, [pc, #236]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800329a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329c:	4a3a      	ldr	r2, [pc, #232]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800329e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 80ad 	beq.w	8003408 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032ae:	4b36      	ldr	r3, [pc, #216]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d060      	beq.n	800337c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d145      	bne.n	800334e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c2:	4b33      	ldr	r3, [pc, #204]	@ (8003390 <HAL_RCC_OscConfig+0x4b4>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c8:	f7fe f9ce 	bl	8001668 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fe f9ca 	bl	8001668 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e093      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e2:	4b29      	ldr	r3, [pc, #164]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69da      	ldr	r2, [r3, #28]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	019b      	lsls	r3, r3, #6
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003304:	085b      	lsrs	r3, r3, #1
 8003306:	3b01      	subs	r3, #1
 8003308:	041b      	lsls	r3, r3, #16
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003310:	061b      	lsls	r3, r3, #24
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003318:	071b      	lsls	r3, r3, #28
 800331a:	491b      	ldr	r1, [pc, #108]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800331c:	4313      	orrs	r3, r2
 800331e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003320:	4b1b      	ldr	r3, [pc, #108]	@ (8003390 <HAL_RCC_OscConfig+0x4b4>)
 8003322:	2201      	movs	r2, #1
 8003324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003326:	f7fe f99f 	bl	8001668 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332e:	f7fe f99b 	bl	8001668 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e064      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003340:	4b11      	ldr	r3, [pc, #68]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x452>
 800334c:	e05c      	b.n	8003408 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334e:	4b10      	ldr	r3, [pc, #64]	@ (8003390 <HAL_RCC_OscConfig+0x4b4>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fe f988 	bl	8001668 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335c:	f7fe f984 	bl	8001668 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e04d      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336e:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x480>
 800337a:	e045      	b.n	8003408 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d107      	bne.n	8003394 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e040      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
 8003388:	40023800 	.word	0x40023800
 800338c:	40007000 	.word	0x40007000
 8003390:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003394:	4b1f      	ldr	r3, [pc, #124]	@ (8003414 <HAL_RCC_OscConfig+0x538>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d030      	beq.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d129      	bne.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d122      	bne.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033c4:	4013      	ands	r3, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d119      	bne.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033da:	085b      	lsrs	r3, r3, #1
 80033dc:	3b01      	subs	r3, #1
 80033de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d10f      	bne.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d107      	bne.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800

08003418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e041      	b.n	80034ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f839 	bl	80034b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	4619      	mov	r1, r3
 8003456:	4610      	mov	r0, r2
 8003458:	f000 f9c0 	bl	80037dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d001      	beq.n	80034e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e04e      	b.n	8003582 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a23      	ldr	r2, [pc, #140]	@ (8003590 <HAL_TIM_Base_Start_IT+0xc4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d022      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800350e:	d01d      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1f      	ldr	r2, [pc, #124]	@ (8003594 <HAL_TIM_Base_Start_IT+0xc8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d018      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1e      	ldr	r2, [pc, #120]	@ (8003598 <HAL_TIM_Base_Start_IT+0xcc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d013      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1c      	ldr	r2, [pc, #112]	@ (800359c <HAL_TIM_Base_Start_IT+0xd0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00e      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1b      	ldr	r2, [pc, #108]	@ (80035a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d009      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a19      	ldr	r2, [pc, #100]	@ (80035a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d004      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a18      	ldr	r2, [pc, #96]	@ (80035a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d111      	bne.n	8003570 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b06      	cmp	r3, #6
 800355c:	d010      	beq.n	8003580 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0201 	orr.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356e:	e007      	b.n	8003580 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40010000 	.word	0x40010000
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800
 800359c:	40000c00 	.word	0x40000c00
 80035a0:	40010400 	.word	0x40010400
 80035a4:	40014000 	.word	0x40014000
 80035a8:	40001800 	.word	0x40001800

080035ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d020      	beq.n	8003610 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01b      	beq.n	8003610 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0202 	mvn.w	r2, #2
 80035e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f8d2 	bl	80037a0 <HAL_TIM_IC_CaptureCallback>
 80035fc:	e005      	b.n	800360a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f8c4 	bl	800378c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f8d5 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	d020      	beq.n	800365c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01b      	beq.n	800365c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0204 	mvn.w	r2, #4
 800362c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f8ac 	bl	80037a0 <HAL_TIM_IC_CaptureCallback>
 8003648:	e005      	b.n	8003656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f89e 	bl	800378c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f8af 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d020      	beq.n	80036a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d01b      	beq.n	80036a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0208 	mvn.w	r2, #8
 8003678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2204      	movs	r2, #4
 800367e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f886 	bl	80037a0 <HAL_TIM_IC_CaptureCallback>
 8003694:	e005      	b.n	80036a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f878 	bl	800378c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f889 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d020      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01b      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0210 	mvn.w	r2, #16
 80036c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2208      	movs	r2, #8
 80036ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f860 	bl	80037a0 <HAL_TIM_IC_CaptureCallback>
 80036e0:	e005      	b.n	80036ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f852 	bl	800378c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f863 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00c      	beq.n	8003718 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d007      	beq.n	8003718 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0201 	mvn.w	r2, #1
 8003710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fd fabc 	bl	8000c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00c      	beq.n	800373c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f906 	bl	8003948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00c      	beq.n	8003760 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	d007      	beq.n	8003760 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f834 	bl	80037c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00c      	beq.n	8003784 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0220 	mvn.w	r2, #32
 800377c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f8d8 	bl	8003934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003784:	bf00      	nop
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a46      	ldr	r2, [pc, #280]	@ (8003908 <TIM_Base_SetConfig+0x12c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d013      	beq.n	800381c <TIM_Base_SetConfig+0x40>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037fa:	d00f      	beq.n	800381c <TIM_Base_SetConfig+0x40>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a43      	ldr	r2, [pc, #268]	@ (800390c <TIM_Base_SetConfig+0x130>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d00b      	beq.n	800381c <TIM_Base_SetConfig+0x40>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a42      	ldr	r2, [pc, #264]	@ (8003910 <TIM_Base_SetConfig+0x134>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d007      	beq.n	800381c <TIM_Base_SetConfig+0x40>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a41      	ldr	r2, [pc, #260]	@ (8003914 <TIM_Base_SetConfig+0x138>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d003      	beq.n	800381c <TIM_Base_SetConfig+0x40>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a40      	ldr	r2, [pc, #256]	@ (8003918 <TIM_Base_SetConfig+0x13c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d108      	bne.n	800382e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a35      	ldr	r2, [pc, #212]	@ (8003908 <TIM_Base_SetConfig+0x12c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d02b      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800383c:	d027      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a32      	ldr	r2, [pc, #200]	@ (800390c <TIM_Base_SetConfig+0x130>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d023      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a31      	ldr	r2, [pc, #196]	@ (8003910 <TIM_Base_SetConfig+0x134>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d01f      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a30      	ldr	r2, [pc, #192]	@ (8003914 <TIM_Base_SetConfig+0x138>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d01b      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a2f      	ldr	r2, [pc, #188]	@ (8003918 <TIM_Base_SetConfig+0x13c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d017      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a2e      	ldr	r2, [pc, #184]	@ (800391c <TIM_Base_SetConfig+0x140>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d013      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a2d      	ldr	r2, [pc, #180]	@ (8003920 <TIM_Base_SetConfig+0x144>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00f      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a2c      	ldr	r2, [pc, #176]	@ (8003924 <TIM_Base_SetConfig+0x148>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00b      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a2b      	ldr	r2, [pc, #172]	@ (8003928 <TIM_Base_SetConfig+0x14c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d007      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a2a      	ldr	r2, [pc, #168]	@ (800392c <TIM_Base_SetConfig+0x150>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d003      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a29      	ldr	r2, [pc, #164]	@ (8003930 <TIM_Base_SetConfig+0x154>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d108      	bne.n	80038a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a10      	ldr	r2, [pc, #64]	@ (8003908 <TIM_Base_SetConfig+0x12c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d003      	beq.n	80038d4 <TIM_Base_SetConfig+0xf8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a12      	ldr	r2, [pc, #72]	@ (8003918 <TIM_Base_SetConfig+0x13c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d103      	bne.n	80038dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d105      	bne.n	80038fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f023 0201 	bic.w	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	611a      	str	r2, [r3, #16]
  }
}
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40010000 	.word	0x40010000
 800390c:	40000400 	.word	0x40000400
 8003910:	40000800 	.word	0x40000800
 8003914:	40000c00 	.word	0x40000c00
 8003918:	40010400 	.word	0x40010400
 800391c:	40014000 	.word	0x40014000
 8003920:	40014400 	.word	0x40014400
 8003924:	40014800 	.word	0x40014800
 8003928:	40001800 	.word	0x40001800
 800392c:	40001c00 	.word	0x40001c00
 8003930:	40002000 	.word	0x40002000

08003934 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e042      	b.n	80039f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fd fcca 	bl	800131c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2224      	movs	r2, #36	@ 0x24
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800399e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f973 	bl	8003c8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	@ 0x28
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	d175      	bne.n	8003b08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_UART_Transmit+0x2c>
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e06e      	b.n	8003b0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2221      	movs	r2, #33	@ 0x21
 8003a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a3a:	f7fd fe15 	bl	8001668 <HAL_GetTick>
 8003a3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	88fa      	ldrh	r2, [r7, #6]
 8003a44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	88fa      	ldrh	r2, [r7, #6]
 8003a4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a54:	d108      	bne.n	8003a68 <HAL_UART_Transmit+0x6c>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d104      	bne.n	8003a68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	e003      	b.n	8003a70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a70:	e02e      	b.n	8003ad0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2180      	movs	r1, #128	@ 0x80
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f848 	bl	8003b12 <UART_WaitOnFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e03a      	b.n	8003b0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10b      	bne.n	8003ab2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	3302      	adds	r3, #2
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	e007      	b.n	8003ac2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	781a      	ldrb	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1cb      	bne.n	8003a72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2140      	movs	r1, #64	@ 0x40
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f814 	bl	8003b12 <UART_WaitOnFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e006      	b.n	8003b0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	e000      	b.n	8003b0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b08:	2302      	movs	r3, #2
  }
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3720      	adds	r7, #32
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b086      	sub	sp, #24
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	603b      	str	r3, [r7, #0]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b22:	e03b      	b.n	8003b9c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2a:	d037      	beq.n	8003b9c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2c:	f7fd fd9c 	bl	8001668 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	6a3a      	ldr	r2, [r7, #32]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d302      	bcc.n	8003b42 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e03a      	b.n	8003bbc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d023      	beq.n	8003b9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b80      	cmp	r3, #128	@ 0x80
 8003b58:	d020      	beq.n	8003b9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b40      	cmp	r3, #64	@ 0x40
 8003b5e:	d01d      	beq.n	8003b9c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d116      	bne.n	8003b9c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f81d 	bl	8003bc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e00f      	b.n	8003bbc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d0b4      	beq.n	8003b24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b095      	sub	sp, #84	@ 0x54
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	330c      	adds	r3, #12
 8003bd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd6:	e853 3f00 	ldrex	r3, [r3]
 8003bda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	330c      	adds	r3, #12
 8003bea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bec:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bf4:	e841 2300 	strex	r3, r2, [r1]
 8003bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e5      	bne.n	8003bcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3314      	adds	r3, #20
 8003c06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	e853 3f00 	ldrex	r3, [r3]
 8003c0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f023 0301 	bic.w	r3, r3, #1
 8003c16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3314      	adds	r3, #20
 8003c1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c28:	e841 2300 	strex	r3, r2, [r1]
 8003c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e5      	bne.n	8003c00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d119      	bne.n	8003c70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	330c      	adds	r3, #12
 8003c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	e853 3f00 	ldrex	r3, [r3]
 8003c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f023 0310 	bic.w	r3, r3, #16
 8003c52:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c5c:	61ba      	str	r2, [r7, #24]
 8003c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c60:	6979      	ldr	r1, [r7, #20]
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	e841 2300 	strex	r3, r2, [r1]
 8003c68:	613b      	str	r3, [r7, #16]
   return(result);
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e5      	bne.n	8003c3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c7e:	bf00      	nop
 8003c80:	3754      	adds	r7, #84	@ 0x54
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
	...

08003c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c90:	b0c0      	sub	sp, #256	@ 0x100
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca8:	68d9      	ldr	r1, [r3, #12]
 8003caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	ea40 0301 	orr.w	r3, r0, r1
 8003cb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ce4:	f021 010c 	bic.w	r1, r1, #12
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003cf2:	430b      	orrs	r3, r1
 8003cf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d06:	6999      	ldr	r1, [r3, #24]
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	ea40 0301 	orr.w	r3, r0, r1
 8003d12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	4b8f      	ldr	r3, [pc, #572]	@ (8003f58 <UART_SetConfig+0x2cc>)
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d005      	beq.n	8003d2c <UART_SetConfig+0xa0>
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	4b8d      	ldr	r3, [pc, #564]	@ (8003f5c <UART_SetConfig+0x2d0>)
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d104      	bne.n	8003d36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d2c:	f7fe fe60 	bl	80029f0 <HAL_RCC_GetPCLK2Freq>
 8003d30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d34:	e003      	b.n	8003d3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d36:	f7fe fe47 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8003d3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d48:	f040 810c 	bne.w	8003f64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d50:	2200      	movs	r2, #0
 8003d52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d5e:	4622      	mov	r2, r4
 8003d60:	462b      	mov	r3, r5
 8003d62:	1891      	adds	r1, r2, r2
 8003d64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d66:	415b      	adcs	r3, r3
 8003d68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d6e:	4621      	mov	r1, r4
 8003d70:	eb12 0801 	adds.w	r8, r2, r1
 8003d74:	4629      	mov	r1, r5
 8003d76:	eb43 0901 	adc.w	r9, r3, r1
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d8e:	4690      	mov	r8, r2
 8003d90:	4699      	mov	r9, r3
 8003d92:	4623      	mov	r3, r4
 8003d94:	eb18 0303 	adds.w	r3, r8, r3
 8003d98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d9c:	462b      	mov	r3, r5
 8003d9e:	eb49 0303 	adc.w	r3, r9, r3
 8003da2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003db2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003db6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003dba:	460b      	mov	r3, r1
 8003dbc:	18db      	adds	r3, r3, r3
 8003dbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	eb42 0303 	adc.w	r3, r2, r3
 8003dc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003dcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003dd0:	f7fc fa76 	bl	80002c0 <__aeabi_uldivmod>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4b61      	ldr	r3, [pc, #388]	@ (8003f60 <UART_SetConfig+0x2d4>)
 8003dda:	fba3 2302 	umull	r2, r3, r3, r2
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	011c      	lsls	r4, r3, #4
 8003de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003de6:	2200      	movs	r2, #0
 8003de8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003dec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003df0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003df4:	4642      	mov	r2, r8
 8003df6:	464b      	mov	r3, r9
 8003df8:	1891      	adds	r1, r2, r2
 8003dfa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003dfc:	415b      	adcs	r3, r3
 8003dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e04:	4641      	mov	r1, r8
 8003e06:	eb12 0a01 	adds.w	sl, r2, r1
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	eb43 0b01 	adc.w	fp, r3, r1
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e24:	4692      	mov	sl, r2
 8003e26:	469b      	mov	fp, r3
 8003e28:	4643      	mov	r3, r8
 8003e2a:	eb1a 0303 	adds.w	r3, sl, r3
 8003e2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e32:	464b      	mov	r3, r9
 8003e34:	eb4b 0303 	adc.w	r3, fp, r3
 8003e38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e50:	460b      	mov	r3, r1
 8003e52:	18db      	adds	r3, r3, r3
 8003e54:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e56:	4613      	mov	r3, r2
 8003e58:	eb42 0303 	adc.w	r3, r2, r3
 8003e5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e66:	f7fc fa2b 	bl	80002c0 <__aeabi_uldivmod>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4611      	mov	r1, r2
 8003e70:	4b3b      	ldr	r3, [pc, #236]	@ (8003f60 <UART_SetConfig+0x2d4>)
 8003e72:	fba3 2301 	umull	r2, r3, r3, r1
 8003e76:	095b      	lsrs	r3, r3, #5
 8003e78:	2264      	movs	r2, #100	@ 0x64
 8003e7a:	fb02 f303 	mul.w	r3, r2, r3
 8003e7e:	1acb      	subs	r3, r1, r3
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e86:	4b36      	ldr	r3, [pc, #216]	@ (8003f60 <UART_SetConfig+0x2d4>)
 8003e88:	fba3 2302 	umull	r2, r3, r3, r2
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e94:	441c      	add	r4, r3
 8003e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ea0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ea4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ea8:	4642      	mov	r2, r8
 8003eaa:	464b      	mov	r3, r9
 8003eac:	1891      	adds	r1, r2, r2
 8003eae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003eb0:	415b      	adcs	r3, r3
 8003eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003eb8:	4641      	mov	r1, r8
 8003eba:	1851      	adds	r1, r2, r1
 8003ebc:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ebe:	4649      	mov	r1, r9
 8003ec0:	414b      	adcs	r3, r1
 8003ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ed0:	4659      	mov	r1, fp
 8003ed2:	00cb      	lsls	r3, r1, #3
 8003ed4:	4651      	mov	r1, sl
 8003ed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eda:	4651      	mov	r1, sl
 8003edc:	00ca      	lsls	r2, r1, #3
 8003ede:	4610      	mov	r0, r2
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	4642      	mov	r2, r8
 8003ee6:	189b      	adds	r3, r3, r2
 8003ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003eec:	464b      	mov	r3, r9
 8003eee:	460a      	mov	r2, r1
 8003ef0:	eb42 0303 	adc.w	r3, r2, r3
 8003ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	18db      	adds	r3, r3, r3
 8003f10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f12:	4613      	mov	r3, r2
 8003f14:	eb42 0303 	adc.w	r3, r2, r3
 8003f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f22:	f7fc f9cd 	bl	80002c0 <__aeabi_uldivmod>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f60 <UART_SetConfig+0x2d4>)
 8003f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	2164      	movs	r1, #100	@ 0x64
 8003f34:	fb01 f303 	mul.w	r3, r1, r3
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	3332      	adds	r3, #50	@ 0x32
 8003f3e:	4a08      	ldr	r2, [pc, #32]	@ (8003f60 <UART_SetConfig+0x2d4>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	f003 0207 	and.w	r2, r3, #7
 8003f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4422      	add	r2, r4
 8003f52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f54:	e106      	b.n	8004164 <UART_SetConfig+0x4d8>
 8003f56:	bf00      	nop
 8003f58:	40011000 	.word	0x40011000
 8003f5c:	40011400 	.word	0x40011400
 8003f60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f76:	4642      	mov	r2, r8
 8003f78:	464b      	mov	r3, r9
 8003f7a:	1891      	adds	r1, r2, r2
 8003f7c:	6239      	str	r1, [r7, #32]
 8003f7e:	415b      	adcs	r3, r3
 8003f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f86:	4641      	mov	r1, r8
 8003f88:	1854      	adds	r4, r2, r1
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	eb43 0501 	adc.w	r5, r3, r1
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	00eb      	lsls	r3, r5, #3
 8003f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f9e:	00e2      	lsls	r2, r4, #3
 8003fa0:	4614      	mov	r4, r2
 8003fa2:	461d      	mov	r5, r3
 8003fa4:	4643      	mov	r3, r8
 8003fa6:	18e3      	adds	r3, r4, r3
 8003fa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fac:	464b      	mov	r3, r9
 8003fae:	eb45 0303 	adc.w	r3, r5, r3
 8003fb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	008b      	lsls	r3, r1, #2
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fdc:	4621      	mov	r1, r4
 8003fde:	008a      	lsls	r2, r1, #2
 8003fe0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003fe4:	f7fc f96c 	bl	80002c0 <__aeabi_uldivmod>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4b60      	ldr	r3, [pc, #384]	@ (8004170 <UART_SetConfig+0x4e4>)
 8003fee:	fba3 2302 	umull	r2, r3, r3, r2
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	011c      	lsls	r4, r3, #4
 8003ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004000:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004004:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004008:	4642      	mov	r2, r8
 800400a:	464b      	mov	r3, r9
 800400c:	1891      	adds	r1, r2, r2
 800400e:	61b9      	str	r1, [r7, #24]
 8004010:	415b      	adcs	r3, r3
 8004012:	61fb      	str	r3, [r7, #28]
 8004014:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004018:	4641      	mov	r1, r8
 800401a:	1851      	adds	r1, r2, r1
 800401c:	6139      	str	r1, [r7, #16]
 800401e:	4649      	mov	r1, r9
 8004020:	414b      	adcs	r3, r1
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004030:	4659      	mov	r1, fp
 8004032:	00cb      	lsls	r3, r1, #3
 8004034:	4651      	mov	r1, sl
 8004036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800403a:	4651      	mov	r1, sl
 800403c:	00ca      	lsls	r2, r1, #3
 800403e:	4610      	mov	r0, r2
 8004040:	4619      	mov	r1, r3
 8004042:	4603      	mov	r3, r0
 8004044:	4642      	mov	r2, r8
 8004046:	189b      	adds	r3, r3, r2
 8004048:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800404c:	464b      	mov	r3, r9
 800404e:	460a      	mov	r2, r1
 8004050:	eb42 0303 	adc.w	r3, r2, r3
 8004054:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004062:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004070:	4649      	mov	r1, r9
 8004072:	008b      	lsls	r3, r1, #2
 8004074:	4641      	mov	r1, r8
 8004076:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800407a:	4641      	mov	r1, r8
 800407c:	008a      	lsls	r2, r1, #2
 800407e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004082:	f7fc f91d 	bl	80002c0 <__aeabi_uldivmod>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	4611      	mov	r1, r2
 800408c:	4b38      	ldr	r3, [pc, #224]	@ (8004170 <UART_SetConfig+0x4e4>)
 800408e:	fba3 2301 	umull	r2, r3, r3, r1
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	2264      	movs	r2, #100	@ 0x64
 8004096:	fb02 f303 	mul.w	r3, r2, r3
 800409a:	1acb      	subs	r3, r1, r3
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	3332      	adds	r3, #50	@ 0x32
 80040a0:	4a33      	ldr	r2, [pc, #204]	@ (8004170 <UART_SetConfig+0x4e4>)
 80040a2:	fba2 2303 	umull	r2, r3, r2, r3
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040ac:	441c      	add	r4, r3
 80040ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040b2:	2200      	movs	r2, #0
 80040b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80040b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80040b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040bc:	4642      	mov	r2, r8
 80040be:	464b      	mov	r3, r9
 80040c0:	1891      	adds	r1, r2, r2
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	415b      	adcs	r3, r3
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040cc:	4641      	mov	r1, r8
 80040ce:	1851      	adds	r1, r2, r1
 80040d0:	6039      	str	r1, [r7, #0]
 80040d2:	4649      	mov	r1, r9
 80040d4:	414b      	adcs	r3, r1
 80040d6:	607b      	str	r3, [r7, #4]
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040e4:	4659      	mov	r1, fp
 80040e6:	00cb      	lsls	r3, r1, #3
 80040e8:	4651      	mov	r1, sl
 80040ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ee:	4651      	mov	r1, sl
 80040f0:	00ca      	lsls	r2, r1, #3
 80040f2:	4610      	mov	r0, r2
 80040f4:	4619      	mov	r1, r3
 80040f6:	4603      	mov	r3, r0
 80040f8:	4642      	mov	r2, r8
 80040fa:	189b      	adds	r3, r3, r2
 80040fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040fe:	464b      	mov	r3, r9
 8004100:	460a      	mov	r2, r1
 8004102:	eb42 0303 	adc.w	r3, r2, r3
 8004106:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	663b      	str	r3, [r7, #96]	@ 0x60
 8004112:	667a      	str	r2, [r7, #100]	@ 0x64
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004120:	4649      	mov	r1, r9
 8004122:	008b      	lsls	r3, r1, #2
 8004124:	4641      	mov	r1, r8
 8004126:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800412a:	4641      	mov	r1, r8
 800412c:	008a      	lsls	r2, r1, #2
 800412e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004132:	f7fc f8c5 	bl	80002c0 <__aeabi_uldivmod>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	4b0d      	ldr	r3, [pc, #52]	@ (8004170 <UART_SetConfig+0x4e4>)
 800413c:	fba3 1302 	umull	r1, r3, r3, r2
 8004140:	095b      	lsrs	r3, r3, #5
 8004142:	2164      	movs	r1, #100	@ 0x64
 8004144:	fb01 f303 	mul.w	r3, r1, r3
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	3332      	adds	r3, #50	@ 0x32
 800414e:	4a08      	ldr	r2, [pc, #32]	@ (8004170 <UART_SetConfig+0x4e4>)
 8004150:	fba2 2303 	umull	r2, r3, r2, r3
 8004154:	095b      	lsrs	r3, r3, #5
 8004156:	f003 020f 	and.w	r2, r3, #15
 800415a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4422      	add	r2, r4
 8004162:	609a      	str	r2, [r3, #8]
}
 8004164:	bf00      	nop
 8004166:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800416a:	46bd      	mov	sp, r7
 800416c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004170:	51eb851f 	.word	0x51eb851f

08004174 <siprintf>:
 8004174:	b40e      	push	{r1, r2, r3}
 8004176:	b500      	push	{lr}
 8004178:	b09c      	sub	sp, #112	@ 0x70
 800417a:	ab1d      	add	r3, sp, #116	@ 0x74
 800417c:	9002      	str	r0, [sp, #8]
 800417e:	9006      	str	r0, [sp, #24]
 8004180:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004184:	4809      	ldr	r0, [pc, #36]	@ (80041ac <siprintf+0x38>)
 8004186:	9107      	str	r1, [sp, #28]
 8004188:	9104      	str	r1, [sp, #16]
 800418a:	4909      	ldr	r1, [pc, #36]	@ (80041b0 <siprintf+0x3c>)
 800418c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004190:	9105      	str	r1, [sp, #20]
 8004192:	6800      	ldr	r0, [r0, #0]
 8004194:	9301      	str	r3, [sp, #4]
 8004196:	a902      	add	r1, sp, #8
 8004198:	f000 f994 	bl	80044c4 <_svfiprintf_r>
 800419c:	9b02      	ldr	r3, [sp, #8]
 800419e:	2200      	movs	r2, #0
 80041a0:	701a      	strb	r2, [r3, #0]
 80041a2:	b01c      	add	sp, #112	@ 0x70
 80041a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80041a8:	b003      	add	sp, #12
 80041aa:	4770      	bx	lr
 80041ac:	20000014 	.word	0x20000014
 80041b0:	ffff0208 	.word	0xffff0208

080041b4 <memset>:
 80041b4:	4402      	add	r2, r0
 80041b6:	4603      	mov	r3, r0
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d100      	bne.n	80041be <memset+0xa>
 80041bc:	4770      	bx	lr
 80041be:	f803 1b01 	strb.w	r1, [r3], #1
 80041c2:	e7f9      	b.n	80041b8 <memset+0x4>

080041c4 <__errno>:
 80041c4:	4b01      	ldr	r3, [pc, #4]	@ (80041cc <__errno+0x8>)
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	20000014 	.word	0x20000014

080041d0 <__libc_init_array>:
 80041d0:	b570      	push	{r4, r5, r6, lr}
 80041d2:	4d0d      	ldr	r5, [pc, #52]	@ (8004208 <__libc_init_array+0x38>)
 80041d4:	4c0d      	ldr	r4, [pc, #52]	@ (800420c <__libc_init_array+0x3c>)
 80041d6:	1b64      	subs	r4, r4, r5
 80041d8:	10a4      	asrs	r4, r4, #2
 80041da:	2600      	movs	r6, #0
 80041dc:	42a6      	cmp	r6, r4
 80041de:	d109      	bne.n	80041f4 <__libc_init_array+0x24>
 80041e0:	4d0b      	ldr	r5, [pc, #44]	@ (8004210 <__libc_init_array+0x40>)
 80041e2:	4c0c      	ldr	r4, [pc, #48]	@ (8004214 <__libc_init_array+0x44>)
 80041e4:	f000 fc66 	bl	8004ab4 <_init>
 80041e8:	1b64      	subs	r4, r4, r5
 80041ea:	10a4      	asrs	r4, r4, #2
 80041ec:	2600      	movs	r6, #0
 80041ee:	42a6      	cmp	r6, r4
 80041f0:	d105      	bne.n	80041fe <__libc_init_array+0x2e>
 80041f2:	bd70      	pop	{r4, r5, r6, pc}
 80041f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041f8:	4798      	blx	r3
 80041fa:	3601      	adds	r6, #1
 80041fc:	e7ee      	b.n	80041dc <__libc_init_array+0xc>
 80041fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004202:	4798      	blx	r3
 8004204:	3601      	adds	r6, #1
 8004206:	e7f2      	b.n	80041ee <__libc_init_array+0x1e>
 8004208:	0800588c 	.word	0x0800588c
 800420c:	0800588c 	.word	0x0800588c
 8004210:	0800588c 	.word	0x0800588c
 8004214:	08005890 	.word	0x08005890

08004218 <__retarget_lock_acquire_recursive>:
 8004218:	4770      	bx	lr

0800421a <__retarget_lock_release_recursive>:
 800421a:	4770      	bx	lr

0800421c <_free_r>:
 800421c:	b538      	push	{r3, r4, r5, lr}
 800421e:	4605      	mov	r5, r0
 8004220:	2900      	cmp	r1, #0
 8004222:	d041      	beq.n	80042a8 <_free_r+0x8c>
 8004224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004228:	1f0c      	subs	r4, r1, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	bfb8      	it	lt
 800422e:	18e4      	addlt	r4, r4, r3
 8004230:	f000 f8e0 	bl	80043f4 <__malloc_lock>
 8004234:	4a1d      	ldr	r2, [pc, #116]	@ (80042ac <_free_r+0x90>)
 8004236:	6813      	ldr	r3, [r2, #0]
 8004238:	b933      	cbnz	r3, 8004248 <_free_r+0x2c>
 800423a:	6063      	str	r3, [r4, #4]
 800423c:	6014      	str	r4, [r2, #0]
 800423e:	4628      	mov	r0, r5
 8004240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004244:	f000 b8dc 	b.w	8004400 <__malloc_unlock>
 8004248:	42a3      	cmp	r3, r4
 800424a:	d908      	bls.n	800425e <_free_r+0x42>
 800424c:	6820      	ldr	r0, [r4, #0]
 800424e:	1821      	adds	r1, r4, r0
 8004250:	428b      	cmp	r3, r1
 8004252:	bf01      	itttt	eq
 8004254:	6819      	ldreq	r1, [r3, #0]
 8004256:	685b      	ldreq	r3, [r3, #4]
 8004258:	1809      	addeq	r1, r1, r0
 800425a:	6021      	streq	r1, [r4, #0]
 800425c:	e7ed      	b.n	800423a <_free_r+0x1e>
 800425e:	461a      	mov	r2, r3
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	b10b      	cbz	r3, 8004268 <_free_r+0x4c>
 8004264:	42a3      	cmp	r3, r4
 8004266:	d9fa      	bls.n	800425e <_free_r+0x42>
 8004268:	6811      	ldr	r1, [r2, #0]
 800426a:	1850      	adds	r0, r2, r1
 800426c:	42a0      	cmp	r0, r4
 800426e:	d10b      	bne.n	8004288 <_free_r+0x6c>
 8004270:	6820      	ldr	r0, [r4, #0]
 8004272:	4401      	add	r1, r0
 8004274:	1850      	adds	r0, r2, r1
 8004276:	4283      	cmp	r3, r0
 8004278:	6011      	str	r1, [r2, #0]
 800427a:	d1e0      	bne.n	800423e <_free_r+0x22>
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	6053      	str	r3, [r2, #4]
 8004282:	4408      	add	r0, r1
 8004284:	6010      	str	r0, [r2, #0]
 8004286:	e7da      	b.n	800423e <_free_r+0x22>
 8004288:	d902      	bls.n	8004290 <_free_r+0x74>
 800428a:	230c      	movs	r3, #12
 800428c:	602b      	str	r3, [r5, #0]
 800428e:	e7d6      	b.n	800423e <_free_r+0x22>
 8004290:	6820      	ldr	r0, [r4, #0]
 8004292:	1821      	adds	r1, r4, r0
 8004294:	428b      	cmp	r3, r1
 8004296:	bf04      	itt	eq
 8004298:	6819      	ldreq	r1, [r3, #0]
 800429a:	685b      	ldreq	r3, [r3, #4]
 800429c:	6063      	str	r3, [r4, #4]
 800429e:	bf04      	itt	eq
 80042a0:	1809      	addeq	r1, r1, r0
 80042a2:	6021      	streq	r1, [r4, #0]
 80042a4:	6054      	str	r4, [r2, #4]
 80042a6:	e7ca      	b.n	800423e <_free_r+0x22>
 80042a8:	bd38      	pop	{r3, r4, r5, pc}
 80042aa:	bf00      	nop
 80042ac:	200006c0 	.word	0x200006c0

080042b0 <sbrk_aligned>:
 80042b0:	b570      	push	{r4, r5, r6, lr}
 80042b2:	4e0f      	ldr	r6, [pc, #60]	@ (80042f0 <sbrk_aligned+0x40>)
 80042b4:	460c      	mov	r4, r1
 80042b6:	6831      	ldr	r1, [r6, #0]
 80042b8:	4605      	mov	r5, r0
 80042ba:	b911      	cbnz	r1, 80042c2 <sbrk_aligned+0x12>
 80042bc:	f000 fba6 	bl	8004a0c <_sbrk_r>
 80042c0:	6030      	str	r0, [r6, #0]
 80042c2:	4621      	mov	r1, r4
 80042c4:	4628      	mov	r0, r5
 80042c6:	f000 fba1 	bl	8004a0c <_sbrk_r>
 80042ca:	1c43      	adds	r3, r0, #1
 80042cc:	d103      	bne.n	80042d6 <sbrk_aligned+0x26>
 80042ce:	f04f 34ff 	mov.w	r4, #4294967295
 80042d2:	4620      	mov	r0, r4
 80042d4:	bd70      	pop	{r4, r5, r6, pc}
 80042d6:	1cc4      	adds	r4, r0, #3
 80042d8:	f024 0403 	bic.w	r4, r4, #3
 80042dc:	42a0      	cmp	r0, r4
 80042de:	d0f8      	beq.n	80042d2 <sbrk_aligned+0x22>
 80042e0:	1a21      	subs	r1, r4, r0
 80042e2:	4628      	mov	r0, r5
 80042e4:	f000 fb92 	bl	8004a0c <_sbrk_r>
 80042e8:	3001      	adds	r0, #1
 80042ea:	d1f2      	bne.n	80042d2 <sbrk_aligned+0x22>
 80042ec:	e7ef      	b.n	80042ce <sbrk_aligned+0x1e>
 80042ee:	bf00      	nop
 80042f0:	200006bc 	.word	0x200006bc

080042f4 <_malloc_r>:
 80042f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042f8:	1ccd      	adds	r5, r1, #3
 80042fa:	f025 0503 	bic.w	r5, r5, #3
 80042fe:	3508      	adds	r5, #8
 8004300:	2d0c      	cmp	r5, #12
 8004302:	bf38      	it	cc
 8004304:	250c      	movcc	r5, #12
 8004306:	2d00      	cmp	r5, #0
 8004308:	4606      	mov	r6, r0
 800430a:	db01      	blt.n	8004310 <_malloc_r+0x1c>
 800430c:	42a9      	cmp	r1, r5
 800430e:	d904      	bls.n	800431a <_malloc_r+0x26>
 8004310:	230c      	movs	r3, #12
 8004312:	6033      	str	r3, [r6, #0]
 8004314:	2000      	movs	r0, #0
 8004316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800431a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043f0 <_malloc_r+0xfc>
 800431e:	f000 f869 	bl	80043f4 <__malloc_lock>
 8004322:	f8d8 3000 	ldr.w	r3, [r8]
 8004326:	461c      	mov	r4, r3
 8004328:	bb44      	cbnz	r4, 800437c <_malloc_r+0x88>
 800432a:	4629      	mov	r1, r5
 800432c:	4630      	mov	r0, r6
 800432e:	f7ff ffbf 	bl	80042b0 <sbrk_aligned>
 8004332:	1c43      	adds	r3, r0, #1
 8004334:	4604      	mov	r4, r0
 8004336:	d158      	bne.n	80043ea <_malloc_r+0xf6>
 8004338:	f8d8 4000 	ldr.w	r4, [r8]
 800433c:	4627      	mov	r7, r4
 800433e:	2f00      	cmp	r7, #0
 8004340:	d143      	bne.n	80043ca <_malloc_r+0xd6>
 8004342:	2c00      	cmp	r4, #0
 8004344:	d04b      	beq.n	80043de <_malloc_r+0xea>
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	4639      	mov	r1, r7
 800434a:	4630      	mov	r0, r6
 800434c:	eb04 0903 	add.w	r9, r4, r3
 8004350:	f000 fb5c 	bl	8004a0c <_sbrk_r>
 8004354:	4581      	cmp	r9, r0
 8004356:	d142      	bne.n	80043de <_malloc_r+0xea>
 8004358:	6821      	ldr	r1, [r4, #0]
 800435a:	1a6d      	subs	r5, r5, r1
 800435c:	4629      	mov	r1, r5
 800435e:	4630      	mov	r0, r6
 8004360:	f7ff ffa6 	bl	80042b0 <sbrk_aligned>
 8004364:	3001      	adds	r0, #1
 8004366:	d03a      	beq.n	80043de <_malloc_r+0xea>
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	442b      	add	r3, r5
 800436c:	6023      	str	r3, [r4, #0]
 800436e:	f8d8 3000 	ldr.w	r3, [r8]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	bb62      	cbnz	r2, 80043d0 <_malloc_r+0xdc>
 8004376:	f8c8 7000 	str.w	r7, [r8]
 800437a:	e00f      	b.n	800439c <_malloc_r+0xa8>
 800437c:	6822      	ldr	r2, [r4, #0]
 800437e:	1b52      	subs	r2, r2, r5
 8004380:	d420      	bmi.n	80043c4 <_malloc_r+0xd0>
 8004382:	2a0b      	cmp	r2, #11
 8004384:	d917      	bls.n	80043b6 <_malloc_r+0xc2>
 8004386:	1961      	adds	r1, r4, r5
 8004388:	42a3      	cmp	r3, r4
 800438a:	6025      	str	r5, [r4, #0]
 800438c:	bf18      	it	ne
 800438e:	6059      	strne	r1, [r3, #4]
 8004390:	6863      	ldr	r3, [r4, #4]
 8004392:	bf08      	it	eq
 8004394:	f8c8 1000 	streq.w	r1, [r8]
 8004398:	5162      	str	r2, [r4, r5]
 800439a:	604b      	str	r3, [r1, #4]
 800439c:	4630      	mov	r0, r6
 800439e:	f000 f82f 	bl	8004400 <__malloc_unlock>
 80043a2:	f104 000b 	add.w	r0, r4, #11
 80043a6:	1d23      	adds	r3, r4, #4
 80043a8:	f020 0007 	bic.w	r0, r0, #7
 80043ac:	1ac2      	subs	r2, r0, r3
 80043ae:	bf1c      	itt	ne
 80043b0:	1a1b      	subne	r3, r3, r0
 80043b2:	50a3      	strne	r3, [r4, r2]
 80043b4:	e7af      	b.n	8004316 <_malloc_r+0x22>
 80043b6:	6862      	ldr	r2, [r4, #4]
 80043b8:	42a3      	cmp	r3, r4
 80043ba:	bf0c      	ite	eq
 80043bc:	f8c8 2000 	streq.w	r2, [r8]
 80043c0:	605a      	strne	r2, [r3, #4]
 80043c2:	e7eb      	b.n	800439c <_malloc_r+0xa8>
 80043c4:	4623      	mov	r3, r4
 80043c6:	6864      	ldr	r4, [r4, #4]
 80043c8:	e7ae      	b.n	8004328 <_malloc_r+0x34>
 80043ca:	463c      	mov	r4, r7
 80043cc:	687f      	ldr	r7, [r7, #4]
 80043ce:	e7b6      	b.n	800433e <_malloc_r+0x4a>
 80043d0:	461a      	mov	r2, r3
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	42a3      	cmp	r3, r4
 80043d6:	d1fb      	bne.n	80043d0 <_malloc_r+0xdc>
 80043d8:	2300      	movs	r3, #0
 80043da:	6053      	str	r3, [r2, #4]
 80043dc:	e7de      	b.n	800439c <_malloc_r+0xa8>
 80043de:	230c      	movs	r3, #12
 80043e0:	6033      	str	r3, [r6, #0]
 80043e2:	4630      	mov	r0, r6
 80043e4:	f000 f80c 	bl	8004400 <__malloc_unlock>
 80043e8:	e794      	b.n	8004314 <_malloc_r+0x20>
 80043ea:	6005      	str	r5, [r0, #0]
 80043ec:	e7d6      	b.n	800439c <_malloc_r+0xa8>
 80043ee:	bf00      	nop
 80043f0:	200006c0 	.word	0x200006c0

080043f4 <__malloc_lock>:
 80043f4:	4801      	ldr	r0, [pc, #4]	@ (80043fc <__malloc_lock+0x8>)
 80043f6:	f7ff bf0f 	b.w	8004218 <__retarget_lock_acquire_recursive>
 80043fa:	bf00      	nop
 80043fc:	200006b8 	.word	0x200006b8

08004400 <__malloc_unlock>:
 8004400:	4801      	ldr	r0, [pc, #4]	@ (8004408 <__malloc_unlock+0x8>)
 8004402:	f7ff bf0a 	b.w	800421a <__retarget_lock_release_recursive>
 8004406:	bf00      	nop
 8004408:	200006b8 	.word	0x200006b8

0800440c <__ssputs_r>:
 800440c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004410:	688e      	ldr	r6, [r1, #8]
 8004412:	461f      	mov	r7, r3
 8004414:	42be      	cmp	r6, r7
 8004416:	680b      	ldr	r3, [r1, #0]
 8004418:	4682      	mov	sl, r0
 800441a:	460c      	mov	r4, r1
 800441c:	4690      	mov	r8, r2
 800441e:	d82d      	bhi.n	800447c <__ssputs_r+0x70>
 8004420:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004424:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004428:	d026      	beq.n	8004478 <__ssputs_r+0x6c>
 800442a:	6965      	ldr	r5, [r4, #20]
 800442c:	6909      	ldr	r1, [r1, #16]
 800442e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004432:	eba3 0901 	sub.w	r9, r3, r1
 8004436:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800443a:	1c7b      	adds	r3, r7, #1
 800443c:	444b      	add	r3, r9
 800443e:	106d      	asrs	r5, r5, #1
 8004440:	429d      	cmp	r5, r3
 8004442:	bf38      	it	cc
 8004444:	461d      	movcc	r5, r3
 8004446:	0553      	lsls	r3, r2, #21
 8004448:	d527      	bpl.n	800449a <__ssputs_r+0x8e>
 800444a:	4629      	mov	r1, r5
 800444c:	f7ff ff52 	bl	80042f4 <_malloc_r>
 8004450:	4606      	mov	r6, r0
 8004452:	b360      	cbz	r0, 80044ae <__ssputs_r+0xa2>
 8004454:	6921      	ldr	r1, [r4, #16]
 8004456:	464a      	mov	r2, r9
 8004458:	f000 fae8 	bl	8004a2c <memcpy>
 800445c:	89a3      	ldrh	r3, [r4, #12]
 800445e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004466:	81a3      	strh	r3, [r4, #12]
 8004468:	6126      	str	r6, [r4, #16]
 800446a:	6165      	str	r5, [r4, #20]
 800446c:	444e      	add	r6, r9
 800446e:	eba5 0509 	sub.w	r5, r5, r9
 8004472:	6026      	str	r6, [r4, #0]
 8004474:	60a5      	str	r5, [r4, #8]
 8004476:	463e      	mov	r6, r7
 8004478:	42be      	cmp	r6, r7
 800447a:	d900      	bls.n	800447e <__ssputs_r+0x72>
 800447c:	463e      	mov	r6, r7
 800447e:	6820      	ldr	r0, [r4, #0]
 8004480:	4632      	mov	r2, r6
 8004482:	4641      	mov	r1, r8
 8004484:	f000 faa8 	bl	80049d8 <memmove>
 8004488:	68a3      	ldr	r3, [r4, #8]
 800448a:	1b9b      	subs	r3, r3, r6
 800448c:	60a3      	str	r3, [r4, #8]
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	4433      	add	r3, r6
 8004492:	6023      	str	r3, [r4, #0]
 8004494:	2000      	movs	r0, #0
 8004496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800449a:	462a      	mov	r2, r5
 800449c:	f000 fad4 	bl	8004a48 <_realloc_r>
 80044a0:	4606      	mov	r6, r0
 80044a2:	2800      	cmp	r0, #0
 80044a4:	d1e0      	bne.n	8004468 <__ssputs_r+0x5c>
 80044a6:	6921      	ldr	r1, [r4, #16]
 80044a8:	4650      	mov	r0, sl
 80044aa:	f7ff feb7 	bl	800421c <_free_r>
 80044ae:	230c      	movs	r3, #12
 80044b0:	f8ca 3000 	str.w	r3, [sl]
 80044b4:	89a3      	ldrh	r3, [r4, #12]
 80044b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044ba:	81a3      	strh	r3, [r4, #12]
 80044bc:	f04f 30ff 	mov.w	r0, #4294967295
 80044c0:	e7e9      	b.n	8004496 <__ssputs_r+0x8a>
	...

080044c4 <_svfiprintf_r>:
 80044c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c8:	4698      	mov	r8, r3
 80044ca:	898b      	ldrh	r3, [r1, #12]
 80044cc:	061b      	lsls	r3, r3, #24
 80044ce:	b09d      	sub	sp, #116	@ 0x74
 80044d0:	4607      	mov	r7, r0
 80044d2:	460d      	mov	r5, r1
 80044d4:	4614      	mov	r4, r2
 80044d6:	d510      	bpl.n	80044fa <_svfiprintf_r+0x36>
 80044d8:	690b      	ldr	r3, [r1, #16]
 80044da:	b973      	cbnz	r3, 80044fa <_svfiprintf_r+0x36>
 80044dc:	2140      	movs	r1, #64	@ 0x40
 80044de:	f7ff ff09 	bl	80042f4 <_malloc_r>
 80044e2:	6028      	str	r0, [r5, #0]
 80044e4:	6128      	str	r0, [r5, #16]
 80044e6:	b930      	cbnz	r0, 80044f6 <_svfiprintf_r+0x32>
 80044e8:	230c      	movs	r3, #12
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	f04f 30ff 	mov.w	r0, #4294967295
 80044f0:	b01d      	add	sp, #116	@ 0x74
 80044f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044f6:	2340      	movs	r3, #64	@ 0x40
 80044f8:	616b      	str	r3, [r5, #20]
 80044fa:	2300      	movs	r3, #0
 80044fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80044fe:	2320      	movs	r3, #32
 8004500:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004504:	f8cd 800c 	str.w	r8, [sp, #12]
 8004508:	2330      	movs	r3, #48	@ 0x30
 800450a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80046a8 <_svfiprintf_r+0x1e4>
 800450e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004512:	f04f 0901 	mov.w	r9, #1
 8004516:	4623      	mov	r3, r4
 8004518:	469a      	mov	sl, r3
 800451a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800451e:	b10a      	cbz	r2, 8004524 <_svfiprintf_r+0x60>
 8004520:	2a25      	cmp	r2, #37	@ 0x25
 8004522:	d1f9      	bne.n	8004518 <_svfiprintf_r+0x54>
 8004524:	ebba 0b04 	subs.w	fp, sl, r4
 8004528:	d00b      	beq.n	8004542 <_svfiprintf_r+0x7e>
 800452a:	465b      	mov	r3, fp
 800452c:	4622      	mov	r2, r4
 800452e:	4629      	mov	r1, r5
 8004530:	4638      	mov	r0, r7
 8004532:	f7ff ff6b 	bl	800440c <__ssputs_r>
 8004536:	3001      	adds	r0, #1
 8004538:	f000 80a7 	beq.w	800468a <_svfiprintf_r+0x1c6>
 800453c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800453e:	445a      	add	r2, fp
 8004540:	9209      	str	r2, [sp, #36]	@ 0x24
 8004542:	f89a 3000 	ldrb.w	r3, [sl]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 809f 	beq.w	800468a <_svfiprintf_r+0x1c6>
 800454c:	2300      	movs	r3, #0
 800454e:	f04f 32ff 	mov.w	r2, #4294967295
 8004552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004556:	f10a 0a01 	add.w	sl, sl, #1
 800455a:	9304      	str	r3, [sp, #16]
 800455c:	9307      	str	r3, [sp, #28]
 800455e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004562:	931a      	str	r3, [sp, #104]	@ 0x68
 8004564:	4654      	mov	r4, sl
 8004566:	2205      	movs	r2, #5
 8004568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800456c:	484e      	ldr	r0, [pc, #312]	@ (80046a8 <_svfiprintf_r+0x1e4>)
 800456e:	f7fb fe57 	bl	8000220 <memchr>
 8004572:	9a04      	ldr	r2, [sp, #16]
 8004574:	b9d8      	cbnz	r0, 80045ae <_svfiprintf_r+0xea>
 8004576:	06d0      	lsls	r0, r2, #27
 8004578:	bf44      	itt	mi
 800457a:	2320      	movmi	r3, #32
 800457c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004580:	0711      	lsls	r1, r2, #28
 8004582:	bf44      	itt	mi
 8004584:	232b      	movmi	r3, #43	@ 0x2b
 8004586:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800458a:	f89a 3000 	ldrb.w	r3, [sl]
 800458e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004590:	d015      	beq.n	80045be <_svfiprintf_r+0xfa>
 8004592:	9a07      	ldr	r2, [sp, #28]
 8004594:	4654      	mov	r4, sl
 8004596:	2000      	movs	r0, #0
 8004598:	f04f 0c0a 	mov.w	ip, #10
 800459c:	4621      	mov	r1, r4
 800459e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045a2:	3b30      	subs	r3, #48	@ 0x30
 80045a4:	2b09      	cmp	r3, #9
 80045a6:	d94b      	bls.n	8004640 <_svfiprintf_r+0x17c>
 80045a8:	b1b0      	cbz	r0, 80045d8 <_svfiprintf_r+0x114>
 80045aa:	9207      	str	r2, [sp, #28]
 80045ac:	e014      	b.n	80045d8 <_svfiprintf_r+0x114>
 80045ae:	eba0 0308 	sub.w	r3, r0, r8
 80045b2:	fa09 f303 	lsl.w	r3, r9, r3
 80045b6:	4313      	orrs	r3, r2
 80045b8:	9304      	str	r3, [sp, #16]
 80045ba:	46a2      	mov	sl, r4
 80045bc:	e7d2      	b.n	8004564 <_svfiprintf_r+0xa0>
 80045be:	9b03      	ldr	r3, [sp, #12]
 80045c0:	1d19      	adds	r1, r3, #4
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	9103      	str	r1, [sp, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bfbb      	ittet	lt
 80045ca:	425b      	neglt	r3, r3
 80045cc:	f042 0202 	orrlt.w	r2, r2, #2
 80045d0:	9307      	strge	r3, [sp, #28]
 80045d2:	9307      	strlt	r3, [sp, #28]
 80045d4:	bfb8      	it	lt
 80045d6:	9204      	strlt	r2, [sp, #16]
 80045d8:	7823      	ldrb	r3, [r4, #0]
 80045da:	2b2e      	cmp	r3, #46	@ 0x2e
 80045dc:	d10a      	bne.n	80045f4 <_svfiprintf_r+0x130>
 80045de:	7863      	ldrb	r3, [r4, #1]
 80045e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80045e2:	d132      	bne.n	800464a <_svfiprintf_r+0x186>
 80045e4:	9b03      	ldr	r3, [sp, #12]
 80045e6:	1d1a      	adds	r2, r3, #4
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	9203      	str	r2, [sp, #12]
 80045ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045f0:	3402      	adds	r4, #2
 80045f2:	9305      	str	r3, [sp, #20]
 80045f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80046b8 <_svfiprintf_r+0x1f4>
 80045f8:	7821      	ldrb	r1, [r4, #0]
 80045fa:	2203      	movs	r2, #3
 80045fc:	4650      	mov	r0, sl
 80045fe:	f7fb fe0f 	bl	8000220 <memchr>
 8004602:	b138      	cbz	r0, 8004614 <_svfiprintf_r+0x150>
 8004604:	9b04      	ldr	r3, [sp, #16]
 8004606:	eba0 000a 	sub.w	r0, r0, sl
 800460a:	2240      	movs	r2, #64	@ 0x40
 800460c:	4082      	lsls	r2, r0
 800460e:	4313      	orrs	r3, r2
 8004610:	3401      	adds	r4, #1
 8004612:	9304      	str	r3, [sp, #16]
 8004614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004618:	4824      	ldr	r0, [pc, #144]	@ (80046ac <_svfiprintf_r+0x1e8>)
 800461a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800461e:	2206      	movs	r2, #6
 8004620:	f7fb fdfe 	bl	8000220 <memchr>
 8004624:	2800      	cmp	r0, #0
 8004626:	d036      	beq.n	8004696 <_svfiprintf_r+0x1d2>
 8004628:	4b21      	ldr	r3, [pc, #132]	@ (80046b0 <_svfiprintf_r+0x1ec>)
 800462a:	bb1b      	cbnz	r3, 8004674 <_svfiprintf_r+0x1b0>
 800462c:	9b03      	ldr	r3, [sp, #12]
 800462e:	3307      	adds	r3, #7
 8004630:	f023 0307 	bic.w	r3, r3, #7
 8004634:	3308      	adds	r3, #8
 8004636:	9303      	str	r3, [sp, #12]
 8004638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800463a:	4433      	add	r3, r6
 800463c:	9309      	str	r3, [sp, #36]	@ 0x24
 800463e:	e76a      	b.n	8004516 <_svfiprintf_r+0x52>
 8004640:	fb0c 3202 	mla	r2, ip, r2, r3
 8004644:	460c      	mov	r4, r1
 8004646:	2001      	movs	r0, #1
 8004648:	e7a8      	b.n	800459c <_svfiprintf_r+0xd8>
 800464a:	2300      	movs	r3, #0
 800464c:	3401      	adds	r4, #1
 800464e:	9305      	str	r3, [sp, #20]
 8004650:	4619      	mov	r1, r3
 8004652:	f04f 0c0a 	mov.w	ip, #10
 8004656:	4620      	mov	r0, r4
 8004658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800465c:	3a30      	subs	r2, #48	@ 0x30
 800465e:	2a09      	cmp	r2, #9
 8004660:	d903      	bls.n	800466a <_svfiprintf_r+0x1a6>
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0c6      	beq.n	80045f4 <_svfiprintf_r+0x130>
 8004666:	9105      	str	r1, [sp, #20]
 8004668:	e7c4      	b.n	80045f4 <_svfiprintf_r+0x130>
 800466a:	fb0c 2101 	mla	r1, ip, r1, r2
 800466e:	4604      	mov	r4, r0
 8004670:	2301      	movs	r3, #1
 8004672:	e7f0      	b.n	8004656 <_svfiprintf_r+0x192>
 8004674:	ab03      	add	r3, sp, #12
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	462a      	mov	r2, r5
 800467a:	4b0e      	ldr	r3, [pc, #56]	@ (80046b4 <_svfiprintf_r+0x1f0>)
 800467c:	a904      	add	r1, sp, #16
 800467e:	4638      	mov	r0, r7
 8004680:	f3af 8000 	nop.w
 8004684:	1c42      	adds	r2, r0, #1
 8004686:	4606      	mov	r6, r0
 8004688:	d1d6      	bne.n	8004638 <_svfiprintf_r+0x174>
 800468a:	89ab      	ldrh	r3, [r5, #12]
 800468c:	065b      	lsls	r3, r3, #25
 800468e:	f53f af2d 	bmi.w	80044ec <_svfiprintf_r+0x28>
 8004692:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004694:	e72c      	b.n	80044f0 <_svfiprintf_r+0x2c>
 8004696:	ab03      	add	r3, sp, #12
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	462a      	mov	r2, r5
 800469c:	4b05      	ldr	r3, [pc, #20]	@ (80046b4 <_svfiprintf_r+0x1f0>)
 800469e:	a904      	add	r1, sp, #16
 80046a0:	4638      	mov	r0, r7
 80046a2:	f000 f879 	bl	8004798 <_printf_i>
 80046a6:	e7ed      	b.n	8004684 <_svfiprintf_r+0x1c0>
 80046a8:	08005850 	.word	0x08005850
 80046ac:	0800585a 	.word	0x0800585a
 80046b0:	00000000 	.word	0x00000000
 80046b4:	0800440d 	.word	0x0800440d
 80046b8:	08005856 	.word	0x08005856

080046bc <_printf_common>:
 80046bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c0:	4616      	mov	r6, r2
 80046c2:	4698      	mov	r8, r3
 80046c4:	688a      	ldr	r2, [r1, #8]
 80046c6:	690b      	ldr	r3, [r1, #16]
 80046c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046cc:	4293      	cmp	r3, r2
 80046ce:	bfb8      	it	lt
 80046d0:	4613      	movlt	r3, r2
 80046d2:	6033      	str	r3, [r6, #0]
 80046d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046d8:	4607      	mov	r7, r0
 80046da:	460c      	mov	r4, r1
 80046dc:	b10a      	cbz	r2, 80046e2 <_printf_common+0x26>
 80046de:	3301      	adds	r3, #1
 80046e0:	6033      	str	r3, [r6, #0]
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	0699      	lsls	r1, r3, #26
 80046e6:	bf42      	ittt	mi
 80046e8:	6833      	ldrmi	r3, [r6, #0]
 80046ea:	3302      	addmi	r3, #2
 80046ec:	6033      	strmi	r3, [r6, #0]
 80046ee:	6825      	ldr	r5, [r4, #0]
 80046f0:	f015 0506 	ands.w	r5, r5, #6
 80046f4:	d106      	bne.n	8004704 <_printf_common+0x48>
 80046f6:	f104 0a19 	add.w	sl, r4, #25
 80046fa:	68e3      	ldr	r3, [r4, #12]
 80046fc:	6832      	ldr	r2, [r6, #0]
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	42ab      	cmp	r3, r5
 8004702:	dc26      	bgt.n	8004752 <_printf_common+0x96>
 8004704:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004708:	6822      	ldr	r2, [r4, #0]
 800470a:	3b00      	subs	r3, #0
 800470c:	bf18      	it	ne
 800470e:	2301      	movne	r3, #1
 8004710:	0692      	lsls	r2, r2, #26
 8004712:	d42b      	bmi.n	800476c <_printf_common+0xb0>
 8004714:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004718:	4641      	mov	r1, r8
 800471a:	4638      	mov	r0, r7
 800471c:	47c8      	blx	r9
 800471e:	3001      	adds	r0, #1
 8004720:	d01e      	beq.n	8004760 <_printf_common+0xa4>
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	6922      	ldr	r2, [r4, #16]
 8004726:	f003 0306 	and.w	r3, r3, #6
 800472a:	2b04      	cmp	r3, #4
 800472c:	bf02      	ittt	eq
 800472e:	68e5      	ldreq	r5, [r4, #12]
 8004730:	6833      	ldreq	r3, [r6, #0]
 8004732:	1aed      	subeq	r5, r5, r3
 8004734:	68a3      	ldr	r3, [r4, #8]
 8004736:	bf0c      	ite	eq
 8004738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800473c:	2500      	movne	r5, #0
 800473e:	4293      	cmp	r3, r2
 8004740:	bfc4      	itt	gt
 8004742:	1a9b      	subgt	r3, r3, r2
 8004744:	18ed      	addgt	r5, r5, r3
 8004746:	2600      	movs	r6, #0
 8004748:	341a      	adds	r4, #26
 800474a:	42b5      	cmp	r5, r6
 800474c:	d11a      	bne.n	8004784 <_printf_common+0xc8>
 800474e:	2000      	movs	r0, #0
 8004750:	e008      	b.n	8004764 <_printf_common+0xa8>
 8004752:	2301      	movs	r3, #1
 8004754:	4652      	mov	r2, sl
 8004756:	4641      	mov	r1, r8
 8004758:	4638      	mov	r0, r7
 800475a:	47c8      	blx	r9
 800475c:	3001      	adds	r0, #1
 800475e:	d103      	bne.n	8004768 <_printf_common+0xac>
 8004760:	f04f 30ff 	mov.w	r0, #4294967295
 8004764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004768:	3501      	adds	r5, #1
 800476a:	e7c6      	b.n	80046fa <_printf_common+0x3e>
 800476c:	18e1      	adds	r1, r4, r3
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	2030      	movs	r0, #48	@ 0x30
 8004772:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004776:	4422      	add	r2, r4
 8004778:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800477c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004780:	3302      	adds	r3, #2
 8004782:	e7c7      	b.n	8004714 <_printf_common+0x58>
 8004784:	2301      	movs	r3, #1
 8004786:	4622      	mov	r2, r4
 8004788:	4641      	mov	r1, r8
 800478a:	4638      	mov	r0, r7
 800478c:	47c8      	blx	r9
 800478e:	3001      	adds	r0, #1
 8004790:	d0e6      	beq.n	8004760 <_printf_common+0xa4>
 8004792:	3601      	adds	r6, #1
 8004794:	e7d9      	b.n	800474a <_printf_common+0x8e>
	...

08004798 <_printf_i>:
 8004798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800479c:	7e0f      	ldrb	r7, [r1, #24]
 800479e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047a0:	2f78      	cmp	r7, #120	@ 0x78
 80047a2:	4691      	mov	r9, r2
 80047a4:	4680      	mov	r8, r0
 80047a6:	460c      	mov	r4, r1
 80047a8:	469a      	mov	sl, r3
 80047aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047ae:	d807      	bhi.n	80047c0 <_printf_i+0x28>
 80047b0:	2f62      	cmp	r7, #98	@ 0x62
 80047b2:	d80a      	bhi.n	80047ca <_printf_i+0x32>
 80047b4:	2f00      	cmp	r7, #0
 80047b6:	f000 80d2 	beq.w	800495e <_printf_i+0x1c6>
 80047ba:	2f58      	cmp	r7, #88	@ 0x58
 80047bc:	f000 80b9 	beq.w	8004932 <_printf_i+0x19a>
 80047c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047c8:	e03a      	b.n	8004840 <_printf_i+0xa8>
 80047ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047ce:	2b15      	cmp	r3, #21
 80047d0:	d8f6      	bhi.n	80047c0 <_printf_i+0x28>
 80047d2:	a101      	add	r1, pc, #4	@ (adr r1, 80047d8 <_printf_i+0x40>)
 80047d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047d8:	08004831 	.word	0x08004831
 80047dc:	08004845 	.word	0x08004845
 80047e0:	080047c1 	.word	0x080047c1
 80047e4:	080047c1 	.word	0x080047c1
 80047e8:	080047c1 	.word	0x080047c1
 80047ec:	080047c1 	.word	0x080047c1
 80047f0:	08004845 	.word	0x08004845
 80047f4:	080047c1 	.word	0x080047c1
 80047f8:	080047c1 	.word	0x080047c1
 80047fc:	080047c1 	.word	0x080047c1
 8004800:	080047c1 	.word	0x080047c1
 8004804:	08004945 	.word	0x08004945
 8004808:	0800486f 	.word	0x0800486f
 800480c:	080048ff 	.word	0x080048ff
 8004810:	080047c1 	.word	0x080047c1
 8004814:	080047c1 	.word	0x080047c1
 8004818:	08004967 	.word	0x08004967
 800481c:	080047c1 	.word	0x080047c1
 8004820:	0800486f 	.word	0x0800486f
 8004824:	080047c1 	.word	0x080047c1
 8004828:	080047c1 	.word	0x080047c1
 800482c:	08004907 	.word	0x08004907
 8004830:	6833      	ldr	r3, [r6, #0]
 8004832:	1d1a      	adds	r2, r3, #4
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6032      	str	r2, [r6, #0]
 8004838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800483c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004840:	2301      	movs	r3, #1
 8004842:	e09d      	b.n	8004980 <_printf_i+0x1e8>
 8004844:	6833      	ldr	r3, [r6, #0]
 8004846:	6820      	ldr	r0, [r4, #0]
 8004848:	1d19      	adds	r1, r3, #4
 800484a:	6031      	str	r1, [r6, #0]
 800484c:	0606      	lsls	r6, r0, #24
 800484e:	d501      	bpl.n	8004854 <_printf_i+0xbc>
 8004850:	681d      	ldr	r5, [r3, #0]
 8004852:	e003      	b.n	800485c <_printf_i+0xc4>
 8004854:	0645      	lsls	r5, r0, #25
 8004856:	d5fb      	bpl.n	8004850 <_printf_i+0xb8>
 8004858:	f9b3 5000 	ldrsh.w	r5, [r3]
 800485c:	2d00      	cmp	r5, #0
 800485e:	da03      	bge.n	8004868 <_printf_i+0xd0>
 8004860:	232d      	movs	r3, #45	@ 0x2d
 8004862:	426d      	negs	r5, r5
 8004864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004868:	4859      	ldr	r0, [pc, #356]	@ (80049d0 <_printf_i+0x238>)
 800486a:	230a      	movs	r3, #10
 800486c:	e011      	b.n	8004892 <_printf_i+0xfa>
 800486e:	6821      	ldr	r1, [r4, #0]
 8004870:	6833      	ldr	r3, [r6, #0]
 8004872:	0608      	lsls	r0, r1, #24
 8004874:	f853 5b04 	ldr.w	r5, [r3], #4
 8004878:	d402      	bmi.n	8004880 <_printf_i+0xe8>
 800487a:	0649      	lsls	r1, r1, #25
 800487c:	bf48      	it	mi
 800487e:	b2ad      	uxthmi	r5, r5
 8004880:	2f6f      	cmp	r7, #111	@ 0x6f
 8004882:	4853      	ldr	r0, [pc, #332]	@ (80049d0 <_printf_i+0x238>)
 8004884:	6033      	str	r3, [r6, #0]
 8004886:	bf14      	ite	ne
 8004888:	230a      	movne	r3, #10
 800488a:	2308      	moveq	r3, #8
 800488c:	2100      	movs	r1, #0
 800488e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004892:	6866      	ldr	r6, [r4, #4]
 8004894:	60a6      	str	r6, [r4, #8]
 8004896:	2e00      	cmp	r6, #0
 8004898:	bfa2      	ittt	ge
 800489a:	6821      	ldrge	r1, [r4, #0]
 800489c:	f021 0104 	bicge.w	r1, r1, #4
 80048a0:	6021      	strge	r1, [r4, #0]
 80048a2:	b90d      	cbnz	r5, 80048a8 <_printf_i+0x110>
 80048a4:	2e00      	cmp	r6, #0
 80048a6:	d04b      	beq.n	8004940 <_printf_i+0x1a8>
 80048a8:	4616      	mov	r6, r2
 80048aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80048ae:	fb03 5711 	mls	r7, r3, r1, r5
 80048b2:	5dc7      	ldrb	r7, [r0, r7]
 80048b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048b8:	462f      	mov	r7, r5
 80048ba:	42bb      	cmp	r3, r7
 80048bc:	460d      	mov	r5, r1
 80048be:	d9f4      	bls.n	80048aa <_printf_i+0x112>
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d10b      	bne.n	80048dc <_printf_i+0x144>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	07df      	lsls	r7, r3, #31
 80048c8:	d508      	bpl.n	80048dc <_printf_i+0x144>
 80048ca:	6923      	ldr	r3, [r4, #16]
 80048cc:	6861      	ldr	r1, [r4, #4]
 80048ce:	4299      	cmp	r1, r3
 80048d0:	bfde      	ittt	le
 80048d2:	2330      	movle	r3, #48	@ 0x30
 80048d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048dc:	1b92      	subs	r2, r2, r6
 80048de:	6122      	str	r2, [r4, #16]
 80048e0:	f8cd a000 	str.w	sl, [sp]
 80048e4:	464b      	mov	r3, r9
 80048e6:	aa03      	add	r2, sp, #12
 80048e8:	4621      	mov	r1, r4
 80048ea:	4640      	mov	r0, r8
 80048ec:	f7ff fee6 	bl	80046bc <_printf_common>
 80048f0:	3001      	adds	r0, #1
 80048f2:	d14a      	bne.n	800498a <_printf_i+0x1f2>
 80048f4:	f04f 30ff 	mov.w	r0, #4294967295
 80048f8:	b004      	add	sp, #16
 80048fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	f043 0320 	orr.w	r3, r3, #32
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	4833      	ldr	r0, [pc, #204]	@ (80049d4 <_printf_i+0x23c>)
 8004908:	2778      	movs	r7, #120	@ 0x78
 800490a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	6831      	ldr	r1, [r6, #0]
 8004912:	061f      	lsls	r7, r3, #24
 8004914:	f851 5b04 	ldr.w	r5, [r1], #4
 8004918:	d402      	bmi.n	8004920 <_printf_i+0x188>
 800491a:	065f      	lsls	r7, r3, #25
 800491c:	bf48      	it	mi
 800491e:	b2ad      	uxthmi	r5, r5
 8004920:	6031      	str	r1, [r6, #0]
 8004922:	07d9      	lsls	r1, r3, #31
 8004924:	bf44      	itt	mi
 8004926:	f043 0320 	orrmi.w	r3, r3, #32
 800492a:	6023      	strmi	r3, [r4, #0]
 800492c:	b11d      	cbz	r5, 8004936 <_printf_i+0x19e>
 800492e:	2310      	movs	r3, #16
 8004930:	e7ac      	b.n	800488c <_printf_i+0xf4>
 8004932:	4827      	ldr	r0, [pc, #156]	@ (80049d0 <_printf_i+0x238>)
 8004934:	e7e9      	b.n	800490a <_printf_i+0x172>
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	f023 0320 	bic.w	r3, r3, #32
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	e7f6      	b.n	800492e <_printf_i+0x196>
 8004940:	4616      	mov	r6, r2
 8004942:	e7bd      	b.n	80048c0 <_printf_i+0x128>
 8004944:	6833      	ldr	r3, [r6, #0]
 8004946:	6825      	ldr	r5, [r4, #0]
 8004948:	6961      	ldr	r1, [r4, #20]
 800494a:	1d18      	adds	r0, r3, #4
 800494c:	6030      	str	r0, [r6, #0]
 800494e:	062e      	lsls	r6, r5, #24
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	d501      	bpl.n	8004958 <_printf_i+0x1c0>
 8004954:	6019      	str	r1, [r3, #0]
 8004956:	e002      	b.n	800495e <_printf_i+0x1c6>
 8004958:	0668      	lsls	r0, r5, #25
 800495a:	d5fb      	bpl.n	8004954 <_printf_i+0x1bc>
 800495c:	8019      	strh	r1, [r3, #0]
 800495e:	2300      	movs	r3, #0
 8004960:	6123      	str	r3, [r4, #16]
 8004962:	4616      	mov	r6, r2
 8004964:	e7bc      	b.n	80048e0 <_printf_i+0x148>
 8004966:	6833      	ldr	r3, [r6, #0]
 8004968:	1d1a      	adds	r2, r3, #4
 800496a:	6032      	str	r2, [r6, #0]
 800496c:	681e      	ldr	r6, [r3, #0]
 800496e:	6862      	ldr	r2, [r4, #4]
 8004970:	2100      	movs	r1, #0
 8004972:	4630      	mov	r0, r6
 8004974:	f7fb fc54 	bl	8000220 <memchr>
 8004978:	b108      	cbz	r0, 800497e <_printf_i+0x1e6>
 800497a:	1b80      	subs	r0, r0, r6
 800497c:	6060      	str	r0, [r4, #4]
 800497e:	6863      	ldr	r3, [r4, #4]
 8004980:	6123      	str	r3, [r4, #16]
 8004982:	2300      	movs	r3, #0
 8004984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004988:	e7aa      	b.n	80048e0 <_printf_i+0x148>
 800498a:	6923      	ldr	r3, [r4, #16]
 800498c:	4632      	mov	r2, r6
 800498e:	4649      	mov	r1, r9
 8004990:	4640      	mov	r0, r8
 8004992:	47d0      	blx	sl
 8004994:	3001      	adds	r0, #1
 8004996:	d0ad      	beq.n	80048f4 <_printf_i+0x15c>
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	079b      	lsls	r3, r3, #30
 800499c:	d413      	bmi.n	80049c6 <_printf_i+0x22e>
 800499e:	68e0      	ldr	r0, [r4, #12]
 80049a0:	9b03      	ldr	r3, [sp, #12]
 80049a2:	4298      	cmp	r0, r3
 80049a4:	bfb8      	it	lt
 80049a6:	4618      	movlt	r0, r3
 80049a8:	e7a6      	b.n	80048f8 <_printf_i+0x160>
 80049aa:	2301      	movs	r3, #1
 80049ac:	4632      	mov	r2, r6
 80049ae:	4649      	mov	r1, r9
 80049b0:	4640      	mov	r0, r8
 80049b2:	47d0      	blx	sl
 80049b4:	3001      	adds	r0, #1
 80049b6:	d09d      	beq.n	80048f4 <_printf_i+0x15c>
 80049b8:	3501      	adds	r5, #1
 80049ba:	68e3      	ldr	r3, [r4, #12]
 80049bc:	9903      	ldr	r1, [sp, #12]
 80049be:	1a5b      	subs	r3, r3, r1
 80049c0:	42ab      	cmp	r3, r5
 80049c2:	dcf2      	bgt.n	80049aa <_printf_i+0x212>
 80049c4:	e7eb      	b.n	800499e <_printf_i+0x206>
 80049c6:	2500      	movs	r5, #0
 80049c8:	f104 0619 	add.w	r6, r4, #25
 80049cc:	e7f5      	b.n	80049ba <_printf_i+0x222>
 80049ce:	bf00      	nop
 80049d0:	08005861 	.word	0x08005861
 80049d4:	08005872 	.word	0x08005872

080049d8 <memmove>:
 80049d8:	4288      	cmp	r0, r1
 80049da:	b510      	push	{r4, lr}
 80049dc:	eb01 0402 	add.w	r4, r1, r2
 80049e0:	d902      	bls.n	80049e8 <memmove+0x10>
 80049e2:	4284      	cmp	r4, r0
 80049e4:	4623      	mov	r3, r4
 80049e6:	d807      	bhi.n	80049f8 <memmove+0x20>
 80049e8:	1e43      	subs	r3, r0, #1
 80049ea:	42a1      	cmp	r1, r4
 80049ec:	d008      	beq.n	8004a00 <memmove+0x28>
 80049ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049f6:	e7f8      	b.n	80049ea <memmove+0x12>
 80049f8:	4402      	add	r2, r0
 80049fa:	4601      	mov	r1, r0
 80049fc:	428a      	cmp	r2, r1
 80049fe:	d100      	bne.n	8004a02 <memmove+0x2a>
 8004a00:	bd10      	pop	{r4, pc}
 8004a02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a0a:	e7f7      	b.n	80049fc <memmove+0x24>

08004a0c <_sbrk_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	4d06      	ldr	r5, [pc, #24]	@ (8004a28 <_sbrk_r+0x1c>)
 8004a10:	2300      	movs	r3, #0
 8004a12:	4604      	mov	r4, r0
 8004a14:	4608      	mov	r0, r1
 8004a16:	602b      	str	r3, [r5, #0]
 8004a18:	f7fc fd7e 	bl	8001518 <_sbrk>
 8004a1c:	1c43      	adds	r3, r0, #1
 8004a1e:	d102      	bne.n	8004a26 <_sbrk_r+0x1a>
 8004a20:	682b      	ldr	r3, [r5, #0]
 8004a22:	b103      	cbz	r3, 8004a26 <_sbrk_r+0x1a>
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
 8004a28:	200006b4 	.word	0x200006b4

08004a2c <memcpy>:
 8004a2c:	440a      	add	r2, r1
 8004a2e:	4291      	cmp	r1, r2
 8004a30:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a34:	d100      	bne.n	8004a38 <memcpy+0xc>
 8004a36:	4770      	bx	lr
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a42:	4291      	cmp	r1, r2
 8004a44:	d1f9      	bne.n	8004a3a <memcpy+0xe>
 8004a46:	bd10      	pop	{r4, pc}

08004a48 <_realloc_r>:
 8004a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a4c:	4680      	mov	r8, r0
 8004a4e:	4615      	mov	r5, r2
 8004a50:	460c      	mov	r4, r1
 8004a52:	b921      	cbnz	r1, 8004a5e <_realloc_r+0x16>
 8004a54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a58:	4611      	mov	r1, r2
 8004a5a:	f7ff bc4b 	b.w	80042f4 <_malloc_r>
 8004a5e:	b92a      	cbnz	r2, 8004a6c <_realloc_r+0x24>
 8004a60:	f7ff fbdc 	bl	800421c <_free_r>
 8004a64:	2400      	movs	r4, #0
 8004a66:	4620      	mov	r0, r4
 8004a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a6c:	f000 f81a 	bl	8004aa4 <_malloc_usable_size_r>
 8004a70:	4285      	cmp	r5, r0
 8004a72:	4606      	mov	r6, r0
 8004a74:	d802      	bhi.n	8004a7c <_realloc_r+0x34>
 8004a76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004a7a:	d8f4      	bhi.n	8004a66 <_realloc_r+0x1e>
 8004a7c:	4629      	mov	r1, r5
 8004a7e:	4640      	mov	r0, r8
 8004a80:	f7ff fc38 	bl	80042f4 <_malloc_r>
 8004a84:	4607      	mov	r7, r0
 8004a86:	2800      	cmp	r0, #0
 8004a88:	d0ec      	beq.n	8004a64 <_realloc_r+0x1c>
 8004a8a:	42b5      	cmp	r5, r6
 8004a8c:	462a      	mov	r2, r5
 8004a8e:	4621      	mov	r1, r4
 8004a90:	bf28      	it	cs
 8004a92:	4632      	movcs	r2, r6
 8004a94:	f7ff ffca 	bl	8004a2c <memcpy>
 8004a98:	4621      	mov	r1, r4
 8004a9a:	4640      	mov	r0, r8
 8004a9c:	f7ff fbbe 	bl	800421c <_free_r>
 8004aa0:	463c      	mov	r4, r7
 8004aa2:	e7e0      	b.n	8004a66 <_realloc_r+0x1e>

08004aa4 <_malloc_usable_size_r>:
 8004aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aa8:	1f18      	subs	r0, r3, #4
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	bfbc      	itt	lt
 8004aae:	580b      	ldrlt	r3, [r1, r0]
 8004ab0:	18c0      	addlt	r0, r0, r3
 8004ab2:	4770      	bx	lr

08004ab4 <_init>:
 8004ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab6:	bf00      	nop
 8004ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aba:	bc08      	pop	{r3}
 8004abc:	469e      	mov	lr, r3
 8004abe:	4770      	bx	lr

08004ac0 <_fini>:
 8004ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac2:	bf00      	nop
 8004ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac6:	bc08      	pop	{r3}
 8004ac8:	469e      	mov	lr, r3
 8004aca:	4770      	bx	lr
