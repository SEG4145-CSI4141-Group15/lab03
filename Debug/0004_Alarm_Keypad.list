
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d40  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e88  08006f10  08006f10  00007f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d98  08007d98  0000907c  2**0
                  CONTENTS
  4 .ARM          00000008  08007d98  08007d98  00008d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007da0  08007da0  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007da0  08007da0  00008da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007da4  08007da4  00008da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007da8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005018  2000007c  08007e24  0000907c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005094  08007e24  00009094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c57  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b53  00000000  00000000  00022d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  00026858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000119b  00000000  00000000  00027f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242b1  00000000  00000000  0002909b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b27b  00000000  00000000  0004d34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc061  00000000  00000000  000685c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144628  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062c0  00000000  00000000  0014466c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0014a92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006ef8 	.word	0x08006ef8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08006ef8 	.word	0x08006ef8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b96a 	b.w	8000520 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9d08      	ldr	r5, [sp, #32]
 800026a:	460c      	mov	r4, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14e      	bne.n	800030e <__udivmoddi4+0xaa>
 8000270:	4694      	mov	ip, r2
 8000272:	458c      	cmp	ip, r1
 8000274:	4686      	mov	lr, r0
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	d962      	bls.n	8000342 <__udivmoddi4+0xde>
 800027c:	b14a      	cbz	r2, 8000292 <__udivmoddi4+0x2e>
 800027e:	f1c2 0320 	rsb	r3, r2, #32
 8000282:	4091      	lsls	r1, r2
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	4319      	orrs	r1, r3
 800028e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000292:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000296:	fa1f f68c 	uxth.w	r6, ip
 800029a:	fbb1 f4f7 	udiv	r4, r1, r7
 800029e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a2:	fb07 1114 	mls	r1, r7, r4, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb04 f106 	mul.w	r1, r4, r6
 80002ae:	4299      	cmp	r1, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x64>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ba:	f080 8112 	bcs.w	80004e2 <__udivmoddi4+0x27e>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 810f 	bls.w	80004e2 <__udivmoddi4+0x27e>
 80002c4:	3c02      	subs	r4, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a59      	subs	r1, r3, r1
 80002ca:	fa1f f38e 	uxth.w	r3, lr
 80002ce:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d2:	fb07 1110 	mls	r1, r7, r0, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb00 f606 	mul.w	r6, r0, r6
 80002de:	429e      	cmp	r6, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x94>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ea:	f080 80fc 	bcs.w	80004e6 <__udivmoddi4+0x282>
 80002ee:	429e      	cmp	r6, r3
 80002f0:	f240 80f9 	bls.w	80004e6 <__udivmoddi4+0x282>
 80002f4:	4463      	add	r3, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	1b9b      	subs	r3, r3, r6
 80002fa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa6>
 8000302:	40d3      	lsrs	r3, r2
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xba>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb4>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa6>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x150>
 8000326:	42a3      	cmp	r3, r4
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xcc>
 800032a:	4290      	cmp	r0, r2
 800032c:	f0c0 80f0 	bcc.w	8000510 <__udivmoddi4+0x2ac>
 8000330:	1a86      	subs	r6, r0, r2
 8000332:	eb64 0303 	sbc.w	r3, r4, r3
 8000336:	2001      	movs	r0, #1
 8000338:	2d00      	cmp	r5, #0
 800033a:	d0e6      	beq.n	800030a <__udivmoddi4+0xa6>
 800033c:	e9c5 6300 	strd	r6, r3, [r5]
 8000340:	e7e3      	b.n	800030a <__udivmoddi4+0xa6>
 8000342:	2a00      	cmp	r2, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x204>
 8000348:	eba1 040c 	sub.w	r4, r1, ip
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	fa1f f78c 	uxth.w	r7, ip
 8000354:	2101      	movs	r1, #1
 8000356:	fbb4 f6f8 	udiv	r6, r4, r8
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb08 4416 	mls	r4, r8, r6, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb07 f006 	mul.w	r0, r7, r6
 800036a:	4298      	cmp	r0, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x11c>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 34ff 	add.w	r4, r6, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x11a>
 8000378:	4298      	cmp	r0, r3
 800037a:	f200 80cd 	bhi.w	8000518 <__udivmoddi4+0x2b4>
 800037e:	4626      	mov	r6, r4
 8000380:	1a1c      	subs	r4, r3, r0
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb4 f0f8 	udiv	r0, r4, r8
 800038a:	fb08 4410 	mls	r4, r8, r0, r4
 800038e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000392:	fb00 f707 	mul.w	r7, r0, r7
 8000396:	429f      	cmp	r7, r3
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x148>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x146>
 80003a4:	429f      	cmp	r7, r3
 80003a6:	f200 80b0 	bhi.w	800050a <__udivmoddi4+0x2a6>
 80003aa:	4620      	mov	r0, r4
 80003ac:	1bdb      	subs	r3, r3, r7
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x9c>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c4:	fa04 f301 	lsl.w	r3, r4, r1
 80003c8:	ea43 030c 	orr.w	r3, r3, ip
 80003cc:	40f4      	lsrs	r4, r6
 80003ce:	fa00 f801 	lsl.w	r8, r0, r1
 80003d2:	0c38      	lsrs	r0, r7, #16
 80003d4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d8:	fbb4 fef0 	udiv	lr, r4, r0
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	fb00 441e 	mls	r4, r0, lr, r4
 80003e4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e8:	fb0e f90c 	mul.w	r9, lr, ip
 80003ec:	45a1      	cmp	r9, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90a      	bls.n	800040a <__udivmoddi4+0x1a6>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fa:	f080 8084 	bcs.w	8000506 <__udivmoddi4+0x2a2>
 80003fe:	45a1      	cmp	r9, r4
 8000400:	f240 8081 	bls.w	8000506 <__udivmoddi4+0x2a2>
 8000404:	f1ae 0e02 	sub.w	lr, lr, #2
 8000408:	443c      	add	r4, r7
 800040a:	eba4 0409 	sub.w	r4, r4, r9
 800040e:	fa1f f983 	uxth.w	r9, r3
 8000412:	fbb4 f3f0 	udiv	r3, r4, r0
 8000416:	fb00 4413 	mls	r4, r0, r3, r4
 800041a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000422:	45a4      	cmp	ip, r4
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x1d2>
 8000426:	193c      	adds	r4, r7, r4
 8000428:	f103 30ff 	add.w	r0, r3, #4294967295
 800042c:	d267      	bcs.n	80004fe <__udivmoddi4+0x29a>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d965      	bls.n	80004fe <__udivmoddi4+0x29a>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043a:	fba0 9302 	umull	r9, r3, r0, r2
 800043e:	eba4 040c 	sub.w	r4, r4, ip
 8000442:	429c      	cmp	r4, r3
 8000444:	46ce      	mov	lr, r9
 8000446:	469c      	mov	ip, r3
 8000448:	d351      	bcc.n	80004ee <__udivmoddi4+0x28a>
 800044a:	d04e      	beq.n	80004ea <__udivmoddi4+0x286>
 800044c:	b155      	cbz	r5, 8000464 <__udivmoddi4+0x200>
 800044e:	ebb8 030e 	subs.w	r3, r8, lr
 8000452:	eb64 040c 	sbc.w	r4, r4, ip
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	40cb      	lsrs	r3, r1
 800045c:	431e      	orrs	r6, r3
 800045e:	40cc      	lsrs	r4, r1
 8000460:	e9c5 6400 	strd	r6, r4, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	e750      	b.n	800030a <__udivmoddi4+0xa6>
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa24 f303 	lsr.w	r3, r4, r3
 8000478:	4094      	lsls	r4, r2
 800047a:	430c      	orrs	r4, r1
 800047c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000480:	fa00 fe02 	lsl.w	lr, r0, r2
 8000484:	fa1f f78c 	uxth.w	r7, ip
 8000488:	fbb3 f0f8 	udiv	r0, r3, r8
 800048c:	fb08 3110 	mls	r1, r8, r0, r3
 8000490:	0c23      	lsrs	r3, r4, #16
 8000492:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000496:	fb00 f107 	mul.w	r1, r0, r7
 800049a:	4299      	cmp	r1, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x24c>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a6:	d22c      	bcs.n	8000502 <__udivmoddi4+0x29e>
 80004a8:	4299      	cmp	r1, r3
 80004aa:	d92a      	bls.n	8000502 <__udivmoddi4+0x29e>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a5b      	subs	r3, r3, r1
 80004b2:	b2a4      	uxth	r4, r4
 80004b4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b8:	fb08 3311 	mls	r3, r8, r1, r3
 80004bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c0:	fb01 f307 	mul.w	r3, r1, r7
 80004c4:	42a3      	cmp	r3, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x276>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d0:	d213      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004d2:	42a3      	cmp	r3, r4
 80004d4:	d911      	bls.n	80004fa <__udivmoddi4+0x296>
 80004d6:	3902      	subs	r1, #2
 80004d8:	4464      	add	r4, ip
 80004da:	1ae4      	subs	r4, r4, r3
 80004dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e0:	e739      	b.n	8000356 <__udivmoddi4+0xf2>
 80004e2:	4604      	mov	r4, r0
 80004e4:	e6f0      	b.n	80002c8 <__udivmoddi4+0x64>
 80004e6:	4608      	mov	r0, r1
 80004e8:	e706      	b.n	80002f8 <__udivmoddi4+0x94>
 80004ea:	45c8      	cmp	r8, r9
 80004ec:	d2ae      	bcs.n	800044c <__udivmoddi4+0x1e8>
 80004ee:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7a8      	b.n	800044c <__udivmoddi4+0x1e8>
 80004fa:	4631      	mov	r1, r6
 80004fc:	e7ed      	b.n	80004da <__udivmoddi4+0x276>
 80004fe:	4603      	mov	r3, r0
 8000500:	e799      	b.n	8000436 <__udivmoddi4+0x1d2>
 8000502:	4630      	mov	r0, r6
 8000504:	e7d4      	b.n	80004b0 <__udivmoddi4+0x24c>
 8000506:	46d6      	mov	lr, sl
 8000508:	e77f      	b.n	800040a <__udivmoddi4+0x1a6>
 800050a:	4463      	add	r3, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e74d      	b.n	80003ac <__udivmoddi4+0x148>
 8000510:	4606      	mov	r6, r0
 8000512:	4623      	mov	r3, r4
 8000514:	4608      	mov	r0, r1
 8000516:	e70f      	b.n	8000338 <__udivmoddi4+0xd4>
 8000518:	3e02      	subs	r6, #2
 800051a:	4463      	add	r3, ip
 800051c:	e730      	b.n	8000380 <__udivmoddi4+0x11c>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
	int done=1;
 800052a:	2301      	movs	r3, #1
 800052c:	607b      	str	r3, [r7, #4]
	while(done)
 800052e:	e19b      	b.n	8000868 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000536:	48b3      	ldr	r0, [pc, #716]	@ (8000804 <Get_Key+0x2e0>)
 8000538:	f001 fb9c 	bl	8001c74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 800053c:	2200      	movs	r2, #0
 800053e:	2110      	movs	r1, #16
 8000540:	48b0      	ldr	r0, [pc, #704]	@ (8000804 <Get_Key+0x2e0>)
 8000542:	f001 fb97 	bl	8001c74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000546:	2200      	movs	r2, #0
 8000548:	2120      	movs	r1, #32
 800054a:	48ae      	ldr	r0, [pc, #696]	@ (8000804 <Get_Key+0x2e0>)
 800054c:	f001 fb92 	bl	8001c74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000550:	2200      	movs	r2, #0
 8000552:	2108      	movs	r1, #8
 8000554:	48ab      	ldr	r0, [pc, #684]	@ (8000804 <Get_Key+0x2e0>)
 8000556:	f001 fb8d 	bl	8001c74 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 800055a:	2140      	movs	r1, #64	@ 0x40
 800055c:	48a9      	ldr	r0, [pc, #676]	@ (8000804 <Get_Key+0x2e0>)
 800055e:	f001 fb71 	bl	8001c44 <HAL_GPIO_ReadPin>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d00b      	beq.n	8000580 <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000568:	bf00      	nop
 800056a:	2140      	movs	r1, #64	@ 0x40
 800056c:	48a5      	ldr	r0, [pc, #660]	@ (8000804 <Get_Key+0x2e0>)
 800056e:	f001 fb69 	bl	8001c44 <HAL_GPIO_ReadPin>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d1f8      	bne.n	800056a <Get_Key+0x46>
		key='1';
 8000578:	4ba3      	ldr	r3, [pc, #652]	@ (8000808 <Get_Key+0x2e4>)
 800057a:	2231      	movs	r2, #49	@ 0x31
 800057c:	701a      	strb	r2, [r3, #0]
		break;
 800057e:	e177      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000580:	2180      	movs	r1, #128	@ 0x80
 8000582:	48a2      	ldr	r0, [pc, #648]	@ (800080c <Get_Key+0x2e8>)
 8000584:	f001 fb5e 	bl	8001c44 <HAL_GPIO_ReadPin>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d00b      	beq.n	80005a6 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800058e:	bf00      	nop
 8000590:	2180      	movs	r1, #128	@ 0x80
 8000592:	489e      	ldr	r0, [pc, #632]	@ (800080c <Get_Key+0x2e8>)
 8000594:	f001 fb56 	bl	8001c44 <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d1f8      	bne.n	8000590 <Get_Key+0x6c>
		key='4';
 800059e:	4b9a      	ldr	r3, [pc, #616]	@ (8000808 <Get_Key+0x2e4>)
 80005a0:	2234      	movs	r2, #52	@ 0x34
 80005a2:	701a      	strb	r2, [r3, #0]
		break;
 80005a4:	e164      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80005a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005aa:	4899      	ldr	r0, [pc, #612]	@ (8000810 <Get_Key+0x2ec>)
 80005ac:	f001 fb4a 	bl	8001c44 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00c      	beq.n	80005d0 <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80005b6:	bf00      	nop
 80005b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005bc:	4894      	ldr	r0, [pc, #592]	@ (8000810 <Get_Key+0x2ec>)
 80005be:	f001 fb41 	bl	8001c44 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1f7      	bne.n	80005b8 <Get_Key+0x94>
		key='7';
 80005c8:	4b8f      	ldr	r3, [pc, #572]	@ (8000808 <Get_Key+0x2e4>)
 80005ca:	2237      	movs	r2, #55	@ 0x37
 80005cc:	701a      	strb	r2, [r3, #0]
		break;
 80005ce:	e14f      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80005d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d4:	488e      	ldr	r0, [pc, #568]	@ (8000810 <Get_Key+0x2ec>)
 80005d6:	f001 fb35 	bl	8001c44 <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00c      	beq.n	80005fa <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80005e0:	bf00      	nop
 80005e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005e6:	488a      	ldr	r0, [pc, #552]	@ (8000810 <Get_Key+0x2ec>)
 80005e8:	f001 fb2c 	bl	8001c44 <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1f7      	bne.n	80005e2 <Get_Key+0xbe>
		key='*';
 80005f2:	4b85      	ldr	r3, [pc, #532]	@ (8000808 <Get_Key+0x2e4>)
 80005f4:	222a      	movs	r2, #42	@ 0x2a
 80005f6:	701a      	strb	r2, [r3, #0]
		break;
 80005f8:	e13a      	b.n	8000870 <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000600:	4880      	ldr	r0, [pc, #512]	@ (8000804 <Get_Key+0x2e0>)
 8000602:	f001 fb37 	bl	8001c74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 8000606:	2201      	movs	r2, #1
 8000608:	2110      	movs	r1, #16
 800060a:	487e      	ldr	r0, [pc, #504]	@ (8000804 <Get_Key+0x2e0>)
 800060c:	f001 fb32 	bl	8001c74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000610:	2200      	movs	r2, #0
 8000612:	2120      	movs	r1, #32
 8000614:	487b      	ldr	r0, [pc, #492]	@ (8000804 <Get_Key+0x2e0>)
 8000616:	f001 fb2d 	bl	8001c74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 800061a:	2200      	movs	r2, #0
 800061c:	2108      	movs	r1, #8
 800061e:	4879      	ldr	r0, [pc, #484]	@ (8000804 <Get_Key+0x2e0>)
 8000620:	f001 fb28 	bl	8001c74 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000624:	2140      	movs	r1, #64	@ 0x40
 8000626:	4877      	ldr	r0, [pc, #476]	@ (8000804 <Get_Key+0x2e0>)
 8000628:	f001 fb0c 	bl	8001c44 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d00b      	beq.n	800064a <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000632:	bf00      	nop
 8000634:	2140      	movs	r1, #64	@ 0x40
 8000636:	4873      	ldr	r0, [pc, #460]	@ (8000804 <Get_Key+0x2e0>)
 8000638:	f001 fb04 	bl	8001c44 <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1f8      	bne.n	8000634 <Get_Key+0x110>
		key='2';
 8000642:	4b71      	ldr	r3, [pc, #452]	@ (8000808 <Get_Key+0x2e4>)
 8000644:	2232      	movs	r2, #50	@ 0x32
 8000646:	701a      	strb	r2, [r3, #0]
		break;
 8000648:	e112      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800064a:	2180      	movs	r1, #128	@ 0x80
 800064c:	486f      	ldr	r0, [pc, #444]	@ (800080c <Get_Key+0x2e8>)
 800064e:	f001 faf9 	bl	8001c44 <HAL_GPIO_ReadPin>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d00b      	beq.n	8000670 <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000658:	bf00      	nop
 800065a:	2180      	movs	r1, #128	@ 0x80
 800065c:	486b      	ldr	r0, [pc, #428]	@ (800080c <Get_Key+0x2e8>)
 800065e:	f001 faf1 	bl	8001c44 <HAL_GPIO_ReadPin>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f8      	bne.n	800065a <Get_Key+0x136>
		key='5';
 8000668:	4b67      	ldr	r3, [pc, #412]	@ (8000808 <Get_Key+0x2e4>)
 800066a:	2235      	movs	r2, #53	@ 0x35
 800066c:	701a      	strb	r2, [r3, #0]
		break;
 800066e:	e0ff      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000670:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000674:	4866      	ldr	r0, [pc, #408]	@ (8000810 <Get_Key+0x2ec>)
 8000676:	f001 fae5 	bl	8001c44 <HAL_GPIO_ReadPin>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00c      	beq.n	800069a <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000680:	bf00      	nop
 8000682:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000686:	4862      	ldr	r0, [pc, #392]	@ (8000810 <Get_Key+0x2ec>)
 8000688:	f001 fadc 	bl	8001c44 <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f7      	bne.n	8000682 <Get_Key+0x15e>
		key='8';
 8000692:	4b5d      	ldr	r3, [pc, #372]	@ (8000808 <Get_Key+0x2e4>)
 8000694:	2238      	movs	r2, #56	@ 0x38
 8000696:	701a      	strb	r2, [r3, #0]
		break;
 8000698:	e0ea      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800069a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800069e:	485c      	ldr	r0, [pc, #368]	@ (8000810 <Get_Key+0x2ec>)
 80006a0:	f001 fad0 	bl	8001c44 <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d00c      	beq.n	80006c4 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80006aa:	bf00      	nop
 80006ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006b0:	4857      	ldr	r0, [pc, #348]	@ (8000810 <Get_Key+0x2ec>)
 80006b2:	f001 fac7 	bl	8001c44 <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1f7      	bne.n	80006ac <Get_Key+0x188>
		key='0';
 80006bc:	4b52      	ldr	r3, [pc, #328]	@ (8000808 <Get_Key+0x2e4>)
 80006be:	2230      	movs	r2, #48	@ 0x30
 80006c0:	701a      	strb	r2, [r3, #0]
		break;
 80006c2:	e0d5      	b.n	8000870 <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ca:	484e      	ldr	r0, [pc, #312]	@ (8000804 <Get_Key+0x2e0>)
 80006cc:	f001 fad2 	bl	8001c74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 80006d0:	2200      	movs	r2, #0
 80006d2:	2110      	movs	r1, #16
 80006d4:	484b      	ldr	r0, [pc, #300]	@ (8000804 <Get_Key+0x2e0>)
 80006d6:	f001 facd 	bl	8001c74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 80006da:	2201      	movs	r2, #1
 80006dc:	2120      	movs	r1, #32
 80006de:	4849      	ldr	r0, [pc, #292]	@ (8000804 <Get_Key+0x2e0>)
 80006e0:	f001 fac8 	bl	8001c74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 80006e4:	2200      	movs	r2, #0
 80006e6:	2108      	movs	r1, #8
 80006e8:	4846      	ldr	r0, [pc, #280]	@ (8000804 <Get_Key+0x2e0>)
 80006ea:	f001 fac3 	bl	8001c74 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006ee:	2140      	movs	r1, #64	@ 0x40
 80006f0:	4844      	ldr	r0, [pc, #272]	@ (8000804 <Get_Key+0x2e0>)
 80006f2:	f001 faa7 	bl	8001c44 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00b      	beq.n	8000714 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006fc:	bf00      	nop
 80006fe:	2140      	movs	r1, #64	@ 0x40
 8000700:	4840      	ldr	r0, [pc, #256]	@ (8000804 <Get_Key+0x2e0>)
 8000702:	f001 fa9f 	bl	8001c44 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d1f8      	bne.n	80006fe <Get_Key+0x1da>
		key='3';
 800070c:	4b3e      	ldr	r3, [pc, #248]	@ (8000808 <Get_Key+0x2e4>)
 800070e:	2233      	movs	r2, #51	@ 0x33
 8000710:	701a      	strb	r2, [r3, #0]
		break;
 8000712:	e0ad      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000714:	2180      	movs	r1, #128	@ 0x80
 8000716:	483d      	ldr	r0, [pc, #244]	@ (800080c <Get_Key+0x2e8>)
 8000718:	f001 fa94 	bl	8001c44 <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d00b      	beq.n	800073a <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000722:	bf00      	nop
 8000724:	2180      	movs	r1, #128	@ 0x80
 8000726:	4839      	ldr	r0, [pc, #228]	@ (800080c <Get_Key+0x2e8>)
 8000728:	f001 fa8c 	bl	8001c44 <HAL_GPIO_ReadPin>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1f8      	bne.n	8000724 <Get_Key+0x200>
		key='6';
 8000732:	4b35      	ldr	r3, [pc, #212]	@ (8000808 <Get_Key+0x2e4>)
 8000734:	2236      	movs	r2, #54	@ 0x36
 8000736:	701a      	strb	r2, [r3, #0]
		break;
 8000738:	e09a      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800073a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800073e:	4834      	ldr	r0, [pc, #208]	@ (8000810 <Get_Key+0x2ec>)
 8000740:	f001 fa80 	bl	8001c44 <HAL_GPIO_ReadPin>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00c      	beq.n	8000764 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800074a:	bf00      	nop
 800074c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000750:	482f      	ldr	r0, [pc, #188]	@ (8000810 <Get_Key+0x2ec>)
 8000752:	f001 fa77 	bl	8001c44 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1f7      	bne.n	800074c <Get_Key+0x228>
		key='9';
 800075c:	4b2a      	ldr	r3, [pc, #168]	@ (8000808 <Get_Key+0x2e4>)
 800075e:	2239      	movs	r2, #57	@ 0x39
 8000760:	701a      	strb	r2, [r3, #0]
		break;
 8000762:	e085      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000764:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000768:	4829      	ldr	r0, [pc, #164]	@ (8000810 <Get_Key+0x2ec>)
 800076a:	f001 fa6b 	bl	8001c44 <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d00c      	beq.n	800078e <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000774:	bf00      	nop
 8000776:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800077a:	4825      	ldr	r0, [pc, #148]	@ (8000810 <Get_Key+0x2ec>)
 800077c:	f001 fa62 	bl	8001c44 <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1f7      	bne.n	8000776 <Get_Key+0x252>
		key='#';
 8000786:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <Get_Key+0x2e4>)
 8000788:	2223      	movs	r2, #35	@ 0x23
 800078a:	701a      	strb	r2, [r3, #0]
		break;
 800078c:	e070      	b.n	8000870 <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000794:	481b      	ldr	r0, [pc, #108]	@ (8000804 <Get_Key+0x2e0>)
 8000796:	f001 fa6d 	bl	8001c74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 800079a:	2200      	movs	r2, #0
 800079c:	2110      	movs	r1, #16
 800079e:	4819      	ldr	r0, [pc, #100]	@ (8000804 <Get_Key+0x2e0>)
 80007a0:	f001 fa68 	bl	8001c74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80007a4:	2200      	movs	r2, #0
 80007a6:	2120      	movs	r1, #32
 80007a8:	4816      	ldr	r0, [pc, #88]	@ (8000804 <Get_Key+0x2e0>)
 80007aa:	f001 fa63 	bl	8001c74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 80007ae:	2201      	movs	r2, #1
 80007b0:	2108      	movs	r1, #8
 80007b2:	4814      	ldr	r0, [pc, #80]	@ (8000804 <Get_Key+0x2e0>)
 80007b4:	f001 fa5e 	bl	8001c74 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80007b8:	2140      	movs	r1, #64	@ 0x40
 80007ba:	4812      	ldr	r0, [pc, #72]	@ (8000804 <Get_Key+0x2e0>)
 80007bc:	f001 fa42 	bl	8001c44 <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00b      	beq.n	80007de <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80007c6:	bf00      	nop
 80007c8:	2140      	movs	r1, #64	@ 0x40
 80007ca:	480e      	ldr	r0, [pc, #56]	@ (8000804 <Get_Key+0x2e0>)
 80007cc:	f001 fa3a 	bl	8001c44 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f8      	bne.n	80007c8 <Get_Key+0x2a4>
		key='A';
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <Get_Key+0x2e4>)
 80007d8:	2241      	movs	r2, #65	@ 0x41
 80007da:	701a      	strb	r2, [r3, #0]
		break;
 80007dc:	e048      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007de:	2180      	movs	r1, #128	@ 0x80
 80007e0:	480a      	ldr	r0, [pc, #40]	@ (800080c <Get_Key+0x2e8>)
 80007e2:	f001 fa2f 	bl	8001c44 <HAL_GPIO_ReadPin>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d013      	beq.n	8000814 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007ec:	bf00      	nop
 80007ee:	2180      	movs	r1, #128	@ 0x80
 80007f0:	4806      	ldr	r0, [pc, #24]	@ (800080c <Get_Key+0x2e8>)
 80007f2:	f001 fa27 	bl	8001c44 <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f8      	bne.n	80007ee <Get_Key+0x2ca>
		key='B';
 80007fc:	4b02      	ldr	r3, [pc, #8]	@ (8000808 <Get_Key+0x2e4>)
 80007fe:	2242      	movs	r2, #66	@ 0x42
 8000800:	701a      	strb	r2, [r3, #0]
		break;
 8000802:	e035      	b.n	8000870 <Get_Key+0x34c>
 8000804:	40020400 	.word	0x40020400
 8000808:	20000098 	.word	0x20000098
 800080c:	40020800 	.word	0x40020800
 8000810:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000814:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000818:	481a      	ldr	r0, [pc, #104]	@ (8000884 <Get_Key+0x360>)
 800081a:	f001 fa13 	bl	8001c44 <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00c      	beq.n	800083e <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000824:	bf00      	nop
 8000826:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800082a:	4816      	ldr	r0, [pc, #88]	@ (8000884 <Get_Key+0x360>)
 800082c:	f001 fa0a 	bl	8001c44 <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1f7      	bne.n	8000826 <Get_Key+0x302>
		key='C';
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <Get_Key+0x364>)
 8000838:	2243      	movs	r2, #67	@ 0x43
 800083a:	701a      	strb	r2, [r3, #0]
		break;
 800083c:	e018      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800083e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000842:	4810      	ldr	r0, [pc, #64]	@ (8000884 <Get_Key+0x360>)
 8000844:	f001 f9fe 	bl	8001c44 <HAL_GPIO_ReadPin>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00c      	beq.n	8000868 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800084e:	bf00      	nop
 8000850:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000854:	480b      	ldr	r0, [pc, #44]	@ (8000884 <Get_Key+0x360>)
 8000856:	f001 f9f5 	bl	8001c44 <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1f7      	bne.n	8000850 <Get_Key+0x32c>
		key='D';
 8000860:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <Get_Key+0x364>)
 8000862:	2244      	movs	r2, #68	@ 0x44
 8000864:	701a      	strb	r2, [r3, #0]
		break;
 8000866:	e003      	b.n	8000870 <Get_Key+0x34c>
	while(done)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	f47f ae60 	bne.w	8000530 <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000870:	2120      	movs	r1, #32
 8000872:	4804      	ldr	r0, [pc, #16]	@ (8000884 <Get_Key+0x360>)
 8000874:	f001 fa17 	bl	8001ca6 <HAL_GPIO_TogglePin>
	return(key);
 8000878:	4b03      	ldr	r3, [pc, #12]	@ (8000888 <Get_Key+0x364>)
 800087a:	781b      	ldrb	r3, [r3, #0]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40020000 	.word	0x40020000
 8000888:	20000098 	.word	0x20000098

0800088c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000890:	f000 ff20 	bl	80016d4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000894:	f000 f858 	bl	8000948 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000898:	f000 f8f2 	bl	8000a80 <MX_GPIO_Init>
	MX_I2C1_Init();
 800089c:	f000 f8c2 	bl	8000a24 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80008a0:	f003 f8d4 	bl	8003a4c <osKernelInitialize>

	// Create the event flag
	lcdEvent = osEventFlagsNew(NULL);
 80008a4:	2000      	movs	r0, #0
 80008a6:	f003 f9c8 	bl	8003c3a <osEventFlagsNew>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a16      	ldr	r2, [pc, #88]	@ (8000908 <main+0x7c>)
 80008ae:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of KeypadTask */
	KeypadTaskHandle = osThreadNew(StartKeypadTask, NULL,
 80008b0:	4a16      	ldr	r2, [pc, #88]	@ (800090c <main+0x80>)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4816      	ldr	r0, [pc, #88]	@ (8000910 <main+0x84>)
 80008b6:	f003 f913 	bl	8003ae0 <osThreadNew>
 80008ba:	4603      	mov	r3, r0
 80008bc:	4a15      	ldr	r2, [pc, #84]	@ (8000914 <main+0x88>)
 80008be:	6013      	str	r3, [r2, #0]
			&KeypadTask_attributes);

	/* creation of LCDTask */
	LCDTaskHandle = osThreadNew(StartLCDTask, NULL, &LCDTask_attributes);
 80008c0:	4a15      	ldr	r2, [pc, #84]	@ (8000918 <main+0x8c>)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4815      	ldr	r0, [pc, #84]	@ (800091c <main+0x90>)
 80008c6:	f003 f90b 	bl	8003ae0 <osThreadNew>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4a14      	ldr	r2, [pc, #80]	@ (8000920 <main+0x94>)
 80008ce:	6013      	str	r3, [r2, #0]

	/* creation of LEDsTask */
	LEDsTaskHandle = osThreadNew(StartLEDsTask, NULL, &LEDsTask_attributes);
 80008d0:	4a14      	ldr	r2, [pc, #80]	@ (8000924 <main+0x98>)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4814      	ldr	r0, [pc, #80]	@ (8000928 <main+0x9c>)
 80008d6:	f003 f903 	bl	8003ae0 <osThreadNew>
 80008da:	4603      	mov	r3, r0
 80008dc:	4a13      	ldr	r2, [pc, #76]	@ (800092c <main+0xa0>)
 80008de:	6013      	str	r3, [r2, #0]

	/* creation of PIRTask */
	PIRTaskHandle = osThreadNew(StartPIRTask, NULL, &PIRTask_attributes);
 80008e0:	4a13      	ldr	r2, [pc, #76]	@ (8000930 <main+0xa4>)
 80008e2:	2100      	movs	r1, #0
 80008e4:	4813      	ldr	r0, [pc, #76]	@ (8000934 <main+0xa8>)
 80008e6:	f003 f8fb 	bl	8003ae0 <osThreadNew>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4a12      	ldr	r2, [pc, #72]	@ (8000938 <main+0xac>)
 80008ee:	6013      	str	r3, [r2, #0]

	/* creation of BuzzerTask */
	BuzzerTaskHandle = osThreadNew(StartBuzzerTask, NULL,
 80008f0:	4a12      	ldr	r2, [pc, #72]	@ (800093c <main+0xb0>)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4812      	ldr	r0, [pc, #72]	@ (8000940 <main+0xb4>)
 80008f6:	f003 f8f3 	bl	8003ae0 <osThreadNew>
 80008fa:	4603      	mov	r3, r0
 80008fc:	4a11      	ldr	r2, [pc, #68]	@ (8000944 <main+0xb8>)
 80008fe:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000900:	f003 f8c8 	bl	8003a94 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <main+0x78>
 8000908:	20000114 	.word	0x20000114
 800090c:	08007ccc 	.word	0x08007ccc
 8000910:	08000bf5 	.word	0x08000bf5
 8000914:	200000f0 	.word	0x200000f0
 8000918:	08007cf0 	.word	0x08007cf0
 800091c:	08000cc9 	.word	0x08000cc9
 8000920:	200000f4 	.word	0x200000f4
 8000924:	08007d14 	.word	0x08007d14
 8000928:	08000da9 	.word	0x08000da9
 800092c:	200000f8 	.word	0x200000f8
 8000930:	08007d38 	.word	0x08007d38
 8000934:	08000dfd 	.word	0x08000dfd
 8000938:	200000fc 	.word	0x200000fc
 800093c:	08007d5c 	.word	0x08007d5c
 8000940:	08000e41 	.word	0x08000e41
 8000944:	20000100 	.word	0x20000100

08000948 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b094      	sub	sp, #80	@ 0x50
 800094c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	2234      	movs	r2, #52	@ 0x34
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f006 f9de 	bl	8006d18 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	4b2a      	ldr	r3, [pc, #168]	@ (8000a1c <SystemClock_Config+0xd4>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000974:	4a29      	ldr	r2, [pc, #164]	@ (8000a1c <SystemClock_Config+0xd4>)
 8000976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800097a:	6413      	str	r3, [r2, #64]	@ 0x40
 800097c:	4b27      	ldr	r3, [pc, #156]	@ (8000a1c <SystemClock_Config+0xd4>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000988:	2300      	movs	r3, #0
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	4b24      	ldr	r3, [pc, #144]	@ (8000a20 <SystemClock_Config+0xd8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000994:	4a22      	ldr	r2, [pc, #136]	@ (8000a20 <SystemClock_Config+0xd8>)
 8000996:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	4b20      	ldr	r3, [pc, #128]	@ (8000a20 <SystemClock_Config+0xd8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ac:	2301      	movs	r3, #1
 80009ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b0:	2310      	movs	r3, #16
 80009b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b4:	2302      	movs	r3, #2
 80009b6:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b8:	2300      	movs	r3, #0
 80009ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 80009bc:	2310      	movs	r3, #16
 80009be:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80009c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009c4:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009c6:	2304      	movs	r3, #4
 80009c8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 fab4 	bl	8002f44 <HAL_RCC_OscConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0x9e>
		Error_Handler();
 80009e2:	f000 fa61 	bl	8000ea8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009e6:	230f      	movs	r3, #15
 80009e8:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ea:	2302      	movs	r3, #2
 80009ec:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80009fc:	f107 0308 	add.w	r3, r7, #8
 8000a00:	2102      	movs	r1, #2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 ff36 	bl	8002874 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xca>
		Error_Handler();
 8000a0e:	f000 fa4b 	bl	8000ea8 <Error_Handler>
	}
}
 8000a12:	bf00      	nop
 8000a14:	3750      	adds	r7, #80	@ 0x50
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40007000 	.word	0x40007000

08000a24 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a2a:	4a13      	ldr	r2, [pc, #76]	@ (8000a78 <MX_I2C1_Init+0x54>)
 8000a2c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a30:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <MX_I2C1_Init+0x58>)
 8000a32:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a46:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a54:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000a60:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a62:	f001 f93b 	bl	8001cdc <HAL_I2C_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000a6c:	f000 fa1c 	bl	8000ea8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000009c 	.word	0x2000009c
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	00061a80 	.word	0x00061a80

08000a80 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b52      	ldr	r3, [pc, #328]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a51      	ldr	r2, [pc, #324]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b4f      	ldr	r3, [pc, #316]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b4b      	ldr	r3, [pc, #300]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a4a      	ldr	r2, [pc, #296]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b48      	ldr	r3, [pc, #288]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b44      	ldr	r3, [pc, #272]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a43      	ldr	r2, [pc, #268]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b41      	ldr	r3, [pc, #260]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b3d      	ldr	r3, [pc, #244]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a3c      	ldr	r2, [pc, #240]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b3a      	ldr	r3, [pc, #232]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_10,
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 618c 	mov.w	r1, #1120	@ 0x460
 8000b0c:	4836      	ldr	r0, [pc, #216]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000b0e:	f001 f8b1 	bl	8001c74 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, KC0_Pin | KC3_Pin | KC1_Pin | KC2_Pin,
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 8000b18:	4834      	ldr	r0, [pc, #208]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000b1a:	f001 f8ab 	bl	8001c74 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PA2 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000b1e:	230c      	movs	r3, #12
 8000b20:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b2e:	2307      	movs	r3, #7
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	482b      	ldr	r0, [pc, #172]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000b3a:	f000 feef 	bl	800191c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA5 PA6 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_10;
 8000b3e:	f44f 638c 	mov.w	r3, #1120	@ 0x460
 8000b42:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4824      	ldr	r0, [pc, #144]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000b58:	f000 fee0 	bl	800191c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b5c:	2380      	movs	r3, #128	@ 0x80
 8000b5e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	481e      	ldr	r0, [pc, #120]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000b70:	f000 fed4 	bl	800191c <HAL_GPIO_Init>

	/*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
	GPIO_InitStruct.Pin = KC0_Pin | KC3_Pin | KC1_Pin | KC2_Pin;
 8000b74:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8000b78:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4817      	ldr	r0, [pc, #92]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000b8e:	f000 fec5 	bl	800191c <HAL_GPIO_Init>

	/*Configure GPIO pin : KR1_Pin */
	GPIO_InitStruct.Pin = KR1_Pin;
 8000b92:	2380      	movs	r3, #128	@ 0x80
 8000b94:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4812      	ldr	r0, [pc, #72]	@ (8000bf0 <MX_GPIO_Init+0x170>)
 8000ba6:	f000 feb9 	bl	800191c <HAL_GPIO_Init>

	/*Configure GPIO pins : KR3_Pin KR2_Pin */
	GPIO_InitStruct.Pin = KR3_Pin | KR2_Pin;
 8000baa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480a      	ldr	r0, [pc, #40]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000bc0:	f000 feac 	bl	800191c <HAL_GPIO_Init>

	/*Configure GPIO pin : KR0_Pin */
	GPIO_InitStruct.Pin = KR0_Pin;
 8000bc4:	2340      	movs	r3, #64	@ 0x40
 8000bc6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000bd8:	f000 fea0 	bl	800191c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	@ 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020000 	.word	0x40020000
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	40020800 	.word	0x40020800

08000bf4 <StartKeypadTask>:
 * @brief  Function implementing the KeypadTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartKeypadTask */
void StartKeypadTask(void *argument) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */

	char code[5];
	int numInputs = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]

	for (;;) {
		key = Get_Key();
 8000c00:	f7ff fc90 	bl	8000524 <Get_Key>
 8000c04:	4603      	mov	r3, r0
 8000c06:	461a      	mov	r2, r3
 8000c08:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb4 <StartKeypadTask+0xc0>)
 8000c0a:	701a      	strb	r2, [r3, #0]
		hold[numInputs] = key;
 8000c0c:	4b29      	ldr	r3, [pc, #164]	@ (8000cb4 <StartKeypadTask+0xc0>)
 8000c0e:	7819      	ldrb	r1, [r3, #0]
 8000c10:	4a29      	ldr	r2, [pc, #164]	@ (8000cb8 <StartKeypadTask+0xc4>)
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	4413      	add	r3, r2
 8000c16:	460a      	mov	r2, r1
 8000c18:	701a      	strb	r2, [r3, #0]
		numInputs++;
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	61fb      	str	r3, [r7, #28]

		// Signal LCDTask to update the display after pressing each key
		osEventFlagsSet(lcdEvent, 0x01);
 8000c20:	4b26      	ldr	r3, [pc, #152]	@ (8000cbc <StartKeypadTask+0xc8>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2101      	movs	r1, #1
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 f846 	bl	8003cb8 <osEventFlagsSet>

		if (numInputs == 4) {
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	d13b      	bne.n	8000caa <StartKeypadTask+0xb6>
			if (armed == 0) {
 8000c32:	4b23      	ldr	r3, [pc, #140]	@ (8000cc0 <StartKeypadTask+0xcc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d109      	bne.n	8000c4e <StartKeypadTask+0x5a>
				strcpy(code, hold);
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	491e      	ldr	r1, [pc, #120]	@ (8000cb8 <StartKeypadTask+0xc4>)
 8000c40:	4618      	mov	r0, r3
 8000c42:	f006 f8ed 	bl	8006e20 <strcpy>
				armed = 1;
 8000c46:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc0 <StartKeypadTask+0xcc>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	e01d      	b.n	8000c8a <StartKeypadTask+0x96>

			} else {
				if (strcmp(code, hold) == 0) {
 8000c4e:	f107 030c 	add.w	r3, r7, #12
 8000c52:	4919      	ldr	r1, [pc, #100]	@ (8000cb8 <StartKeypadTask+0xc4>)
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fadb 	bl	8000210 <strcmp>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d114      	bne.n	8000c8a <StartKeypadTask+0x96>
					armed = 0;
 8000c60:	4b17      	ldr	r3, [pc, #92]	@ (8000cc0 <StartKeypadTask+0xcc>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
					detected = 0;
 8000c66:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <StartKeypadTask+0xd0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
					for (int i = 0; i < 4; i++) {
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
 8000c70:	e008      	b.n	8000c84 <StartKeypadTask+0x90>
						code[i] = '\0';
 8000c72:	f107 020c 	add.w	r2, r7, #12
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	4413      	add	r3, r2
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 4; i++) {
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	3301      	adds	r3, #1
 8000c82:	61bb      	str	r3, [r7, #24]
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	ddf3      	ble.n	8000c72 <StartKeypadTask+0x7e>
					}
				}
			}

			for (int i = 0; i < 4; i++) {
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	e007      	b.n	8000ca0 <StartKeypadTask+0xac>
				hold[i] = '\0';
 8000c90:	4a09      	ldr	r2, [pc, #36]	@ (8000cb8 <StartKeypadTask+0xc4>)
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	4413      	add	r3, r2
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	ddf4      	ble.n	8000c90 <StartKeypadTask+0x9c>
			}
			numInputs = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
		}
		osDelay(100);
 8000caa:	2064      	movs	r0, #100	@ 0x64
 8000cac:	f002 ffaa 	bl	8003c04 <osDelay>
		key = Get_Key();
 8000cb0:	e7a6      	b.n	8000c00 <StartKeypadTask+0xc>
 8000cb2:	bf00      	nop
 8000cb4:	20000098 	.word	0x20000098
 8000cb8:	20000104 	.word	0x20000104
 8000cbc:	20000114 	.word	0x20000114
 8000cc0:	2000010c 	.word	0x2000010c
 8000cc4:	20000110 	.word	0x20000110

08000cc8 <StartLCDTask>:
 * @brief Function implementing the LCDTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLCDTask */
void StartLCDTask(void *argument) {
 8000cc8:	b5b0      	push	{r4, r5, r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartLCDTask */
	SSD1306_Init();
 8000cd0:	f000 f8f0 	bl	8000eb4 <SSD1306_Init>

	// Initial message on the LCD
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f000 f9df 	bl	8001098 <SSD1306_Fill>
	SSD1306_GotoXY(0, 0);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f000 fa53 	bl	8001188 <SSD1306_GotoXY>
	SSD1306_Puts(armed_messages[armed], &Font_11x18, 1);
 8000ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8000d90 <StartLCDTask+0xc8>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	4413      	add	r3, r2
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	4a29      	ldr	r2, [pc, #164]	@ (8000d94 <StartLCDTask+0xcc>)
 8000cf0:	4413      	add	r3, r2
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4928      	ldr	r1, [pc, #160]	@ (8000d98 <StartLCDTask+0xd0>)
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 fada 	bl	80012b0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000cfc:	f000 f99e 	bl	800103c <SSD1306_UpdateScreen>

	osDelay(1000);
 8000d00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d04:	f002 ff7e 	bl	8003c04 <osDelay>

	/* Infinite loop */
	for (;;) {
		// Wait for a keypad event
		osEventFlagsWait(lcdEvent, 0x01, osFlagsWaitAny, osWaitForever);
 8000d08:	4b24      	ldr	r3, [pc, #144]	@ (8000d9c <StartLCDTask+0xd4>)
 8000d0a:	6818      	ldr	r0, [r3, #0]
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d10:	2200      	movs	r2, #0
 8000d12:	2101      	movs	r1, #1
 8000d14:	f003 f812 	bl	8003d3c <osEventFlagsWait>

		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f000 f9bd 	bl	8001098 <SSD1306_Fill>
		SSD1306_GotoXY(0, 0);
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2000      	movs	r0, #0
 8000d22:	f000 fa31 	bl	8001188 <SSD1306_GotoXY>
		SSD1306_Puts(armed_messages[armed], &Font_11x18, 1);
 8000d26:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <StartLCDTask+0xc8>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	4a18      	ldr	r2, [pc, #96]	@ (8000d94 <StartLCDTask+0xcc>)
 8000d34:	4413      	add	r3, r2
 8000d36:	2201      	movs	r2, #1
 8000d38:	4917      	ldr	r1, [pc, #92]	@ (8000d98 <StartLCDTask+0xd0>)
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 fab8 	bl	80012b0 <SSD1306_Puts>

		if (strlen(hold) > 0) {
 8000d40:	4b17      	ldr	r3, [pc, #92]	@ (8000da0 <StartLCDTask+0xd8>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d01b      	beq.n	8000d80 <StartLCDTask+0xb8>

			char stars[4][5] = { "*", "**", "***", "****" };
 8000d48:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <StartLCDTask+0xdc>)
 8000d4a:	f107 040c 	add.w	r4, r7, #12
 8000d4e:	461d      	mov	r5, r3
 8000d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d54:	682b      	ldr	r3, [r5, #0]
 8000d56:	6023      	str	r3, [r4, #0]

			SSD1306_GotoXY(0, 30);
 8000d58:	211e      	movs	r1, #30
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f000 fa14 	bl	8001188 <SSD1306_GotoXY>
			SSD1306_Puts(stars[strlen(hold) - 1], &Font_11x18, 1);
 8000d60:	480f      	ldr	r0, [pc, #60]	@ (8000da0 <StartLCDTask+0xd8>)
 8000d62:	f7ff fa5f 	bl	8000224 <strlen>
 8000d66:	4603      	mov	r3, r0
 8000d68:	1e5a      	subs	r2, r3, #1
 8000d6a:	f107 010c 	add.w	r1, r7, #12
 8000d6e:	4613      	mov	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	2201      	movs	r2, #1
 8000d78:	4907      	ldr	r1, [pc, #28]	@ (8000d98 <StartLCDTask+0xd0>)
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fa98 	bl	80012b0 <SSD1306_Puts>
		}

		SSD1306_UpdateScreen();
 8000d80:	f000 f95c 	bl	800103c <SSD1306_UpdateScreen>

		osDelay(1000);
 8000d84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d88:	f002 ff3c 	bl	8003c04 <osDelay>
		osEventFlagsWait(lcdEvent, 0x01, osFlagsWaitAny, osWaitForever);
 8000d8c:	e7bc      	b.n	8000d08 <StartLCDTask+0x40>
 8000d8e:	bf00      	nop
 8000d90:	2000010c 	.word	0x2000010c
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	20000114 	.word	0x20000114
 8000da0:	20000104 	.word	0x20000104
 8000da4:	08006f44 	.word	0x08006f44

08000da8 <StartLEDsTask>:
 * @brief Function implementing the LEDsTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLEDsTask */
void StartLEDsTask(void *argument) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartLEDsTask */

	/* Infinite loop */
	for (;;) {
		// Not armed
		while (armed) {
 8000db0:	e00a      	b.n	8000dc8 <StartLEDsTask+0x20>
			// Turn on Green LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2140      	movs	r1, #64	@ 0x40
 8000db6:	480f      	ldr	r0, [pc, #60]	@ (8000df4 <StartLEDsTask+0x4c>)
 8000db8:	f000 ff5c 	bl	8001c74 <HAL_GPIO_WritePin>

			// Turn off Red LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dc2:	480c      	ldr	r0, [pc, #48]	@ (8000df4 <StartLEDsTask+0x4c>)
 8000dc4:	f000 ff56 	bl	8001c74 <HAL_GPIO_WritePin>
		while (armed) {
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <StartLEDsTask+0x50>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1f0      	bne.n	8000db2 <StartLEDsTask+0xa>
		}

		// Armed
		while (!armed) {
 8000dd0:	e00a      	b.n	8000de8 <StartLEDsTask+0x40>
			// Turn off Green LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2140      	movs	r1, #64	@ 0x40
 8000dd6:	4807      	ldr	r0, [pc, #28]	@ (8000df4 <StartLEDsTask+0x4c>)
 8000dd8:	f000 ff4c 	bl	8001c74 <HAL_GPIO_WritePin>

			// Turn on Red LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000de2:	4804      	ldr	r0, [pc, #16]	@ (8000df4 <StartLEDsTask+0x4c>)
 8000de4:	f000 ff46 	bl	8001c74 <HAL_GPIO_WritePin>
		while (!armed) {
 8000de8:	4b03      	ldr	r3, [pc, #12]	@ (8000df8 <StartLEDsTask+0x50>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0f0      	beq.n	8000dd2 <StartLEDsTask+0x2a>
		while (armed) {
 8000df0:	e7ea      	b.n	8000dc8 <StartLEDsTask+0x20>
 8000df2:	bf00      	nop
 8000df4:	40020000 	.word	0x40020000
 8000df8:	2000010c 	.word	0x2000010c

08000dfc <StartPIRTask>:
 * @brief Function implementing the PIRTask threadx`
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPIRTask */
void StartPIRTask(void *argument) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	osDelay(1000);
 8000e04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e08:	f002 fefc 	bl	8003c04 <osDelay>
	/* USER CODE BEGIN StartPIRTask */
	/* Infinite loop */
	for (;;) {
		// If the PIR detects something, wait 60 seconds to let the user enter the code to disarm the system, otherwise sound the buzzer
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET) {
 8000e0c:	2180      	movs	r1, #128	@ 0x80
 8000e0e:	4809      	ldr	r0, [pc, #36]	@ (8000e34 <StartPIRTask+0x38>)
 8000e10:	f000 ff18 	bl	8001c44 <HAL_GPIO_ReadPin>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d1f8      	bne.n	8000e0c <StartPIRTask+0x10>
			// Delay 60 seconds
			osDelay(2000);
 8000e1a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e1e:	f002 fef1 	bl	8003c04 <osDelay>

			if (armed) {
 8000e22:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <StartPIRTask+0x3c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d0f0      	beq.n	8000e0c <StartPIRTask+0x10>
				detected = 1;
 8000e2a:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <StartPIRTask+0x40>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET) {
 8000e30:	e7ec      	b.n	8000e0c <StartPIRTask+0x10>
 8000e32:	bf00      	nop
 8000e34:	40020000 	.word	0x40020000
 8000e38:	2000010c 	.word	0x2000010c
 8000e3c:	20000110 	.word	0x20000110

08000e40 <StartBuzzerTask>:
 * @brief Function implementing the BuzzerTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBuzzerTask */
void StartBuzzerTask(void *argument) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	osDelay(1000);
 8000e48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e4c:	f002 feda 	bl	8003c04 <osDelay>

	/* USER CODE BEGIN StartBuzzerTask */
	/* Infinite loop */
	for (;;) {
		while (detected) {
 8000e50:	e004      	b.n	8000e5c <StartBuzzerTask+0x1c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2120      	movs	r1, #32
 8000e56:	4809      	ldr	r0, [pc, #36]	@ (8000e7c <StartBuzzerTask+0x3c>)
 8000e58:	f000 ff0c 	bl	8001c74 <HAL_GPIO_WritePin>
		while (detected) {
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <StartBuzzerTask+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1f6      	bne.n	8000e52 <StartBuzzerTask+0x12>
		}
		while (!detected) {
 8000e64:	e004      	b.n	8000e70 <StartBuzzerTask+0x30>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2120      	movs	r1, #32
 8000e6a:	4804      	ldr	r0, [pc, #16]	@ (8000e7c <StartBuzzerTask+0x3c>)
 8000e6c:	f000 ff02 	bl	8001c74 <HAL_GPIO_WritePin>
		while (!detected) {
 8000e70:	4b03      	ldr	r3, [pc, #12]	@ (8000e80 <StartBuzzerTask+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0f6      	beq.n	8000e66 <StartBuzzerTask+0x26>
		while (detected) {
 8000e78:	e7f0      	b.n	8000e5c <StartBuzzerTask+0x1c>
 8000e7a:	bf00      	nop
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	20000110 	.word	0x20000110

08000e84 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a04      	ldr	r2, [pc, #16]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d101      	bne.n	8000e9a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000e96:	f000 fc3f 	bl	8001718 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40001000 	.word	0x40001000

08000ea8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <Error_Handler+0x8>

08000eb4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000eba:	f000 fa1f 	bl	80012fc <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000ebe:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2178      	movs	r1, #120	@ 0x78
 8000ec6:	485b      	ldr	r0, [pc, #364]	@ (8001034 <SSD1306_Init+0x180>)
 8000ec8:	f001 f94a 	bl	8002160 <HAL_I2C_IsDeviceReady>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e0a9      	b.n	800102a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000ed6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000eda:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000edc:	e002      	b.n	8000ee4 <SSD1306_Init+0x30>
		p--;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f9      	bne.n	8000ede <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000eea:	22ae      	movs	r2, #174	@ 0xae
 8000eec:	2100      	movs	r1, #0
 8000eee:	2078      	movs	r0, #120	@ 0x78
 8000ef0:	f000 fa80 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000ef4:	2220      	movs	r2, #32
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2078      	movs	r0, #120	@ 0x78
 8000efa:	f000 fa7b 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000efe:	2210      	movs	r2, #16
 8000f00:	2100      	movs	r1, #0
 8000f02:	2078      	movs	r0, #120	@ 0x78
 8000f04:	f000 fa76 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f08:	22b0      	movs	r2, #176	@ 0xb0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2078      	movs	r0, #120	@ 0x78
 8000f0e:	f000 fa71 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000f12:	22c8      	movs	r2, #200	@ 0xc8
 8000f14:	2100      	movs	r1, #0
 8000f16:	2078      	movs	r0, #120	@ 0x78
 8000f18:	f000 fa6c 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2078      	movs	r0, #120	@ 0x78
 8000f22:	f000 fa67 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000f26:	2210      	movs	r2, #16
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2078      	movs	r0, #120	@ 0x78
 8000f2c:	f000 fa62 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000f30:	2240      	movs	r2, #64	@ 0x40
 8000f32:	2100      	movs	r1, #0
 8000f34:	2078      	movs	r0, #120	@ 0x78
 8000f36:	f000 fa5d 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000f3a:	2281      	movs	r2, #129	@ 0x81
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2078      	movs	r0, #120	@ 0x78
 8000f40:	f000 fa58 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000f44:	22ff      	movs	r2, #255	@ 0xff
 8000f46:	2100      	movs	r1, #0
 8000f48:	2078      	movs	r0, #120	@ 0x78
 8000f4a:	f000 fa53 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000f4e:	22a1      	movs	r2, #161	@ 0xa1
 8000f50:	2100      	movs	r1, #0
 8000f52:	2078      	movs	r0, #120	@ 0x78
 8000f54:	f000 fa4e 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000f58:	22a6      	movs	r2, #166	@ 0xa6
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2078      	movs	r0, #120	@ 0x78
 8000f5e:	f000 fa49 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000f62:	22a8      	movs	r2, #168	@ 0xa8
 8000f64:	2100      	movs	r1, #0
 8000f66:	2078      	movs	r0, #120	@ 0x78
 8000f68:	f000 fa44 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000f6c:	223f      	movs	r2, #63	@ 0x3f
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2078      	movs	r0, #120	@ 0x78
 8000f72:	f000 fa3f 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f76:	22a4      	movs	r2, #164	@ 0xa4
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2078      	movs	r0, #120	@ 0x78
 8000f7c:	f000 fa3a 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000f80:	22d3      	movs	r2, #211	@ 0xd3
 8000f82:	2100      	movs	r1, #0
 8000f84:	2078      	movs	r0, #120	@ 0x78
 8000f86:	f000 fa35 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2078      	movs	r0, #120	@ 0x78
 8000f90:	f000 fa30 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f94:	22d5      	movs	r2, #213	@ 0xd5
 8000f96:	2100      	movs	r1, #0
 8000f98:	2078      	movs	r0, #120	@ 0x78
 8000f9a:	f000 fa2b 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000f9e:	22f0      	movs	r2, #240	@ 0xf0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2078      	movs	r0, #120	@ 0x78
 8000fa4:	f000 fa26 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000fa8:	22d9      	movs	r2, #217	@ 0xd9
 8000faa:	2100      	movs	r1, #0
 8000fac:	2078      	movs	r0, #120	@ 0x78
 8000fae:	f000 fa21 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000fb2:	2222      	movs	r2, #34	@ 0x22
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2078      	movs	r0, #120	@ 0x78
 8000fb8:	f000 fa1c 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000fbc:	22da      	movs	r2, #218	@ 0xda
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2078      	movs	r0, #120	@ 0x78
 8000fc2:	f000 fa17 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000fc6:	2212      	movs	r2, #18
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2078      	movs	r0, #120	@ 0x78
 8000fcc:	f000 fa12 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000fd0:	22db      	movs	r2, #219	@ 0xdb
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2078      	movs	r0, #120	@ 0x78
 8000fd6:	f000 fa0d 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000fda:	2220      	movs	r2, #32
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2078      	movs	r0, #120	@ 0x78
 8000fe0:	f000 fa08 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000fe4:	228d      	movs	r2, #141	@ 0x8d
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2078      	movs	r0, #120	@ 0x78
 8000fea:	f000 fa03 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000fee:	2214      	movs	r2, #20
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2078      	movs	r0, #120	@ 0x78
 8000ff4:	f000 f9fe 	bl	80013f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000ff8:	22af      	movs	r2, #175	@ 0xaf
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2078      	movs	r0, #120	@ 0x78
 8000ffe:	f000 f9f9 	bl	80013f4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001002:	222e      	movs	r2, #46	@ 0x2e
 8001004:	2100      	movs	r1, #0
 8001006:	2078      	movs	r0, #120	@ 0x78
 8001008:	f000 f9f4 	bl	80013f4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800100c:	2000      	movs	r0, #0
 800100e:	f000 f843 	bl	8001098 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001012:	f000 f813 	bl	800103c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <SSD1306_Init+0x184>)
 8001018:	2200      	movs	r2, #0
 800101a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <SSD1306_Init+0x184>)
 800101e:	2200      	movs	r2, #0
 8001020:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001022:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <SSD1306_Init+0x184>)
 8001024:	2201      	movs	r2, #1
 8001026:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001028:	2301      	movs	r3, #1
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000009c 	.word	0x2000009c
 8001038:	20000518 	.word	0x20000518

0800103c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001042:	2300      	movs	r3, #0
 8001044:	71fb      	strb	r3, [r7, #7]
 8001046:	e01d      	b.n	8001084 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	3b50      	subs	r3, #80	@ 0x50
 800104c:	b2db      	uxtb	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	2100      	movs	r1, #0
 8001052:	2078      	movs	r0, #120	@ 0x78
 8001054:	f000 f9ce 	bl	80013f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001058:	2200      	movs	r2, #0
 800105a:	2100      	movs	r1, #0
 800105c:	2078      	movs	r0, #120	@ 0x78
 800105e:	f000 f9c9 	bl	80013f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001062:	2210      	movs	r2, #16
 8001064:	2100      	movs	r1, #0
 8001066:	2078      	movs	r0, #120	@ 0x78
 8001068:	f000 f9c4 	bl	80013f4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	01db      	lsls	r3, r3, #7
 8001070:	4a08      	ldr	r2, [pc, #32]	@ (8001094 <SSD1306_UpdateScreen+0x58>)
 8001072:	441a      	add	r2, r3
 8001074:	2380      	movs	r3, #128	@ 0x80
 8001076:	2140      	movs	r1, #64	@ 0x40
 8001078:	2078      	movs	r0, #120	@ 0x78
 800107a:	f000 f955 	bl	8001328 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	3301      	adds	r3, #1
 8001082:	71fb      	strb	r3, [r7, #7]
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b07      	cmp	r3, #7
 8001088:	d9de      	bls.n	8001048 <SSD1306_UpdateScreen+0xc>
	}
}
 800108a:	bf00      	nop
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000118 	.word	0x20000118

08001098 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <SSD1306_Fill+0x14>
 80010a8:	2300      	movs	r3, #0
 80010aa:	e000      	b.n	80010ae <SSD1306_Fill+0x16>
 80010ac:	23ff      	movs	r3, #255	@ 0xff
 80010ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010b2:	4619      	mov	r1, r3
 80010b4:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <SSD1306_Fill+0x2c>)
 80010b6:	f005 fe2f 	bl	8006d18 <memset>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000118 	.word	0x20000118

080010c8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
 80010d2:	460b      	mov	r3, r1
 80010d4:	80bb      	strh	r3, [r7, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	70fb      	strb	r3, [r7, #3]
	if (
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80010de:	d848      	bhi.n	8001172 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80010e0:	88bb      	ldrh	r3, [r7, #4]
 80010e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80010e4:	d845      	bhi.n	8001172 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80010e6:	4b26      	ldr	r3, [pc, #152]	@ (8001180 <SSD1306_DrawPixel+0xb8>)
 80010e8:	791b      	ldrb	r3, [r3, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d006      	beq.n	80010fc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	bf0c      	ite	eq
 80010f4:	2301      	moveq	r3, #1
 80010f6:	2300      	movne	r3, #0
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d11a      	bne.n	8001138 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001102:	88fa      	ldrh	r2, [r7, #6]
 8001104:	88bb      	ldrh	r3, [r7, #4]
 8001106:	08db      	lsrs	r3, r3, #3
 8001108:	b298      	uxth	r0, r3
 800110a:	4603      	mov	r3, r0
 800110c:	01db      	lsls	r3, r3, #7
 800110e:	4413      	add	r3, r2
 8001110:	4a1c      	ldr	r2, [pc, #112]	@ (8001184 <SSD1306_DrawPixel+0xbc>)
 8001112:	5cd3      	ldrb	r3, [r2, r3]
 8001114:	b25a      	sxtb	r2, r3
 8001116:	88bb      	ldrh	r3, [r7, #4]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	2101      	movs	r1, #1
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	b25b      	sxtb	r3, r3
 8001124:	4313      	orrs	r3, r2
 8001126:	b259      	sxtb	r1, r3
 8001128:	88fa      	ldrh	r2, [r7, #6]
 800112a:	4603      	mov	r3, r0
 800112c:	01db      	lsls	r3, r3, #7
 800112e:	4413      	add	r3, r2
 8001130:	b2c9      	uxtb	r1, r1
 8001132:	4a14      	ldr	r2, [pc, #80]	@ (8001184 <SSD1306_DrawPixel+0xbc>)
 8001134:	54d1      	strb	r1, [r2, r3]
 8001136:	e01d      	b.n	8001174 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001138:	88fa      	ldrh	r2, [r7, #6]
 800113a:	88bb      	ldrh	r3, [r7, #4]
 800113c:	08db      	lsrs	r3, r3, #3
 800113e:	b298      	uxth	r0, r3
 8001140:	4603      	mov	r3, r0
 8001142:	01db      	lsls	r3, r3, #7
 8001144:	4413      	add	r3, r2
 8001146:	4a0f      	ldr	r2, [pc, #60]	@ (8001184 <SSD1306_DrawPixel+0xbc>)
 8001148:	5cd3      	ldrb	r3, [r2, r3]
 800114a:	b25a      	sxtb	r2, r3
 800114c:	88bb      	ldrh	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	2101      	movs	r1, #1
 8001154:	fa01 f303 	lsl.w	r3, r1, r3
 8001158:	b25b      	sxtb	r3, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	b25b      	sxtb	r3, r3
 800115e:	4013      	ands	r3, r2
 8001160:	b259      	sxtb	r1, r3
 8001162:	88fa      	ldrh	r2, [r7, #6]
 8001164:	4603      	mov	r3, r0
 8001166:	01db      	lsls	r3, r3, #7
 8001168:	4413      	add	r3, r2
 800116a:	b2c9      	uxtb	r1, r1
 800116c:	4a05      	ldr	r2, [pc, #20]	@ (8001184 <SSD1306_DrawPixel+0xbc>)
 800116e:	54d1      	strb	r1, [r2, r3]
 8001170:	e000      	b.n	8001174 <SSD1306_DrawPixel+0xac>
		return;
 8001172:	bf00      	nop
	}
}
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000518 	.word	0x20000518
 8001184:	20000118 	.word	0x20000118

08001188 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	460a      	mov	r2, r1
 8001192:	80fb      	strh	r3, [r7, #6]
 8001194:	4613      	mov	r3, r2
 8001196:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001198:	4a05      	ldr	r2, [pc, #20]	@ (80011b0 <SSD1306_GotoXY+0x28>)
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800119e:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <SSD1306_GotoXY+0x28>)
 80011a0:	88bb      	ldrh	r3, [r7, #4]
 80011a2:	8053      	strh	r3, [r2, #2]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	20000518 	.word	0x20000518

080011b4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	4613      	mov	r3, r2
 80011c2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80011c4:	4b39      	ldr	r3, [pc, #228]	@ (80012ac <SSD1306_Putc+0xf8>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
	if (
 80011d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80011d2:	dc07      	bgt.n	80011e4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80011d4:	4b35      	ldr	r3, [pc, #212]	@ (80012ac <SSD1306_Putc+0xf8>)
 80011d6:	885b      	ldrh	r3, [r3, #2]
 80011d8:	461a      	mov	r2, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	785b      	ldrb	r3, [r3, #1]
 80011de:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80011e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80011e2:	dd01      	ble.n	80011e8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	e05d      	b.n	80012a4 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	e04b      	b.n	8001286 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	3b20      	subs	r3, #32
 80011f6:	6839      	ldr	r1, [r7, #0]
 80011f8:	7849      	ldrb	r1, [r1, #1]
 80011fa:	fb01 f303 	mul.w	r3, r1, r3
 80011fe:	4619      	mov	r1, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	440b      	add	r3, r1
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	e030      	b.n	8001274 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d010      	beq.n	8001244 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001222:	4b22      	ldr	r3, [pc, #136]	@ (80012ac <SSD1306_Putc+0xf8>)
 8001224:	881a      	ldrh	r2, [r3, #0]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	b29b      	uxth	r3, r3
 800122a:	4413      	add	r3, r2
 800122c:	b298      	uxth	r0, r3
 800122e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <SSD1306_Putc+0xf8>)
 8001230:	885a      	ldrh	r2, [r3, #2]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	b29b      	uxth	r3, r3
 8001236:	4413      	add	r3, r2
 8001238:	b29b      	uxth	r3, r3
 800123a:	79ba      	ldrb	r2, [r7, #6]
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff ff43 	bl	80010c8 <SSD1306_DrawPixel>
 8001242:	e014      	b.n	800126e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001244:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <SSD1306_Putc+0xf8>)
 8001246:	881a      	ldrh	r2, [r3, #0]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	b29b      	uxth	r3, r3
 800124c:	4413      	add	r3, r2
 800124e:	b298      	uxth	r0, r3
 8001250:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <SSD1306_Putc+0xf8>)
 8001252:	885a      	ldrh	r2, [r3, #2]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	b29b      	uxth	r3, r3
 8001258:	4413      	add	r3, r2
 800125a:	b299      	uxth	r1, r3
 800125c:	79bb      	ldrb	r3, [r7, #6]
 800125e:	2b00      	cmp	r3, #0
 8001260:	bf0c      	ite	eq
 8001262:	2301      	moveq	r3, #1
 8001264:	2300      	movne	r3, #0
 8001266:	b2db      	uxtb	r3, r3
 8001268:	461a      	mov	r2, r3
 800126a:	f7ff ff2d 	bl	80010c8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	3301      	adds	r3, #1
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4293      	cmp	r3, r2
 800127e:	d3c8      	bcc.n	8001212 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3301      	adds	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	785b      	ldrb	r3, [r3, #1]
 800128a:	461a      	mov	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	4293      	cmp	r3, r2
 8001290:	d3ad      	bcc.n	80011ee <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <SSD1306_Putc+0xf8>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	7812      	ldrb	r2, [r2, #0]
 800129a:	4413      	add	r3, r2
 800129c:	b29a      	uxth	r2, r3
 800129e:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <SSD1306_Putc+0xf8>)
 80012a0:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80012a2:	79fb      	ldrb	r3, [r7, #7]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000518 	.word	0x20000518

080012b0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	4613      	mov	r3, r2
 80012bc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80012be:	e012      	b.n	80012e6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	79fa      	ldrb	r2, [r7, #7]
 80012c6:	68b9      	ldr	r1, [r7, #8]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff73 	bl	80011b4 <SSD1306_Putc>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d002      	beq.n	80012e0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	e008      	b.n	80012f2 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	3301      	adds	r3, #1
 80012e4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1e8      	bne.n	80012c0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	781b      	ldrb	r3, [r3, #0]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001302:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <ssd1306_I2C_Init+0x28>)
 8001304:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001306:	e002      	b.n	800130e <ssd1306_I2C_Init+0x12>
		p--;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f9      	bne.n	8001308 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	0003d090 	.word	0x0003d090

08001328 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b0c7      	sub	sp, #284	@ 0x11c
 800132c:	af02      	add	r7, sp, #8
 800132e:	4604      	mov	r4, r0
 8001330:	4608      	mov	r0, r1
 8001332:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001336:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800133a:	600a      	str	r2, [r1, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001342:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001346:	4622      	mov	r2, r4
 8001348:	701a      	strb	r2, [r3, #0]
 800134a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800134e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001352:	4602      	mov	r2, r0
 8001354:	701a      	strb	r2, [r3, #0]
 8001356:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800135a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800135e:	460a      	mov	r2, r1
 8001360:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001362:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001366:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800136a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800136e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001372:	7812      	ldrb	r2, [r2, #0]
 8001374:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001376:	2300      	movs	r3, #0
 8001378:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800137c:	e015      	b.n	80013aa <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800137e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001382:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001386:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800138a:	6812      	ldr	r2, [r2, #0]
 800138c:	441a      	add	r2, r3
 800138e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001392:	3301      	adds	r3, #1
 8001394:	7811      	ldrb	r1, [r2, #0]
 8001396:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800139a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800139e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80013a0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80013a4:	3301      	adds	r3, #1
 80013a6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80013aa:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80013b4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80013b8:	8812      	ldrh	r2, [r2, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d8df      	bhi.n	800137e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80013be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013c2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b299      	uxth	r1, r3
 80013ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	f107 020c 	add.w	r2, r7, #12
 80013dc:	200a      	movs	r0, #10
 80013de:	9000      	str	r0, [sp, #0]
 80013e0:	4803      	ldr	r0, [pc, #12]	@ (80013f0 <ssd1306_I2C_WriteMulti+0xc8>)
 80013e2:	f000 fdbf 	bl	8001f64 <HAL_I2C_Master_Transmit>
}
 80013e6:	bf00      	nop
 80013e8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd90      	pop	{r4, r7, pc}
 80013f0:	2000009c 	.word	0x2000009c

080013f4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
 80013fe:	460b      	mov	r3, r1
 8001400:	71bb      	strb	r3, [r7, #6]
 8001402:	4613      	mov	r3, r2
 8001404:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001406:	79bb      	ldrb	r3, [r7, #6]
 8001408:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800140a:	797b      	ldrb	r3, [r7, #5]
 800140c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	b299      	uxth	r1, r3
 8001412:	f107 020c 	add.w	r2, r7, #12
 8001416:	230a      	movs	r3, #10
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2302      	movs	r3, #2
 800141c:	4803      	ldr	r0, [pc, #12]	@ (800142c <ssd1306_I2C_Write+0x38>)
 800141e:	f000 fda1 	bl	8001f64 <HAL_I2C_Master_Transmit>
}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000009c 	.word	0x2000009c

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <HAL_MspInit+0x54>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143e:	4a11      	ldr	r2, [pc, #68]	@ (8001484 <HAL_MspInit+0x54>)
 8001440:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001444:	6453      	str	r3, [r2, #68]	@ 0x44
 8001446:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <HAL_MspInit+0x54>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <HAL_MspInit+0x54>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	4a0a      	ldr	r2, [pc, #40]	@ (8001484 <HAL_MspInit+0x54>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001460:	6413      	str	r3, [r2, #64]	@ 0x40
 8001462:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <HAL_MspInit+0x54>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	210f      	movs	r1, #15
 8001472:	f06f 0001 	mvn.w	r0, #1
 8001476:	f000 fa27 	bl	80018c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800

08001488 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	@ 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a19      	ldr	r2, [pc, #100]	@ (800150c <HAL_I2C_MspInit+0x84>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d12c      	bne.n	8001504 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <HAL_I2C_MspInit+0x88>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a17      	ldr	r2, [pc, #92]	@ (8001510 <HAL_I2C_MspInit+0x88>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <HAL_I2C_MspInit+0x88>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014cc:	2312      	movs	r3, #18
 80014ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014d8:	2304      	movs	r3, #4
 80014da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	480c      	ldr	r0, [pc, #48]	@ (8001514 <HAL_I2C_MspInit+0x8c>)
 80014e4:	f000 fa1a 	bl	800191c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <HAL_I2C_MspInit+0x88>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	4a07      	ldr	r2, [pc, #28]	@ (8001510 <HAL_I2C_MspInit+0x88>)
 80014f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f8:	4b05      	ldr	r3, [pc, #20]	@ (8001510 <HAL_I2C_MspInit+0x88>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	@ 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40005400 	.word	0x40005400
 8001510:	40023800 	.word	0x40023800
 8001514:	40020400 	.word	0x40020400

08001518 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08e      	sub	sp, #56	@ 0x38
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001524:	2300      	movs	r3, #0
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	4b33      	ldr	r3, [pc, #204]	@ (80015fc <HAL_InitTick+0xe4>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001530:	4a32      	ldr	r2, [pc, #200]	@ (80015fc <HAL_InitTick+0xe4>)
 8001532:	f043 0310 	orr.w	r3, r3, #16
 8001536:	6413      	str	r3, [r2, #64]	@ 0x40
 8001538:	4b30      	ldr	r3, [pc, #192]	@ (80015fc <HAL_InitTick+0xe4>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001544:	f107 0210 	add.w	r2, r7, #16
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f001 fa96 	bl	8002a80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800155a:	2b00      	cmp	r3, #0
 800155c:	d103      	bne.n	8001566 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800155e:	f001 fa7b 	bl	8002a58 <HAL_RCC_GetPCLK1Freq>
 8001562:	6378      	str	r0, [r7, #52]	@ 0x34
 8001564:	e004      	b.n	8001570 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001566:	f001 fa77 	bl	8002a58 <HAL_RCC_GetPCLK1Freq>
 800156a:	4603      	mov	r3, r0
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001572:	4a23      	ldr	r2, [pc, #140]	@ (8001600 <HAL_InitTick+0xe8>)
 8001574:	fba2 2303 	umull	r2, r3, r2, r3
 8001578:	0c9b      	lsrs	r3, r3, #18
 800157a:	3b01      	subs	r3, #1
 800157c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800157e:	4b21      	ldr	r3, [pc, #132]	@ (8001604 <HAL_InitTick+0xec>)
 8001580:	4a21      	ldr	r2, [pc, #132]	@ (8001608 <HAL_InitTick+0xf0>)
 8001582:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001584:	4b1f      	ldr	r3, [pc, #124]	@ (8001604 <HAL_InitTick+0xec>)
 8001586:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800158a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800158c:	4a1d      	ldr	r2, [pc, #116]	@ (8001604 <HAL_InitTick+0xec>)
 800158e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001590:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001592:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <HAL_InitTick+0xec>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001598:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <HAL_InitTick+0xec>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_InitTick+0xec>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015a4:	4817      	ldr	r0, [pc, #92]	@ (8001604 <HAL_InitTick+0xec>)
 80015a6:	f001 ff6b 	bl	8003480 <HAL_TIM_Base_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80015b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d11b      	bne.n	80015f0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015b8:	4812      	ldr	r0, [pc, #72]	@ (8001604 <HAL_InitTick+0xec>)
 80015ba:	f001 ffbb 	bl	8003534 <HAL_TIM_Base_Start_IT>
 80015be:	4603      	mov	r3, r0
 80015c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80015c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d111      	bne.n	80015f0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015cc:	2036      	movs	r0, #54	@ 0x36
 80015ce:	f000 f997 	bl	8001900 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d808      	bhi.n	80015ea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015d8:	2200      	movs	r2, #0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	2036      	movs	r0, #54	@ 0x36
 80015de:	f000 f973 	bl	80018c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015e2:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <HAL_InitTick+0xf4>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	e002      	b.n	80015f0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3738      	adds	r7, #56	@ 0x38
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40023800 	.word	0x40023800
 8001600:	431bde83 	.word	0x431bde83
 8001604:	20000520 	.word	0x20000520
 8001608:	40001000 	.word	0x40001000
 800160c:	20000020 	.word	0x20000020

08001610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <NMI_Handler+0x4>

08001618 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <MemManage_Handler+0x4>

08001628 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <BusFault_Handler+0x4>

08001630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <UsageFault_Handler+0x4>

08001638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <TIM6_DAC_IRQHandler+0x10>)
 800164e:	f001 ffe1 	bl	8003614 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000520 	.word	0x20000520

0800165c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <SystemInit+0x20>)
 8001662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001666:	4a05      	ldr	r2, [pc, #20]	@ (800167c <SystemInit+0x20>)
 8001668:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800166c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001680:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001684:	f7ff ffea 	bl	800165c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001688:	480c      	ldr	r0, [pc, #48]	@ (80016bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800168a:	490d      	ldr	r1, [pc, #52]	@ (80016c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800168c:	4a0d      	ldr	r2, [pc, #52]	@ (80016c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001690:	e002      	b.n	8001698 <LoopCopyDataInit>

08001692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001696:	3304      	adds	r3, #4

08001698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800169c:	d3f9      	bcc.n	8001692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169e:	4a0a      	ldr	r2, [pc, #40]	@ (80016c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a0:	4c0a      	ldr	r4, [pc, #40]	@ (80016cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a4:	e001      	b.n	80016aa <LoopFillZerobss>

080016a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a8:	3204      	adds	r2, #4

080016aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ac:	d3fb      	bcc.n	80016a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016ae:	f005 fb91 	bl	8006dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b2:	f7ff f8eb 	bl	800088c <main>
  bx  lr    
 80016b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80016c4:	08007da8 	.word	0x08007da8
  ldr r2, =_sbss
 80016c8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80016cc:	20005094 	.word	0x20005094

080016d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d0:	e7fe      	b.n	80016d0 <ADC_IRQHandler>
	...

080016d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <HAL_Init+0x40>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001714 <HAL_Init+0x40>)
 80016de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <HAL_Init+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001714 <HAL_Init+0x40>)
 80016ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f0:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a07      	ldr	r2, [pc, #28]	@ (8001714 <HAL_Init+0x40>)
 80016f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016fc:	2003      	movs	r0, #3
 80016fe:	f000 f8d8 	bl	80018b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001702:	200f      	movs	r0, #15
 8001704:	f7ff ff08 	bl	8001518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001708:	f7ff fe92 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023c00 	.word	0x40023c00

08001718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_IncTick+0x20>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b06      	ldr	r3, [pc, #24]	@ (800173c <HAL_IncTick+0x24>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a04      	ldr	r2, [pc, #16]	@ (800173c <HAL_IncTick+0x24>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000024 	.word	0x20000024
 800173c:	20000568 	.word	0x20000568

08001740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;
 8001744:	4b03      	ldr	r3, [pc, #12]	@ (8001754 <HAL_GetTick+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000568 	.word	0x20000568

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	@ (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db0b      	blt.n	80017e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	4907      	ldr	r1, [pc, #28]	@ (80017f4 <__NVIC_EnableIRQ+0x38>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	@ (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	@ (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	@ 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	@ 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ff4c 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018da:	f7ff ff61 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 80018de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	6978      	ldr	r0, [r7, #20]
 80018e6:	f7ff ffb1 	bl	800184c <NVIC_EncodePriority>
 80018ea:	4602      	mov	r2, r0
 80018ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff80 	bl	80017f8 <__NVIC_SetPriority>
}
 80018f8:	bf00      	nop
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff54 	bl	80017bc <__NVIC_EnableIRQ>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	@ 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
 8001936:	e165      	b.n	8001c04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001938:	2201      	movs	r2, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	429a      	cmp	r2, r3
 8001952:	f040 8154 	bne.w	8001bfe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	2b01      	cmp	r3, #1
 8001960:	d005      	beq.n	800196e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800196a:	2b02      	cmp	r3, #2
 800196c:	d130      	bne.n	80019d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	2203      	movs	r2, #3
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a4:	2201      	movs	r2, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	f003 0201 	and.w	r2, r3, #1
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d017      	beq.n	8001a0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	2203      	movs	r2, #3
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d123      	bne.n	8001a60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	08da      	lsrs	r2, r3, #3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3208      	adds	r2, #8
 8001a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	220f      	movs	r2, #15
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	08da      	lsrs	r2, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3208      	adds	r2, #8
 8001a5a:	69b9      	ldr	r1, [r7, #24]
 8001a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0203 	and.w	r2, r3, #3
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80ae 	beq.w	8001bfe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b5d      	ldr	r3, [pc, #372]	@ (8001c1c <HAL_GPIO_Init+0x300>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aaa:	4a5c      	ldr	r2, [pc, #368]	@ (8001c1c <HAL_GPIO_Init+0x300>)
 8001aac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab2:	4b5a      	ldr	r3, [pc, #360]	@ (8001c1c <HAL_GPIO_Init+0x300>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001abe:	4a58      	ldr	r2, [pc, #352]	@ (8001c20 <HAL_GPIO_Init+0x304>)
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	089b      	lsrs	r3, r3, #2
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4f      	ldr	r2, [pc, #316]	@ (8001c24 <HAL_GPIO_Init+0x308>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d025      	beq.n	8001b36 <HAL_GPIO_Init+0x21a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4e      	ldr	r2, [pc, #312]	@ (8001c28 <HAL_GPIO_Init+0x30c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d01f      	beq.n	8001b32 <HAL_GPIO_Init+0x216>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4d      	ldr	r2, [pc, #308]	@ (8001c2c <HAL_GPIO_Init+0x310>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d019      	beq.n	8001b2e <HAL_GPIO_Init+0x212>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4c      	ldr	r2, [pc, #304]	@ (8001c30 <HAL_GPIO_Init+0x314>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_GPIO_Init+0x20e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a4b      	ldr	r2, [pc, #300]	@ (8001c34 <HAL_GPIO_Init+0x318>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00d      	beq.n	8001b26 <HAL_GPIO_Init+0x20a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4a      	ldr	r2, [pc, #296]	@ (8001c38 <HAL_GPIO_Init+0x31c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d007      	beq.n	8001b22 <HAL_GPIO_Init+0x206>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a49      	ldr	r2, [pc, #292]	@ (8001c3c <HAL_GPIO_Init+0x320>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d101      	bne.n	8001b1e <HAL_GPIO_Init+0x202>
 8001b1a:	2306      	movs	r3, #6
 8001b1c:	e00c      	b.n	8001b38 <HAL_GPIO_Init+0x21c>
 8001b1e:	2307      	movs	r3, #7
 8001b20:	e00a      	b.n	8001b38 <HAL_GPIO_Init+0x21c>
 8001b22:	2305      	movs	r3, #5
 8001b24:	e008      	b.n	8001b38 <HAL_GPIO_Init+0x21c>
 8001b26:	2304      	movs	r3, #4
 8001b28:	e006      	b.n	8001b38 <HAL_GPIO_Init+0x21c>
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e004      	b.n	8001b38 <HAL_GPIO_Init+0x21c>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e002      	b.n	8001b38 <HAL_GPIO_Init+0x21c>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_GPIO_Init+0x21c>
 8001b36:	2300      	movs	r3, #0
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	f002 0203 	and.w	r2, r2, #3
 8001b3e:	0092      	lsls	r2, r2, #2
 8001b40:	4093      	lsls	r3, r2
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b48:	4935      	ldr	r1, [pc, #212]	@ (8001c20 <HAL_GPIO_Init+0x304>)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	3302      	adds	r3, #2
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b56:	4b3a      	ldr	r3, [pc, #232]	@ (8001c40 <HAL_GPIO_Init+0x324>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7a:	4a31      	ldr	r2, [pc, #196]	@ (8001c40 <HAL_GPIO_Init+0x324>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b80:	4b2f      	ldr	r3, [pc, #188]	@ (8001c40 <HAL_GPIO_Init+0x324>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba4:	4a26      	ldr	r2, [pc, #152]	@ (8001c40 <HAL_GPIO_Init+0x324>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001baa:	4b25      	ldr	r3, [pc, #148]	@ (8001c40 <HAL_GPIO_Init+0x324>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bce:	4a1c      	ldr	r2, [pc, #112]	@ (8001c40 <HAL_GPIO_Init+0x324>)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c40 <HAL_GPIO_Init+0x324>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf8:	4a11      	ldr	r2, [pc, #68]	@ (8001c40 <HAL_GPIO_Init+0x324>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3301      	adds	r3, #1
 8001c02:	61fb      	str	r3, [r7, #28]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	2b0f      	cmp	r3, #15
 8001c08:	f67f ae96 	bls.w	8001938 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3724      	adds	r7, #36	@ 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40013800 	.word	0x40013800
 8001c24:	40020000 	.word	0x40020000
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	40020800 	.word	0x40020800
 8001c30:	40020c00 	.word	0x40020c00
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40021400 	.word	0x40021400
 8001c3c:	40021800 	.word	0x40021800
 8001c40:	40013c00 	.word	0x40013c00

08001c44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	887b      	ldrh	r3, [r7, #2]
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
 8001c60:	e001      	b.n	8001c66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]
 8001c80:	4613      	mov	r3, r2
 8001c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c84:	787b      	ldrb	r3, [r7, #1]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c8a:	887a      	ldrh	r2, [r7, #2]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c90:	e003      	b.n	8001c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c92:	887b      	ldrh	r3, [r7, #2]
 8001c94:	041a      	lsls	r2, r3, #16
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	619a      	str	r2, [r3, #24]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b085      	sub	sp, #20
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cb8:	887a      	ldrh	r2, [r7, #2]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	041a      	lsls	r2, r3, #16
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	887b      	ldrh	r3, [r7, #2]
 8001cc6:	400b      	ands	r3, r1
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	619a      	str	r2, [r3, #24]
}
 8001cce:	bf00      	nop
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e12b      	b.n	8001f46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d106      	bne.n	8001d08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff fbc0 	bl	8001488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2224      	movs	r2, #36	@ 0x24
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0201 	bic.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d40:	f000 fe8a 	bl	8002a58 <HAL_RCC_GetPCLK1Freq>
 8001d44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4a81      	ldr	r2, [pc, #516]	@ (8001f50 <HAL_I2C_Init+0x274>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d807      	bhi.n	8001d60 <HAL_I2C_Init+0x84>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4a80      	ldr	r2, [pc, #512]	@ (8001f54 <HAL_I2C_Init+0x278>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	bf94      	ite	ls
 8001d58:	2301      	movls	r3, #1
 8001d5a:	2300      	movhi	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	e006      	b.n	8001d6e <HAL_I2C_Init+0x92>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4a7d      	ldr	r2, [pc, #500]	@ (8001f58 <HAL_I2C_Init+0x27c>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	bf94      	ite	ls
 8001d68:	2301      	movls	r3, #1
 8001d6a:	2300      	movhi	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0e7      	b.n	8001f46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4a78      	ldr	r2, [pc, #480]	@ (8001f5c <HAL_I2C_Init+0x280>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	0c9b      	lsrs	r3, r3, #18
 8001d80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	4a6a      	ldr	r2, [pc, #424]	@ (8001f50 <HAL_I2C_Init+0x274>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d802      	bhi.n	8001db0 <HAL_I2C_Init+0xd4>
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	3301      	adds	r3, #1
 8001dae:	e009      	b.n	8001dc4 <HAL_I2C_Init+0xe8>
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001db6:	fb02 f303 	mul.w	r3, r2, r3
 8001dba:	4a69      	ldr	r2, [pc, #420]	@ (8001f60 <HAL_I2C_Init+0x284>)
 8001dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc0:	099b      	lsrs	r3, r3, #6
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	430b      	orrs	r3, r1
 8001dca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001dd6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	495c      	ldr	r1, [pc, #368]	@ (8001f50 <HAL_I2C_Init+0x274>)
 8001de0:	428b      	cmp	r3, r1
 8001de2:	d819      	bhi.n	8001e18 <HAL_I2C_Init+0x13c>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1e59      	subs	r1, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fbb1 f3f3 	udiv	r3, r1, r3
 8001df2:	1c59      	adds	r1, r3, #1
 8001df4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001df8:	400b      	ands	r3, r1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00a      	beq.n	8001e14 <HAL_I2C_Init+0x138>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1e59      	subs	r1, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e12:	e051      	b.n	8001eb8 <HAL_I2C_Init+0x1dc>
 8001e14:	2304      	movs	r3, #4
 8001e16:	e04f      	b.n	8001eb8 <HAL_I2C_Init+0x1dc>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d111      	bne.n	8001e44 <HAL_I2C_Init+0x168>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1e58      	subs	r0, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6859      	ldr	r1, [r3, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	440b      	add	r3, r1
 8001e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e32:	3301      	adds	r3, #1
 8001e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf0c      	ite	eq
 8001e3c:	2301      	moveq	r3, #1
 8001e3e:	2300      	movne	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	e012      	b.n	8001e6a <HAL_I2C_Init+0x18e>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1e58      	subs	r0, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	0099      	lsls	r1, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bf0c      	ite	eq
 8001e64:	2301      	moveq	r3, #1
 8001e66:	2300      	movne	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_I2C_Init+0x196>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e022      	b.n	8001eb8 <HAL_I2C_Init+0x1dc>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10e      	bne.n	8001e98 <HAL_I2C_Init+0x1bc>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1e58      	subs	r0, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6859      	ldr	r1, [r3, #4]
 8001e82:	460b      	mov	r3, r1
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	440b      	add	r3, r1
 8001e88:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e96:	e00f      	b.n	8001eb8 <HAL_I2C_Init+0x1dc>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	1e58      	subs	r0, r3, #1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6859      	ldr	r1, [r3, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	0099      	lsls	r1, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eae:	3301      	adds	r3, #1
 8001eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	6809      	ldr	r1, [r1, #0]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69da      	ldr	r2, [r3, #28]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001ee6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6911      	ldr	r1, [r2, #16]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68d2      	ldr	r2, [r2, #12]
 8001ef2:	4311      	orrs	r1, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695a      	ldr	r2, [r3, #20]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2220      	movs	r2, #32
 8001f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	000186a0 	.word	0x000186a0
 8001f54:	001e847f 	.word	0x001e847f
 8001f58:	003d08ff 	.word	0x003d08ff
 8001f5c:	431bde83 	.word	0x431bde83
 8001f60:	10624dd3 	.word	0x10624dd3

08001f64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	460b      	mov	r3, r1
 8001f72:	817b      	strh	r3, [r7, #10]
 8001f74:	4613      	mov	r3, r2
 8001f76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f78:	f7ff fbe2 	bl	8001740 <HAL_GetTick>
 8001f7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b20      	cmp	r3, #32
 8001f88:	f040 80e0 	bne.w	800214c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2319      	movs	r3, #25
 8001f92:	2201      	movs	r2, #1
 8001f94:	4970      	ldr	r1, [pc, #448]	@ (8002158 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 fa92 	bl	80024c0 <I2C_WaitOnFlagUntilTimeout>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e0d3      	b.n	800214e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_I2C_Master_Transmit+0x50>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e0cc      	b.n	800214e <HAL_I2C_Master_Transmit+0x1ea>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d007      	beq.n	8001fda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0201 	orr.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fe8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2221      	movs	r2, #33	@ 0x21
 8001fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2210      	movs	r2, #16
 8001ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	893a      	ldrh	r2, [r7, #8]
 800200a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002010:	b29a      	uxth	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4a50      	ldr	r2, [pc, #320]	@ (800215c <HAL_I2C_Master_Transmit+0x1f8>)
 800201a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800201c:	8979      	ldrh	r1, [r7, #10]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	6a3a      	ldr	r2, [r7, #32]
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 f9ca 	bl	80023bc <I2C_MasterRequestWrite>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e08d      	b.n	800214e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002048:	e066      	b.n	8002118 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	6a39      	ldr	r1, [r7, #32]
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 fb50 	bl	80026f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00d      	beq.n	8002076 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	2b04      	cmp	r3, #4
 8002060:	d107      	bne.n	8002072 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002070:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e06b      	b.n	800214e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207a:	781a      	ldrb	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002090:	b29b      	uxth	r3, r3
 8002092:	3b01      	subs	r3, #1
 8002094:	b29a      	uxth	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800209e:	3b01      	subs	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d11b      	bne.n	80020ec <HAL_I2C_Master_Transmit+0x188>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d017      	beq.n	80020ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c0:	781a      	ldrb	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29a      	uxth	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	6a39      	ldr	r1, [r7, #32]
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 fb47 	bl	8002784 <I2C_WaitOnBTFFlagUntilTimeout>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00d      	beq.n	8002118 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	2b04      	cmp	r3, #4
 8002102:	d107      	bne.n	8002114 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002112:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e01a      	b.n	800214e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211c:	2b00      	cmp	r3, #0
 800211e:	d194      	bne.n	800204a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800212e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	e000      	b.n	800214e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800214c:	2302      	movs	r3, #2
  }
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	00100002 	.word	0x00100002
 800215c:	ffff0000 	.word	0xffff0000

08002160 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	@ 0x28
 8002164:	af02      	add	r7, sp, #8
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	460b      	mov	r3, r1
 800216e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002170:	f7ff fae6 	bl	8001740 <HAL_GetTick>
 8002174:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b20      	cmp	r3, #32
 8002184:	f040 8111 	bne.w	80023aa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	2319      	movs	r3, #25
 800218e:	2201      	movs	r2, #1
 8002190:	4988      	ldr	r1, [pc, #544]	@ (80023b4 <HAL_I2C_IsDeviceReady+0x254>)
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f994 	bl	80024c0 <I2C_WaitOnFlagUntilTimeout>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800219e:	2302      	movs	r3, #2
 80021a0:	e104      	b.n	80023ac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_I2C_IsDeviceReady+0x50>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e0fd      	b.n	80023ac <HAL_I2C_IsDeviceReady+0x24c>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d007      	beq.n	80021d6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 0201 	orr.w	r2, r2, #1
 80021d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2224      	movs	r2, #36	@ 0x24
 80021ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a70      	ldr	r2, [pc, #448]	@ (80023b8 <HAL_I2C_IsDeviceReady+0x258>)
 80021f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002208:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2200      	movs	r2, #0
 8002212:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f952 	bl	80024c0 <I2C_WaitOnFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00d      	beq.n	800223e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002230:	d103      	bne.n	800223a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002238:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e0b6      	b.n	80023ac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800223e:	897b      	ldrh	r3, [r7, #10]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800224c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800224e:	f7ff fa77 	bl	8001740 <HAL_GetTick>
 8002252:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b02      	cmp	r3, #2
 8002260:	bf0c      	ite	eq
 8002262:	2301      	moveq	r3, #1
 8002264:	2300      	movne	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002278:	bf0c      	ite	eq
 800227a:	2301      	moveq	r3, #1
 800227c:	2300      	movne	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002282:	e025      	b.n	80022d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002284:	f7ff fa5c 	bl	8001740 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d302      	bcc.n	800229a <HAL_I2C_IsDeviceReady+0x13a>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d103      	bne.n	80022a2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	22a0      	movs	r2, #160	@ 0xa0
 800229e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022c6:	bf0c      	ite	eq
 80022c8:	2301      	moveq	r3, #1
 80022ca:	2300      	movne	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2ba0      	cmp	r3, #160	@ 0xa0
 80022da:	d005      	beq.n	80022e8 <HAL_I2C_IsDeviceReady+0x188>
 80022dc:	7dfb      	ldrb	r3, [r7, #23]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d102      	bne.n	80022e8 <HAL_I2C_IsDeviceReady+0x188>
 80022e2:	7dbb      	ldrb	r3, [r7, #22]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0cd      	beq.n	8002284 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d129      	bne.n	8002352 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800230c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	2319      	movs	r3, #25
 800232a:	2201      	movs	r2, #1
 800232c:	4921      	ldr	r1, [pc, #132]	@ (80023b4 <HAL_I2C_IsDeviceReady+0x254>)
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f8c6 	bl	80024c0 <I2C_WaitOnFlagUntilTimeout>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e036      	b.n	80023ac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	e02c      	b.n	80023ac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002360:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800236a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2319      	movs	r3, #25
 8002372:	2201      	movs	r2, #1
 8002374:	490f      	ldr	r1, [pc, #60]	@ (80023b4 <HAL_I2C_IsDeviceReady+0x254>)
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 f8a2 	bl	80024c0 <I2C_WaitOnFlagUntilTimeout>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e012      	b.n	80023ac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	3301      	adds	r3, #1
 800238a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	f4ff af32 	bcc.w	80021fa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80023aa:	2302      	movs	r3, #2
  }
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3720      	adds	r7, #32
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	00100002 	.word	0x00100002
 80023b8:	ffff0000 	.word	0xffff0000

080023bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	460b      	mov	r3, r1
 80023ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d006      	beq.n	80023e6 <I2C_MasterRequestWrite+0x2a>
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d003      	beq.n	80023e6 <I2C_MasterRequestWrite+0x2a>
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023e4:	d108      	bne.n	80023f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	e00b      	b.n	8002410 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fc:	2b12      	cmp	r3, #18
 80023fe:	d107      	bne.n	8002410 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800240e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f84f 	bl	80024c0 <I2C_WaitOnFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00d      	beq.n	8002444 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002436:	d103      	bne.n	8002440 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800243e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e035      	b.n	80024b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800244c:	d108      	bne.n	8002460 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800244e:	897b      	ldrh	r3, [r7, #10]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800245c:	611a      	str	r2, [r3, #16]
 800245e:	e01b      	b.n	8002498 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002460:	897b      	ldrh	r3, [r7, #10]
 8002462:	11db      	asrs	r3, r3, #7
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f003 0306 	and.w	r3, r3, #6
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f063 030f 	orn	r3, r3, #15
 8002470:	b2da      	uxtb	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	490e      	ldr	r1, [pc, #56]	@ (80024b8 <I2C_MasterRequestWrite+0xfc>)
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f898 	bl	80025b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e010      	b.n	80024b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800248e:	897b      	ldrh	r3, [r7, #10]
 8002490:	b2da      	uxtb	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4907      	ldr	r1, [pc, #28]	@ (80024bc <I2C_MasterRequestWrite+0x100>)
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f888 	bl	80025b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	00010008 	.word	0x00010008
 80024bc:	00010002 	.word	0x00010002

080024c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	4613      	mov	r3, r2
 80024ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024d0:	e048      	b.n	8002564 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d8:	d044      	beq.n	8002564 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024da:	f7ff f931 	bl	8001740 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d302      	bcc.n	80024f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d139      	bne.n	8002564 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	0c1b      	lsrs	r3, r3, #16
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d10d      	bne.n	8002516 <I2C_WaitOnFlagUntilTimeout+0x56>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	43da      	mvns	r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	4013      	ands	r3, r2
 8002506:	b29b      	uxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	e00c      	b.n	8002530 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	43da      	mvns	r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	4013      	ands	r3, r2
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	429a      	cmp	r2, r3
 8002534:	d116      	bne.n	8002564 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002550:	f043 0220 	orr.w	r2, r3, #32
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e023      	b.n	80025ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	0c1b      	lsrs	r3, r3, #16
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b01      	cmp	r3, #1
 800256c:	d10d      	bne.n	800258a <I2C_WaitOnFlagUntilTimeout+0xca>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	43da      	mvns	r2, r3
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	4013      	ands	r3, r2
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf0c      	ite	eq
 8002580:	2301      	moveq	r3, #1
 8002582:	2300      	movne	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	461a      	mov	r2, r3
 8002588:	e00c      	b.n	80025a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	43da      	mvns	r2, r3
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	4013      	ands	r3, r2
 8002596:	b29b      	uxth	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf0c      	ite	eq
 800259c:	2301      	moveq	r3, #1
 800259e:	2300      	movne	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d093      	beq.n	80024d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025c2:	e071      	b.n	80026a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025d2:	d123      	bne.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002608:	f043 0204 	orr.w	r2, r3, #4
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e067      	b.n	80026ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002622:	d041      	beq.n	80026a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002624:	f7ff f88c 	bl	8001740 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	429a      	cmp	r2, r3
 8002632:	d302      	bcc.n	800263a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d136      	bne.n	80026a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	0c1b      	lsrs	r3, r3, #16
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b01      	cmp	r3, #1
 8002642:	d10c      	bne.n	800265e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	43da      	mvns	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	4013      	ands	r3, r2
 8002650:	b29b      	uxth	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	bf14      	ite	ne
 8002656:	2301      	movne	r3, #1
 8002658:	2300      	moveq	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	e00b      	b.n	8002676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	43da      	mvns	r2, r3
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	4013      	ands	r3, r2
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf14      	ite	ne
 8002670:	2301      	movne	r3, #1
 8002672:	2300      	moveq	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d016      	beq.n	80026a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	f043 0220 	orr.w	r2, r3, #32
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e021      	b.n	80026ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	0c1b      	lsrs	r3, r3, #16
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d10c      	bne.n	80026cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	43da      	mvns	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	4013      	ands	r3, r2
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf14      	ite	ne
 80026c4:	2301      	movne	r3, #1
 80026c6:	2300      	moveq	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	e00b      	b.n	80026e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	43da      	mvns	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4013      	ands	r3, r2
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	bf14      	ite	ne
 80026de:	2301      	movne	r3, #1
 80026e0:	2300      	moveq	r3, #0
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f47f af6d 	bne.w	80025c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002700:	e034      	b.n	800276c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 f886 	bl	8002814 <I2C_IsAcknowledgeFailed>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e034      	b.n	800277c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002718:	d028      	beq.n	800276c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271a:	f7ff f811 	bl	8001740 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	429a      	cmp	r2, r3
 8002728:	d302      	bcc.n	8002730 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d11d      	bne.n	800276c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800273a:	2b80      	cmp	r3, #128	@ 0x80
 800273c:	d016      	beq.n	800276c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	f043 0220 	orr.w	r2, r3, #32
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e007      	b.n	800277c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002776:	2b80      	cmp	r3, #128	@ 0x80
 8002778:	d1c3      	bne.n	8002702 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002790:	e034      	b.n	80027fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f83e 	bl	8002814 <I2C_IsAcknowledgeFailed>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e034      	b.n	800280c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a8:	d028      	beq.n	80027fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027aa:	f7fe ffc9 	bl	8001740 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d302      	bcc.n	80027c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d11d      	bne.n	80027fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d016      	beq.n	80027fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	f043 0220 	orr.w	r2, r3, #32
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e007      	b.n	800280c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b04      	cmp	r3, #4
 8002808:	d1c3      	bne.n	8002792 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800282a:	d11b      	bne.n	8002864 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002834:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002850:	f043 0204 	orr.w	r2, r3, #4
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0cc      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002888:	4b68      	ldr	r3, [pc, #416]	@ (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d90c      	bls.n	80028b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b65      	ldr	r3, [pc, #404]	@ (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289e:	4b63      	ldr	r3, [pc, #396]	@ (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0b8      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d020      	beq.n	80028fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c8:	4b59      	ldr	r3, [pc, #356]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4a58      	ldr	r2, [pc, #352]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028e0:	4b53      	ldr	r3, [pc, #332]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4a52      	ldr	r2, [pc, #328]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ec:	4b50      	ldr	r3, [pc, #320]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	494d      	ldr	r1, [pc, #308]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d044      	beq.n	8002994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d107      	bne.n	8002922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002912:	4b47      	ldr	r3, [pc, #284]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d119      	bne.n	8002952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e07f      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d003      	beq.n	8002932 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800292e:	2b03      	cmp	r3, #3
 8002930:	d107      	bne.n	8002942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002932:	4b3f      	ldr	r3, [pc, #252]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d109      	bne.n	8002952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e06f      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002942:	4b3b      	ldr	r3, [pc, #236]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e067      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002952:	4b37      	ldr	r3, [pc, #220]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f023 0203 	bic.w	r2, r3, #3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4934      	ldr	r1, [pc, #208]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	4313      	orrs	r3, r2
 8002962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002964:	f7fe feec 	bl	8001740 <HAL_GetTick>
 8002968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296a:	e00a      	b.n	8002982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800296c:	f7fe fee8 	bl	8001740 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e04f      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002982:	4b2b      	ldr	r3, [pc, #172]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 020c 	and.w	r2, r3, #12
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	429a      	cmp	r2, r3
 8002992:	d1eb      	bne.n	800296c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002994:	4b25      	ldr	r3, [pc, #148]	@ (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d20c      	bcs.n	80029bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b22      	ldr	r3, [pc, #136]	@ (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b20      	ldr	r3, [pc, #128]	@ (8002a2c <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e032      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c8:	4b19      	ldr	r3, [pc, #100]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4916      	ldr	r1, [pc, #88]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d009      	beq.n	80029fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029e6:	4b12      	ldr	r3, [pc, #72]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	490e      	ldr	r1, [pc, #56]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029fa:	f000 f873 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 80029fe:	4602      	mov	r2, r0
 8002a00:	4b0b      	ldr	r3, [pc, #44]	@ (8002a30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	490a      	ldr	r1, [pc, #40]	@ (8002a34 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	5ccb      	ldrb	r3, [r1, r3]
 8002a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a12:	4a09      	ldr	r2, [pc, #36]	@ (8002a38 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a16:	4b09      	ldr	r3, [pc, #36]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe fd7c 	bl	8001518 <HAL_InitTick>

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023c00 	.word	0x40023c00
 8002a30:	40023800 	.word	0x40023800
 8002a34:	08007d80 	.word	0x08007d80
 8002a38:	2000001c 	.word	0x2000001c
 8002a3c:	20000020 	.word	0x20000020

08002a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a44:	4b03      	ldr	r3, [pc, #12]	@ (8002a54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	2000001c 	.word	0x2000001c

08002a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a5c:	f7ff fff0 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4b05      	ldr	r3, [pc, #20]	@ (8002a78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	0a9b      	lsrs	r3, r3, #10
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	4903      	ldr	r1, [pc, #12]	@ (8002a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a6e:	5ccb      	ldrb	r3, [r1, r3]
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	08007d90 	.word	0x08007d90

08002a80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	220f      	movs	r2, #15
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a90:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <HAL_RCC_GetClockConfig+0x5c>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0203 	and.w	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002adc <HAL_RCC_GetClockConfig+0x5c>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <HAL_RCC_GetClockConfig+0x5c>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ab4:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <HAL_RCC_GetClockConfig+0x5c>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	08db      	lsrs	r3, r3, #3
 8002aba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ac2:	4b07      	ldr	r3, [pc, #28]	@ (8002ae0 <HAL_RCC_GetClockConfig+0x60>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 020f 	and.w	r2, r3, #15
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	601a      	str	r2, [r3, #0]
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40023c00 	.word	0x40023c00

08002ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae8:	b0ae      	sub	sp, #184	@ 0xb8
 8002aea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b0a:	4bcb      	ldr	r3, [pc, #812]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	f200 8206 	bhi.w	8002f24 <HAL_RCC_GetSysClockFreq+0x440>
 8002b18:	a201      	add	r2, pc, #4	@ (adr r2, 8002b20 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1e:	bf00      	nop
 8002b20:	08002b55 	.word	0x08002b55
 8002b24:	08002f25 	.word	0x08002f25
 8002b28:	08002f25 	.word	0x08002f25
 8002b2c:	08002f25 	.word	0x08002f25
 8002b30:	08002b5d 	.word	0x08002b5d
 8002b34:	08002f25 	.word	0x08002f25
 8002b38:	08002f25 	.word	0x08002f25
 8002b3c:	08002f25 	.word	0x08002f25
 8002b40:	08002b65 	.word	0x08002b65
 8002b44:	08002f25 	.word	0x08002f25
 8002b48:	08002f25 	.word	0x08002f25
 8002b4c:	08002f25 	.word	0x08002f25
 8002b50:	08002d55 	.word	0x08002d55
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b54:	4bb9      	ldr	r3, [pc, #740]	@ (8002e3c <HAL_RCC_GetSysClockFreq+0x358>)
 8002b56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b5a:	e1e7      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b5c:	4bb8      	ldr	r3, [pc, #736]	@ (8002e40 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b62:	e1e3      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b64:	4bb4      	ldr	r3, [pc, #720]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b70:	4bb1      	ldr	r3, [pc, #708]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d071      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b7c:	4bae      	ldr	r3, [pc, #696]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	099b      	lsrs	r3, r3, #6
 8002b82:	2200      	movs	r2, #0
 8002b84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b88:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002b8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002ba2:	4622      	mov	r2, r4
 8002ba4:	462b      	mov	r3, r5
 8002ba6:	f04f 0000 	mov.w	r0, #0
 8002baa:	f04f 0100 	mov.w	r1, #0
 8002bae:	0159      	lsls	r1, r3, #5
 8002bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb4:	0150      	lsls	r0, r2, #5
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4621      	mov	r1, r4
 8002bbc:	1a51      	subs	r1, r2, r1
 8002bbe:	6439      	str	r1, [r7, #64]	@ 0x40
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002bd4:	4649      	mov	r1, r9
 8002bd6:	018b      	lsls	r3, r1, #6
 8002bd8:	4641      	mov	r1, r8
 8002bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bde:	4641      	mov	r1, r8
 8002be0:	018a      	lsls	r2, r1, #6
 8002be2:	4641      	mov	r1, r8
 8002be4:	1a51      	subs	r1, r2, r1
 8002be6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002be8:	4649      	mov	r1, r9
 8002bea:	eb63 0301 	sbc.w	r3, r3, r1
 8002bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002bfc:	4649      	mov	r1, r9
 8002bfe:	00cb      	lsls	r3, r1, #3
 8002c00:	4641      	mov	r1, r8
 8002c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c06:	4641      	mov	r1, r8
 8002c08:	00ca      	lsls	r2, r1, #3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4622      	mov	r2, r4
 8002c12:	189b      	adds	r3, r3, r2
 8002c14:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c16:	462b      	mov	r3, r5
 8002c18:	460a      	mov	r2, r1
 8002c1a:	eb42 0303 	adc.w	r3, r2, r3
 8002c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	024b      	lsls	r3, r1, #9
 8002c30:	4621      	mov	r1, r4
 8002c32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c36:	4621      	mov	r1, r4
 8002c38:	024a      	lsls	r2, r1, #9
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c42:	2200      	movs	r2, #0
 8002c44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c4c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002c50:	f7fd faf0 	bl	8000234 <__aeabi_uldivmod>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4613      	mov	r3, r2
 8002c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c5e:	e067      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c60:	4b75      	ldr	r3, [pc, #468]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	099b      	lsrs	r3, r3, #6
 8002c66:	2200      	movs	r2, #0
 8002c68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c6c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002c70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c7e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002c82:	4622      	mov	r2, r4
 8002c84:	462b      	mov	r3, r5
 8002c86:	f04f 0000 	mov.w	r0, #0
 8002c8a:	f04f 0100 	mov.w	r1, #0
 8002c8e:	0159      	lsls	r1, r3, #5
 8002c90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c94:	0150      	lsls	r0, r2, #5
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4621      	mov	r1, r4
 8002c9c:	1a51      	subs	r1, r2, r1
 8002c9e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002cb4:	4649      	mov	r1, r9
 8002cb6:	018b      	lsls	r3, r1, #6
 8002cb8:	4641      	mov	r1, r8
 8002cba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cbe:	4641      	mov	r1, r8
 8002cc0:	018a      	lsls	r2, r1, #6
 8002cc2:	4641      	mov	r1, r8
 8002cc4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cc8:	4649      	mov	r1, r9
 8002cca:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cda:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ce2:	4692      	mov	sl, r2
 8002ce4:	469b      	mov	fp, r3
 8002ce6:	4623      	mov	r3, r4
 8002ce8:	eb1a 0303 	adds.w	r3, sl, r3
 8002cec:	623b      	str	r3, [r7, #32]
 8002cee:	462b      	mov	r3, r5
 8002cf0:	eb4b 0303 	adc.w	r3, fp, r3
 8002cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d02:	4629      	mov	r1, r5
 8002d04:	028b      	lsls	r3, r1, #10
 8002d06:	4621      	mov	r1, r4
 8002d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d0c:	4621      	mov	r1, r4
 8002d0e:	028a      	lsls	r2, r1, #10
 8002d10:	4610      	mov	r0, r2
 8002d12:	4619      	mov	r1, r3
 8002d14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d18:	2200      	movs	r2, #0
 8002d1a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d1c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d1e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002d22:	f7fd fa87 	bl	8000234 <__aeabi_uldivmod>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d30:	4b41      	ldr	r3, [pc, #260]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002d42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d52:	e0eb      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d54:	4b38      	ldr	r3, [pc, #224]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d60:	4b35      	ldr	r3, [pc, #212]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d06b      	beq.n	8002e44 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6c:	4b32      	ldr	r3, [pc, #200]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	099b      	lsrs	r3, r3, #6
 8002d72:	2200      	movs	r2, #0
 8002d74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d80:	2300      	movs	r3, #0
 8002d82:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d84:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002d88:	4622      	mov	r2, r4
 8002d8a:	462b      	mov	r3, r5
 8002d8c:	f04f 0000 	mov.w	r0, #0
 8002d90:	f04f 0100 	mov.w	r1, #0
 8002d94:	0159      	lsls	r1, r3, #5
 8002d96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d9a:	0150      	lsls	r0, r2, #5
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4621      	mov	r1, r4
 8002da2:	1a51      	subs	r1, r2, r1
 8002da4:	61b9      	str	r1, [r7, #24]
 8002da6:	4629      	mov	r1, r5
 8002da8:	eb63 0301 	sbc.w	r3, r3, r1
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002dba:	4659      	mov	r1, fp
 8002dbc:	018b      	lsls	r3, r1, #6
 8002dbe:	4651      	mov	r1, sl
 8002dc0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dc4:	4651      	mov	r1, sl
 8002dc6:	018a      	lsls	r2, r1, #6
 8002dc8:	4651      	mov	r1, sl
 8002dca:	ebb2 0801 	subs.w	r8, r2, r1
 8002dce:	4659      	mov	r1, fp
 8002dd0:	eb63 0901 	sbc.w	r9, r3, r1
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002de0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002de4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002de8:	4690      	mov	r8, r2
 8002dea:	4699      	mov	r9, r3
 8002dec:	4623      	mov	r3, r4
 8002dee:	eb18 0303 	adds.w	r3, r8, r3
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	462b      	mov	r3, r5
 8002df6:	eb49 0303 	adc.w	r3, r9, r3
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e08:	4629      	mov	r1, r5
 8002e0a:	024b      	lsls	r3, r1, #9
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e12:	4621      	mov	r1, r4
 8002e14:	024a      	lsls	r2, r1, #9
 8002e16:	4610      	mov	r0, r2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e1e:	2200      	movs	r2, #0
 8002e20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e22:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002e24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e28:	f7fd fa04 	bl	8000234 <__aeabi_uldivmod>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4613      	mov	r3, r2
 8002e32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e36:	e065      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x420>
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	00f42400 	.word	0x00f42400
 8002e40:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e44:	4b3d      	ldr	r3, [pc, #244]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x458>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	4611      	mov	r1, r2
 8002e50:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e54:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e56:	2300      	movs	r3, #0
 8002e58:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e5a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002e5e:	4642      	mov	r2, r8
 8002e60:	464b      	mov	r3, r9
 8002e62:	f04f 0000 	mov.w	r0, #0
 8002e66:	f04f 0100 	mov.w	r1, #0
 8002e6a:	0159      	lsls	r1, r3, #5
 8002e6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e70:	0150      	lsls	r0, r2, #5
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4641      	mov	r1, r8
 8002e78:	1a51      	subs	r1, r2, r1
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	4649      	mov	r1, r9
 8002e7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e90:	4659      	mov	r1, fp
 8002e92:	018b      	lsls	r3, r1, #6
 8002e94:	4651      	mov	r1, sl
 8002e96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e9a:	4651      	mov	r1, sl
 8002e9c:	018a      	lsls	r2, r1, #6
 8002e9e:	4651      	mov	r1, sl
 8002ea0:	1a54      	subs	r4, r2, r1
 8002ea2:	4659      	mov	r1, fp
 8002ea4:	eb63 0501 	sbc.w	r5, r3, r1
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	00eb      	lsls	r3, r5, #3
 8002eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eb6:	00e2      	lsls	r2, r4, #3
 8002eb8:	4614      	mov	r4, r2
 8002eba:	461d      	mov	r5, r3
 8002ebc:	4643      	mov	r3, r8
 8002ebe:	18e3      	adds	r3, r4, r3
 8002ec0:	603b      	str	r3, [r7, #0]
 8002ec2:	464b      	mov	r3, r9
 8002ec4:	eb45 0303 	adc.w	r3, r5, r3
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ed6:	4629      	mov	r1, r5
 8002ed8:	028b      	lsls	r3, r1, #10
 8002eda:	4621      	mov	r1, r4
 8002edc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	028a      	lsls	r2, r1, #10
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002eec:	2200      	movs	r2, #0
 8002eee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ef0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002ef2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ef6:	f7fd f99d 	bl	8000234 <__aeabi_uldivmod>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4613      	mov	r3, r2
 8002f00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f04:	4b0d      	ldr	r3, [pc, #52]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x458>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	0f1b      	lsrs	r3, r3, #28
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002f12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f22:	e003      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f24:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002f26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	37b8      	adds	r7, #184	@ 0xb8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	00f42400 	.word	0x00f42400

08002f44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e28d      	b.n	8003472 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 8083 	beq.w	800306a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f64:	4b94      	ldr	r3, [pc, #592]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d019      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f70:	4b91      	ldr	r3, [pc, #580]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d106      	bne.n	8002f8a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f7c:	4b8e      	ldr	r3, [pc, #568]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f88:	d00c      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f8a:	4b8b      	ldr	r3, [pc, #556]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f92:	2b0c      	cmp	r3, #12
 8002f94:	d112      	bne.n	8002fbc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f96:	4b88      	ldr	r3, [pc, #544]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fa2:	d10b      	bne.n	8002fbc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa4:	4b84      	ldr	r3, [pc, #528]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d05b      	beq.n	8003068 <HAL_RCC_OscConfig+0x124>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d157      	bne.n	8003068 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e25a      	b.n	8003472 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fc4:	d106      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x90>
 8002fc6:	4b7c      	ldr	r3, [pc, #496]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a7b      	ldr	r2, [pc, #492]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8002fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	e01d      	b.n	8003010 <HAL_RCC_OscConfig+0xcc>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0xb4>
 8002fde:	4b76      	ldr	r3, [pc, #472]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a75      	ldr	r2, [pc, #468]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8002fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	4b73      	ldr	r3, [pc, #460]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a72      	ldr	r2, [pc, #456]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8002ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e00b      	b.n	8003010 <HAL_RCC_OscConfig+0xcc>
 8002ff8:	4b6f      	ldr	r3, [pc, #444]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a6e      	ldr	r2, [pc, #440]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8002ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	4b6c      	ldr	r3, [pc, #432]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a6b      	ldr	r2, [pc, #428]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 800300a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800300e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d013      	beq.n	8003040 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7fe fb92 	bl	8001740 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003020:	f7fe fb8e 	bl	8001740 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	@ 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e21f      	b.n	8003472 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003032:	4b61      	ldr	r3, [pc, #388]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0xdc>
 800303e:	e014      	b.n	800306a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe fb7e 	bl	8001740 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003048:	f7fe fb7a 	bl	8001740 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	@ 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e20b      	b.n	8003472 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305a:	4b57      	ldr	r3, [pc, #348]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x104>
 8003066:	e000      	b.n	800306a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d06f      	beq.n	8003156 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003076:	4b50      	ldr	r3, [pc, #320]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b00      	cmp	r3, #0
 8003080:	d017      	beq.n	80030b2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003082:	4b4d      	ldr	r3, [pc, #308]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 030c 	and.w	r3, r3, #12
        || \
 800308a:	2b08      	cmp	r3, #8
 800308c:	d105      	bne.n	800309a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800308e:	4b4a      	ldr	r3, [pc, #296]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00b      	beq.n	80030b2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800309a:	4b47      	ldr	r3, [pc, #284]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d11c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030a6:	4b44      	ldr	r3, [pc, #272]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d116      	bne.n	80030e0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b2:	4b41      	ldr	r3, [pc, #260]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d005      	beq.n	80030ca <HAL_RCC_OscConfig+0x186>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d001      	beq.n	80030ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e1d3      	b.n	8003472 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ca:	4b3b      	ldr	r3, [pc, #236]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4937      	ldr	r1, [pc, #220]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030de:	e03a      	b.n	8003156 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d020      	beq.n	800312a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e8:	4b34      	ldr	r3, [pc, #208]	@ (80031bc <HAL_RCC_OscConfig+0x278>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ee:	f7fe fb27 	bl	8001740 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f6:	f7fe fb23 	bl	8001740 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e1b4      	b.n	8003472 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003108:	4b2b      	ldr	r3, [pc, #172]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003114:	4b28      	ldr	r3, [pc, #160]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4925      	ldr	r1, [pc, #148]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8003124:	4313      	orrs	r3, r2
 8003126:	600b      	str	r3, [r1, #0]
 8003128:	e015      	b.n	8003156 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312a:	4b24      	ldr	r3, [pc, #144]	@ (80031bc <HAL_RCC_OscConfig+0x278>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fe fb06 	bl	8001740 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003138:	f7fe fb02 	bl	8001740 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e193      	b.n	8003472 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314a:	4b1b      	ldr	r3, [pc, #108]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d036      	beq.n	80031d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d016      	beq.n	8003198 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316a:	4b15      	ldr	r3, [pc, #84]	@ (80031c0 <HAL_RCC_OscConfig+0x27c>)
 800316c:	2201      	movs	r2, #1
 800316e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003170:	f7fe fae6 	bl	8001740 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003178:	f7fe fae2 	bl	8001740 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e173      	b.n	8003472 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318a:	4b0b      	ldr	r3, [pc, #44]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 800318c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x234>
 8003196:	e01b      	b.n	80031d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003198:	4b09      	ldr	r3, [pc, #36]	@ (80031c0 <HAL_RCC_OscConfig+0x27c>)
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319e:	f7fe facf 	bl	8001740 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a4:	e00e      	b.n	80031c4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a6:	f7fe facb 	bl	8001740 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d907      	bls.n	80031c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e15c      	b.n	8003472 <HAL_RCC_OscConfig+0x52e>
 80031b8:	40023800 	.word	0x40023800
 80031bc:	42470000 	.word	0x42470000
 80031c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c4:	4b8a      	ldr	r3, [pc, #552]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 80031c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1ea      	bne.n	80031a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 8097 	beq.w	800330c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031de:	2300      	movs	r3, #0
 80031e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e2:	4b83      	ldr	r3, [pc, #524]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10f      	bne.n	800320e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	4b7f      	ldr	r3, [pc, #508]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	4a7e      	ldr	r2, [pc, #504]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 80031f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80031fe:	4b7c      	ldr	r3, [pc, #496]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320a:	2301      	movs	r3, #1
 800320c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320e:	4b79      	ldr	r3, [pc, #484]	@ (80033f4 <HAL_RCC_OscConfig+0x4b0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003216:	2b00      	cmp	r3, #0
 8003218:	d118      	bne.n	800324c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800321a:	4b76      	ldr	r3, [pc, #472]	@ (80033f4 <HAL_RCC_OscConfig+0x4b0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a75      	ldr	r2, [pc, #468]	@ (80033f4 <HAL_RCC_OscConfig+0x4b0>)
 8003220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003226:	f7fe fa8b 	bl	8001740 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322e:	f7fe fa87 	bl	8001740 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e118      	b.n	8003472 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003240:	4b6c      	ldr	r3, [pc, #432]	@ (80033f4 <HAL_RCC_OscConfig+0x4b0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d106      	bne.n	8003262 <HAL_RCC_OscConfig+0x31e>
 8003254:	4b66      	ldr	r3, [pc, #408]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 8003256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003258:	4a65      	ldr	r2, [pc, #404]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003260:	e01c      	b.n	800329c <HAL_RCC_OscConfig+0x358>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b05      	cmp	r3, #5
 8003268:	d10c      	bne.n	8003284 <HAL_RCC_OscConfig+0x340>
 800326a:	4b61      	ldr	r3, [pc, #388]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 800326c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326e:	4a60      	ldr	r2, [pc, #384]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 8003270:	f043 0304 	orr.w	r3, r3, #4
 8003274:	6713      	str	r3, [r2, #112]	@ 0x70
 8003276:	4b5e      	ldr	r3, [pc, #376]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327a:	4a5d      	ldr	r2, [pc, #372]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	6713      	str	r3, [r2, #112]	@ 0x70
 8003282:	e00b      	b.n	800329c <HAL_RCC_OscConfig+0x358>
 8003284:	4b5a      	ldr	r3, [pc, #360]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003288:	4a59      	ldr	r2, [pc, #356]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 800328a:	f023 0301 	bic.w	r3, r3, #1
 800328e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003290:	4b57      	ldr	r3, [pc, #348]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003294:	4a56      	ldr	r2, [pc, #344]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 8003296:	f023 0304 	bic.w	r3, r3, #4
 800329a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d015      	beq.n	80032d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a4:	f7fe fa4c 	bl	8001740 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ac:	f7fe fa48 	bl	8001740 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e0d7      	b.n	8003472 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c2:	4b4b      	ldr	r3, [pc, #300]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0ee      	beq.n	80032ac <HAL_RCC_OscConfig+0x368>
 80032ce:	e014      	b.n	80032fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d0:	f7fe fa36 	bl	8001740 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d8:	f7fe fa32 	bl	8001740 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e0c1      	b.n	8003472 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ee:	4b40      	ldr	r3, [pc, #256]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1ee      	bne.n	80032d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032fa:	7dfb      	ldrb	r3, [r7, #23]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d105      	bne.n	800330c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003300:	4b3b      	ldr	r3, [pc, #236]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 8003302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003304:	4a3a      	ldr	r2, [pc, #232]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 8003306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800330a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80ad 	beq.w	8003470 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003316:	4b36      	ldr	r3, [pc, #216]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b08      	cmp	r3, #8
 8003320:	d060      	beq.n	80033e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d145      	bne.n	80033b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332a:	4b33      	ldr	r3, [pc, #204]	@ (80033f8 <HAL_RCC_OscConfig+0x4b4>)
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fe fa06 	bl	8001740 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003338:	f7fe fa02 	bl	8001740 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e093      	b.n	8003472 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334a:	4b29      	ldr	r3, [pc, #164]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69da      	ldr	r2, [r3, #28]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003364:	019b      	lsls	r3, r3, #6
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336c:	085b      	lsrs	r3, r3, #1
 800336e:	3b01      	subs	r3, #1
 8003370:	041b      	lsls	r3, r3, #16
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003378:	061b      	lsls	r3, r3, #24
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003380:	071b      	lsls	r3, r3, #28
 8003382:	491b      	ldr	r1, [pc, #108]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 8003384:	4313      	orrs	r3, r2
 8003386:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003388:	4b1b      	ldr	r3, [pc, #108]	@ (80033f8 <HAL_RCC_OscConfig+0x4b4>)
 800338a:	2201      	movs	r2, #1
 800338c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338e:	f7fe f9d7 	bl	8001740 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003396:	f7fe f9d3 	bl	8001740 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e064      	b.n	8003472 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a8:	4b11      	ldr	r3, [pc, #68]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f0      	beq.n	8003396 <HAL_RCC_OscConfig+0x452>
 80033b4:	e05c      	b.n	8003470 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b6:	4b10      	ldr	r3, [pc, #64]	@ (80033f8 <HAL_RCC_OscConfig+0x4b4>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fe f9c0 	bl	8001740 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c4:	f7fe f9bc 	bl	8001740 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e04d      	b.n	8003472 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d6:	4b06      	ldr	r3, [pc, #24]	@ (80033f0 <HAL_RCC_OscConfig+0x4ac>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x480>
 80033e2:	e045      	b.n	8003470 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d107      	bne.n	80033fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e040      	b.n	8003472 <HAL_RCC_OscConfig+0x52e>
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40007000 	.word	0x40007000
 80033f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033fc:	4b1f      	ldr	r3, [pc, #124]	@ (800347c <HAL_RCC_OscConfig+0x538>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d030      	beq.n	800346c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003414:	429a      	cmp	r2, r3
 8003416:	d129      	bne.n	800346c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003422:	429a      	cmp	r2, r3
 8003424:	d122      	bne.n	800346c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800342c:	4013      	ands	r3, r2
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003432:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003434:	4293      	cmp	r3, r2
 8003436:	d119      	bne.n	800346c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003442:	085b      	lsrs	r3, r3, #1
 8003444:	3b01      	subs	r3, #1
 8003446:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003448:	429a      	cmp	r2, r3
 800344a:	d10f      	bne.n	800346c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003456:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003458:	429a      	cmp	r2, r3
 800345a:	d107      	bne.n	800346c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003466:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800

08003480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e041      	b.n	8003516 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f839 	bl	800351e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3304      	adds	r3, #4
 80034bc:	4619      	mov	r1, r3
 80034be:	4610      	mov	r0, r2
 80034c0:	f000 f9c0 	bl	8003844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b01      	cmp	r3, #1
 8003546:	d001      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e04e      	b.n	80035ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a23      	ldr	r2, [pc, #140]	@ (80035f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d022      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x80>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003576:	d01d      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x80>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1f      	ldr	r2, [pc, #124]	@ (80035fc <HAL_TIM_Base_Start_IT+0xc8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d018      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x80>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1e      	ldr	r2, [pc, #120]	@ (8003600 <HAL_TIM_Base_Start_IT+0xcc>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d013      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x80>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a1c      	ldr	r2, [pc, #112]	@ (8003604 <HAL_TIM_Base_Start_IT+0xd0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00e      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x80>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1b      	ldr	r2, [pc, #108]	@ (8003608 <HAL_TIM_Base_Start_IT+0xd4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d009      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x80>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a19      	ldr	r2, [pc, #100]	@ (800360c <HAL_TIM_Base_Start_IT+0xd8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d004      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x80>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a18      	ldr	r2, [pc, #96]	@ (8003610 <HAL_TIM_Base_Start_IT+0xdc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d111      	bne.n	80035d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b06      	cmp	r3, #6
 80035c4:	d010      	beq.n	80035e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 0201 	orr.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d6:	e007      	b.n	80035e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40010000 	.word	0x40010000
 80035fc:	40000400 	.word	0x40000400
 8003600:	40000800 	.word	0x40000800
 8003604:	40000c00 	.word	0x40000c00
 8003608:	40010400 	.word	0x40010400
 800360c:	40014000 	.word	0x40014000
 8003610:	40001800 	.word	0x40001800

08003614 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d020      	beq.n	8003678 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01b      	beq.n	8003678 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0202 	mvn.w	r2, #2
 8003648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f8d2 	bl	8003808 <HAL_TIM_IC_CaptureCallback>
 8003664:	e005      	b.n	8003672 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f8c4 	bl	80037f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f8d5 	bl	800381c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b00      	cmp	r3, #0
 8003680:	d020      	beq.n	80036c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01b      	beq.n	80036c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0204 	mvn.w	r2, #4
 8003694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2202      	movs	r2, #2
 800369a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f8ac 	bl	8003808 <HAL_TIM_IC_CaptureCallback>
 80036b0:	e005      	b.n	80036be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f89e 	bl	80037f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f8af 	bl	800381c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d020      	beq.n	8003710 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01b      	beq.n	8003710 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0208 	mvn.w	r2, #8
 80036e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2204      	movs	r2, #4
 80036e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f886 	bl	8003808 <HAL_TIM_IC_CaptureCallback>
 80036fc:	e005      	b.n	800370a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f878 	bl	80037f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f889 	bl	800381c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b00      	cmp	r3, #0
 8003718:	d020      	beq.n	800375c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01b      	beq.n	800375c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0210 	mvn.w	r2, #16
 800372c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2208      	movs	r2, #8
 8003732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f860 	bl	8003808 <HAL_TIM_IC_CaptureCallback>
 8003748:	e005      	b.n	8003756 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f852 	bl	80037f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f863 	bl	800381c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00c      	beq.n	8003780 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d007      	beq.n	8003780 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0201 	mvn.w	r2, #1
 8003778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fd fb82 	bl	8000e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00c      	beq.n	80037a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003790:	2b00      	cmp	r3, #0
 8003792:	d007      	beq.n	80037a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800379c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f906 	bl	80039b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00c      	beq.n	80037c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d007      	beq.n	80037c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f834 	bl	8003830 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f003 0320 	and.w	r3, r3, #32
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00c      	beq.n	80037ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0220 	mvn.w	r2, #32
 80037e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f8d8 	bl	800399c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037ec:	bf00      	nop
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a46      	ldr	r2, [pc, #280]	@ (8003970 <TIM_Base_SetConfig+0x12c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003862:	d00f      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a43      	ldr	r2, [pc, #268]	@ (8003974 <TIM_Base_SetConfig+0x130>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00b      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a42      	ldr	r2, [pc, #264]	@ (8003978 <TIM_Base_SetConfig+0x134>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d007      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a41      	ldr	r2, [pc, #260]	@ (800397c <TIM_Base_SetConfig+0x138>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a40      	ldr	r2, [pc, #256]	@ (8003980 <TIM_Base_SetConfig+0x13c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d108      	bne.n	8003896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800388a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a35      	ldr	r2, [pc, #212]	@ (8003970 <TIM_Base_SetConfig+0x12c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d02b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a4:	d027      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a32      	ldr	r2, [pc, #200]	@ (8003974 <TIM_Base_SetConfig+0x130>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d023      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a31      	ldr	r2, [pc, #196]	@ (8003978 <TIM_Base_SetConfig+0x134>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01f      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a30      	ldr	r2, [pc, #192]	@ (800397c <TIM_Base_SetConfig+0x138>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a2f      	ldr	r2, [pc, #188]	@ (8003980 <TIM_Base_SetConfig+0x13c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d017      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a2e      	ldr	r2, [pc, #184]	@ (8003984 <TIM_Base_SetConfig+0x140>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003988 <TIM_Base_SetConfig+0x144>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00f      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a2c      	ldr	r2, [pc, #176]	@ (800398c <TIM_Base_SetConfig+0x148>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003990 <TIM_Base_SetConfig+0x14c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003994 <TIM_Base_SetConfig+0x150>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d003      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a29      	ldr	r2, [pc, #164]	@ (8003998 <TIM_Base_SetConfig+0x154>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d108      	bne.n	8003908 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a10      	ldr	r2, [pc, #64]	@ (8003970 <TIM_Base_SetConfig+0x12c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d003      	beq.n	800393c <TIM_Base_SetConfig+0xf8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a12      	ldr	r2, [pc, #72]	@ (8003980 <TIM_Base_SetConfig+0x13c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d103      	bne.n	8003944 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b01      	cmp	r3, #1
 8003954:	d105      	bne.n	8003962 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f023 0201 	bic.w	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	611a      	str	r2, [r3, #16]
  }
}
 8003962:	bf00      	nop
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40010000 	.word	0x40010000
 8003974:	40000400 	.word	0x40000400
 8003978:	40000800 	.word	0x40000800
 800397c:	40000c00 	.word	0x40000c00
 8003980:	40010400 	.word	0x40010400
 8003984:	40014000 	.word	0x40014000
 8003988:	40014400 	.word	0x40014400
 800398c:	40014800 	.word	0x40014800
 8003990:	40001800 	.word	0x40001800
 8003994:	40001c00 	.word	0x40001c00
 8003998:	40002000 	.word	0x40002000

0800399c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <__NVIC_SetPriority>:
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	6039      	str	r1, [r7, #0]
 80039ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	db0a      	blt.n	80039ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	490c      	ldr	r1, [pc, #48]	@ (8003a10 <__NVIC_SetPriority+0x4c>)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	0112      	lsls	r2, r2, #4
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	440b      	add	r3, r1
 80039e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80039ec:	e00a      	b.n	8003a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4908      	ldr	r1, [pc, #32]	@ (8003a14 <__NVIC_SetPriority+0x50>)
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	3b04      	subs	r3, #4
 80039fc:	0112      	lsls	r2, r2, #4
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	440b      	add	r3, r1
 8003a02:	761a      	strb	r2, [r3, #24]
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000e100 	.word	0xe000e100
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003a1c:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <SysTick_Handler+0x1c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003a20:	f002 f8c4 	bl	8005bac <xTaskGetSchedulerState>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d001      	beq.n	8003a2e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003a2a:	f002 fef5 	bl	8006818 <xPortSysTickHandler>
  }
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	e000e010 	.word	0xe000e010

08003a38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	f06f 0004 	mvn.w	r0, #4
 8003a42:	f7ff ffbf 	bl	80039c4 <__NVIC_SetPriority>
#endif
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a52:	f3ef 8305 	mrs	r3, IPSR
 8003a56:	603b      	str	r3, [r7, #0]
  return(result);
 8003a58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a5e:	f06f 0305 	mvn.w	r3, #5
 8003a62:	607b      	str	r3, [r7, #4]
 8003a64:	e00c      	b.n	8003a80 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a66:	4b0a      	ldr	r3, [pc, #40]	@ (8003a90 <osKernelInitialize+0x44>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d105      	bne.n	8003a7a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a6e:	4b08      	ldr	r3, [pc, #32]	@ (8003a90 <osKernelInitialize+0x44>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	607b      	str	r3, [r7, #4]
 8003a78:	e002      	b.n	8003a80 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a80:	687b      	ldr	r3, [r7, #4]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	2000056c 	.word	0x2000056c

08003a94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a9a:	f3ef 8305 	mrs	r3, IPSR
 8003a9e:	603b      	str	r3, [r7, #0]
  return(result);
 8003aa0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <osKernelStart+0x1a>
    stat = osErrorISR;
 8003aa6:	f06f 0305 	mvn.w	r3, #5
 8003aaa:	607b      	str	r3, [r7, #4]
 8003aac:	e010      	b.n	8003ad0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003aae:	4b0b      	ldr	r3, [pc, #44]	@ (8003adc <osKernelStart+0x48>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d109      	bne.n	8003aca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003ab6:	f7ff ffbf 	bl	8003a38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003aba:	4b08      	ldr	r3, [pc, #32]	@ (8003adc <osKernelStart+0x48>)
 8003abc:	2202      	movs	r2, #2
 8003abe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ac0:	f001 fb6e 	bl	80051a0 <vTaskStartScheduler>
      stat = osOK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	e002      	b.n	8003ad0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003aca:	f04f 33ff 	mov.w	r3, #4294967295
 8003ace:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ad0:	687b      	ldr	r3, [r7, #4]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	2000056c 	.word	0x2000056c

08003ae0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08e      	sub	sp, #56	@ 0x38
 8003ae4:	af04      	add	r7, sp, #16
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003af0:	f3ef 8305 	mrs	r3, IPSR
 8003af4:	617b      	str	r3, [r7, #20]
  return(result);
 8003af6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d17e      	bne.n	8003bfa <osThreadNew+0x11a>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d07b      	beq.n	8003bfa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003b02:	2380      	movs	r3, #128	@ 0x80
 8003b04:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003b06:	2318      	movs	r3, #24
 8003b08:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d045      	beq.n	8003ba6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <osThreadNew+0x48>
        name = attr->name;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <osThreadNew+0x6e>
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	2b38      	cmp	r3, #56	@ 0x38
 8003b40:	d805      	bhi.n	8003b4e <osThreadNew+0x6e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <osThreadNew+0x72>
        return (NULL);
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e054      	b.n	8003bfc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	089b      	lsrs	r3, r3, #2
 8003b60:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00e      	beq.n	8003b88 <osThreadNew+0xa8>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	2ba7      	cmp	r3, #167	@ 0xa7
 8003b70:	d90a      	bls.n	8003b88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d006      	beq.n	8003b88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <osThreadNew+0xa8>
        mem = 1;
 8003b82:	2301      	movs	r3, #1
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	e010      	b.n	8003baa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10c      	bne.n	8003baa <osThreadNew+0xca>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d108      	bne.n	8003baa <osThreadNew+0xca>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d104      	bne.n	8003baa <osThreadNew+0xca>
          mem = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61bb      	str	r3, [r7, #24]
 8003ba4:	e001      	b.n	8003baa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d110      	bne.n	8003bd2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bb8:	9202      	str	r2, [sp, #8]
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	6a3a      	ldr	r2, [r7, #32]
 8003bc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f001 f8f6 	bl	8004db8 <xTaskCreateStatic>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	e013      	b.n	8003bfa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d110      	bne.n	8003bfa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	f107 0310 	add.w	r3, r7, #16
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f001 f944 	bl	8004e78 <xTaskCreate>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d001      	beq.n	8003bfa <osThreadNew+0x11a>
            hTask = NULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003bfa:	693b      	ldr	r3, [r7, #16]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3728      	adds	r7, #40	@ 0x28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c0c:	f3ef 8305 	mrs	r3, IPSR
 8003c10:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c12:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <osDelay+0x1c>
    stat = osErrorISR;
 8003c18:	f06f 0305 	mvn.w	r3, #5
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	e007      	b.n	8003c30 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f001 fa82 	bl	8005134 <vTaskDelay>
    }
  }

  return (stat);
 8003c30:	68fb      	ldr	r3, [r7, #12]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b086      	sub	sp, #24
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c46:	f3ef 8305 	mrs	r3, IPSR
 8003c4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c4c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d12d      	bne.n	8003cae <osEventFlagsNew+0x74>
    mem = -1;
 8003c52:	f04f 33ff 	mov.w	r3, #4294967295
 8003c56:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d015      	beq.n	8003c8a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d006      	beq.n	8003c74 <osEventFlagsNew+0x3a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	2b1f      	cmp	r3, #31
 8003c6c:	d902      	bls.n	8003c74 <osEventFlagsNew+0x3a>
        mem = 1;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	e00c      	b.n	8003c8e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d108      	bne.n	8003c8e <osEventFlagsNew+0x54>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d104      	bne.n	8003c8e <osEventFlagsNew+0x54>
          mem = 0;
 8003c84:	2300      	movs	r3, #0
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	e001      	b.n	8003c8e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d106      	bne.n	8003ca2 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 f8e9 	bl	8003e70 <xEventGroupCreateStatic>
 8003c9e:	6178      	str	r0, [r7, #20]
 8003ca0:	e005      	b.n	8003cae <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d102      	bne.n	8003cae <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8003ca8:	f000 f91b 	bl	8003ee2 <xEventGroupCreate>
 8003cac:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8003cae:	697b      	ldr	r3, [r7, #20]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <osEventFlagsSet+0x1c>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cd2:	d303      	bcc.n	8003cdc <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8003cd4:	f06f 0303 	mvn.w	r3, #3
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	e028      	b.n	8003d2e <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cdc:	f3ef 8305 	mrs	r3, IPSR
 8003ce0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01d      	beq.n	8003d24 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8003cec:	f107 0308 	add.w	r3, r7, #8
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	6839      	ldr	r1, [r7, #0]
 8003cf4:	6938      	ldr	r0, [r7, #16]
 8003cf6:	f000 fa9d 	bl	8004234 <xEventGroupSetBitsFromISR>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d103      	bne.n	8003d08 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8003d00:	f06f 0302 	mvn.w	r3, #2
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	e012      	b.n	8003d2e <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00d      	beq.n	8003d2e <osEventFlagsSet+0x76>
 8003d12:	4b09      	ldr	r3, [pc, #36]	@ (8003d38 <osEventFlagsSet+0x80>)
 8003d14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	e004      	b.n	8003d2e <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8003d24:	6839      	ldr	r1, [r7, #0]
 8003d26:	6938      	ldr	r0, [r7, #16]
 8003d28:	f000 f9c8 	bl	80040bc <xEventGroupSetBits>
 8003d2c:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8003d2e:	697b      	ldr	r3, [r7, #20]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	e000ed04 	.word	0xe000ed04

08003d3c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08c      	sub	sp, #48	@ 0x30
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <osEventFlagsWait+0x20>
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d5a:	d303      	bcc.n	8003d64 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8003d5c:	f06f 0303 	mvn.w	r3, #3
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	e04b      	b.n	8003dfc <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d64:	f3ef 8305 	mrs	r3, IPSR
 8003d68:	617b      	str	r3, [r7, #20]
  return(result);
 8003d6a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8003d70:	f06f 0305 	mvn.w	r3, #5
 8003d74:	61fb      	str	r3, [r7, #28]
 8003d76:	e041      	b.n	8003dfc <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8003d82:	2301      	movs	r3, #1
 8003d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d86:	e001      	b.n	8003d8c <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	623b      	str	r3, [r7, #32]
 8003d9a:	e001      	b.n	8003da0 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da6:	6a3a      	ldr	r2, [r7, #32]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	69b8      	ldr	r0, [r7, #24]
 8003dac:	f000 f8b4 	bl	8003f18 <xEventGroupWaitBits>
 8003db0:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d010      	beq.n	8003dde <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d019      	beq.n	8003dfc <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8003dce:	f06f 0301 	mvn.w	r3, #1
 8003dd2:	61fb      	str	r3, [r7, #28]
 8003dd4:	e012      	b.n	8003dfc <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003dd6:	f06f 0302 	mvn.w	r3, #2
 8003dda:	61fb      	str	r3, [r7, #28]
 8003ddc:	e00e      	b.n	8003dfc <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	4013      	ands	r3, r2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d109      	bne.n	8003dfc <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8003dee:	f06f 0301 	mvn.w	r3, #1
 8003df2:	61fb      	str	r3, [r7, #28]
 8003df4:	e002      	b.n	8003dfc <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003df6:	f06f 0302 	mvn.w	r3, #2
 8003dfa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8003dfc:	69fb      	ldr	r3, [r7, #28]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3728      	adds	r7, #40	@ 0x28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4a07      	ldr	r2, [pc, #28]	@ (8003e34 <vApplicationGetIdleTaskMemory+0x2c>)
 8003e18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	4a06      	ldr	r2, [pc, #24]	@ (8003e38 <vApplicationGetIdleTaskMemory+0x30>)
 8003e1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2280      	movs	r2, #128	@ 0x80
 8003e24:	601a      	str	r2, [r3, #0]
}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	20000570 	.word	0x20000570
 8003e38:	20000618 	.word	0x20000618

08003e3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4a07      	ldr	r2, [pc, #28]	@ (8003e68 <vApplicationGetTimerTaskMemory+0x2c>)
 8003e4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4a06      	ldr	r2, [pc, #24]	@ (8003e6c <vApplicationGetTimerTaskMemory+0x30>)
 8003e52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e5a:	601a      	str	r2, [r3, #0]
}
 8003e5c:	bf00      	nop
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	20000818 	.word	0x20000818
 8003e6c:	200008c0 	.word	0x200008c0

08003e70 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10b      	bne.n	8003e96 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
 8003e94:	e7fd      	b.n	8003e92 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8003e96:	2320      	movs	r3, #32
 8003e98:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d00b      	beq.n	8003eb8 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	60fb      	str	r3, [r7, #12]
}
 8003eb2:	bf00      	nop
 8003eb4:	bf00      	nop
 8003eb6:	e7fd      	b.n	8003eb4 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 f9c5 	bl	800425c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8003ed8:	697b      	ldr	r3, [r7, #20]
	}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8003ee8:	2020      	movs	r0, #32
 8003eea:	f002 fd27 	bl	800693c <pvPortMalloc>
 8003eee:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 f9ab 	bl	800425c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8003f0c:	687b      	ldr	r3, [r7, #4]
	}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b090      	sub	sp, #64	@ 0x40
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10b      	bne.n	8003f50 <xEventGroupWaitBits+0x38>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	623b      	str	r3, [r7, #32]
}
 8003f4a:	bf00      	nop
 8003f4c:	bf00      	nop
 8003f4e:	e7fd      	b.n	8003f4c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f56:	d30b      	bcc.n	8003f70 <xEventGroupWaitBits+0x58>
	__asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	61fb      	str	r3, [r7, #28]
}
 8003f6a:	bf00      	nop
 8003f6c:	bf00      	nop
 8003f6e:	e7fd      	b.n	8003f6c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10b      	bne.n	8003f8e <xEventGroupWaitBits+0x76>
	__asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	61bb      	str	r3, [r7, #24]
}
 8003f88:	bf00      	nop
 8003f8a:	bf00      	nop
 8003f8c:	e7fd      	b.n	8003f8a <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f8e:	f001 fe0d 	bl	8005bac <xTaskGetSchedulerState>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d102      	bne.n	8003f9e <xEventGroupWaitBits+0x86>
 8003f98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <xEventGroupWaitBits+0x8a>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <xEventGroupWaitBits+0x8c>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10b      	bne.n	8003fc0 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8003fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	617b      	str	r3, [r7, #20]
}
 8003fba:	bf00      	nop
 8003fbc:	bf00      	nop
 8003fbe:	e7fd      	b.n	8003fbc <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8003fc0:	f001 f95e 	bl	8005280 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8003fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fd0:	f000 f90d 	bl	80041ee <prvTestWaitCondition>
 8003fd4:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8003fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00e      	beq.n	8003ffa <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8003fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d028      	beq.n	800403c <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	401a      	ands	r2, r3
 8003ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	e020      	b.n	800403c <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8003ffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d104      	bne.n	800400a <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004002:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8004004:	2301      	movs	r3, #1
 8004006:	633b      	str	r3, [r7, #48]	@ 0x30
 8004008:	e018      	b.n	800403c <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004012:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004016:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800401e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004020:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004024:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004028:	1d18      	adds	r0, r3, #4
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402e:	4313      	orrs	r3, r2
 8004030:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004032:	4619      	mov	r1, r3
 8004034:	f001 fb26 	bl	8005684 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004038:	2300      	movs	r3, #0
 800403a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800403c:	f001 f92e 	bl	800529c <xTaskResumeAll>
 8004040:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004044:	2b00      	cmp	r3, #0
 8004046:	d031      	beq.n	80040ac <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8004048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404a:	2b00      	cmp	r3, #0
 800404c:	d107      	bne.n	800405e <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800404e:	4b1a      	ldr	r3, [pc, #104]	@ (80040b8 <xEventGroupWaitBits+0x1a0>)
 8004050:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800405e:	f001 fe33 	bl	8005cc8 <uxTaskResetEventItemValue>
 8004062:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d11a      	bne.n	80040a4 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800406e:	f002 fb43 	bl	80066f8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800407e:	f000 f8b6 	bl	80041ee <prvTestWaitCondition>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d009      	beq.n	800409c <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d006      	beq.n	800409c <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800408e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	43db      	mvns	r3, r3
 8004096:	401a      	ands	r2, r3
 8004098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409a:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800409c:	2301      	movs	r3, #1
 800409e:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 80040a0:	f002 fb5c 	bl	800675c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80040a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040a6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80040aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80040ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3740      	adds	r7, #64	@ 0x40
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	e000ed04 	.word	0xe000ed04

080040bc <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08e      	sub	sp, #56	@ 0x38
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80040c6:	2300      	movs	r3, #0
 80040c8:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80040ce:	2300      	movs	r3, #0
 80040d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10b      	bne.n	80040f0 <xEventGroupSetBits+0x34>
	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	613b      	str	r3, [r7, #16]
}
 80040ea:	bf00      	nop
 80040ec:	bf00      	nop
 80040ee:	e7fd      	b.n	80040ec <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040f6:	d30b      	bcc.n	8004110 <xEventGroupSetBits+0x54>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	60fb      	str	r3, [r7, #12]
}
 800410a:	bf00      	nop
 800410c:	bf00      	nop
 800410e:	e7fd      	b.n	800410c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004112:	3304      	adds	r3, #4
 8004114:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	3308      	adds	r3, #8
 800411a:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800411c:	f001 f8b0 	bl	8005280 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	431a      	orrs	r2, r3
 800412e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004130:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004132:	e03c      	b.n	80041ae <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800413a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004140:	2300      	movs	r3, #0
 8004142:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800414a:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004152:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d108      	bne.n	8004170 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800415e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	4013      	ands	r3, r2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00b      	beq.n	8004182 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800416a:	2301      	movs	r3, #1
 800416c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800416e:	e008      	b.n	8004182 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	4013      	ands	r3, r2
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	429a      	cmp	r2, r3
 800417c:	d101      	bne.n	8004182 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800417e:	2301      	movs	r3, #1
 8004180:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004184:	2b00      	cmp	r3, #0
 8004186:	d010      	beq.n	80041aa <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	4313      	orrs	r3, r2
 8004198:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800419a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041a2:	4619      	mov	r1, r3
 80041a4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80041a6:	f001 fb3b 	bl	8005820 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 80041ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d1be      	bne.n	8004134 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80041b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041bc:	43db      	mvns	r3, r3
 80041be:	401a      	ands	r2, r3
 80041c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c2:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80041c4:	f001 f86a 	bl	800529c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80041c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ca:	681b      	ldr	r3, [r3, #0]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3738      	adds	r7, #56	@ 0x38
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80041de:	6839      	ldr	r1, [r7, #0]
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff ff6b 	bl	80040bc <xEventGroupSetBits>
}
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80041ee:	b480      	push	{r7}
 80041f0:	b087      	sub	sp, #28
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d107      	bne.n	8004214 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	4013      	ands	r3, r2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800420e:	2301      	movs	r3, #1
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	e007      	b.n	8004224 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	4013      	ands	r3, r2
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	429a      	cmp	r2, r3
 800421e:	d101      	bne.n	8004224 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004220:	2301      	movs	r3, #1
 8004222:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004224:	697b      	ldr	r3, [r7, #20]
}
 8004226:	4618      	mov	r0, r3
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
	...

08004234 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	68f9      	ldr	r1, [r7, #12]
 8004246:	4804      	ldr	r0, [pc, #16]	@ (8004258 <xEventGroupSetBitsFromISR+0x24>)
 8004248:	f002 f904 	bl	8006454 <xTimerPendFunctionCallFromISR>
 800424c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800424e:	697b      	ldr	r3, [r7, #20]
	}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	080041d5 	.word	0x080041d5

0800425c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f103 0208 	add.w	r2, r3, #8
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f04f 32ff 	mov.w	r2, #4294967295
 8004274:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f103 0208 	add.w	r2, r3, #8
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f103 0208 	add.w	r2, r3, #8
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042b6:	b480      	push	{r7}
 80042b8:	b085      	sub	sp, #20
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	601a      	str	r2, [r3, #0]
}
 80042f2:	bf00      	nop
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042fe:	b480      	push	{r7}
 8004300:	b085      	sub	sp, #20
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004314:	d103      	bne.n	800431e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	e00c      	b.n	8004338 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3308      	adds	r3, #8
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	e002      	b.n	800432c <vListInsert+0x2e>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	429a      	cmp	r2, r3
 8004336:	d2f6      	bcs.n	8004326 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	601a      	str	r2, [r3, #0]
}
 8004364:	bf00      	nop
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6892      	ldr	r2, [r2, #8]
 8004386:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6852      	ldr	r2, [r2, #4]
 8004390:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	429a      	cmp	r2, r3
 800439a:	d103      	bne.n	80043a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	1e5a      	subs	r2, r3, #1
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10b      	bne.n	80043f0 <xQueueGenericReset+0x2c>
	__asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	60bb      	str	r3, [r7, #8]
}
 80043ea:	bf00      	nop
 80043ec:	bf00      	nop
 80043ee:	e7fd      	b.n	80043ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80043f0:	f002 f982 	bl	80066f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043fc:	68f9      	ldr	r1, [r7, #12]
 80043fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004400:	fb01 f303 	mul.w	r3, r1, r3
 8004404:	441a      	add	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004420:	3b01      	subs	r3, #1
 8004422:	68f9      	ldr	r1, [r7, #12]
 8004424:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004426:	fb01 f303 	mul.w	r3, r1, r3
 800442a:	441a      	add	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	22ff      	movs	r2, #255	@ 0xff
 8004434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	22ff      	movs	r2, #255	@ 0xff
 800443c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d114      	bne.n	8004470 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d01a      	beq.n	8004484 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3310      	adds	r3, #16
 8004452:	4618      	mov	r0, r3
 8004454:	f001 f980 	bl	8005758 <xTaskRemoveFromEventList>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d012      	beq.n	8004484 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800445e:	4b0d      	ldr	r3, [pc, #52]	@ (8004494 <xQueueGenericReset+0xd0>)
 8004460:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	e009      	b.n	8004484 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	3310      	adds	r3, #16
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fef1 	bl	800425c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3324      	adds	r3, #36	@ 0x24
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff feec 	bl	800425c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004484:	f002 f96a 	bl	800675c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004488:	2301      	movs	r3, #1
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	e000ed04 	.word	0xe000ed04

08004498 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08e      	sub	sp, #56	@ 0x38
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10b      	bne.n	80044c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80044ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80044be:	bf00      	nop
 80044c0:	bf00      	nop
 80044c2:	e7fd      	b.n	80044c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10b      	bne.n	80044e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80044dc:	bf00      	nop
 80044de:	bf00      	nop
 80044e0:	e7fd      	b.n	80044de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <xQueueGenericCreateStatic+0x56>
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <xQueueGenericCreateStatic+0x5a>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e000      	b.n	80044f4 <xQueueGenericCreateStatic+0x5c>
 80044f2:	2300      	movs	r3, #0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10b      	bne.n	8004510 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80044f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	623b      	str	r3, [r7, #32]
}
 800450a:	bf00      	nop
 800450c:	bf00      	nop
 800450e:	e7fd      	b.n	800450c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d102      	bne.n	800451c <xQueueGenericCreateStatic+0x84>
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <xQueueGenericCreateStatic+0x88>
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <xQueueGenericCreateStatic+0x8a>
 8004520:	2300      	movs	r3, #0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10b      	bne.n	800453e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	61fb      	str	r3, [r7, #28]
}
 8004538:	bf00      	nop
 800453a:	bf00      	nop
 800453c:	e7fd      	b.n	800453a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800453e:	2350      	movs	r3, #80	@ 0x50
 8004540:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b50      	cmp	r3, #80	@ 0x50
 8004546:	d00b      	beq.n	8004560 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	61bb      	str	r3, [r7, #24]
}
 800455a:	bf00      	nop
 800455c:	bf00      	nop
 800455e:	e7fd      	b.n	800455c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004560:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00d      	beq.n	8004588 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800456c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004574:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	68b9      	ldr	r1, [r7, #8]
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 f805 	bl	8004592 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800458a:	4618      	mov	r0, r3
 800458c:	3730      	adds	r7, #48	@ 0x30
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	607a      	str	r2, [r7, #4]
 800459e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d103      	bne.n	80045ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	e002      	b.n	80045b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045c0:	2101      	movs	r1, #1
 80045c2:	69b8      	ldr	r0, [r7, #24]
 80045c4:	f7ff fefe 	bl	80043c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	78fa      	ldrb	r2, [r7, #3]
 80045cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045d0:	bf00      	nop
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08e      	sub	sp, #56	@ 0x38
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045e6:	2300      	movs	r3, #0
 80045e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80045ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10b      	bne.n	800460c <xQueueGenericSend+0x34>
	__asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004606:	bf00      	nop
 8004608:	bf00      	nop
 800460a:	e7fd      	b.n	8004608 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d103      	bne.n	800461a <xQueueGenericSend+0x42>
 8004612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <xQueueGenericSend+0x46>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <xQueueGenericSend+0x48>
 800461e:	2300      	movs	r3, #0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10b      	bne.n	800463c <xQueueGenericSend+0x64>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004636:	bf00      	nop
 8004638:	bf00      	nop
 800463a:	e7fd      	b.n	8004638 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d103      	bne.n	800464a <xQueueGenericSend+0x72>
 8004642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <xQueueGenericSend+0x76>
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <xQueueGenericSend+0x78>
 800464e:	2300      	movs	r3, #0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10b      	bne.n	800466c <xQueueGenericSend+0x94>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	623b      	str	r3, [r7, #32]
}
 8004666:	bf00      	nop
 8004668:	bf00      	nop
 800466a:	e7fd      	b.n	8004668 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800466c:	f001 fa9e 	bl	8005bac <xTaskGetSchedulerState>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d102      	bne.n	800467c <xQueueGenericSend+0xa4>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <xQueueGenericSend+0xa8>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <xQueueGenericSend+0xaa>
 8004680:	2300      	movs	r3, #0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10b      	bne.n	800469e <xQueueGenericSend+0xc6>
	__asm volatile
 8004686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	61fb      	str	r3, [r7, #28]
}
 8004698:	bf00      	nop
 800469a:	bf00      	nop
 800469c:	e7fd      	b.n	800469a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800469e:	f002 f82b 	bl	80066f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d302      	bcc.n	80046b4 <xQueueGenericSend+0xdc>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d129      	bne.n	8004708 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	68b9      	ldr	r1, [r7, #8]
 80046b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046ba:	f000 fa0f 	bl	8004adc <prvCopyDataToQueue>
 80046be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d010      	beq.n	80046ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ca:	3324      	adds	r3, #36	@ 0x24
 80046cc:	4618      	mov	r0, r3
 80046ce:	f001 f843 	bl	8005758 <xTaskRemoveFromEventList>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d013      	beq.n	8004700 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046d8:	4b3f      	ldr	r3, [pc, #252]	@ (80047d8 <xQueueGenericSend+0x200>)
 80046da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	e00a      	b.n	8004700 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80046ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d007      	beq.n	8004700 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046f0:	4b39      	ldr	r3, [pc, #228]	@ (80047d8 <xQueueGenericSend+0x200>)
 80046f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004700:	f002 f82c 	bl	800675c <vPortExitCritical>
				return pdPASS;
 8004704:	2301      	movs	r3, #1
 8004706:	e063      	b.n	80047d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d103      	bne.n	8004716 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800470e:	f002 f825 	bl	800675c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004712:	2300      	movs	r3, #0
 8004714:	e05c      	b.n	80047d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004718:	2b00      	cmp	r3, #0
 800471a:	d106      	bne.n	800472a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800471c:	f107 0314 	add.w	r3, r7, #20
 8004720:	4618      	mov	r0, r3
 8004722:	f001 f8e1 	bl	80058e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004726:	2301      	movs	r3, #1
 8004728:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800472a:	f002 f817 	bl	800675c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800472e:	f000 fda7 	bl	8005280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004732:	f001 ffe1 	bl	80066f8 <vPortEnterCritical>
 8004736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004738:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800473c:	b25b      	sxtb	r3, r3
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004742:	d103      	bne.n	800474c <xQueueGenericSend+0x174>
 8004744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800474c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004752:	b25b      	sxtb	r3, r3
 8004754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004758:	d103      	bne.n	8004762 <xQueueGenericSend+0x18a>
 800475a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004762:	f001 fffb 	bl	800675c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004766:	1d3a      	adds	r2, r7, #4
 8004768:	f107 0314 	add.w	r3, r7, #20
 800476c:	4611      	mov	r1, r2
 800476e:	4618      	mov	r0, r3
 8004770:	f001 f8d0 	bl	8005914 <xTaskCheckForTimeOut>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d124      	bne.n	80047c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800477a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800477c:	f000 faa6 	bl	8004ccc <prvIsQueueFull>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d018      	beq.n	80047b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004788:	3310      	adds	r3, #16
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	4611      	mov	r1, r2
 800478e:	4618      	mov	r0, r3
 8004790:	f000 ff52 	bl	8005638 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004794:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004796:	f000 fa31 	bl	8004bfc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800479a:	f000 fd7f 	bl	800529c <xTaskResumeAll>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f47f af7c 	bne.w	800469e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80047a6:	4b0c      	ldr	r3, [pc, #48]	@ (80047d8 <xQueueGenericSend+0x200>)
 80047a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	e772      	b.n	800469e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047ba:	f000 fa1f 	bl	8004bfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047be:	f000 fd6d 	bl	800529c <xTaskResumeAll>
 80047c2:	e76c      	b.n	800469e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047c6:	f000 fa19 	bl	8004bfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047ca:	f000 fd67 	bl	800529c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3738      	adds	r7, #56	@ 0x38
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	e000ed04 	.word	0xe000ed04

080047dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b090      	sub	sp, #64	@ 0x40
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80047ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10b      	bne.n	800480c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004806:	bf00      	nop
 8004808:	bf00      	nop
 800480a:	e7fd      	b.n	8004808 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d103      	bne.n	800481a <xQueueGenericSendFromISR+0x3e>
 8004812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <xQueueGenericSendFromISR+0x42>
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <xQueueGenericSendFromISR+0x44>
 800481e:	2300      	movs	r3, #0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10b      	bne.n	800483c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004836:	bf00      	nop
 8004838:	bf00      	nop
 800483a:	e7fd      	b.n	8004838 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d103      	bne.n	800484a <xQueueGenericSendFromISR+0x6e>
 8004842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004846:	2b01      	cmp	r3, #1
 8004848:	d101      	bne.n	800484e <xQueueGenericSendFromISR+0x72>
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <xQueueGenericSendFromISR+0x74>
 800484e:	2300      	movs	r3, #0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10b      	bne.n	800486c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004858:	f383 8811 	msr	BASEPRI, r3
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	623b      	str	r3, [r7, #32]
}
 8004866:	bf00      	nop
 8004868:	bf00      	nop
 800486a:	e7fd      	b.n	8004868 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800486c:	f002 f824 	bl	80068b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004870:	f3ef 8211 	mrs	r2, BASEPRI
 8004874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	61fa      	str	r2, [r7, #28]
 8004886:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004888:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800488a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800488c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800488e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004894:	429a      	cmp	r2, r3
 8004896:	d302      	bcc.n	800489e <xQueueGenericSendFromISR+0xc2>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b02      	cmp	r3, #2
 800489c:	d12f      	bne.n	80048fe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800489e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	68b9      	ldr	r1, [r7, #8]
 80048b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80048b4:	f000 f912 	bl	8004adc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048b8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d112      	bne.n	80048e8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d016      	beq.n	80048f8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048cc:	3324      	adds	r3, #36	@ 0x24
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 ff42 	bl	8005758 <xTaskRemoveFromEventList>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00e      	beq.n	80048f8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00b      	beq.n	80048f8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	e007      	b.n	80048f8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80048ec:	3301      	adds	r3, #1
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	b25a      	sxtb	r2, r3
 80048f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80048f8:	2301      	movs	r3, #1
 80048fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80048fc:	e001      	b.n	8004902 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048fe:	2300      	movs	r3, #0
 8004900:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004904:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800490c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800490e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004910:	4618      	mov	r0, r3
 8004912:	3740      	adds	r7, #64	@ 0x40
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08c      	sub	sp, #48	@ 0x30
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004924:	2300      	movs	r3, #0
 8004926:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800492c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10b      	bne.n	800494a <xQueueReceive+0x32>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	623b      	str	r3, [r7, #32]
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	e7fd      	b.n	8004946 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d103      	bne.n	8004958 <xQueueReceive+0x40>
 8004950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <xQueueReceive+0x44>
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <xQueueReceive+0x46>
 800495c:	2300      	movs	r3, #0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10b      	bne.n	800497a <xQueueReceive+0x62>
	__asm volatile
 8004962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	61fb      	str	r3, [r7, #28]
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop
 8004978:	e7fd      	b.n	8004976 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800497a:	f001 f917 	bl	8005bac <xTaskGetSchedulerState>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d102      	bne.n	800498a <xQueueReceive+0x72>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <xQueueReceive+0x76>
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <xQueueReceive+0x78>
 800498e:	2300      	movs	r3, #0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10b      	bne.n	80049ac <xQueueReceive+0x94>
	__asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	61bb      	str	r3, [r7, #24]
}
 80049a6:	bf00      	nop
 80049a8:	bf00      	nop
 80049aa:	e7fd      	b.n	80049a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049ac:	f001 fea4 	bl	80066f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01f      	beq.n	80049fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049bc:	68b9      	ldr	r1, [r7, #8]
 80049be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049c0:	f000 f8f6 	bl	8004bb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c6:	1e5a      	subs	r2, r3, #1
 80049c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00f      	beq.n	80049f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d6:	3310      	adds	r3, #16
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 febd 	bl	8005758 <xTaskRemoveFromEventList>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d007      	beq.n	80049f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049e4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ad8 <xQueueReceive+0x1c0>)
 80049e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049f4:	f001 feb2 	bl	800675c <vPortExitCritical>
				return pdPASS;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e069      	b.n	8004ad0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d103      	bne.n	8004a0a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a02:	f001 feab 	bl	800675c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e062      	b.n	8004ad0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d106      	bne.n	8004a1e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a10:	f107 0310 	add.w	r3, r7, #16
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 ff67 	bl	80058e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a1e:	f001 fe9d 	bl	800675c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a22:	f000 fc2d 	bl	8005280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a26:	f001 fe67 	bl	80066f8 <vPortEnterCritical>
 8004a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a30:	b25b      	sxtb	r3, r3
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a36:	d103      	bne.n	8004a40 <xQueueReceive+0x128>
 8004a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a46:	b25b      	sxtb	r3, r3
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4c:	d103      	bne.n	8004a56 <xQueueReceive+0x13e>
 8004a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a56:	f001 fe81 	bl	800675c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a5a:	1d3a      	adds	r2, r7, #4
 8004a5c:	f107 0310 	add.w	r3, r7, #16
 8004a60:	4611      	mov	r1, r2
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 ff56 	bl	8005914 <xTaskCheckForTimeOut>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d123      	bne.n	8004ab6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a70:	f000 f916 	bl	8004ca0 <prvIsQueueEmpty>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d017      	beq.n	8004aaa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7c:	3324      	adds	r3, #36	@ 0x24
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	4611      	mov	r1, r2
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fdd8 	bl	8005638 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a8a:	f000 f8b7 	bl	8004bfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a8e:	f000 fc05 	bl	800529c <xTaskResumeAll>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d189      	bne.n	80049ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004a98:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad8 <xQueueReceive+0x1c0>)
 8004a9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	e780      	b.n	80049ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004aaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004aac:	f000 f8a6 	bl	8004bfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ab0:	f000 fbf4 	bl	800529c <xTaskResumeAll>
 8004ab4:	e77a      	b.n	80049ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ab6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ab8:	f000 f8a0 	bl	8004bfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004abc:	f000 fbee 	bl	800529c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ac0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ac2:	f000 f8ed 	bl	8004ca0 <prvIsQueueEmpty>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f43f af6f 	beq.w	80049ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ace:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3730      	adds	r7, #48	@ 0x30
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	e000ed04 	.word	0xe000ed04

08004adc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10d      	bne.n	8004b16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d14d      	bne.n	8004b9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 f86e 	bl	8005be8 <xTaskPriorityDisinherit>
 8004b0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	609a      	str	r2, [r3, #8]
 8004b14:	e043      	b.n	8004b9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d119      	bne.n	8004b50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6858      	ldr	r0, [r3, #4]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b24:	461a      	mov	r2, r3
 8004b26:	68b9      	ldr	r1, [r7, #8]
 8004b28:	f002 f982 	bl	8006e30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b34:	441a      	add	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d32b      	bcc.n	8004b9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	605a      	str	r2, [r3, #4]
 8004b4e:	e026      	b.n	8004b9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	68d8      	ldr	r0, [r3, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b58:	461a      	mov	r2, r3
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	f002 f968 	bl	8006e30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b68:	425b      	negs	r3, r3
 8004b6a:	441a      	add	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d207      	bcs.n	8004b8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b84:	425b      	negs	r3, r3
 8004b86:	441a      	add	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d105      	bne.n	8004b9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004ba6:	697b      	ldr	r3, [r7, #20]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d018      	beq.n	8004bf4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bca:	441a      	add	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d303      	bcc.n	8004be4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68d9      	ldr	r1, [r3, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bec:	461a      	mov	r2, r3
 8004bee:	6838      	ldr	r0, [r7, #0]
 8004bf0:	f002 f91e 	bl	8006e30 <memcpy>
	}
}
 8004bf4:	bf00      	nop
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c04:	f001 fd78 	bl	80066f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c10:	e011      	b.n	8004c36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d012      	beq.n	8004c40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3324      	adds	r3, #36	@ 0x24
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fd9a 	bl	8005758 <xTaskRemoveFromEventList>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c2a:	f000 fed7 	bl	80059dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	dce9      	bgt.n	8004c12 <prvUnlockQueue+0x16>
 8004c3e:	e000      	b.n	8004c42 <prvUnlockQueue+0x46>
					break;
 8004c40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	22ff      	movs	r2, #255	@ 0xff
 8004c46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004c4a:	f001 fd87 	bl	800675c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c4e:	f001 fd53 	bl	80066f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c5a:	e011      	b.n	8004c80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d012      	beq.n	8004c8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3310      	adds	r3, #16
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fd75 	bl	8005758 <xTaskRemoveFromEventList>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c74:	f000 feb2 	bl	80059dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c78:	7bbb      	ldrb	r3, [r7, #14]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	dce9      	bgt.n	8004c5c <prvUnlockQueue+0x60>
 8004c88:	e000      	b.n	8004c8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	22ff      	movs	r2, #255	@ 0xff
 8004c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004c94:	f001 fd62 	bl	800675c <vPortExitCritical>
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ca8:	f001 fd26 	bl	80066f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d102      	bne.n	8004cba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	e001      	b.n	8004cbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cbe:	f001 fd4d 	bl	800675c <vPortExitCritical>

	return xReturn;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cd4:	f001 fd10 	bl	80066f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d102      	bne.n	8004cea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	e001      	b.n	8004cee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cee:	f001 fd35 	bl	800675c <vPortExitCritical>

	return xReturn;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	e014      	b.n	8004d36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d0c:	4a0f      	ldr	r2, [pc, #60]	@ (8004d4c <vQueueAddToRegistry+0x50>)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10b      	bne.n	8004d30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d18:	490c      	ldr	r1, [pc, #48]	@ (8004d4c <vQueueAddToRegistry+0x50>)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d22:	4a0a      	ldr	r2, [pc, #40]	@ (8004d4c <vQueueAddToRegistry+0x50>)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	4413      	add	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d2e:	e006      	b.n	8004d3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	3301      	adds	r3, #1
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b07      	cmp	r3, #7
 8004d3a:	d9e7      	bls.n	8004d0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d3c:	bf00      	nop
 8004d3e:	bf00      	nop
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	20000cc0 	.word	0x20000cc0

08004d50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d60:	f001 fcca 	bl	80066f8 <vPortEnterCritical>
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d6a:	b25b      	sxtb	r3, r3
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d70:	d103      	bne.n	8004d7a <vQueueWaitForMessageRestricted+0x2a>
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d80:	b25b      	sxtb	r3, r3
 8004d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d86:	d103      	bne.n	8004d90 <vQueueWaitForMessageRestricted+0x40>
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d90:	f001 fce4 	bl	800675c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	3324      	adds	r3, #36	@ 0x24
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fcab 	bl	8005700 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004daa:	6978      	ldr	r0, [r7, #20]
 8004dac:	f7ff ff26 	bl	8004bfc <prvUnlockQueue>
	}
 8004db0:	bf00      	nop
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08e      	sub	sp, #56	@ 0x38
 8004dbc:	af04      	add	r7, sp, #16
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10b      	bne.n	8004de4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	623b      	str	r3, [r7, #32]
}
 8004dde:	bf00      	nop
 8004de0:	bf00      	nop
 8004de2:	e7fd      	b.n	8004de0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10b      	bne.n	8004e02 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	61fb      	str	r3, [r7, #28]
}
 8004dfc:	bf00      	nop
 8004dfe:	bf00      	nop
 8004e00:	e7fd      	b.n	8004dfe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e02:	23a8      	movs	r3, #168	@ 0xa8
 8004e04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	2ba8      	cmp	r3, #168	@ 0xa8
 8004e0a:	d00b      	beq.n	8004e24 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	61bb      	str	r3, [r7, #24]
}
 8004e1e:	bf00      	nop
 8004e20:	bf00      	nop
 8004e22:	e7fd      	b.n	8004e20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01e      	beq.n	8004e6a <xTaskCreateStatic+0xb2>
 8004e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01b      	beq.n	8004e6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e44:	2300      	movs	r3, #0
 8004e46:	9303      	str	r3, [sp, #12]
 8004e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4a:	9302      	str	r3, [sp, #8]
 8004e4c:	f107 0314 	add.w	r3, r7, #20
 8004e50:	9301      	str	r3, [sp, #4]
 8004e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 f851 	bl	8004f04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e64:	f000 f8f6 	bl	8005054 <prvAddNewTaskToReadyList>
 8004e68:	e001      	b.n	8004e6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e6e:	697b      	ldr	r3, [r7, #20]
	}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3728      	adds	r7, #40	@ 0x28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08c      	sub	sp, #48	@ 0x30
 8004e7c:	af04      	add	r7, sp, #16
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	4613      	mov	r3, r2
 8004e86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e88:	88fb      	ldrh	r3, [r7, #6]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f001 fd55 	bl	800693c <pvPortMalloc>
 8004e92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00e      	beq.n	8004eb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e9a:	20a8      	movs	r0, #168	@ 0xa8
 8004e9c:	f001 fd4e 	bl	800693c <pvPortMalloc>
 8004ea0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	631a      	str	r2, [r3, #48]	@ 0x30
 8004eae:	e005      	b.n	8004ebc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004eb0:	6978      	ldr	r0, [r7, #20]
 8004eb2:	f001 fe11 	bl	8006ad8 <vPortFree>
 8004eb6:	e001      	b.n	8004ebc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d017      	beq.n	8004ef2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004eca:	88fa      	ldrh	r2, [r7, #6]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	9303      	str	r3, [sp, #12]
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	9302      	str	r3, [sp, #8]
 8004ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed6:	9301      	str	r3, [sp, #4]
 8004ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f80f 	bl	8004f04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ee6:	69f8      	ldr	r0, [r7, #28]
 8004ee8:	f000 f8b4 	bl	8005054 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004eec:	2301      	movs	r3, #1
 8004eee:	61bb      	str	r3, [r7, #24]
 8004ef0:	e002      	b.n	8004ef8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ef8:	69bb      	ldr	r3, [r7, #24]
	}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3720      	adds	r7, #32
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f14:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	21a5      	movs	r1, #165	@ 0xa5
 8004f1e:	f001 fefb 	bl	8006d18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	f023 0307 	bic.w	r3, r3, #7
 8004f3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	617b      	str	r3, [r7, #20]
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	e7fd      	b.n	8004f5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01f      	beq.n	8004fa4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f64:	2300      	movs	r3, #0
 8004f66:	61fb      	str	r3, [r7, #28]
 8004f68:	e012      	b.n	8004f90 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	4413      	add	r3, r2
 8004f70:	7819      	ldrb	r1, [r3, #0]
 8004f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	4413      	add	r3, r2
 8004f78:	3334      	adds	r3, #52	@ 0x34
 8004f7a:	460a      	mov	r2, r1
 8004f7c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	4413      	add	r3, r2
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d006      	beq.n	8004f98 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	2b0f      	cmp	r3, #15
 8004f94:	d9e9      	bls.n	8004f6a <prvInitialiseNewTask+0x66>
 8004f96:	e000      	b.n	8004f9a <prvInitialiseNewTask+0x96>
			{
				break;
 8004f98:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fa2:	e003      	b.n	8004fac <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fae:	2b37      	cmp	r3, #55	@ 0x37
 8004fb0:	d901      	bls.n	8004fb6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fb2:	2337      	movs	r3, #55	@ 0x37
 8004fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fc0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff f965 	bl	800429c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd4:	3318      	adds	r3, #24
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff f960 	bl	800429c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fe0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ff0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005004:	3354      	adds	r3, #84	@ 0x54
 8005006:	224c      	movs	r2, #76	@ 0x4c
 8005008:	2100      	movs	r1, #0
 800500a:	4618      	mov	r0, r3
 800500c:	f001 fe84 	bl	8006d18 <memset>
 8005010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005012:	4a0d      	ldr	r2, [pc, #52]	@ (8005048 <prvInitialiseNewTask+0x144>)
 8005014:	659a      	str	r2, [r3, #88]	@ 0x58
 8005016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005018:	4a0c      	ldr	r2, [pc, #48]	@ (800504c <prvInitialiseNewTask+0x148>)
 800501a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800501c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501e:	4a0c      	ldr	r2, [pc, #48]	@ (8005050 <prvInitialiseNewTask+0x14c>)
 8005020:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	68f9      	ldr	r1, [r7, #12]
 8005026:	69b8      	ldr	r0, [r7, #24]
 8005028:	f001 fa34 	bl	8006494 <pxPortInitialiseStack>
 800502c:	4602      	mov	r2, r0
 800502e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005030:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800503c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800503e:	bf00      	nop
 8005040:	3720      	adds	r7, #32
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20004f54 	.word	0x20004f54
 800504c:	20004fbc 	.word	0x20004fbc
 8005050:	20005024 	.word	0x20005024

08005054 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800505c:	f001 fb4c 	bl	80066f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005060:	4b2d      	ldr	r3, [pc, #180]	@ (8005118 <prvAddNewTaskToReadyList+0xc4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3301      	adds	r3, #1
 8005066:	4a2c      	ldr	r2, [pc, #176]	@ (8005118 <prvAddNewTaskToReadyList+0xc4>)
 8005068:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800506a:	4b2c      	ldr	r3, [pc, #176]	@ (800511c <prvAddNewTaskToReadyList+0xc8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005072:	4a2a      	ldr	r2, [pc, #168]	@ (800511c <prvAddNewTaskToReadyList+0xc8>)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005078:	4b27      	ldr	r3, [pc, #156]	@ (8005118 <prvAddNewTaskToReadyList+0xc4>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d110      	bne.n	80050a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005080:	f000 fcd0 	bl	8005a24 <prvInitialiseTaskLists>
 8005084:	e00d      	b.n	80050a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005086:	4b26      	ldr	r3, [pc, #152]	@ (8005120 <prvAddNewTaskToReadyList+0xcc>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800508e:	4b23      	ldr	r3, [pc, #140]	@ (800511c <prvAddNewTaskToReadyList+0xc8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	429a      	cmp	r2, r3
 800509a:	d802      	bhi.n	80050a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800509c:	4a1f      	ldr	r2, [pc, #124]	@ (800511c <prvAddNewTaskToReadyList+0xc8>)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050a2:	4b20      	ldr	r3, [pc, #128]	@ (8005124 <prvAddNewTaskToReadyList+0xd0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3301      	adds	r3, #1
 80050a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005124 <prvAddNewTaskToReadyList+0xd0>)
 80050aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80050ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005124 <prvAddNewTaskToReadyList+0xd0>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005128 <prvAddNewTaskToReadyList+0xd4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d903      	bls.n	80050c8 <prvAddNewTaskToReadyList+0x74>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c4:	4a18      	ldr	r2, [pc, #96]	@ (8005128 <prvAddNewTaskToReadyList+0xd4>)
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4a15      	ldr	r2, [pc, #84]	@ (800512c <prvAddNewTaskToReadyList+0xd8>)
 80050d6:	441a      	add	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3304      	adds	r3, #4
 80050dc:	4619      	mov	r1, r3
 80050de:	4610      	mov	r0, r2
 80050e0:	f7ff f8e9 	bl	80042b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050e4:	f001 fb3a 	bl	800675c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005120 <prvAddNewTaskToReadyList+0xcc>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00e      	beq.n	800510e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050f0:	4b0a      	ldr	r3, [pc, #40]	@ (800511c <prvAddNewTaskToReadyList+0xc8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d207      	bcs.n	800510e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005130 <prvAddNewTaskToReadyList+0xdc>)
 8005100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800510e:	bf00      	nop
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	200011d4 	.word	0x200011d4
 800511c:	20000d00 	.word	0x20000d00
 8005120:	200011e0 	.word	0x200011e0
 8005124:	200011f0 	.word	0x200011f0
 8005128:	200011dc 	.word	0x200011dc
 800512c:	20000d04 	.word	0x20000d04
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800513c:	2300      	movs	r3, #0
 800513e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d018      	beq.n	8005178 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005146:	4b14      	ldr	r3, [pc, #80]	@ (8005198 <vTaskDelay+0x64>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00b      	beq.n	8005166 <vTaskDelay+0x32>
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	60bb      	str	r3, [r7, #8]
}
 8005160:	bf00      	nop
 8005162:	bf00      	nop
 8005164:	e7fd      	b.n	8005162 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005166:	f000 f88b 	bl	8005280 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800516a:	2100      	movs	r1, #0
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fdc3 	bl	8005cf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005172:	f000 f893 	bl	800529c <xTaskResumeAll>
 8005176:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d107      	bne.n	800518e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800517e:	4b07      	ldr	r3, [pc, #28]	@ (800519c <vTaskDelay+0x68>)
 8005180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800518e:	bf00      	nop
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	200011fc 	.word	0x200011fc
 800519c:	e000ed04 	.word	0xe000ed04

080051a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08a      	sub	sp, #40	@ 0x28
 80051a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051ae:	463a      	mov	r2, r7
 80051b0:	1d39      	adds	r1, r7, #4
 80051b2:	f107 0308 	add.w	r3, r7, #8
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fe fe26 	bl	8003e08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80051bc:	6839      	ldr	r1, [r7, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	9202      	str	r2, [sp, #8]
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	2300      	movs	r3, #0
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	2300      	movs	r3, #0
 80051cc:	460a      	mov	r2, r1
 80051ce:	4924      	ldr	r1, [pc, #144]	@ (8005260 <vTaskStartScheduler+0xc0>)
 80051d0:	4824      	ldr	r0, [pc, #144]	@ (8005264 <vTaskStartScheduler+0xc4>)
 80051d2:	f7ff fdf1 	bl	8004db8 <xTaskCreateStatic>
 80051d6:	4603      	mov	r3, r0
 80051d8:	4a23      	ldr	r2, [pc, #140]	@ (8005268 <vTaskStartScheduler+0xc8>)
 80051da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051dc:	4b22      	ldr	r3, [pc, #136]	@ (8005268 <vTaskStartScheduler+0xc8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051e4:	2301      	movs	r3, #1
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	e001      	b.n	80051ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d102      	bne.n	80051fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80051f4:	f000 fdd4 	bl	8005da0 <xTimerCreateTimerTask>
 80051f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d11b      	bne.n	8005238 <vTaskStartScheduler+0x98>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	613b      	str	r3, [r7, #16]
}
 8005212:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005214:	4b15      	ldr	r3, [pc, #84]	@ (800526c <vTaskStartScheduler+0xcc>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3354      	adds	r3, #84	@ 0x54
 800521a:	4a15      	ldr	r2, [pc, #84]	@ (8005270 <vTaskStartScheduler+0xd0>)
 800521c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800521e:	4b15      	ldr	r3, [pc, #84]	@ (8005274 <vTaskStartScheduler+0xd4>)
 8005220:	f04f 32ff 	mov.w	r2, #4294967295
 8005224:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005226:	4b14      	ldr	r3, [pc, #80]	@ (8005278 <vTaskStartScheduler+0xd8>)
 8005228:	2201      	movs	r2, #1
 800522a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800522c:	4b13      	ldr	r3, [pc, #76]	@ (800527c <vTaskStartScheduler+0xdc>)
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005232:	f001 f9bd 	bl	80065b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005236:	e00f      	b.n	8005258 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523e:	d10b      	bne.n	8005258 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	60fb      	str	r3, [r7, #12]
}
 8005252:	bf00      	nop
 8005254:	bf00      	nop
 8005256:	e7fd      	b.n	8005254 <vTaskStartScheduler+0xb4>
}
 8005258:	bf00      	nop
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	08006f58 	.word	0x08006f58
 8005264:	080059f5 	.word	0x080059f5
 8005268:	200011f8 	.word	0x200011f8
 800526c:	20000d00 	.word	0x20000d00
 8005270:	2000002c 	.word	0x2000002c
 8005274:	200011f4 	.word	0x200011f4
 8005278:	200011e0 	.word	0x200011e0
 800527c:	200011d8 	.word	0x200011d8

08005280 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005284:	4b04      	ldr	r3, [pc, #16]	@ (8005298 <vTaskSuspendAll+0x18>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3301      	adds	r3, #1
 800528a:	4a03      	ldr	r2, [pc, #12]	@ (8005298 <vTaskSuspendAll+0x18>)
 800528c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800528e:	bf00      	nop
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	200011fc 	.word	0x200011fc

0800529c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052a6:	2300      	movs	r3, #0
 80052a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052aa:	4b42      	ldr	r3, [pc, #264]	@ (80053b4 <xTaskResumeAll+0x118>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10b      	bne.n	80052ca <xTaskResumeAll+0x2e>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	603b      	str	r3, [r7, #0]
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	e7fd      	b.n	80052c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052ca:	f001 fa15 	bl	80066f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052ce:	4b39      	ldr	r3, [pc, #228]	@ (80053b4 <xTaskResumeAll+0x118>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	4a37      	ldr	r2, [pc, #220]	@ (80053b4 <xTaskResumeAll+0x118>)
 80052d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052d8:	4b36      	ldr	r3, [pc, #216]	@ (80053b4 <xTaskResumeAll+0x118>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d162      	bne.n	80053a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052e0:	4b35      	ldr	r3, [pc, #212]	@ (80053b8 <xTaskResumeAll+0x11c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d05e      	beq.n	80053a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052e8:	e02f      	b.n	800534a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ea:	4b34      	ldr	r3, [pc, #208]	@ (80053bc <xTaskResumeAll+0x120>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3318      	adds	r3, #24
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff f83a 	bl	8004370 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	3304      	adds	r3, #4
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff f835 	bl	8004370 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800530a:	4b2d      	ldr	r3, [pc, #180]	@ (80053c0 <xTaskResumeAll+0x124>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d903      	bls.n	800531a <xTaskResumeAll+0x7e>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005316:	4a2a      	ldr	r2, [pc, #168]	@ (80053c0 <xTaskResumeAll+0x124>)
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800531e:	4613      	mov	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4a27      	ldr	r2, [pc, #156]	@ (80053c4 <xTaskResumeAll+0x128>)
 8005328:	441a      	add	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3304      	adds	r3, #4
 800532e:	4619      	mov	r1, r3
 8005330:	4610      	mov	r0, r2
 8005332:	f7fe ffc0 	bl	80042b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800533a:	4b23      	ldr	r3, [pc, #140]	@ (80053c8 <xTaskResumeAll+0x12c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005340:	429a      	cmp	r2, r3
 8005342:	d302      	bcc.n	800534a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005344:	4b21      	ldr	r3, [pc, #132]	@ (80053cc <xTaskResumeAll+0x130>)
 8005346:	2201      	movs	r2, #1
 8005348:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800534a:	4b1c      	ldr	r3, [pc, #112]	@ (80053bc <xTaskResumeAll+0x120>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1cb      	bne.n	80052ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005358:	f000 fc08 	bl	8005b6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800535c:	4b1c      	ldr	r3, [pc, #112]	@ (80053d0 <xTaskResumeAll+0x134>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d010      	beq.n	800538a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005368:	f000 f846 	bl	80053f8 <xTaskIncrementTick>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005372:	4b16      	ldr	r3, [pc, #88]	@ (80053cc <xTaskResumeAll+0x130>)
 8005374:	2201      	movs	r2, #1
 8005376:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3b01      	subs	r3, #1
 800537c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1f1      	bne.n	8005368 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005384:	4b12      	ldr	r3, [pc, #72]	@ (80053d0 <xTaskResumeAll+0x134>)
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800538a:	4b10      	ldr	r3, [pc, #64]	@ (80053cc <xTaskResumeAll+0x130>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d009      	beq.n	80053a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005392:	2301      	movs	r3, #1
 8005394:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005396:	4b0f      	ldr	r3, [pc, #60]	@ (80053d4 <xTaskResumeAll+0x138>)
 8005398:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053a6:	f001 f9d9 	bl	800675c <vPortExitCritical>

	return xAlreadyYielded;
 80053aa:	68bb      	ldr	r3, [r7, #8]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	200011fc 	.word	0x200011fc
 80053b8:	200011d4 	.word	0x200011d4
 80053bc:	20001194 	.word	0x20001194
 80053c0:	200011dc 	.word	0x200011dc
 80053c4:	20000d04 	.word	0x20000d04
 80053c8:	20000d00 	.word	0x20000d00
 80053cc:	200011e8 	.word	0x200011e8
 80053d0:	200011e4 	.word	0x200011e4
 80053d4:	e000ed04 	.word	0xe000ed04

080053d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80053de:	4b05      	ldr	r3, [pc, #20]	@ (80053f4 <xTaskGetTickCount+0x1c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80053e4:	687b      	ldr	r3, [r7, #4]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	200011d8 	.word	0x200011d8

080053f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005402:	4b4f      	ldr	r3, [pc, #316]	@ (8005540 <xTaskIncrementTick+0x148>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	f040 8090 	bne.w	800552c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800540c:	4b4d      	ldr	r3, [pc, #308]	@ (8005544 <xTaskIncrementTick+0x14c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3301      	adds	r3, #1
 8005412:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005414:	4a4b      	ldr	r2, [pc, #300]	@ (8005544 <xTaskIncrementTick+0x14c>)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d121      	bne.n	8005464 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005420:	4b49      	ldr	r3, [pc, #292]	@ (8005548 <xTaskIncrementTick+0x150>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00b      	beq.n	8005442 <xTaskIncrementTick+0x4a>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	603b      	str	r3, [r7, #0]
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	e7fd      	b.n	800543e <xTaskIncrementTick+0x46>
 8005442:	4b41      	ldr	r3, [pc, #260]	@ (8005548 <xTaskIncrementTick+0x150>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	4b40      	ldr	r3, [pc, #256]	@ (800554c <xTaskIncrementTick+0x154>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a3e      	ldr	r2, [pc, #248]	@ (8005548 <xTaskIncrementTick+0x150>)
 800544e:	6013      	str	r3, [r2, #0]
 8005450:	4a3e      	ldr	r2, [pc, #248]	@ (800554c <xTaskIncrementTick+0x154>)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	4b3e      	ldr	r3, [pc, #248]	@ (8005550 <xTaskIncrementTick+0x158>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3301      	adds	r3, #1
 800545c:	4a3c      	ldr	r2, [pc, #240]	@ (8005550 <xTaskIncrementTick+0x158>)
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	f000 fb84 	bl	8005b6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005464:	4b3b      	ldr	r3, [pc, #236]	@ (8005554 <xTaskIncrementTick+0x15c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	429a      	cmp	r2, r3
 800546c:	d349      	bcc.n	8005502 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800546e:	4b36      	ldr	r3, [pc, #216]	@ (8005548 <xTaskIncrementTick+0x150>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d104      	bne.n	8005482 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005478:	4b36      	ldr	r3, [pc, #216]	@ (8005554 <xTaskIncrementTick+0x15c>)
 800547a:	f04f 32ff 	mov.w	r2, #4294967295
 800547e:	601a      	str	r2, [r3, #0]
					break;
 8005480:	e03f      	b.n	8005502 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005482:	4b31      	ldr	r3, [pc, #196]	@ (8005548 <xTaskIncrementTick+0x150>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	429a      	cmp	r2, r3
 8005498:	d203      	bcs.n	80054a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800549a:	4a2e      	ldr	r2, [pc, #184]	@ (8005554 <xTaskIncrementTick+0x15c>)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80054a0:	e02f      	b.n	8005502 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	3304      	adds	r3, #4
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fe ff62 	bl	8004370 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d004      	beq.n	80054be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	3318      	adds	r3, #24
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fe ff59 	bl	8004370 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c2:	4b25      	ldr	r3, [pc, #148]	@ (8005558 <xTaskIncrementTick+0x160>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d903      	bls.n	80054d2 <xTaskIncrementTick+0xda>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ce:	4a22      	ldr	r2, [pc, #136]	@ (8005558 <xTaskIncrementTick+0x160>)
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054d6:	4613      	mov	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4a1f      	ldr	r2, [pc, #124]	@ (800555c <xTaskIncrementTick+0x164>)
 80054e0:	441a      	add	r2, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	3304      	adds	r3, #4
 80054e6:	4619      	mov	r1, r3
 80054e8:	4610      	mov	r0, r2
 80054ea:	f7fe fee4 	bl	80042b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005560 <xTaskIncrementTick+0x168>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d3b8      	bcc.n	800546e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80054fc:	2301      	movs	r3, #1
 80054fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005500:	e7b5      	b.n	800546e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005502:	4b17      	ldr	r3, [pc, #92]	@ (8005560 <xTaskIncrementTick+0x168>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005508:	4914      	ldr	r1, [pc, #80]	@ (800555c <xTaskIncrementTick+0x164>)
 800550a:	4613      	mov	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d901      	bls.n	800551e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800551a:	2301      	movs	r3, #1
 800551c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800551e:	4b11      	ldr	r3, [pc, #68]	@ (8005564 <xTaskIncrementTick+0x16c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d007      	beq.n	8005536 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005526:	2301      	movs	r3, #1
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	e004      	b.n	8005536 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800552c:	4b0e      	ldr	r3, [pc, #56]	@ (8005568 <xTaskIncrementTick+0x170>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3301      	adds	r3, #1
 8005532:	4a0d      	ldr	r2, [pc, #52]	@ (8005568 <xTaskIncrementTick+0x170>)
 8005534:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005536:	697b      	ldr	r3, [r7, #20]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	200011fc 	.word	0x200011fc
 8005544:	200011d8 	.word	0x200011d8
 8005548:	2000118c 	.word	0x2000118c
 800554c:	20001190 	.word	0x20001190
 8005550:	200011ec 	.word	0x200011ec
 8005554:	200011f4 	.word	0x200011f4
 8005558:	200011dc 	.word	0x200011dc
 800555c:	20000d04 	.word	0x20000d04
 8005560:	20000d00 	.word	0x20000d00
 8005564:	200011e8 	.word	0x200011e8
 8005568:	200011e4 	.word	0x200011e4

0800556c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005572:	4b2b      	ldr	r3, [pc, #172]	@ (8005620 <vTaskSwitchContext+0xb4>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800557a:	4b2a      	ldr	r3, [pc, #168]	@ (8005624 <vTaskSwitchContext+0xb8>)
 800557c:	2201      	movs	r2, #1
 800557e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005580:	e047      	b.n	8005612 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005582:	4b28      	ldr	r3, [pc, #160]	@ (8005624 <vTaskSwitchContext+0xb8>)
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005588:	4b27      	ldr	r3, [pc, #156]	@ (8005628 <vTaskSwitchContext+0xbc>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	e011      	b.n	80055b4 <vTaskSwitchContext+0x48>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10b      	bne.n	80055ae <vTaskSwitchContext+0x42>
	__asm volatile
 8005596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	607b      	str	r3, [r7, #4]
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	e7fd      	b.n	80055aa <vTaskSwitchContext+0x3e>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	491d      	ldr	r1, [pc, #116]	@ (800562c <vTaskSwitchContext+0xc0>)
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0e3      	beq.n	8005590 <vTaskSwitchContext+0x24>
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4613      	mov	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4a16      	ldr	r2, [pc, #88]	@ (800562c <vTaskSwitchContext+0xc0>)
 80055d4:	4413      	add	r3, r2
 80055d6:	60bb      	str	r3, [r7, #8]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	605a      	str	r2, [r3, #4]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	3308      	adds	r3, #8
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d104      	bne.n	80055f8 <vTaskSwitchContext+0x8c>
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	605a      	str	r2, [r3, #4]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005630 <vTaskSwitchContext+0xc4>)
 8005600:	6013      	str	r3, [r2, #0]
 8005602:	4a09      	ldr	r2, [pc, #36]	@ (8005628 <vTaskSwitchContext+0xbc>)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005608:	4b09      	ldr	r3, [pc, #36]	@ (8005630 <vTaskSwitchContext+0xc4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3354      	adds	r3, #84	@ 0x54
 800560e:	4a09      	ldr	r2, [pc, #36]	@ (8005634 <vTaskSwitchContext+0xc8>)
 8005610:	6013      	str	r3, [r2, #0]
}
 8005612:	bf00      	nop
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	200011fc 	.word	0x200011fc
 8005624:	200011e8 	.word	0x200011e8
 8005628:	200011dc 	.word	0x200011dc
 800562c:	20000d04 	.word	0x20000d04
 8005630:	20000d00 	.word	0x20000d00
 8005634:	2000002c 	.word	0x2000002c

08005638 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10b      	bne.n	8005660 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	60fb      	str	r3, [r7, #12]
}
 800565a:	bf00      	nop
 800565c:	bf00      	nop
 800565e:	e7fd      	b.n	800565c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005660:	4b07      	ldr	r3, [pc, #28]	@ (8005680 <vTaskPlaceOnEventList+0x48>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3318      	adds	r3, #24
 8005666:	4619      	mov	r1, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7fe fe48 	bl	80042fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800566e:	2101      	movs	r1, #1
 8005670:	6838      	ldr	r0, [r7, #0]
 8005672:	f000 fb41 	bl	8005cf8 <prvAddCurrentTaskToDelayedList>
}
 8005676:	bf00      	nop
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000d00 	.word	0x20000d00

08005684 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10b      	bne.n	80056ae <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8005696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	617b      	str	r3, [r7, #20]
}
 80056a8:	bf00      	nop
 80056aa:	bf00      	nop
 80056ac:	e7fd      	b.n	80056aa <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80056ae:	4b12      	ldr	r3, [pc, #72]	@ (80056f8 <vTaskPlaceOnUnorderedEventList+0x74>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10b      	bne.n	80056ce <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 80056b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	613b      	str	r3, [r7, #16]
}
 80056c8:	bf00      	nop
 80056ca:	bf00      	nop
 80056cc:	e7fd      	b.n	80056ca <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80056ce:	4b0b      	ldr	r3, [pc, #44]	@ (80056fc <vTaskPlaceOnUnorderedEventList+0x78>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80056d8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056da:	4b08      	ldr	r3, [pc, #32]	@ (80056fc <vTaskPlaceOnUnorderedEventList+0x78>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3318      	adds	r3, #24
 80056e0:	4619      	mov	r1, r3
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f7fe fde7 	bl	80042b6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80056e8:	2101      	movs	r1, #1
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fb04 	bl	8005cf8 <prvAddCurrentTaskToDelayedList>
}
 80056f0:	bf00      	nop
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	200011fc 	.word	0x200011fc
 80056fc:	20000d00 	.word	0x20000d00

08005700 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10b      	bne.n	800572a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	617b      	str	r3, [r7, #20]
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop
 8005728:	e7fd      	b.n	8005726 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800572a:	4b0a      	ldr	r3, [pc, #40]	@ (8005754 <vTaskPlaceOnEventListRestricted+0x54>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3318      	adds	r3, #24
 8005730:	4619      	mov	r1, r3
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f7fe fdbf 	bl	80042b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800573e:	f04f 33ff 	mov.w	r3, #4294967295
 8005742:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005744:	6879      	ldr	r1, [r7, #4]
 8005746:	68b8      	ldr	r0, [r7, #8]
 8005748:	f000 fad6 	bl	8005cf8 <prvAddCurrentTaskToDelayedList>
	}
 800574c:	bf00      	nop
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000d00 	.word	0x20000d00

08005758 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10b      	bne.n	8005786 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	60fb      	str	r3, [r7, #12]
}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	e7fd      	b.n	8005782 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	3318      	adds	r3, #24
 800578a:	4618      	mov	r0, r3
 800578c:	f7fe fdf0 	bl	8004370 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005790:	4b1d      	ldr	r3, [pc, #116]	@ (8005808 <xTaskRemoveFromEventList+0xb0>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d11d      	bne.n	80057d4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	3304      	adds	r3, #4
 800579c:	4618      	mov	r0, r3
 800579e:	f7fe fde7 	bl	8004370 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a6:	4b19      	ldr	r3, [pc, #100]	@ (800580c <xTaskRemoveFromEventList+0xb4>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d903      	bls.n	80057b6 <xTaskRemoveFromEventList+0x5e>
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b2:	4a16      	ldr	r2, [pc, #88]	@ (800580c <xTaskRemoveFromEventList+0xb4>)
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ba:	4613      	mov	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4a13      	ldr	r2, [pc, #76]	@ (8005810 <xTaskRemoveFromEventList+0xb8>)
 80057c4:	441a      	add	r2, r3
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	3304      	adds	r3, #4
 80057ca:	4619      	mov	r1, r3
 80057cc:	4610      	mov	r0, r2
 80057ce:	f7fe fd72 	bl	80042b6 <vListInsertEnd>
 80057d2:	e005      	b.n	80057e0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	3318      	adds	r3, #24
 80057d8:	4619      	mov	r1, r3
 80057da:	480e      	ldr	r0, [pc, #56]	@ (8005814 <xTaskRemoveFromEventList+0xbc>)
 80057dc:	f7fe fd6b 	bl	80042b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005818 <xTaskRemoveFromEventList+0xc0>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d905      	bls.n	80057fa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057ee:	2301      	movs	r3, #1
 80057f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80057f2:	4b0a      	ldr	r3, [pc, #40]	@ (800581c <xTaskRemoveFromEventList+0xc4>)
 80057f4:	2201      	movs	r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	e001      	b.n	80057fe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80057fe:	697b      	ldr	r3, [r7, #20]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	200011fc 	.word	0x200011fc
 800580c:	200011dc 	.word	0x200011dc
 8005810:	20000d04 	.word	0x20000d04
 8005814:	20001194 	.word	0x20001194
 8005818:	20000d00 	.word	0x20000d00
 800581c:	200011e8 	.word	0x200011e8

08005820 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800582a:	4b2a      	ldr	r3, [pc, #168]	@ (80058d4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10b      	bne.n	800584a <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	613b      	str	r3, [r7, #16]
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop
 8005848:	e7fd      	b.n	8005846 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10b      	bne.n	8005878 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	60fb      	str	r3, [r7, #12]
}
 8005872:	bf00      	nop
 8005874:	bf00      	nop
 8005876:	e7fd      	b.n	8005874 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7fe fd79 	bl	8004370 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	3304      	adds	r3, #4
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe fd74 	bl	8004370 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800588c:	4b12      	ldr	r3, [pc, #72]	@ (80058d8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d903      	bls.n	800589c <vTaskRemoveFromUnorderedEventList+0x7c>
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005898:	4a0f      	ldr	r2, [pc, #60]	@ (80058d8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800589a:	6013      	str	r3, [r2, #0]
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a0:	4613      	mov	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4a0c      	ldr	r2, [pc, #48]	@ (80058dc <vTaskRemoveFromUnorderedEventList+0xbc>)
 80058aa:	441a      	add	r2, r3
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	3304      	adds	r3, #4
 80058b0:	4619      	mov	r1, r3
 80058b2:	4610      	mov	r0, r2
 80058b4:	f7fe fcff 	bl	80042b6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058bc:	4b08      	ldr	r3, [pc, #32]	@ (80058e0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d902      	bls.n	80058cc <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80058c6:	4b07      	ldr	r3, [pc, #28]	@ (80058e4 <vTaskRemoveFromUnorderedEventList+0xc4>)
 80058c8:	2201      	movs	r2, #1
 80058ca:	601a      	str	r2, [r3, #0]
	}
}
 80058cc:	bf00      	nop
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	200011fc 	.word	0x200011fc
 80058d8:	200011dc 	.word	0x200011dc
 80058dc:	20000d04 	.word	0x20000d04
 80058e0:	20000d00 	.word	0x20000d00
 80058e4:	200011e8 	.word	0x200011e8

080058e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058f0:	4b06      	ldr	r3, [pc, #24]	@ (800590c <vTaskInternalSetTimeOutState+0x24>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058f8:	4b05      	ldr	r3, [pc, #20]	@ (8005910 <vTaskInternalSetTimeOutState+0x28>)
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	605a      	str	r2, [r3, #4]
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	200011ec 	.word	0x200011ec
 8005910:	200011d8 	.word	0x200011d8

08005914 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b088      	sub	sp, #32
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10b      	bne.n	800593c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	613b      	str	r3, [r7, #16]
}
 8005936:	bf00      	nop
 8005938:	bf00      	nop
 800593a:	e7fd      	b.n	8005938 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10b      	bne.n	800595a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	60fb      	str	r3, [r7, #12]
}
 8005954:	bf00      	nop
 8005956:	bf00      	nop
 8005958:	e7fd      	b.n	8005956 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800595a:	f000 fecd 	bl	80066f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800595e:	4b1d      	ldr	r3, [pc, #116]	@ (80059d4 <xTaskCheckForTimeOut+0xc0>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005976:	d102      	bne.n	800597e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005978:	2300      	movs	r3, #0
 800597a:	61fb      	str	r3, [r7, #28]
 800597c:	e023      	b.n	80059c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4b15      	ldr	r3, [pc, #84]	@ (80059d8 <xTaskCheckForTimeOut+0xc4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d007      	beq.n	800599a <xTaskCheckForTimeOut+0x86>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	429a      	cmp	r2, r3
 8005992:	d302      	bcc.n	800599a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005994:	2301      	movs	r3, #1
 8005996:	61fb      	str	r3, [r7, #28]
 8005998:	e015      	b.n	80059c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d20b      	bcs.n	80059bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	1ad2      	subs	r2, r2, r3
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7ff ff99 	bl	80058e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80059b6:	2300      	movs	r3, #0
 80059b8:	61fb      	str	r3, [r7, #28]
 80059ba:	e004      	b.n	80059c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80059c2:	2301      	movs	r3, #1
 80059c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80059c6:	f000 fec9 	bl	800675c <vPortExitCritical>

	return xReturn;
 80059ca:	69fb      	ldr	r3, [r7, #28]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3720      	adds	r7, #32
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	200011d8 	.word	0x200011d8
 80059d8:	200011ec 	.word	0x200011ec

080059dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059e0:	4b03      	ldr	r3, [pc, #12]	@ (80059f0 <vTaskMissedYield+0x14>)
 80059e2:	2201      	movs	r2, #1
 80059e4:	601a      	str	r2, [r3, #0]
}
 80059e6:	bf00      	nop
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	200011e8 	.word	0x200011e8

080059f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059fc:	f000 f852 	bl	8005aa4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a00:	4b06      	ldr	r3, [pc, #24]	@ (8005a1c <prvIdleTask+0x28>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d9f9      	bls.n	80059fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a08:	4b05      	ldr	r3, [pc, #20]	@ (8005a20 <prvIdleTask+0x2c>)
 8005a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a18:	e7f0      	b.n	80059fc <prvIdleTask+0x8>
 8005a1a:	bf00      	nop
 8005a1c:	20000d04 	.word	0x20000d04
 8005a20:	e000ed04 	.word	0xe000ed04

08005a24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	607b      	str	r3, [r7, #4]
 8005a2e:	e00c      	b.n	8005a4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4a12      	ldr	r2, [pc, #72]	@ (8005a84 <prvInitialiseTaskLists+0x60>)
 8005a3c:	4413      	add	r3, r2
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fe fc0c 	bl	800425c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3301      	adds	r3, #1
 8005a48:	607b      	str	r3, [r7, #4]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b37      	cmp	r3, #55	@ 0x37
 8005a4e:	d9ef      	bls.n	8005a30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a50:	480d      	ldr	r0, [pc, #52]	@ (8005a88 <prvInitialiseTaskLists+0x64>)
 8005a52:	f7fe fc03 	bl	800425c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a56:	480d      	ldr	r0, [pc, #52]	@ (8005a8c <prvInitialiseTaskLists+0x68>)
 8005a58:	f7fe fc00 	bl	800425c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a5c:	480c      	ldr	r0, [pc, #48]	@ (8005a90 <prvInitialiseTaskLists+0x6c>)
 8005a5e:	f7fe fbfd 	bl	800425c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a62:	480c      	ldr	r0, [pc, #48]	@ (8005a94 <prvInitialiseTaskLists+0x70>)
 8005a64:	f7fe fbfa 	bl	800425c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a68:	480b      	ldr	r0, [pc, #44]	@ (8005a98 <prvInitialiseTaskLists+0x74>)
 8005a6a:	f7fe fbf7 	bl	800425c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a9c <prvInitialiseTaskLists+0x78>)
 8005a70:	4a05      	ldr	r2, [pc, #20]	@ (8005a88 <prvInitialiseTaskLists+0x64>)
 8005a72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a74:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa0 <prvInitialiseTaskLists+0x7c>)
 8005a76:	4a05      	ldr	r2, [pc, #20]	@ (8005a8c <prvInitialiseTaskLists+0x68>)
 8005a78:	601a      	str	r2, [r3, #0]
}
 8005a7a:	bf00      	nop
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20000d04 	.word	0x20000d04
 8005a88:	20001164 	.word	0x20001164
 8005a8c:	20001178 	.word	0x20001178
 8005a90:	20001194 	.word	0x20001194
 8005a94:	200011a8 	.word	0x200011a8
 8005a98:	200011c0 	.word	0x200011c0
 8005a9c:	2000118c 	.word	0x2000118c
 8005aa0:	20001190 	.word	0x20001190

08005aa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aaa:	e019      	b.n	8005ae0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005aac:	f000 fe24 	bl	80066f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ab0:	4b10      	ldr	r3, [pc, #64]	@ (8005af4 <prvCheckTasksWaitingTermination+0x50>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3304      	adds	r3, #4
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fe fc57 	bl	8004370 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8005af8 <prvCheckTasksWaitingTermination+0x54>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8005af8 <prvCheckTasksWaitingTermination+0x54>)
 8005aca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005acc:	4b0b      	ldr	r3, [pc, #44]	@ (8005afc <prvCheckTasksWaitingTermination+0x58>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8005afc <prvCheckTasksWaitingTermination+0x58>)
 8005ad4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ad6:	f000 fe41 	bl	800675c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f810 	bl	8005b00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ae0:	4b06      	ldr	r3, [pc, #24]	@ (8005afc <prvCheckTasksWaitingTermination+0x58>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1e1      	bne.n	8005aac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ae8:	bf00      	nop
 8005aea:	bf00      	nop
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	200011a8 	.word	0x200011a8
 8005af8:	200011d4 	.word	0x200011d4
 8005afc:	200011bc 	.word	0x200011bc

08005b00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3354      	adds	r3, #84	@ 0x54
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f001 f90b 	bl	8006d28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d108      	bne.n	8005b2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 ffd9 	bl	8006ad8 <vPortFree>
				vPortFree( pxTCB );
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 ffd6 	bl	8006ad8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b2c:	e019      	b.n	8005b62 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d103      	bne.n	8005b40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 ffcd 	bl	8006ad8 <vPortFree>
	}
 8005b3e:	e010      	b.n	8005b62 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d00b      	beq.n	8005b62 <prvDeleteTCB+0x62>
	__asm volatile
 8005b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4e:	f383 8811 	msr	BASEPRI, r3
 8005b52:	f3bf 8f6f 	isb	sy
 8005b56:	f3bf 8f4f 	dsb	sy
 8005b5a:	60fb      	str	r3, [r7, #12]
}
 8005b5c:	bf00      	nop
 8005b5e:	bf00      	nop
 8005b60:	e7fd      	b.n	8005b5e <prvDeleteTCB+0x5e>
	}
 8005b62:	bf00      	nop
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b72:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba4 <prvResetNextTaskUnblockTime+0x38>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d104      	bne.n	8005b86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba8 <prvResetNextTaskUnblockTime+0x3c>)
 8005b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b84:	e008      	b.n	8005b98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b86:	4b07      	ldr	r3, [pc, #28]	@ (8005ba4 <prvResetNextTaskUnblockTime+0x38>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	4a04      	ldr	r2, [pc, #16]	@ (8005ba8 <prvResetNextTaskUnblockTime+0x3c>)
 8005b96:	6013      	str	r3, [r2, #0]
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	2000118c 	.word	0x2000118c
 8005ba8:	200011f4 	.word	0x200011f4

08005bac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8005be0 <xTaskGetSchedulerState+0x34>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d102      	bne.n	8005bc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	607b      	str	r3, [r7, #4]
 8005bbe:	e008      	b.n	8005bd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bc0:	4b08      	ldr	r3, [pc, #32]	@ (8005be4 <xTaskGetSchedulerState+0x38>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d102      	bne.n	8005bce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005bc8:	2302      	movs	r3, #2
 8005bca:	607b      	str	r3, [r7, #4]
 8005bcc:	e001      	b.n	8005bd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005bd2:	687b      	ldr	r3, [r7, #4]
	}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	200011e0 	.word	0x200011e0
 8005be4:	200011fc 	.word	0x200011fc

08005be8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d058      	beq.n	8005cb0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8005cbc <xTaskPriorityDisinherit+0xd4>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d00b      	beq.n	8005c20 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	60fb      	str	r3, [r7, #12]
}
 8005c1a:	bf00      	nop
 8005c1c:	bf00      	nop
 8005c1e:	e7fd      	b.n	8005c1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10b      	bne.n	8005c40 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	60bb      	str	r3, [r7, #8]
}
 8005c3a:	bf00      	nop
 8005c3c:	bf00      	nop
 8005c3e:	e7fd      	b.n	8005c3c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c44:	1e5a      	subs	r2, r3, #1
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d02c      	beq.n	8005cb0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d128      	bne.n	8005cb0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	3304      	adds	r3, #4
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fe fb84 	bl	8004370 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c80:	4b0f      	ldr	r3, [pc, #60]	@ (8005cc0 <xTaskPriorityDisinherit+0xd8>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d903      	bls.n	8005c90 <xTaskPriorityDisinherit+0xa8>
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8005cc0 <xTaskPriorityDisinherit+0xd8>)
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c94:	4613      	mov	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4a09      	ldr	r2, [pc, #36]	@ (8005cc4 <xTaskPriorityDisinherit+0xdc>)
 8005c9e:	441a      	add	r2, r3
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	f7fe fb05 	bl	80042b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005cac:	2301      	movs	r3, #1
 8005cae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005cb0:	697b      	ldr	r3, [r7, #20]
	}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	20000d00 	.word	0x20000d00
 8005cc0:	200011dc 	.word	0x200011dc
 8005cc4:	20000d04 	.word	0x20000d04

08005cc8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005cce:	4b09      	ldr	r3, [pc, #36]	@ (8005cf4 <uxTaskResetEventItemValue+0x2c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd6:	4b07      	ldr	r3, [pc, #28]	@ (8005cf4 <uxTaskResetEventItemValue+0x2c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cdc:	4b05      	ldr	r3, [pc, #20]	@ (8005cf4 <uxTaskResetEventItemValue+0x2c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8005ce4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8005ce6:	687b      	ldr	r3, [r7, #4]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	20000d00 	.word	0x20000d00

08005cf8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d02:	4b21      	ldr	r3, [pc, #132]	@ (8005d88 <prvAddCurrentTaskToDelayedList+0x90>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d08:	4b20      	ldr	r3, [pc, #128]	@ (8005d8c <prvAddCurrentTaskToDelayedList+0x94>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fe fb2e 	bl	8004370 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1a:	d10a      	bne.n	8005d32 <prvAddCurrentTaskToDelayedList+0x3a>
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d007      	beq.n	8005d32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d22:	4b1a      	ldr	r3, [pc, #104]	@ (8005d8c <prvAddCurrentTaskToDelayedList+0x94>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3304      	adds	r3, #4
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4819      	ldr	r0, [pc, #100]	@ (8005d90 <prvAddCurrentTaskToDelayedList+0x98>)
 8005d2c:	f7fe fac3 	bl	80042b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d30:	e026      	b.n	8005d80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4413      	add	r3, r2
 8005d38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d3a:	4b14      	ldr	r3, [pc, #80]	@ (8005d8c <prvAddCurrentTaskToDelayedList+0x94>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d209      	bcs.n	8005d5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d4a:	4b12      	ldr	r3, [pc, #72]	@ (8005d94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8005d8c <prvAddCurrentTaskToDelayedList+0x94>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	3304      	adds	r3, #4
 8005d54:	4619      	mov	r1, r3
 8005d56:	4610      	mov	r0, r2
 8005d58:	f7fe fad1 	bl	80042fe <vListInsert>
}
 8005d5c:	e010      	b.n	8005d80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4b0a      	ldr	r3, [pc, #40]	@ (8005d8c <prvAddCurrentTaskToDelayedList+0x94>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3304      	adds	r3, #4
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	f7fe fac7 	bl	80042fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d70:	4b0a      	ldr	r3, [pc, #40]	@ (8005d9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d202      	bcs.n	8005d80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d7a:	4a08      	ldr	r2, [pc, #32]	@ (8005d9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	6013      	str	r3, [r2, #0]
}
 8005d80:	bf00      	nop
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	200011d8 	.word	0x200011d8
 8005d8c:	20000d00 	.word	0x20000d00
 8005d90:	200011c0 	.word	0x200011c0
 8005d94:	20001190 	.word	0x20001190
 8005d98:	2000118c 	.word	0x2000118c
 8005d9c:	200011f4 	.word	0x200011f4

08005da0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b08a      	sub	sp, #40	@ 0x28
 8005da4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005da6:	2300      	movs	r3, #0
 8005da8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005daa:	f000 fb13 	bl	80063d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005dae:	4b1d      	ldr	r3, [pc, #116]	@ (8005e24 <xTimerCreateTimerTask+0x84>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d021      	beq.n	8005dfa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005dbe:	1d3a      	adds	r2, r7, #4
 8005dc0:	f107 0108 	add.w	r1, r7, #8
 8005dc4:	f107 030c 	add.w	r3, r7, #12
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fe f837 	bl	8003e3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	9202      	str	r2, [sp, #8]
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	2302      	movs	r3, #2
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	460a      	mov	r2, r1
 8005de0:	4911      	ldr	r1, [pc, #68]	@ (8005e28 <xTimerCreateTimerTask+0x88>)
 8005de2:	4812      	ldr	r0, [pc, #72]	@ (8005e2c <xTimerCreateTimerTask+0x8c>)
 8005de4:	f7fe ffe8 	bl	8004db8 <xTaskCreateStatic>
 8005de8:	4603      	mov	r3, r0
 8005dea:	4a11      	ldr	r2, [pc, #68]	@ (8005e30 <xTimerCreateTimerTask+0x90>)
 8005dec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005dee:	4b10      	ldr	r3, [pc, #64]	@ (8005e30 <xTimerCreateTimerTask+0x90>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005df6:	2301      	movs	r3, #1
 8005df8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10b      	bne.n	8005e18 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	613b      	str	r3, [r7, #16]
}
 8005e12:	bf00      	nop
 8005e14:	bf00      	nop
 8005e16:	e7fd      	b.n	8005e14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005e18:	697b      	ldr	r3, [r7, #20]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20001230 	.word	0x20001230
 8005e28:	08006f60 	.word	0x08006f60
 8005e2c:	08005f6d 	.word	0x08005f6d
 8005e30:	20001234 	.word	0x20001234

08005e34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08a      	sub	sp, #40	@ 0x28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10b      	bne.n	8005e64 <xTimerGenericCommand+0x30>
	__asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	623b      	str	r3, [r7, #32]
}
 8005e5e:	bf00      	nop
 8005e60:	bf00      	nop
 8005e62:	e7fd      	b.n	8005e60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e64:	4b19      	ldr	r3, [pc, #100]	@ (8005ecc <xTimerGenericCommand+0x98>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d02a      	beq.n	8005ec2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2b05      	cmp	r3, #5
 8005e7c:	dc18      	bgt.n	8005eb0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e7e:	f7ff fe95 	bl	8005bac <xTaskGetSchedulerState>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d109      	bne.n	8005e9c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e88:	4b10      	ldr	r3, [pc, #64]	@ (8005ecc <xTimerGenericCommand+0x98>)
 8005e8a:	6818      	ldr	r0, [r3, #0]
 8005e8c:	f107 0110 	add.w	r1, r7, #16
 8005e90:	2300      	movs	r3, #0
 8005e92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e94:	f7fe fba0 	bl	80045d8 <xQueueGenericSend>
 8005e98:	6278      	str	r0, [r7, #36]	@ 0x24
 8005e9a:	e012      	b.n	8005ec2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005ecc <xTimerGenericCommand+0x98>)
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	f107 0110 	add.w	r1, r7, #16
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f7fe fb96 	bl	80045d8 <xQueueGenericSend>
 8005eac:	6278      	str	r0, [r7, #36]	@ 0x24
 8005eae:	e008      	b.n	8005ec2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005eb0:	4b06      	ldr	r3, [pc, #24]	@ (8005ecc <xTimerGenericCommand+0x98>)
 8005eb2:	6818      	ldr	r0, [r3, #0]
 8005eb4:	f107 0110 	add.w	r1, r7, #16
 8005eb8:	2300      	movs	r3, #0
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	f7fe fc8e 	bl	80047dc <xQueueGenericSendFromISR>
 8005ec0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3728      	adds	r7, #40	@ 0x28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	20001230 	.word	0x20001230

08005ed0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af02      	add	r7, sp, #8
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eda:	4b23      	ldr	r3, [pc, #140]	@ (8005f68 <prvProcessExpiredTimer+0x98>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fe fa41 	bl	8004370 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d023      	beq.n	8005f44 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	699a      	ldr	r2, [r3, #24]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	18d1      	adds	r1, r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	6978      	ldr	r0, [r7, #20]
 8005f0a:	f000 f8d5 	bl	80060b8 <prvInsertTimerInActiveList>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d020      	beq.n	8005f56 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f14:	2300      	movs	r3, #0
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	2300      	movs	r3, #0
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	6978      	ldr	r0, [r7, #20]
 8005f20:	f7ff ff88 	bl	8005e34 <xTimerGenericCommand>
 8005f24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d114      	bne.n	8005f56 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	60fb      	str	r3, [r7, #12]
}
 8005f3e:	bf00      	nop
 8005f40:	bf00      	nop
 8005f42:	e7fd      	b.n	8005f40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f4a:	f023 0301 	bic.w	r3, r3, #1
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	6978      	ldr	r0, [r7, #20]
 8005f5c:	4798      	blx	r3
}
 8005f5e:	bf00      	nop
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20001228 	.word	0x20001228

08005f6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f74:	f107 0308 	add.w	r3, r7, #8
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 f859 	bl	8006030 <prvGetNextExpireTime>
 8005f7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	4619      	mov	r1, r3
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 f805 	bl	8005f94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f8a:	f000 f8d7 	bl	800613c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f8e:	bf00      	nop
 8005f90:	e7f0      	b.n	8005f74 <prvTimerTask+0x8>
	...

08005f94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005f9e:	f7ff f96f 	bl	8005280 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fa2:	f107 0308 	add.w	r3, r7, #8
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 f866 	bl	8006078 <prvSampleTimeNow>
 8005fac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d130      	bne.n	8006016 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10a      	bne.n	8005fd0 <prvProcessTimerOrBlockTask+0x3c>
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d806      	bhi.n	8005fd0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005fc2:	f7ff f96b 	bl	800529c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005fc6:	68f9      	ldr	r1, [r7, #12]
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff ff81 	bl	8005ed0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005fce:	e024      	b.n	800601a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d008      	beq.n	8005fe8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005fd6:	4b13      	ldr	r3, [pc, #76]	@ (8006024 <prvProcessTimerOrBlockTask+0x90>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <prvProcessTimerOrBlockTask+0x50>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <prvProcessTimerOrBlockTask+0x52>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8006028 <prvProcessTimerOrBlockTask+0x94>)
 8005fea:	6818      	ldr	r0, [r3, #0]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	f7fe feab 	bl	8004d50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ffa:	f7ff f94f 	bl	800529c <xTaskResumeAll>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10a      	bne.n	800601a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006004:	4b09      	ldr	r3, [pc, #36]	@ (800602c <prvProcessTimerOrBlockTask+0x98>)
 8006006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	f3bf 8f6f 	isb	sy
}
 8006014:	e001      	b.n	800601a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006016:	f7ff f941 	bl	800529c <xTaskResumeAll>
}
 800601a:	bf00      	nop
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	2000122c 	.word	0x2000122c
 8006028:	20001230 	.word	0x20001230
 800602c:	e000ed04 	.word	0xe000ed04

08006030 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006038:	4b0e      	ldr	r3, [pc, #56]	@ (8006074 <prvGetNextExpireTime+0x44>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <prvGetNextExpireTime+0x16>
 8006042:	2201      	movs	r2, #1
 8006044:	e000      	b.n	8006048 <prvGetNextExpireTime+0x18>
 8006046:	2200      	movs	r2, #0
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d105      	bne.n	8006060 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006054:	4b07      	ldr	r3, [pc, #28]	@ (8006074 <prvGetNextExpireTime+0x44>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	e001      	b.n	8006064 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006060:	2300      	movs	r3, #0
 8006062:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006064:	68fb      	ldr	r3, [r7, #12]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20001228 	.word	0x20001228

08006078 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006080:	f7ff f9aa 	bl	80053d8 <xTaskGetTickCount>
 8006084:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006086:	4b0b      	ldr	r3, [pc, #44]	@ (80060b4 <prvSampleTimeNow+0x3c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	429a      	cmp	r2, r3
 800608e:	d205      	bcs.n	800609c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006090:	f000 f93a 	bl	8006308 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	e002      	b.n	80060a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80060a2:	4a04      	ldr	r2, [pc, #16]	@ (80060b4 <prvSampleTimeNow+0x3c>)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80060a8:	68fb      	ldr	r3, [r7, #12]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20001238 	.word	0x20001238

080060b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
 80060c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80060c6:	2300      	movs	r3, #0
 80060c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d812      	bhi.n	8006104 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	1ad2      	subs	r2, r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d302      	bcc.n	80060f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80060ec:	2301      	movs	r3, #1
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	e01b      	b.n	800612a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80060f2:	4b10      	ldr	r3, [pc, #64]	@ (8006134 <prvInsertTimerInActiveList+0x7c>)
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3304      	adds	r3, #4
 80060fa:	4619      	mov	r1, r3
 80060fc:	4610      	mov	r0, r2
 80060fe:	f7fe f8fe 	bl	80042fe <vListInsert>
 8006102:	e012      	b.n	800612a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d206      	bcs.n	800611a <prvInsertTimerInActiveList+0x62>
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	429a      	cmp	r2, r3
 8006112:	d302      	bcc.n	800611a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006114:	2301      	movs	r3, #1
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	e007      	b.n	800612a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800611a:	4b07      	ldr	r3, [pc, #28]	@ (8006138 <prvInsertTimerInActiveList+0x80>)
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	3304      	adds	r3, #4
 8006122:	4619      	mov	r1, r3
 8006124:	4610      	mov	r0, r2
 8006126:	f7fe f8ea 	bl	80042fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800612a:	697b      	ldr	r3, [r7, #20]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	2000122c 	.word	0x2000122c
 8006138:	20001228 	.word	0x20001228

0800613c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08e      	sub	sp, #56	@ 0x38
 8006140:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006142:	e0ce      	b.n	80062e2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	da19      	bge.n	800617e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800614a:	1d3b      	adds	r3, r7, #4
 800614c:	3304      	adds	r3, #4
 800614e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10b      	bne.n	800616e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	61fb      	str	r3, [r7, #28]
}
 8006168:	bf00      	nop
 800616a:	bf00      	nop
 800616c:	e7fd      	b.n	800616a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800616e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006174:	6850      	ldr	r0, [r2, #4]
 8006176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006178:	6892      	ldr	r2, [r2, #8]
 800617a:	4611      	mov	r1, r2
 800617c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	f2c0 80ae 	blt.w	80062e2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800618a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d004      	beq.n	800619c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006194:	3304      	adds	r3, #4
 8006196:	4618      	mov	r0, r3
 8006198:	f7fe f8ea 	bl	8004370 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800619c:	463b      	mov	r3, r7
 800619e:	4618      	mov	r0, r3
 80061a0:	f7ff ff6a 	bl	8006078 <prvSampleTimeNow>
 80061a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b09      	cmp	r3, #9
 80061aa:	f200 8097 	bhi.w	80062dc <prvProcessReceivedCommands+0x1a0>
 80061ae:	a201      	add	r2, pc, #4	@ (adr r2, 80061b4 <prvProcessReceivedCommands+0x78>)
 80061b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b4:	080061dd 	.word	0x080061dd
 80061b8:	080061dd 	.word	0x080061dd
 80061bc:	080061dd 	.word	0x080061dd
 80061c0:	08006253 	.word	0x08006253
 80061c4:	08006267 	.word	0x08006267
 80061c8:	080062b3 	.word	0x080062b3
 80061cc:	080061dd 	.word	0x080061dd
 80061d0:	080061dd 	.word	0x080061dd
 80061d4:	08006253 	.word	0x08006253
 80061d8:	08006267 	.word	0x08006267
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061e2:	f043 0301 	orr.w	r3, r3, #1
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	18d1      	adds	r1, r2, r3
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061fc:	f7ff ff5c 	bl	80060b8 <prvInsertTimerInActiveList>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d06c      	beq.n	80062e0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800620c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800620e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	d061      	beq.n	80062e0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	441a      	add	r2, r3
 8006224:	2300      	movs	r3, #0
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	2300      	movs	r3, #0
 800622a:	2100      	movs	r1, #0
 800622c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800622e:	f7ff fe01 	bl	8005e34 <xTimerGenericCommand>
 8006232:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d152      	bne.n	80062e0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	61bb      	str	r3, [r7, #24]
}
 800624c:	bf00      	nop
 800624e:	bf00      	nop
 8006250:	e7fd      	b.n	800624e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006254:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006258:	f023 0301 	bic.w	r3, r3, #1
 800625c:	b2da      	uxtb	r2, r3
 800625e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006260:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006264:	e03d      	b.n	80062e2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006268:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800626c:	f043 0301 	orr.w	r3, r3, #1
 8006270:	b2da      	uxtb	r2, r3
 8006272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006274:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800627e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10b      	bne.n	800629e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	617b      	str	r3, [r7, #20]
}
 8006298:	bf00      	nop
 800629a:	bf00      	nop
 800629c:	e7fd      	b.n	800629a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800629e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a0:	699a      	ldr	r2, [r3, #24]
 80062a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a4:	18d1      	adds	r1, r2, r3
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062ac:	f7ff ff04 	bl	80060b8 <prvInsertTimerInActiveList>
					break;
 80062b0:	e017      	b.n	80062e2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80062b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d103      	bne.n	80062c8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80062c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062c2:	f000 fc09 	bl	8006ad8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80062c6:	e00c      	b.n	80062e2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062ce:	f023 0301 	bic.w	r3, r3, #1
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80062da:	e002      	b.n	80062e2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80062dc:	bf00      	nop
 80062de:	e000      	b.n	80062e2 <prvProcessReceivedCommands+0x1a6>
					break;
 80062e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062e2:	4b08      	ldr	r3, [pc, #32]	@ (8006304 <prvProcessReceivedCommands+0x1c8>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	1d39      	adds	r1, r7, #4
 80062e8:	2200      	movs	r2, #0
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fe fb14 	bl	8004918 <xQueueReceive>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f47f af26 	bne.w	8006144 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80062f8:	bf00      	nop
 80062fa:	bf00      	nop
 80062fc:	3730      	adds	r7, #48	@ 0x30
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20001230 	.word	0x20001230

08006308 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b088      	sub	sp, #32
 800630c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800630e:	e049      	b.n	80063a4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006310:	4b2e      	ldr	r3, [pc, #184]	@ (80063cc <prvSwitchTimerLists+0xc4>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800631a:	4b2c      	ldr	r3, [pc, #176]	@ (80063cc <prvSwitchTimerLists+0xc4>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3304      	adds	r3, #4
 8006328:	4618      	mov	r0, r3
 800632a:	f7fe f821 	bl	8004370 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b00      	cmp	r3, #0
 8006342:	d02f      	beq.n	80063a4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	4413      	add	r3, r2
 800634c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	429a      	cmp	r2, r3
 8006354:	d90e      	bls.n	8006374 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006362:	4b1a      	ldr	r3, [pc, #104]	@ (80063cc <prvSwitchTimerLists+0xc4>)
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	3304      	adds	r3, #4
 800636a:	4619      	mov	r1, r3
 800636c:	4610      	mov	r0, r2
 800636e:	f7fd ffc6 	bl	80042fe <vListInsert>
 8006372:	e017      	b.n	80063a4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006374:	2300      	movs	r3, #0
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	2300      	movs	r3, #0
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	2100      	movs	r1, #0
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f7ff fd58 	bl	8005e34 <xTimerGenericCommand>
 8006384:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10b      	bne.n	80063a4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	603b      	str	r3, [r7, #0]
}
 800639e:	bf00      	nop
 80063a0:	bf00      	nop
 80063a2:	e7fd      	b.n	80063a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063a4:	4b09      	ldr	r3, [pc, #36]	@ (80063cc <prvSwitchTimerLists+0xc4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1b0      	bne.n	8006310 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80063ae:	4b07      	ldr	r3, [pc, #28]	@ (80063cc <prvSwitchTimerLists+0xc4>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80063b4:	4b06      	ldr	r3, [pc, #24]	@ (80063d0 <prvSwitchTimerLists+0xc8>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a04      	ldr	r2, [pc, #16]	@ (80063cc <prvSwitchTimerLists+0xc4>)
 80063ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80063bc:	4a04      	ldr	r2, [pc, #16]	@ (80063d0 <prvSwitchTimerLists+0xc8>)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	6013      	str	r3, [r2, #0]
}
 80063c2:	bf00      	nop
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20001228 	.word	0x20001228
 80063d0:	2000122c 	.word	0x2000122c

080063d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80063da:	f000 f98d 	bl	80066f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80063de:	4b15      	ldr	r3, [pc, #84]	@ (8006434 <prvCheckForValidListAndQueue+0x60>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d120      	bne.n	8006428 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80063e6:	4814      	ldr	r0, [pc, #80]	@ (8006438 <prvCheckForValidListAndQueue+0x64>)
 80063e8:	f7fd ff38 	bl	800425c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80063ec:	4813      	ldr	r0, [pc, #76]	@ (800643c <prvCheckForValidListAndQueue+0x68>)
 80063ee:	f7fd ff35 	bl	800425c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80063f2:	4b13      	ldr	r3, [pc, #76]	@ (8006440 <prvCheckForValidListAndQueue+0x6c>)
 80063f4:	4a10      	ldr	r2, [pc, #64]	@ (8006438 <prvCheckForValidListAndQueue+0x64>)
 80063f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80063f8:	4b12      	ldr	r3, [pc, #72]	@ (8006444 <prvCheckForValidListAndQueue+0x70>)
 80063fa:	4a10      	ldr	r2, [pc, #64]	@ (800643c <prvCheckForValidListAndQueue+0x68>)
 80063fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80063fe:	2300      	movs	r3, #0
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	4b11      	ldr	r3, [pc, #68]	@ (8006448 <prvCheckForValidListAndQueue+0x74>)
 8006404:	4a11      	ldr	r2, [pc, #68]	@ (800644c <prvCheckForValidListAndQueue+0x78>)
 8006406:	2110      	movs	r1, #16
 8006408:	200a      	movs	r0, #10
 800640a:	f7fe f845 	bl	8004498 <xQueueGenericCreateStatic>
 800640e:	4603      	mov	r3, r0
 8006410:	4a08      	ldr	r2, [pc, #32]	@ (8006434 <prvCheckForValidListAndQueue+0x60>)
 8006412:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006414:	4b07      	ldr	r3, [pc, #28]	@ (8006434 <prvCheckForValidListAndQueue+0x60>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800641c:	4b05      	ldr	r3, [pc, #20]	@ (8006434 <prvCheckForValidListAndQueue+0x60>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	490b      	ldr	r1, [pc, #44]	@ (8006450 <prvCheckForValidListAndQueue+0x7c>)
 8006422:	4618      	mov	r0, r3
 8006424:	f7fe fc6a 	bl	8004cfc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006428:	f000 f998 	bl	800675c <vPortExitCritical>
}
 800642c:	bf00      	nop
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20001230 	.word	0x20001230
 8006438:	20001200 	.word	0x20001200
 800643c:	20001214 	.word	0x20001214
 8006440:	20001228 	.word	0x20001228
 8006444:	2000122c 	.word	0x2000122c
 8006448:	200012dc 	.word	0x200012dc
 800644c:	2000123c 	.word	0x2000123c
 8006450:	08006f68 	.word	0x08006f68

08006454 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08a      	sub	sp, #40	@ 0x28
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
 8006460:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006462:	f06f 0301 	mvn.w	r3, #1
 8006466:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006474:	4b06      	ldr	r3, [pc, #24]	@ (8006490 <xTimerPendFunctionCallFromISR+0x3c>)
 8006476:	6818      	ldr	r0, [r3, #0]
 8006478:	f107 0114 	add.w	r1, r7, #20
 800647c:	2300      	movs	r3, #0
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	f7fe f9ac 	bl	80047dc <xQueueGenericSendFromISR>
 8006484:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006488:	4618      	mov	r0, r3
 800648a:	3728      	adds	r7, #40	@ 0x28
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	20001230 	.word	0x20001230

08006494 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	3b04      	subs	r3, #4
 80064a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80064ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	3b04      	subs	r3, #4
 80064b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f023 0201 	bic.w	r2, r3, #1
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3b04      	subs	r3, #4
 80064c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064c4:	4a0c      	ldr	r2, [pc, #48]	@ (80064f8 <pxPortInitialiseStack+0x64>)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3b14      	subs	r3, #20
 80064ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	3b04      	subs	r3, #4
 80064da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f06f 0202 	mvn.w	r2, #2
 80064e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3b20      	subs	r3, #32
 80064e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064ea:	68fb      	ldr	r3, [r7, #12]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	080064fd 	.word	0x080064fd

080064fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006506:	4b13      	ldr	r3, [pc, #76]	@ (8006554 <prvTaskExitError+0x58>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650e:	d00b      	beq.n	8006528 <prvTaskExitError+0x2c>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	60fb      	str	r3, [r7, #12]
}
 8006522:	bf00      	nop
 8006524:	bf00      	nop
 8006526:	e7fd      	b.n	8006524 <prvTaskExitError+0x28>
	__asm volatile
 8006528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800652c:	f383 8811 	msr	BASEPRI, r3
 8006530:	f3bf 8f6f 	isb	sy
 8006534:	f3bf 8f4f 	dsb	sy
 8006538:	60bb      	str	r3, [r7, #8]
}
 800653a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800653c:	bf00      	nop
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0fc      	beq.n	800653e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20000028 	.word	0x20000028
	...

08006560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006560:	4b07      	ldr	r3, [pc, #28]	@ (8006580 <pxCurrentTCBConst2>)
 8006562:	6819      	ldr	r1, [r3, #0]
 8006564:	6808      	ldr	r0, [r1, #0]
 8006566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656a:	f380 8809 	msr	PSP, r0
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f04f 0000 	mov.w	r0, #0
 8006576:	f380 8811 	msr	BASEPRI, r0
 800657a:	4770      	bx	lr
 800657c:	f3af 8000 	nop.w

08006580 <pxCurrentTCBConst2>:
 8006580:	20000d00 	.word	0x20000d00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006584:	bf00      	nop
 8006586:	bf00      	nop

08006588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006588:	4808      	ldr	r0, [pc, #32]	@ (80065ac <prvPortStartFirstTask+0x24>)
 800658a:	6800      	ldr	r0, [r0, #0]
 800658c:	6800      	ldr	r0, [r0, #0]
 800658e:	f380 8808 	msr	MSP, r0
 8006592:	f04f 0000 	mov.w	r0, #0
 8006596:	f380 8814 	msr	CONTROL, r0
 800659a:	b662      	cpsie	i
 800659c:	b661      	cpsie	f
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	df00      	svc	0
 80065a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065aa:	bf00      	nop
 80065ac:	e000ed08 	.word	0xe000ed08

080065b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80065b6:	4b47      	ldr	r3, [pc, #284]	@ (80066d4 <xPortStartScheduler+0x124>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a47      	ldr	r2, [pc, #284]	@ (80066d8 <xPortStartScheduler+0x128>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d10b      	bne.n	80065d8 <xPortStartScheduler+0x28>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	613b      	str	r3, [r7, #16]
}
 80065d2:	bf00      	nop
 80065d4:	bf00      	nop
 80065d6:	e7fd      	b.n	80065d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065d8:	4b3e      	ldr	r3, [pc, #248]	@ (80066d4 <xPortStartScheduler+0x124>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a3f      	ldr	r2, [pc, #252]	@ (80066dc <xPortStartScheduler+0x12c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d10b      	bne.n	80065fa <xPortStartScheduler+0x4a>
	__asm volatile
 80065e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	60fb      	str	r3, [r7, #12]
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop
 80065f8:	e7fd      	b.n	80065f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065fa:	4b39      	ldr	r3, [pc, #228]	@ (80066e0 <xPortStartScheduler+0x130>)
 80065fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	b2db      	uxtb	r3, r3
 8006604:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	22ff      	movs	r2, #255	@ 0xff
 800660a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	b2db      	uxtb	r3, r3
 8006612:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006614:	78fb      	ldrb	r3, [r7, #3]
 8006616:	b2db      	uxtb	r3, r3
 8006618:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800661c:	b2da      	uxtb	r2, r3
 800661e:	4b31      	ldr	r3, [pc, #196]	@ (80066e4 <xPortStartScheduler+0x134>)
 8006620:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006622:	4b31      	ldr	r3, [pc, #196]	@ (80066e8 <xPortStartScheduler+0x138>)
 8006624:	2207      	movs	r2, #7
 8006626:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006628:	e009      	b.n	800663e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800662a:	4b2f      	ldr	r3, [pc, #188]	@ (80066e8 <xPortStartScheduler+0x138>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3b01      	subs	r3, #1
 8006630:	4a2d      	ldr	r2, [pc, #180]	@ (80066e8 <xPortStartScheduler+0x138>)
 8006632:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	b2db      	uxtb	r3, r3
 800663c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800663e:	78fb      	ldrb	r3, [r7, #3]
 8006640:	b2db      	uxtb	r3, r3
 8006642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006646:	2b80      	cmp	r3, #128	@ 0x80
 8006648:	d0ef      	beq.n	800662a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800664a:	4b27      	ldr	r3, [pc, #156]	@ (80066e8 <xPortStartScheduler+0x138>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f1c3 0307 	rsb	r3, r3, #7
 8006652:	2b04      	cmp	r3, #4
 8006654:	d00b      	beq.n	800666e <xPortStartScheduler+0xbe>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	60bb      	str	r3, [r7, #8]
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	e7fd      	b.n	800666a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800666e:	4b1e      	ldr	r3, [pc, #120]	@ (80066e8 <xPortStartScheduler+0x138>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	4a1c      	ldr	r2, [pc, #112]	@ (80066e8 <xPortStartScheduler+0x138>)
 8006676:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006678:	4b1b      	ldr	r3, [pc, #108]	@ (80066e8 <xPortStartScheduler+0x138>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006680:	4a19      	ldr	r2, [pc, #100]	@ (80066e8 <xPortStartScheduler+0x138>)
 8006682:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	b2da      	uxtb	r2, r3
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800668c:	4b17      	ldr	r3, [pc, #92]	@ (80066ec <xPortStartScheduler+0x13c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a16      	ldr	r2, [pc, #88]	@ (80066ec <xPortStartScheduler+0x13c>)
 8006692:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006696:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006698:	4b14      	ldr	r3, [pc, #80]	@ (80066ec <xPortStartScheduler+0x13c>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a13      	ldr	r2, [pc, #76]	@ (80066ec <xPortStartScheduler+0x13c>)
 800669e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80066a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066a4:	f000 f8da 	bl	800685c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066a8:	4b11      	ldr	r3, [pc, #68]	@ (80066f0 <xPortStartScheduler+0x140>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80066ae:	f000 f8f9 	bl	80068a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066b2:	4b10      	ldr	r3, [pc, #64]	@ (80066f4 <xPortStartScheduler+0x144>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a0f      	ldr	r2, [pc, #60]	@ (80066f4 <xPortStartScheduler+0x144>)
 80066b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80066bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066be:	f7ff ff63 	bl	8006588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066c2:	f7fe ff53 	bl	800556c <vTaskSwitchContext>
	prvTaskExitError();
 80066c6:	f7ff ff19 	bl	80064fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	e000ed00 	.word	0xe000ed00
 80066d8:	410fc271 	.word	0x410fc271
 80066dc:	410fc270 	.word	0x410fc270
 80066e0:	e000e400 	.word	0xe000e400
 80066e4:	2000132c 	.word	0x2000132c
 80066e8:	20001330 	.word	0x20001330
 80066ec:	e000ed20 	.word	0xe000ed20
 80066f0:	20000028 	.word	0x20000028
 80066f4:	e000ef34 	.word	0xe000ef34

080066f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	607b      	str	r3, [r7, #4]
}
 8006710:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006712:	4b10      	ldr	r3, [pc, #64]	@ (8006754 <vPortEnterCritical+0x5c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3301      	adds	r3, #1
 8006718:	4a0e      	ldr	r2, [pc, #56]	@ (8006754 <vPortEnterCritical+0x5c>)
 800671a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800671c:	4b0d      	ldr	r3, [pc, #52]	@ (8006754 <vPortEnterCritical+0x5c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d110      	bne.n	8006746 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006724:	4b0c      	ldr	r3, [pc, #48]	@ (8006758 <vPortEnterCritical+0x60>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00b      	beq.n	8006746 <vPortEnterCritical+0x4e>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	603b      	str	r3, [r7, #0]
}
 8006740:	bf00      	nop
 8006742:	bf00      	nop
 8006744:	e7fd      	b.n	8006742 <vPortEnterCritical+0x4a>
	}
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	20000028 	.word	0x20000028
 8006758:	e000ed04 	.word	0xe000ed04

0800675c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006762:	4b12      	ldr	r3, [pc, #72]	@ (80067ac <vPortExitCritical+0x50>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10b      	bne.n	8006782 <vPortExitCritical+0x26>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	607b      	str	r3, [r7, #4]
}
 800677c:	bf00      	nop
 800677e:	bf00      	nop
 8006780:	e7fd      	b.n	800677e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006782:	4b0a      	ldr	r3, [pc, #40]	@ (80067ac <vPortExitCritical+0x50>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3b01      	subs	r3, #1
 8006788:	4a08      	ldr	r2, [pc, #32]	@ (80067ac <vPortExitCritical+0x50>)
 800678a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800678c:	4b07      	ldr	r3, [pc, #28]	@ (80067ac <vPortExitCritical+0x50>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d105      	bne.n	80067a0 <vPortExitCritical+0x44>
 8006794:	2300      	movs	r3, #0
 8006796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	f383 8811 	msr	BASEPRI, r3
}
 800679e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	20000028 	.word	0x20000028

080067b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067b0:	f3ef 8009 	mrs	r0, PSP
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	4b15      	ldr	r3, [pc, #84]	@ (8006810 <pxCurrentTCBConst>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	f01e 0f10 	tst.w	lr, #16
 80067c0:	bf08      	it	eq
 80067c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ca:	6010      	str	r0, [r2, #0]
 80067cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80067d4:	f380 8811 	msr	BASEPRI, r0
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f7fe fec4 	bl	800556c <vTaskSwitchContext>
 80067e4:	f04f 0000 	mov.w	r0, #0
 80067e8:	f380 8811 	msr	BASEPRI, r0
 80067ec:	bc09      	pop	{r0, r3}
 80067ee:	6819      	ldr	r1, [r3, #0]
 80067f0:	6808      	ldr	r0, [r1, #0]
 80067f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f6:	f01e 0f10 	tst.w	lr, #16
 80067fa:	bf08      	it	eq
 80067fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006800:	f380 8809 	msr	PSP, r0
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	f3af 8000 	nop.w

08006810 <pxCurrentTCBConst>:
 8006810:	20000d00 	.word	0x20000d00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006814:	bf00      	nop
 8006816:	bf00      	nop

08006818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	607b      	str	r3, [r7, #4]
}
 8006830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006832:	f7fe fde1 	bl	80053f8 <xTaskIncrementTick>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d003      	beq.n	8006844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800683c:	4b06      	ldr	r3, [pc, #24]	@ (8006858 <xPortSysTickHandler+0x40>)
 800683e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	2300      	movs	r3, #0
 8006846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	f383 8811 	msr	BASEPRI, r3
}
 800684e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006850:	bf00      	nop
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	e000ed04 	.word	0xe000ed04

0800685c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006860:	4b0b      	ldr	r3, [pc, #44]	@ (8006890 <vPortSetupTimerInterrupt+0x34>)
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006866:	4b0b      	ldr	r3, [pc, #44]	@ (8006894 <vPortSetupTimerInterrupt+0x38>)
 8006868:	2200      	movs	r2, #0
 800686a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800686c:	4b0a      	ldr	r3, [pc, #40]	@ (8006898 <vPortSetupTimerInterrupt+0x3c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a0a      	ldr	r2, [pc, #40]	@ (800689c <vPortSetupTimerInterrupt+0x40>)
 8006872:	fba2 2303 	umull	r2, r3, r2, r3
 8006876:	099b      	lsrs	r3, r3, #6
 8006878:	4a09      	ldr	r2, [pc, #36]	@ (80068a0 <vPortSetupTimerInterrupt+0x44>)
 800687a:	3b01      	subs	r3, #1
 800687c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800687e:	4b04      	ldr	r3, [pc, #16]	@ (8006890 <vPortSetupTimerInterrupt+0x34>)
 8006880:	2207      	movs	r2, #7
 8006882:	601a      	str	r2, [r3, #0]
}
 8006884:	bf00      	nop
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	e000e010 	.word	0xe000e010
 8006894:	e000e018 	.word	0xe000e018
 8006898:	2000001c 	.word	0x2000001c
 800689c:	10624dd3 	.word	0x10624dd3
 80068a0:	e000e014 	.word	0xe000e014

080068a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80068a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80068b4 <vPortEnableVFP+0x10>
 80068a8:	6801      	ldr	r1, [r0, #0]
 80068aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80068ae:	6001      	str	r1, [r0, #0]
 80068b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80068b2:	bf00      	nop
 80068b4:	e000ed88 	.word	0xe000ed88

080068b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80068be:	f3ef 8305 	mrs	r3, IPSR
 80068c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b0f      	cmp	r3, #15
 80068c8:	d915      	bls.n	80068f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068ca:	4a18      	ldr	r2, [pc, #96]	@ (800692c <vPortValidateInterruptPriority+0x74>)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068d4:	4b16      	ldr	r3, [pc, #88]	@ (8006930 <vPortValidateInterruptPriority+0x78>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	7afa      	ldrb	r2, [r7, #11]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d20b      	bcs.n	80068f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	607b      	str	r3, [r7, #4]
}
 80068f0:	bf00      	nop
 80068f2:	bf00      	nop
 80068f4:	e7fd      	b.n	80068f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006934 <vPortValidateInterruptPriority+0x7c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80068fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006938 <vPortValidateInterruptPriority+0x80>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d90b      	bls.n	800691e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	603b      	str	r3, [r7, #0]
}
 8006918:	bf00      	nop
 800691a:	bf00      	nop
 800691c:	e7fd      	b.n	800691a <vPortValidateInterruptPriority+0x62>
	}
 800691e:	bf00      	nop
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	e000e3f0 	.word	0xe000e3f0
 8006930:	2000132c 	.word	0x2000132c
 8006934:	e000ed0c 	.word	0xe000ed0c
 8006938:	20001330 	.word	0x20001330

0800693c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08a      	sub	sp, #40	@ 0x28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006944:	2300      	movs	r3, #0
 8006946:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006948:	f7fe fc9a 	bl	8005280 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800694c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ac0 <pvPortMalloc+0x184>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006954:	f000 f924 	bl	8006ba0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006958:	4b5a      	ldr	r3, [pc, #360]	@ (8006ac4 <pvPortMalloc+0x188>)
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4013      	ands	r3, r2
 8006960:	2b00      	cmp	r3, #0
 8006962:	f040 8095 	bne.w	8006a90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d01e      	beq.n	80069aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800696c:	2208      	movs	r2, #8
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4413      	add	r3, r2
 8006972:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f003 0307 	and.w	r3, r3, #7
 800697a:	2b00      	cmp	r3, #0
 800697c:	d015      	beq.n	80069aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f023 0307 	bic.w	r3, r3, #7
 8006984:	3308      	adds	r3, #8
 8006986:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00b      	beq.n	80069aa <pvPortMalloc+0x6e>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	617b      	str	r3, [r7, #20]
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop
 80069a8:	e7fd      	b.n	80069a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d06f      	beq.n	8006a90 <pvPortMalloc+0x154>
 80069b0:	4b45      	ldr	r3, [pc, #276]	@ (8006ac8 <pvPortMalloc+0x18c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d86a      	bhi.n	8006a90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069ba:	4b44      	ldr	r3, [pc, #272]	@ (8006acc <pvPortMalloc+0x190>)
 80069bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069be:	4b43      	ldr	r3, [pc, #268]	@ (8006acc <pvPortMalloc+0x190>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069c4:	e004      	b.n	80069d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80069c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d903      	bls.n	80069e2 <pvPortMalloc+0xa6>
 80069da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1f1      	bne.n	80069c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069e2:	4b37      	ldr	r3, [pc, #220]	@ (8006ac0 <pvPortMalloc+0x184>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d051      	beq.n	8006a90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2208      	movs	r2, #8
 80069f2:	4413      	add	r3, r2
 80069f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	1ad2      	subs	r2, r2, r3
 8006a06:	2308      	movs	r3, #8
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d920      	bls.n	8006a50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4413      	add	r3, r2
 8006a14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	f003 0307 	and.w	r3, r3, #7
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00b      	beq.n	8006a38 <pvPortMalloc+0xfc>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	613b      	str	r3, [r7, #16]
}
 8006a32:	bf00      	nop
 8006a34:	bf00      	nop
 8006a36:	e7fd      	b.n	8006a34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	1ad2      	subs	r2, r2, r3
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a4a:	69b8      	ldr	r0, [r7, #24]
 8006a4c:	f000 f90a 	bl	8006c64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a50:	4b1d      	ldr	r3, [pc, #116]	@ (8006ac8 <pvPortMalloc+0x18c>)
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ac8 <pvPortMalloc+0x18c>)
 8006a5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ac8 <pvPortMalloc+0x18c>)
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	4b1b      	ldr	r3, [pc, #108]	@ (8006ad0 <pvPortMalloc+0x194>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d203      	bcs.n	8006a72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a6a:	4b17      	ldr	r3, [pc, #92]	@ (8006ac8 <pvPortMalloc+0x18c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a18      	ldr	r2, [pc, #96]	@ (8006ad0 <pvPortMalloc+0x194>)
 8006a70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	4b13      	ldr	r3, [pc, #76]	@ (8006ac4 <pvPortMalloc+0x188>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006a86:	4b13      	ldr	r3, [pc, #76]	@ (8006ad4 <pvPortMalloc+0x198>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	4a11      	ldr	r2, [pc, #68]	@ (8006ad4 <pvPortMalloc+0x198>)
 8006a8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a90:	f7fe fc04 	bl	800529c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	f003 0307 	and.w	r3, r3, #7
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00b      	beq.n	8006ab6 <pvPortMalloc+0x17a>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	60fb      	str	r3, [r7, #12]
}
 8006ab0:	bf00      	nop
 8006ab2:	bf00      	nop
 8006ab4:	e7fd      	b.n	8006ab2 <pvPortMalloc+0x176>
	return pvReturn;
 8006ab6:	69fb      	ldr	r3, [r7, #28]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3728      	adds	r7, #40	@ 0x28
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	20004f3c 	.word	0x20004f3c
 8006ac4:	20004f50 	.word	0x20004f50
 8006ac8:	20004f40 	.word	0x20004f40
 8006acc:	20004f34 	.word	0x20004f34
 8006ad0:	20004f44 	.word	0x20004f44
 8006ad4:	20004f48 	.word	0x20004f48

08006ad8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d04f      	beq.n	8006b8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006aea:	2308      	movs	r3, #8
 8006aec:	425b      	negs	r3, r3
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	4413      	add	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	4b25      	ldr	r3, [pc, #148]	@ (8006b94 <vPortFree+0xbc>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4013      	ands	r3, r2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10b      	bne.n	8006b1e <vPortFree+0x46>
	__asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	60fb      	str	r3, [r7, #12]
}
 8006b18:	bf00      	nop
 8006b1a:	bf00      	nop
 8006b1c:	e7fd      	b.n	8006b1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00b      	beq.n	8006b3e <vPortFree+0x66>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	60bb      	str	r3, [r7, #8]
}
 8006b38:	bf00      	nop
 8006b3a:	bf00      	nop
 8006b3c:	e7fd      	b.n	8006b3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	4b14      	ldr	r3, [pc, #80]	@ (8006b94 <vPortFree+0xbc>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4013      	ands	r3, r2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d01e      	beq.n	8006b8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d11a      	bne.n	8006b8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	4b0e      	ldr	r3, [pc, #56]	@ (8006b94 <vPortFree+0xbc>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	43db      	mvns	r3, r3
 8006b5e:	401a      	ands	r2, r3
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b64:	f7fe fb8c 	bl	8005280 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b98 <vPortFree+0xc0>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4413      	add	r3, r2
 8006b72:	4a09      	ldr	r2, [pc, #36]	@ (8006b98 <vPortFree+0xc0>)
 8006b74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b76:	6938      	ldr	r0, [r7, #16]
 8006b78:	f000 f874 	bl	8006c64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006b7c:	4b07      	ldr	r3, [pc, #28]	@ (8006b9c <vPortFree+0xc4>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3301      	adds	r3, #1
 8006b82:	4a06      	ldr	r2, [pc, #24]	@ (8006b9c <vPortFree+0xc4>)
 8006b84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006b86:	f7fe fb89 	bl	800529c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b8a:	bf00      	nop
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20004f50 	.word	0x20004f50
 8006b98:	20004f40 	.word	0x20004f40
 8006b9c:	20004f4c 	.word	0x20004f4c

08006ba0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ba6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006baa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006bac:	4b27      	ldr	r3, [pc, #156]	@ (8006c4c <prvHeapInit+0xac>)
 8006bae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f003 0307 	and.w	r3, r3, #7
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00c      	beq.n	8006bd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3307      	adds	r3, #7
 8006bbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0307 	bic.w	r3, r3, #7
 8006bc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	4a1f      	ldr	r2, [pc, #124]	@ (8006c4c <prvHeapInit+0xac>)
 8006bd0:	4413      	add	r3, r2
 8006bd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c50 <prvHeapInit+0xb0>)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006bde:	4b1c      	ldr	r3, [pc, #112]	@ (8006c50 <prvHeapInit+0xb0>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	4413      	add	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006bec:	2208      	movs	r2, #8
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	1a9b      	subs	r3, r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0307 	bic.w	r3, r3, #7
 8006bfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4a15      	ldr	r2, [pc, #84]	@ (8006c54 <prvHeapInit+0xb4>)
 8006c00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c02:	4b14      	ldr	r3, [pc, #80]	@ (8006c54 <prvHeapInit+0xb4>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2200      	movs	r2, #0
 8006c08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c0a:	4b12      	ldr	r3, [pc, #72]	@ (8006c54 <prvHeapInit+0xb4>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	1ad2      	subs	r2, r2, r3
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c20:	4b0c      	ldr	r3, [pc, #48]	@ (8006c54 <prvHeapInit+0xb4>)
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c58 <prvHeapInit+0xb8>)
 8006c2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	4a09      	ldr	r2, [pc, #36]	@ (8006c5c <prvHeapInit+0xbc>)
 8006c36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c38:	4b09      	ldr	r3, [pc, #36]	@ (8006c60 <prvHeapInit+0xc0>)
 8006c3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006c3e:	601a      	str	r2, [r3, #0]
}
 8006c40:	bf00      	nop
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	20001334 	.word	0x20001334
 8006c50:	20004f34 	.word	0x20004f34
 8006c54:	20004f3c 	.word	0x20004f3c
 8006c58:	20004f44 	.word	0x20004f44
 8006c5c:	20004f40 	.word	0x20004f40
 8006c60:	20004f50 	.word	0x20004f50

08006c64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c6c:	4b28      	ldr	r3, [pc, #160]	@ (8006d10 <prvInsertBlockIntoFreeList+0xac>)
 8006c6e:	60fb      	str	r3, [r7, #12]
 8006c70:	e002      	b.n	8006c78 <prvInsertBlockIntoFreeList+0x14>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d8f7      	bhi.n	8006c72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d108      	bne.n	8006ca6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	441a      	add	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	441a      	add	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d118      	bne.n	8006cec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	4b15      	ldr	r3, [pc, #84]	@ (8006d14 <prvInsertBlockIntoFreeList+0xb0>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d00d      	beq.n	8006ce2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	441a      	add	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	e008      	b.n	8006cf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8006d14 <prvInsertBlockIntoFreeList+0xb0>)
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	e003      	b.n	8006cf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d002      	beq.n	8006d02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d02:	bf00      	nop
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	20004f34 	.word	0x20004f34
 8006d14:	20004f3c 	.word	0x20004f3c

08006d18 <memset>:
 8006d18:	4402      	add	r2, r0
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d100      	bne.n	8006d22 <memset+0xa>
 8006d20:	4770      	bx	lr
 8006d22:	f803 1b01 	strb.w	r1, [r3], #1
 8006d26:	e7f9      	b.n	8006d1c <memset+0x4>

08006d28 <_reclaim_reent>:
 8006d28:	4b29      	ldr	r3, [pc, #164]	@ (8006dd0 <_reclaim_reent+0xa8>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4283      	cmp	r3, r0
 8006d2e:	b570      	push	{r4, r5, r6, lr}
 8006d30:	4604      	mov	r4, r0
 8006d32:	d04b      	beq.n	8006dcc <_reclaim_reent+0xa4>
 8006d34:	69c3      	ldr	r3, [r0, #28]
 8006d36:	b1ab      	cbz	r3, 8006d64 <_reclaim_reent+0x3c>
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	b16b      	cbz	r3, 8006d58 <_reclaim_reent+0x30>
 8006d3c:	2500      	movs	r5, #0
 8006d3e:	69e3      	ldr	r3, [r4, #28]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	5959      	ldr	r1, [r3, r5]
 8006d44:	2900      	cmp	r1, #0
 8006d46:	d13b      	bne.n	8006dc0 <_reclaim_reent+0x98>
 8006d48:	3504      	adds	r5, #4
 8006d4a:	2d80      	cmp	r5, #128	@ 0x80
 8006d4c:	d1f7      	bne.n	8006d3e <_reclaim_reent+0x16>
 8006d4e:	69e3      	ldr	r3, [r4, #28]
 8006d50:	4620      	mov	r0, r4
 8006d52:	68d9      	ldr	r1, [r3, #12]
 8006d54:	f000 f87a 	bl	8006e4c <_free_r>
 8006d58:	69e3      	ldr	r3, [r4, #28]
 8006d5a:	6819      	ldr	r1, [r3, #0]
 8006d5c:	b111      	cbz	r1, 8006d64 <_reclaim_reent+0x3c>
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f000 f874 	bl	8006e4c <_free_r>
 8006d64:	6961      	ldr	r1, [r4, #20]
 8006d66:	b111      	cbz	r1, 8006d6e <_reclaim_reent+0x46>
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f000 f86f 	bl	8006e4c <_free_r>
 8006d6e:	69e1      	ldr	r1, [r4, #28]
 8006d70:	b111      	cbz	r1, 8006d78 <_reclaim_reent+0x50>
 8006d72:	4620      	mov	r0, r4
 8006d74:	f000 f86a 	bl	8006e4c <_free_r>
 8006d78:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006d7a:	b111      	cbz	r1, 8006d82 <_reclaim_reent+0x5a>
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f000 f865 	bl	8006e4c <_free_r>
 8006d82:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d84:	b111      	cbz	r1, 8006d8c <_reclaim_reent+0x64>
 8006d86:	4620      	mov	r0, r4
 8006d88:	f000 f860 	bl	8006e4c <_free_r>
 8006d8c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006d8e:	b111      	cbz	r1, 8006d96 <_reclaim_reent+0x6e>
 8006d90:	4620      	mov	r0, r4
 8006d92:	f000 f85b 	bl	8006e4c <_free_r>
 8006d96:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006d98:	b111      	cbz	r1, 8006da0 <_reclaim_reent+0x78>
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f000 f856 	bl	8006e4c <_free_r>
 8006da0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006da2:	b111      	cbz	r1, 8006daa <_reclaim_reent+0x82>
 8006da4:	4620      	mov	r0, r4
 8006da6:	f000 f851 	bl	8006e4c <_free_r>
 8006daa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006dac:	b111      	cbz	r1, 8006db4 <_reclaim_reent+0x8c>
 8006dae:	4620      	mov	r0, r4
 8006db0:	f000 f84c 	bl	8006e4c <_free_r>
 8006db4:	6a23      	ldr	r3, [r4, #32]
 8006db6:	b14b      	cbz	r3, 8006dcc <_reclaim_reent+0xa4>
 8006db8:	4620      	mov	r0, r4
 8006dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006dbe:	4718      	bx	r3
 8006dc0:	680e      	ldr	r6, [r1, #0]
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 f842 	bl	8006e4c <_free_r>
 8006dc8:	4631      	mov	r1, r6
 8006dca:	e7bb      	b.n	8006d44 <_reclaim_reent+0x1c>
 8006dcc:	bd70      	pop	{r4, r5, r6, pc}
 8006dce:	bf00      	nop
 8006dd0:	2000002c 	.word	0x2000002c

08006dd4 <__libc_init_array>:
 8006dd4:	b570      	push	{r4, r5, r6, lr}
 8006dd6:	4d0d      	ldr	r5, [pc, #52]	@ (8006e0c <__libc_init_array+0x38>)
 8006dd8:	4c0d      	ldr	r4, [pc, #52]	@ (8006e10 <__libc_init_array+0x3c>)
 8006dda:	1b64      	subs	r4, r4, r5
 8006ddc:	10a4      	asrs	r4, r4, #2
 8006dde:	2600      	movs	r6, #0
 8006de0:	42a6      	cmp	r6, r4
 8006de2:	d109      	bne.n	8006df8 <__libc_init_array+0x24>
 8006de4:	4d0b      	ldr	r5, [pc, #44]	@ (8006e14 <__libc_init_array+0x40>)
 8006de6:	4c0c      	ldr	r4, [pc, #48]	@ (8006e18 <__libc_init_array+0x44>)
 8006de8:	f000 f886 	bl	8006ef8 <_init>
 8006dec:	1b64      	subs	r4, r4, r5
 8006dee:	10a4      	asrs	r4, r4, #2
 8006df0:	2600      	movs	r6, #0
 8006df2:	42a6      	cmp	r6, r4
 8006df4:	d105      	bne.n	8006e02 <__libc_init_array+0x2e>
 8006df6:	bd70      	pop	{r4, r5, r6, pc}
 8006df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dfc:	4798      	blx	r3
 8006dfe:	3601      	adds	r6, #1
 8006e00:	e7ee      	b.n	8006de0 <__libc_init_array+0xc>
 8006e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e06:	4798      	blx	r3
 8006e08:	3601      	adds	r6, #1
 8006e0a:	e7f2      	b.n	8006df2 <__libc_init_array+0x1e>
 8006e0c:	08007da0 	.word	0x08007da0
 8006e10:	08007da0 	.word	0x08007da0
 8006e14:	08007da0 	.word	0x08007da0
 8006e18:	08007da4 	.word	0x08007da4

08006e1c <__retarget_lock_acquire_recursive>:
 8006e1c:	4770      	bx	lr

08006e1e <__retarget_lock_release_recursive>:
 8006e1e:	4770      	bx	lr

08006e20 <strcpy>:
 8006e20:	4603      	mov	r3, r0
 8006e22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e26:	f803 2b01 	strb.w	r2, [r3], #1
 8006e2a:	2a00      	cmp	r2, #0
 8006e2c:	d1f9      	bne.n	8006e22 <strcpy+0x2>
 8006e2e:	4770      	bx	lr

08006e30 <memcpy>:
 8006e30:	440a      	add	r2, r1
 8006e32:	4291      	cmp	r1, r2
 8006e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e38:	d100      	bne.n	8006e3c <memcpy+0xc>
 8006e3a:	4770      	bx	lr
 8006e3c:	b510      	push	{r4, lr}
 8006e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e46:	4291      	cmp	r1, r2
 8006e48:	d1f9      	bne.n	8006e3e <memcpy+0xe>
 8006e4a:	bd10      	pop	{r4, pc}

08006e4c <_free_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4605      	mov	r5, r0
 8006e50:	2900      	cmp	r1, #0
 8006e52:	d041      	beq.n	8006ed8 <_free_r+0x8c>
 8006e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e58:	1f0c      	subs	r4, r1, #4
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	bfb8      	it	lt
 8006e5e:	18e4      	addlt	r4, r4, r3
 8006e60:	f000 f83e 	bl	8006ee0 <__malloc_lock>
 8006e64:	4a1d      	ldr	r2, [pc, #116]	@ (8006edc <_free_r+0x90>)
 8006e66:	6813      	ldr	r3, [r2, #0]
 8006e68:	b933      	cbnz	r3, 8006e78 <_free_r+0x2c>
 8006e6a:	6063      	str	r3, [r4, #4]
 8006e6c:	6014      	str	r4, [r2, #0]
 8006e6e:	4628      	mov	r0, r5
 8006e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e74:	f000 b83a 	b.w	8006eec <__malloc_unlock>
 8006e78:	42a3      	cmp	r3, r4
 8006e7a:	d908      	bls.n	8006e8e <_free_r+0x42>
 8006e7c:	6820      	ldr	r0, [r4, #0]
 8006e7e:	1821      	adds	r1, r4, r0
 8006e80:	428b      	cmp	r3, r1
 8006e82:	bf01      	itttt	eq
 8006e84:	6819      	ldreq	r1, [r3, #0]
 8006e86:	685b      	ldreq	r3, [r3, #4]
 8006e88:	1809      	addeq	r1, r1, r0
 8006e8a:	6021      	streq	r1, [r4, #0]
 8006e8c:	e7ed      	b.n	8006e6a <_free_r+0x1e>
 8006e8e:	461a      	mov	r2, r3
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	b10b      	cbz	r3, 8006e98 <_free_r+0x4c>
 8006e94:	42a3      	cmp	r3, r4
 8006e96:	d9fa      	bls.n	8006e8e <_free_r+0x42>
 8006e98:	6811      	ldr	r1, [r2, #0]
 8006e9a:	1850      	adds	r0, r2, r1
 8006e9c:	42a0      	cmp	r0, r4
 8006e9e:	d10b      	bne.n	8006eb8 <_free_r+0x6c>
 8006ea0:	6820      	ldr	r0, [r4, #0]
 8006ea2:	4401      	add	r1, r0
 8006ea4:	1850      	adds	r0, r2, r1
 8006ea6:	4283      	cmp	r3, r0
 8006ea8:	6011      	str	r1, [r2, #0]
 8006eaa:	d1e0      	bne.n	8006e6e <_free_r+0x22>
 8006eac:	6818      	ldr	r0, [r3, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	6053      	str	r3, [r2, #4]
 8006eb2:	4408      	add	r0, r1
 8006eb4:	6010      	str	r0, [r2, #0]
 8006eb6:	e7da      	b.n	8006e6e <_free_r+0x22>
 8006eb8:	d902      	bls.n	8006ec0 <_free_r+0x74>
 8006eba:	230c      	movs	r3, #12
 8006ebc:	602b      	str	r3, [r5, #0]
 8006ebe:	e7d6      	b.n	8006e6e <_free_r+0x22>
 8006ec0:	6820      	ldr	r0, [r4, #0]
 8006ec2:	1821      	adds	r1, r4, r0
 8006ec4:	428b      	cmp	r3, r1
 8006ec6:	bf04      	itt	eq
 8006ec8:	6819      	ldreq	r1, [r3, #0]
 8006eca:	685b      	ldreq	r3, [r3, #4]
 8006ecc:	6063      	str	r3, [r4, #4]
 8006ece:	bf04      	itt	eq
 8006ed0:	1809      	addeq	r1, r1, r0
 8006ed2:	6021      	streq	r1, [r4, #0]
 8006ed4:	6054      	str	r4, [r2, #4]
 8006ed6:	e7ca      	b.n	8006e6e <_free_r+0x22>
 8006ed8:	bd38      	pop	{r3, r4, r5, pc}
 8006eda:	bf00      	nop
 8006edc:	20005090 	.word	0x20005090

08006ee0 <__malloc_lock>:
 8006ee0:	4801      	ldr	r0, [pc, #4]	@ (8006ee8 <__malloc_lock+0x8>)
 8006ee2:	f7ff bf9b 	b.w	8006e1c <__retarget_lock_acquire_recursive>
 8006ee6:	bf00      	nop
 8006ee8:	2000508c 	.word	0x2000508c

08006eec <__malloc_unlock>:
 8006eec:	4801      	ldr	r0, [pc, #4]	@ (8006ef4 <__malloc_unlock+0x8>)
 8006eee:	f7ff bf96 	b.w	8006e1e <__retarget_lock_release_recursive>
 8006ef2:	bf00      	nop
 8006ef4:	2000508c 	.word	0x2000508c

08006ef8 <_init>:
 8006ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efa:	bf00      	nop
 8006efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efe:	bc08      	pop	{r3}
 8006f00:	469e      	mov	lr, r3
 8006f02:	4770      	bx	lr

08006f04 <_fini>:
 8006f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f06:	bf00      	nop
 8006f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0a:	bc08      	pop	{r3}
 8006f0c:	469e      	mov	lr, r3
 8006f0e:	4770      	bx	lr
