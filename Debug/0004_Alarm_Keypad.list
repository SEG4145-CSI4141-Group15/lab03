
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071bc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e50  0800738c  0800738c  0000838c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081dc  080081dc  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  080081dc  080081dc  000091dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081e4  080081e4  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081e4  080081e4  000091e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081e8  080081e8  000091e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080081ec  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005054  20000068  08008254  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050bc  08008254  0000a0bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c45f  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c0e  00000000  00000000  000264f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001848  00000000  00000000  0002a108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001305  00000000  00000000  0002b950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002478a  00000000  00000000  0002cc55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d6e2  00000000  00000000  000513df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de68b  00000000  00000000  0006eac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d14c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c18  00000000  00000000  0014d190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00153da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007374 	.word	0x08007374

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08007374 	.word	0x08007374

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	int done=1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	607b      	str	r3, [r7, #4]
	while(done)
 80005ba:	e19b      	b.n	80008f4 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005c2:	48b3      	ldr	r0, [pc, #716]	@ (8000890 <Get_Key+0x2e0>)
 80005c4:	f001 fa56 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 80005c8:	2200      	movs	r2, #0
 80005ca:	2110      	movs	r1, #16
 80005cc:	48b0      	ldr	r0, [pc, #704]	@ (8000890 <Get_Key+0x2e0>)
 80005ce:	f001 fa51 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80005d2:	2200      	movs	r2, #0
 80005d4:	2120      	movs	r1, #32
 80005d6:	48ae      	ldr	r0, [pc, #696]	@ (8000890 <Get_Key+0x2e0>)
 80005d8:	f001 fa4c 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80005dc:	2200      	movs	r2, #0
 80005de:	2108      	movs	r1, #8
 80005e0:	48ab      	ldr	r0, [pc, #684]	@ (8000890 <Get_Key+0x2e0>)
 80005e2:	f001 fa47 	bl	8001a74 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80005e6:	2140      	movs	r1, #64	@ 0x40
 80005e8:	48a9      	ldr	r0, [pc, #676]	@ (8000890 <Get_Key+0x2e0>)
 80005ea:	f001 fa2b 	bl	8001a44 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d00b      	beq.n	800060c <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80005f4:	bf00      	nop
 80005f6:	2140      	movs	r1, #64	@ 0x40
 80005f8:	48a5      	ldr	r0, [pc, #660]	@ (8000890 <Get_Key+0x2e0>)
 80005fa:	f001 fa23 	bl	8001a44 <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1f8      	bne.n	80005f6 <Get_Key+0x46>
		key='1';
 8000604:	4ba3      	ldr	r3, [pc, #652]	@ (8000894 <Get_Key+0x2e4>)
 8000606:	2231      	movs	r2, #49	@ 0x31
 8000608:	701a      	strb	r2, [r3, #0]
		break;
 800060a:	e177      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800060c:	2180      	movs	r1, #128	@ 0x80
 800060e:	48a2      	ldr	r0, [pc, #648]	@ (8000898 <Get_Key+0x2e8>)
 8000610:	f001 fa18 	bl	8001a44 <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d00b      	beq.n	8000632 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800061a:	bf00      	nop
 800061c:	2180      	movs	r1, #128	@ 0x80
 800061e:	489e      	ldr	r0, [pc, #632]	@ (8000898 <Get_Key+0x2e8>)
 8000620:	f001 fa10 	bl	8001a44 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1f8      	bne.n	800061c <Get_Key+0x6c>
		key='4';
 800062a:	4b9a      	ldr	r3, [pc, #616]	@ (8000894 <Get_Key+0x2e4>)
 800062c:	2234      	movs	r2, #52	@ 0x34
 800062e:	701a      	strb	r2, [r3, #0]
		break;
 8000630:	e164      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000632:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000636:	4899      	ldr	r0, [pc, #612]	@ (800089c <Get_Key+0x2ec>)
 8000638:	f001 fa04 	bl	8001a44 <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d00c      	beq.n	800065c <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000642:	bf00      	nop
 8000644:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000648:	4894      	ldr	r0, [pc, #592]	@ (800089c <Get_Key+0x2ec>)
 800064a:	f001 f9fb 	bl	8001a44 <HAL_GPIO_ReadPin>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1f7      	bne.n	8000644 <Get_Key+0x94>
		key='7';
 8000654:	4b8f      	ldr	r3, [pc, #572]	@ (8000894 <Get_Key+0x2e4>)
 8000656:	2237      	movs	r2, #55	@ 0x37
 8000658:	701a      	strb	r2, [r3, #0]
		break;
 800065a:	e14f      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800065c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000660:	488e      	ldr	r0, [pc, #568]	@ (800089c <Get_Key+0x2ec>)
 8000662:	f001 f9ef 	bl	8001a44 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00c      	beq.n	8000686 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800066c:	bf00      	nop
 800066e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000672:	488a      	ldr	r0, [pc, #552]	@ (800089c <Get_Key+0x2ec>)
 8000674:	f001 f9e6 	bl	8001a44 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d1f7      	bne.n	800066e <Get_Key+0xbe>
		key='*';
 800067e:	4b85      	ldr	r3, [pc, #532]	@ (8000894 <Get_Key+0x2e4>)
 8000680:	222a      	movs	r2, #42	@ 0x2a
 8000682:	701a      	strb	r2, [r3, #0]
		break;
 8000684:	e13a      	b.n	80008fc <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800068c:	4880      	ldr	r0, [pc, #512]	@ (8000890 <Get_Key+0x2e0>)
 800068e:	f001 f9f1 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 8000692:	2201      	movs	r2, #1
 8000694:	2110      	movs	r1, #16
 8000696:	487e      	ldr	r0, [pc, #504]	@ (8000890 <Get_Key+0x2e0>)
 8000698:	f001 f9ec 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800069c:	2200      	movs	r2, #0
 800069e:	2120      	movs	r1, #32
 80006a0:	487b      	ldr	r0, [pc, #492]	@ (8000890 <Get_Key+0x2e0>)
 80006a2:	f001 f9e7 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80006a6:	2200      	movs	r2, #0
 80006a8:	2108      	movs	r1, #8
 80006aa:	4879      	ldr	r0, [pc, #484]	@ (8000890 <Get_Key+0x2e0>)
 80006ac:	f001 f9e2 	bl	8001a74 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006b0:	2140      	movs	r1, #64	@ 0x40
 80006b2:	4877      	ldr	r0, [pc, #476]	@ (8000890 <Get_Key+0x2e0>)
 80006b4:	f001 f9c6 	bl	8001a44 <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d00b      	beq.n	80006d6 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006be:	bf00      	nop
 80006c0:	2140      	movs	r1, #64	@ 0x40
 80006c2:	4873      	ldr	r0, [pc, #460]	@ (8000890 <Get_Key+0x2e0>)
 80006c4:	f001 f9be 	bl	8001a44 <HAL_GPIO_ReadPin>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1f8      	bne.n	80006c0 <Get_Key+0x110>
		key='2';
 80006ce:	4b71      	ldr	r3, [pc, #452]	@ (8000894 <Get_Key+0x2e4>)
 80006d0:	2232      	movs	r2, #50	@ 0x32
 80006d2:	701a      	strb	r2, [r3, #0]
		break;
 80006d4:	e112      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80006d6:	2180      	movs	r1, #128	@ 0x80
 80006d8:	486f      	ldr	r0, [pc, #444]	@ (8000898 <Get_Key+0x2e8>)
 80006da:	f001 f9b3 	bl	8001a44 <HAL_GPIO_ReadPin>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d00b      	beq.n	80006fc <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80006e4:	bf00      	nop
 80006e6:	2180      	movs	r1, #128	@ 0x80
 80006e8:	486b      	ldr	r0, [pc, #428]	@ (8000898 <Get_Key+0x2e8>)
 80006ea:	f001 f9ab 	bl	8001a44 <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f8      	bne.n	80006e6 <Get_Key+0x136>
		key='5';
 80006f4:	4b67      	ldr	r3, [pc, #412]	@ (8000894 <Get_Key+0x2e4>)
 80006f6:	2235      	movs	r2, #53	@ 0x35
 80006f8:	701a      	strb	r2, [r3, #0]
		break;
 80006fa:	e0ff      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80006fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000700:	4866      	ldr	r0, [pc, #408]	@ (800089c <Get_Key+0x2ec>)
 8000702:	f001 f99f 	bl	8001a44 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d00c      	beq.n	8000726 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800070c:	bf00      	nop
 800070e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000712:	4862      	ldr	r0, [pc, #392]	@ (800089c <Get_Key+0x2ec>)
 8000714:	f001 f996 	bl	8001a44 <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1f7      	bne.n	800070e <Get_Key+0x15e>
		key='8';
 800071e:	4b5d      	ldr	r3, [pc, #372]	@ (8000894 <Get_Key+0x2e4>)
 8000720:	2238      	movs	r2, #56	@ 0x38
 8000722:	701a      	strb	r2, [r3, #0]
		break;
 8000724:	e0ea      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000726:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800072a:	485c      	ldr	r0, [pc, #368]	@ (800089c <Get_Key+0x2ec>)
 800072c:	f001 f98a 	bl	8001a44 <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d00c      	beq.n	8000750 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000736:	bf00      	nop
 8000738:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800073c:	4857      	ldr	r0, [pc, #348]	@ (800089c <Get_Key+0x2ec>)
 800073e:	f001 f981 	bl	8001a44 <HAL_GPIO_ReadPin>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1f7      	bne.n	8000738 <Get_Key+0x188>
		key='0';
 8000748:	4b52      	ldr	r3, [pc, #328]	@ (8000894 <Get_Key+0x2e4>)
 800074a:	2230      	movs	r2, #48	@ 0x30
 800074c:	701a      	strb	r2, [r3, #0]
		break;
 800074e:	e0d5      	b.n	80008fc <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000756:	484e      	ldr	r0, [pc, #312]	@ (8000890 <Get_Key+0x2e0>)
 8000758:	f001 f98c 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 800075c:	2200      	movs	r2, #0
 800075e:	2110      	movs	r1, #16
 8000760:	484b      	ldr	r0, [pc, #300]	@ (8000890 <Get_Key+0x2e0>)
 8000762:	f001 f987 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 8000766:	2201      	movs	r2, #1
 8000768:	2120      	movs	r1, #32
 800076a:	4849      	ldr	r0, [pc, #292]	@ (8000890 <Get_Key+0x2e0>)
 800076c:	f001 f982 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 8000770:	2200      	movs	r2, #0
 8000772:	2108      	movs	r1, #8
 8000774:	4846      	ldr	r0, [pc, #280]	@ (8000890 <Get_Key+0x2e0>)
 8000776:	f001 f97d 	bl	8001a74 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 800077a:	2140      	movs	r1, #64	@ 0x40
 800077c:	4844      	ldr	r0, [pc, #272]	@ (8000890 <Get_Key+0x2e0>)
 800077e:	f001 f961 	bl	8001a44 <HAL_GPIO_ReadPin>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00b      	beq.n	80007a0 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000788:	bf00      	nop
 800078a:	2140      	movs	r1, #64	@ 0x40
 800078c:	4840      	ldr	r0, [pc, #256]	@ (8000890 <Get_Key+0x2e0>)
 800078e:	f001 f959 	bl	8001a44 <HAL_GPIO_ReadPin>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1f8      	bne.n	800078a <Get_Key+0x1da>
		key='3';
 8000798:	4b3e      	ldr	r3, [pc, #248]	@ (8000894 <Get_Key+0x2e4>)
 800079a:	2233      	movs	r2, #51	@ 0x33
 800079c:	701a      	strb	r2, [r3, #0]
		break;
 800079e:	e0ad      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007a0:	2180      	movs	r1, #128	@ 0x80
 80007a2:	483d      	ldr	r0, [pc, #244]	@ (8000898 <Get_Key+0x2e8>)
 80007a4:	f001 f94e 	bl	8001a44 <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d00b      	beq.n	80007c6 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007ae:	bf00      	nop
 80007b0:	2180      	movs	r1, #128	@ 0x80
 80007b2:	4839      	ldr	r0, [pc, #228]	@ (8000898 <Get_Key+0x2e8>)
 80007b4:	f001 f946 	bl	8001a44 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1f8      	bne.n	80007b0 <Get_Key+0x200>
		key='6';
 80007be:	4b35      	ldr	r3, [pc, #212]	@ (8000894 <Get_Key+0x2e4>)
 80007c0:	2236      	movs	r2, #54	@ 0x36
 80007c2:	701a      	strb	r2, [r3, #0]
		break;
 80007c4:	e09a      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80007c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ca:	4834      	ldr	r0, [pc, #208]	@ (800089c <Get_Key+0x2ec>)
 80007cc:	f001 f93a 	bl	8001a44 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d00c      	beq.n	80007f0 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80007d6:	bf00      	nop
 80007d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007dc:	482f      	ldr	r0, [pc, #188]	@ (800089c <Get_Key+0x2ec>)
 80007de:	f001 f931 	bl	8001a44 <HAL_GPIO_ReadPin>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d1f7      	bne.n	80007d8 <Get_Key+0x228>
		key='9';
 80007e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <Get_Key+0x2e4>)
 80007ea:	2239      	movs	r2, #57	@ 0x39
 80007ec:	701a      	strb	r2, [r3, #0]
		break;
 80007ee:	e085      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80007f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007f4:	4829      	ldr	r0, [pc, #164]	@ (800089c <Get_Key+0x2ec>)
 80007f6:	f001 f925 	bl	8001a44 <HAL_GPIO_ReadPin>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d00c      	beq.n	800081a <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000800:	bf00      	nop
 8000802:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000806:	4825      	ldr	r0, [pc, #148]	@ (800089c <Get_Key+0x2ec>)
 8000808:	f001 f91c 	bl	8001a44 <HAL_GPIO_ReadPin>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d1f7      	bne.n	8000802 <Get_Key+0x252>
		key='#';
 8000812:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <Get_Key+0x2e4>)
 8000814:	2223      	movs	r2, #35	@ 0x23
 8000816:	701a      	strb	r2, [r3, #0]
		break;
 8000818:	e070      	b.n	80008fc <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000820:	481b      	ldr	r0, [pc, #108]	@ (8000890 <Get_Key+0x2e0>)
 8000822:	f001 f927 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000826:	2200      	movs	r2, #0
 8000828:	2110      	movs	r1, #16
 800082a:	4819      	ldr	r0, [pc, #100]	@ (8000890 <Get_Key+0x2e0>)
 800082c:	f001 f922 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000830:	2200      	movs	r2, #0
 8000832:	2120      	movs	r1, #32
 8000834:	4816      	ldr	r0, [pc, #88]	@ (8000890 <Get_Key+0x2e0>)
 8000836:	f001 f91d 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 800083a:	2201      	movs	r2, #1
 800083c:	2108      	movs	r1, #8
 800083e:	4814      	ldr	r0, [pc, #80]	@ (8000890 <Get_Key+0x2e0>)
 8000840:	f001 f918 	bl	8001a74 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000844:	2140      	movs	r1, #64	@ 0x40
 8000846:	4812      	ldr	r0, [pc, #72]	@ (8000890 <Get_Key+0x2e0>)
 8000848:	f001 f8fc 	bl	8001a44 <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d00b      	beq.n	800086a <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000852:	bf00      	nop
 8000854:	2140      	movs	r1, #64	@ 0x40
 8000856:	480e      	ldr	r0, [pc, #56]	@ (8000890 <Get_Key+0x2e0>)
 8000858:	f001 f8f4 	bl	8001a44 <HAL_GPIO_ReadPin>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1f8      	bne.n	8000854 <Get_Key+0x2a4>
		key='A';
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <Get_Key+0x2e4>)
 8000864:	2241      	movs	r2, #65	@ 0x41
 8000866:	701a      	strb	r2, [r3, #0]
		break;
 8000868:	e048      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800086a:	2180      	movs	r1, #128	@ 0x80
 800086c:	480a      	ldr	r0, [pc, #40]	@ (8000898 <Get_Key+0x2e8>)
 800086e:	f001 f8e9 	bl	8001a44 <HAL_GPIO_ReadPin>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d013      	beq.n	80008a0 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000878:	bf00      	nop
 800087a:	2180      	movs	r1, #128	@ 0x80
 800087c:	4806      	ldr	r0, [pc, #24]	@ (8000898 <Get_Key+0x2e8>)
 800087e:	f001 f8e1 	bl	8001a44 <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1f8      	bne.n	800087a <Get_Key+0x2ca>
		key='B';
 8000888:	4b02      	ldr	r3, [pc, #8]	@ (8000894 <Get_Key+0x2e4>)
 800088a:	2242      	movs	r2, #66	@ 0x42
 800088c:	701a      	strb	r2, [r3, #0]
		break;
 800088e:	e035      	b.n	80008fc <Get_Key+0x34c>
 8000890:	40020400 	.word	0x40020400
 8000894:	20000084 	.word	0x20000084
 8000898:	40020800 	.word	0x40020800
 800089c:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80008a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008a4:	481a      	ldr	r0, [pc, #104]	@ (8000910 <Get_Key+0x360>)
 80008a6:	f001 f8cd 	bl	8001a44 <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d00c      	beq.n	80008ca <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80008b0:	bf00      	nop
 80008b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008b6:	4816      	ldr	r0, [pc, #88]	@ (8000910 <Get_Key+0x360>)
 80008b8:	f001 f8c4 	bl	8001a44 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1f7      	bne.n	80008b2 <Get_Key+0x302>
		key='C';
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <Get_Key+0x364>)
 80008c4:	2243      	movs	r2, #67	@ 0x43
 80008c6:	701a      	strb	r2, [r3, #0]
		break;
 80008c8:	e018      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80008ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008ce:	4810      	ldr	r0, [pc, #64]	@ (8000910 <Get_Key+0x360>)
 80008d0:	f001 f8b8 	bl	8001a44 <HAL_GPIO_ReadPin>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d00c      	beq.n	80008f4 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80008da:	bf00      	nop
 80008dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008e0:	480b      	ldr	r0, [pc, #44]	@ (8000910 <Get_Key+0x360>)
 80008e2:	f001 f8af 	bl	8001a44 <HAL_GPIO_ReadPin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1f7      	bne.n	80008dc <Get_Key+0x32c>
		key='D';
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <Get_Key+0x364>)
 80008ee:	2244      	movs	r2, #68	@ 0x44
 80008f0:	701a      	strb	r2, [r3, #0]
		break;
 80008f2:	e003      	b.n	80008fc <Get_Key+0x34c>
	while(done)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f47f ae60 	bne.w	80005bc <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008fc:	2120      	movs	r1, #32
 80008fe:	4804      	ldr	r0, [pc, #16]	@ (8000910 <Get_Key+0x360>)
 8000900:	f001 f8d1 	bl	8001aa6 <HAL_GPIO_TogglePin>
	return(key);
 8000904:	4b03      	ldr	r3, [pc, #12]	@ (8000914 <Get_Key+0x364>)
 8000906:	781b      	ldrb	r3, [r3, #0]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40020000 	.word	0x40020000
 8000914:	20000084 	.word	0x20000084

08000918 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800091c:	f000 fdb6 	bl	800148c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000920:	f000 f868 	bl	80009f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000924:	f000 f92c 	bl	8000b80 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000928:	f000 f900 	bl	8000b2c <MX_USART2_UART_Init>
	MX_I2C1_Init();
 800092c:	f000 f8d0 	bl	8000ad0 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000930:	f003 fa7e 	bl	8003e30 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of KeypadTask */
	KeypadTaskHandle = osThreadNew(StartKeypadTask, NULL,
 8000934:	4a21      	ldr	r2, [pc, #132]	@ (80009bc <main+0xa4>)
 8000936:	2100      	movs	r1, #0
 8000938:	4821      	ldr	r0, [pc, #132]	@ (80009c0 <main+0xa8>)
 800093a:	f003 fac3 	bl	8003ec4 <osThreadNew>
 800093e:	4603      	mov	r3, r0
 8000940:	4a20      	ldr	r2, [pc, #128]	@ (80009c4 <main+0xac>)
 8000942:	6013      	str	r3, [r2, #0]
			&KeypadTask_attributes);

	/* creation of LCDTask */
	LCDTaskHandle = osThreadNew(StartLCDTask, NULL, &LCDTask_attributes);
 8000944:	4a20      	ldr	r2, [pc, #128]	@ (80009c8 <main+0xb0>)
 8000946:	2100      	movs	r1, #0
 8000948:	4820      	ldr	r0, [pc, #128]	@ (80009cc <main+0xb4>)
 800094a:	f003 fabb 	bl	8003ec4 <osThreadNew>
 800094e:	4603      	mov	r3, r0
 8000950:	4a1f      	ldr	r2, [pc, #124]	@ (80009d0 <main+0xb8>)
 8000952:	6013      	str	r3, [r2, #0]

	/* creation of LEDsTask */
	LEDsTaskHandle = osThreadNew(StartLEDsTask, NULL, &LEDsTask_attributes);
 8000954:	4a1f      	ldr	r2, [pc, #124]	@ (80009d4 <main+0xbc>)
 8000956:	2100      	movs	r1, #0
 8000958:	481f      	ldr	r0, [pc, #124]	@ (80009d8 <main+0xc0>)
 800095a:	f003 fab3 	bl	8003ec4 <osThreadNew>
 800095e:	4603      	mov	r3, r0
 8000960:	4a1e      	ldr	r2, [pc, #120]	@ (80009dc <main+0xc4>)
 8000962:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000964:	f003 fa88 	bl	8003e78 <osKernelStart>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		/* D10 to D7 as input pins for row 0 to row 3. D6 to D3 as output for column pins C1 to C3*/
		key = Get_Key();
 8000968:	f7ff fe22 	bl	80005b0 <Get_Key>
 800096c:	4603      	mov	r3, r0
 800096e:	461a      	mov	r2, r3
 8000970:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <main+0xc8>)
 8000972:	701a      	strb	r2, [r3, #0]
		sprintf(hold, "%c", key);
 8000974:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <main+0xc8>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	491a      	ldr	r1, [pc, #104]	@ (80009e4 <main+0xcc>)
 800097c:	481a      	ldr	r0, [pc, #104]	@ (80009e8 <main+0xd0>)
 800097e:	f006 f803 	bl	8006988 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) hold, strlen(hold), 100);
 8000982:	4819      	ldr	r0, [pc, #100]	@ (80009e8 <main+0xd0>)
 8000984:	f7ff fc44 	bl	8000210 <strlen>
 8000988:	4603      	mov	r3, r0
 800098a:	b29a      	uxth	r2, r3
 800098c:	2364      	movs	r3, #100	@ 0x64
 800098e:	4916      	ldr	r1, [pc, #88]	@ (80009e8 <main+0xd0>)
 8000990:	4816      	ldr	r0, [pc, #88]	@ (80009ec <main+0xd4>)
 8000992:	f002 fe4d 	bl	8003630 <HAL_UART_Transmit>
		SSD1306_GotoXY(0, 30);
 8000996:	211e      	movs	r1, #30
 8000998:	2000      	movs	r0, #0
 800099a:	f000 fa69 	bl	8000e70 <SSD1306_GotoXY>
		SSD1306_UpdateScreen();
 800099e:	f000 f9d9 	bl	8000d54 <SSD1306_UpdateScreen>
		SSD1306_Puts(hold, &Font_11x18, 1);
 80009a2:	2201      	movs	r2, #1
 80009a4:	4912      	ldr	r1, [pc, #72]	@ (80009f0 <main+0xd8>)
 80009a6:	4810      	ldr	r0, [pc, #64]	@ (80009e8 <main+0xd0>)
 80009a8:	f000 faf6 	bl	8000f98 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80009ac:	f000 f9d2 	bl	8000d54 <SSD1306_UpdateScreen>
		HAL_Delay(500);
 80009b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009b4:	f000 fdac 	bl	8001510 <HAL_Delay>
		key = Get_Key();
 80009b8:	bf00      	nop
 80009ba:	e7d5      	b.n	8000968 <main+0x50>
 80009bc:	08008124 	.word	0x08008124
 80009c0:	08000cb9 	.word	0x08000cb9
 80009c4:	20000124 	.word	0x20000124
 80009c8:	08008148 	.word	0x08008148
 80009cc:	08000cc9 	.word	0x08000cc9
 80009d0:	20000128 	.word	0x20000128
 80009d4:	0800816c 	.word	0x0800816c
 80009d8:	08000cd9 	.word	0x08000cd9
 80009dc:	2000012c 	.word	0x2000012c
 80009e0:	20000084 	.word	0x20000084
 80009e4:	080073ac 	.word	0x080073ac
 80009e8:	20000130 	.word	0x20000130
 80009ec:	200000dc 	.word	0x200000dc
 80009f0:	20000000 	.word	0x20000000

080009f4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b094      	sub	sp, #80	@ 0x50
 80009f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2234      	movs	r2, #52	@ 0x34
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f005 ffe0 	bl	80069c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac8 <SystemClock_Config+0xd4>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a20:	4a29      	ldr	r2, [pc, #164]	@ (8000ac8 <SystemClock_Config+0xd4>)
 8000a22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a28:	4b27      	ldr	r3, [pc, #156]	@ (8000ac8 <SystemClock_Config+0xd4>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a34:	2300      	movs	r3, #0
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	4b24      	ldr	r3, [pc, #144]	@ (8000acc <SystemClock_Config+0xd8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a40:	4a22      	ldr	r2, [pc, #136]	@ (8000acc <SystemClock_Config+0xd8>)
 8000a42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	4b20      	ldr	r3, [pc, #128]	@ (8000acc <SystemClock_Config+0xd8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a5c:	2310      	movs	r3, #16
 8000a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a60:	2302      	movs	r3, #2
 8000a62:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a64:	2300      	movs	r3, #0
 8000a66:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000a68:	2310      	movs	r3, #16
 8000a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000a6c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a70:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a72:	2304      	movs	r3, #4
 8000a74:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a76:	2302      	movs	r3, #2
 8000a78:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 f844 	bl	8002b10 <HAL_RCC_OscConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0x9e>
		Error_Handler();
 8000a8e:	f000 f95b 	bl	8000d48 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a92:	230f      	movs	r3, #15
 8000a94:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a96:	2302      	movs	r3, #2
 8000a98:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	2102      	movs	r1, #2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 fcb2 	bl	8002418 <HAL_RCC_ClockConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0xca>
		Error_Handler();
 8000aba:	f000 f945 	bl	8000d48 <Error_Handler>
	}
}
 8000abe:	bf00      	nop
 8000ac0:	3750      	adds	r7, #80	@ 0x50
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40007000 	.word	0x40007000

08000ad0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000ad6:	4a13      	ldr	r2, [pc, #76]	@ (8000b24 <MX_I2C1_Init+0x54>)
 8000ad8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000ada:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000adc:	4a12      	ldr	r2, [pc, #72]	@ (8000b28 <MX_I2C1_Init+0x58>)
 8000ade:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000aee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000af2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000b0c:	4804      	ldr	r0, [pc, #16]	@ (8000b20 <MX_I2C1_Init+0x50>)
 8000b0e:	f000 ffe5 	bl	8001adc <HAL_I2C_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000b18:	f000 f916 	bl	8000d48 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000088 	.word	0x20000088
 8000b24:	40005400 	.word	0x40005400
 8000b28:	00061a80 	.word	0x00061a80

08000b2c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	@ (8000b7c <MX_USART2_UART_Init+0x50>)
 8000b34:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8000b36:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b38:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b3c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000b62:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_USART2_UART_Init+0x4c>)
 8000b64:	f002 fd14 	bl	8003590 <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000b6e:	f000 f8eb 	bl	8000d48 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200000dc 	.word	0x200000dc
 8000b7c:	40004400 	.word	0x40004400

08000b80 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	@ 0x28
 8000b84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b43      	ldr	r3, [pc, #268]	@ (8000ca8 <MX_GPIO_Init+0x128>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a42      	ldr	r2, [pc, #264]	@ (8000ca8 <MX_GPIO_Init+0x128>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b40      	ldr	r3, [pc, #256]	@ (8000ca8 <MX_GPIO_Init+0x128>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8000ca8 <MX_GPIO_Init+0x128>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a3b      	ldr	r2, [pc, #236]	@ (8000ca8 <MX_GPIO_Init+0x128>)
 8000bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b39      	ldr	r3, [pc, #228]	@ (8000ca8 <MX_GPIO_Init+0x128>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	4b35      	ldr	r3, [pc, #212]	@ (8000ca8 <MX_GPIO_Init+0x128>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a34      	ldr	r2, [pc, #208]	@ (8000ca8 <MX_GPIO_Init+0x128>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b32      	ldr	r3, [pc, #200]	@ (8000ca8 <MX_GPIO_Init+0x128>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca8 <MX_GPIO_Init+0x128>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a2d      	ldr	r2, [pc, #180]	@ (8000ca8 <MX_GPIO_Init+0x128>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca8 <MX_GPIO_Init+0x128>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_6, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2160      	movs	r1, #96	@ 0x60
 8000c0a:	4828      	ldr	r0, [pc, #160]	@ (8000cac <MX_GPIO_Init+0x12c>)
 8000c0c:	f000 ff32 	bl	8001a74 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, KC0_Pin | KC3_Pin | KC1_Pin | KC2_Pin,
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 8000c16:	4826      	ldr	r0, [pc, #152]	@ (8000cb0 <MX_GPIO_Init+0x130>)
 8000c18:	f000 ff2c 	bl	8001a74 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PA5 PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8000c1c:	2360      	movs	r3, #96	@ 0x60
 8000c1e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	481e      	ldr	r0, [pc, #120]	@ (8000cac <MX_GPIO_Init+0x12c>)
 8000c34:	f000 fd72 	bl	800171c <HAL_GPIO_Init>

	/*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
	GPIO_InitStruct.Pin = KC0_Pin | KC3_Pin | KC1_Pin | KC2_Pin;
 8000c38:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8000c3c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4817      	ldr	r0, [pc, #92]	@ (8000cb0 <MX_GPIO_Init+0x130>)
 8000c52:	f000 fd63 	bl	800171c <HAL_GPIO_Init>

	/*Configure GPIO pin : KR1_Pin */
	GPIO_InitStruct.Pin = KR1_Pin;
 8000c56:	2380      	movs	r3, #128	@ 0x80
 8000c58:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4812      	ldr	r0, [pc, #72]	@ (8000cb4 <MX_GPIO_Init+0x134>)
 8000c6a:	f000 fd57 	bl	800171c <HAL_GPIO_Init>

	/*Configure GPIO pins : KR3_Pin KR2_Pin */
	GPIO_InitStruct.Pin = KR3_Pin | KR2_Pin;
 8000c6e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c72:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	480a      	ldr	r0, [pc, #40]	@ (8000cac <MX_GPIO_Init+0x12c>)
 8000c84:	f000 fd4a 	bl	800171c <HAL_GPIO_Init>

	/*Configure GPIO pin : KR0_Pin */
	GPIO_InitStruct.Pin = KR0_Pin;
 8000c88:	2340      	movs	r3, #64	@ 0x40
 8000c8a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_GPIO_Init+0x130>)
 8000c9c:	f000 fd3e 	bl	800171c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	@ 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020400 	.word	0x40020400
 8000cb4:	40020800 	.word	0x40020800

08000cb8 <StartKeypadTask>:
 * @brief  Function implementing the KeypadTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartKeypadTask */
void StartKeypadTask(void *argument) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f003 f991 	bl	8003fe8 <osDelay>
 8000cc6:	e7fb      	b.n	8000cc0 <StartKeypadTask+0x8>

08000cc8 <StartLCDTask>:
 * @brief Function implementing the LCDTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLCDTask */
void StartLCDTask(void *argument) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartLCDTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f003 f989 	bl	8003fe8 <osDelay>
 8000cd6:	e7fb      	b.n	8000cd0 <StartLCDTask+0x8>

08000cd8 <StartLEDsTask>:
 * @brief Function implementing the LEDsTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLEDsTask */
void StartLEDsTask(void *argument) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartLEDsTask */

	int armed = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for (;;) {
		// Not armed
//		if (armed == 0) {
		while (!armed) {
 8000ce4:	e009      	b.n	8000cfa <StartLEDsTask+0x22>
			// Turn on Green LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2140      	movs	r1, #64	@ 0x40
 8000cea:	480d      	ldr	r0, [pc, #52]	@ (8000d20 <StartLEDsTask+0x48>)
 8000cec:	f000 fec2 	bl	8001a74 <HAL_GPIO_WritePin>

			// Turn off Red LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2120      	movs	r1, #32
 8000cf4:	480a      	ldr	r0, [pc, #40]	@ (8000d20 <StartLEDsTask+0x48>)
 8000cf6:	f000 febd 	bl	8001a74 <HAL_GPIO_WritePin>
		while (!armed) {
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d0f2      	beq.n	8000ce6 <StartLEDsTask+0xe>
		}
//		} else {
		// Armed
		while (armed) {
 8000d00:	e009      	b.n	8000d16 <StartLEDsTask+0x3e>
			// Turn off Green LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2140      	movs	r1, #64	@ 0x40
 8000d06:	4806      	ldr	r0, [pc, #24]	@ (8000d20 <StartLEDsTask+0x48>)
 8000d08:	f000 feb4 	bl	8001a74 <HAL_GPIO_WritePin>

			// Turn on Red LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2120      	movs	r1, #32
 8000d10:	4803      	ldr	r0, [pc, #12]	@ (8000d20 <StartLEDsTask+0x48>)
 8000d12:	f000 feaf 	bl	8001a74 <HAL_GPIO_WritePin>
		while (armed) {
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1f2      	bne.n	8000d02 <StartLEDsTask+0x2a>
		while (!armed) {
 8000d1c:	e7ed      	b.n	8000cfa <StartLEDsTask+0x22>
 8000d1e:	bf00      	nop
 8000d20:	40020000 	.word	0x40020000

08000d24 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a04      	ldr	r2, [pc, #16]	@ (8000d44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d101      	bne.n	8000d3a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000d36:	f000 fbcb 	bl	80014d0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40001000 	.word	0x40001000

08000d48 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <Error_Handler+0x8>

08000d54 <SSD1306_UpdateScreen>:

	/* Return OK */
	return 1;
}

void SSD1306_UpdateScreen(void) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	71fb      	strb	r3, [r7, #7]
 8000d5e:	e01d      	b.n	8000d9c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	3b50      	subs	r3, #80	@ 0x50
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2078      	movs	r0, #120	@ 0x78
 8000d6c:	f000 f9a0 	bl	80010b0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	2078      	movs	r0, #120	@ 0x78
 8000d76:	f000 f99b 	bl	80010b0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000d7a:	2210      	movs	r2, #16
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2078      	movs	r0, #120	@ 0x78
 8000d80:	f000 f996 	bl	80010b0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	01db      	lsls	r3, r3, #7
 8000d88:	4a08      	ldr	r2, [pc, #32]	@ (8000dac <SSD1306_UpdateScreen+0x58>)
 8000d8a:	441a      	add	r2, r3
 8000d8c:	2380      	movs	r3, #128	@ 0x80
 8000d8e:	2140      	movs	r1, #64	@ 0x40
 8000d90:	2078      	movs	r0, #120	@ 0x78
 8000d92:	f000 f927 	bl	8000fe4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2b07      	cmp	r3, #7
 8000da0:	d9de      	bls.n	8000d60 <SSD1306_UpdateScreen+0xc>
	}
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000134 	.word	0x20000134

08000db0 <SSD1306_DrawPixel>:
void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
}

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	80fb      	strh	r3, [r7, #6]
 8000dba:	460b      	mov	r3, r1
 8000dbc:	80bb      	strh	r3, [r7, #4]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	70fb      	strb	r3, [r7, #3]
	if (
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000dc6:	d848      	bhi.n	8000e5a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000dc8:	88bb      	ldrh	r3, [r7, #4]
 8000dca:	2b3f      	cmp	r3, #63	@ 0x3f
 8000dcc:	d845      	bhi.n	8000e5a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000dce:	4b26      	ldr	r3, [pc, #152]	@ (8000e68 <SSD1306_DrawPixel+0xb8>)
 8000dd0:	791b      	ldrb	r3, [r3, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d006      	beq.n	8000de4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000dd6:	78fb      	ldrb	r3, [r7, #3]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	bf0c      	ite	eq
 8000ddc:	2301      	moveq	r3, #1
 8000dde:	2300      	movne	r3, #0
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000de4:	78fb      	ldrb	r3, [r7, #3]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d11a      	bne.n	8000e20 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000dea:	88fa      	ldrh	r2, [r7, #6]
 8000dec:	88bb      	ldrh	r3, [r7, #4]
 8000dee:	08db      	lsrs	r3, r3, #3
 8000df0:	b298      	uxth	r0, r3
 8000df2:	4603      	mov	r3, r0
 8000df4:	01db      	lsls	r3, r3, #7
 8000df6:	4413      	add	r3, r2
 8000df8:	4a1c      	ldr	r2, [pc, #112]	@ (8000e6c <SSD1306_DrawPixel+0xbc>)
 8000dfa:	5cd3      	ldrb	r3, [r2, r3]
 8000dfc:	b25a      	sxtb	r2, r3
 8000dfe:	88bb      	ldrh	r3, [r7, #4]
 8000e00:	f003 0307 	and.w	r3, r3, #7
 8000e04:	2101      	movs	r1, #1
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	b25b      	sxtb	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b259      	sxtb	r1, r3
 8000e10:	88fa      	ldrh	r2, [r7, #6]
 8000e12:	4603      	mov	r3, r0
 8000e14:	01db      	lsls	r3, r3, #7
 8000e16:	4413      	add	r3, r2
 8000e18:	b2c9      	uxtb	r1, r1
 8000e1a:	4a14      	ldr	r2, [pc, #80]	@ (8000e6c <SSD1306_DrawPixel+0xbc>)
 8000e1c:	54d1      	strb	r1, [r2, r3]
 8000e1e:	e01d      	b.n	8000e5c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000e20:	88fa      	ldrh	r2, [r7, #6]
 8000e22:	88bb      	ldrh	r3, [r7, #4]
 8000e24:	08db      	lsrs	r3, r3, #3
 8000e26:	b298      	uxth	r0, r3
 8000e28:	4603      	mov	r3, r0
 8000e2a:	01db      	lsls	r3, r3, #7
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e6c <SSD1306_DrawPixel+0xbc>)
 8000e30:	5cd3      	ldrb	r3, [r2, r3]
 8000e32:	b25a      	sxtb	r2, r3
 8000e34:	88bb      	ldrh	r3, [r7, #4]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	b25b      	sxtb	r3, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	b25b      	sxtb	r3, r3
 8000e46:	4013      	ands	r3, r2
 8000e48:	b259      	sxtb	r1, r3
 8000e4a:	88fa      	ldrh	r2, [r7, #6]
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	01db      	lsls	r3, r3, #7
 8000e50:	4413      	add	r3, r2
 8000e52:	b2c9      	uxtb	r1, r1
 8000e54:	4a05      	ldr	r2, [pc, #20]	@ (8000e6c <SSD1306_DrawPixel+0xbc>)
 8000e56:	54d1      	strb	r1, [r2, r3]
 8000e58:	e000      	b.n	8000e5c <SSD1306_DrawPixel+0xac>
		return;
 8000e5a:	bf00      	nop
	}
}
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000534 	.word	0x20000534
 8000e6c:	20000134 	.word	0x20000134

08000e70 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	460a      	mov	r2, r1
 8000e7a:	80fb      	strh	r3, [r7, #6]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000e80:	4a05      	ldr	r2, [pc, #20]	@ (8000e98 <SSD1306_GotoXY+0x28>)
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000e86:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <SSD1306_GotoXY+0x28>)
 8000e88:	88bb      	ldrh	r3, [r7, #4]
 8000e8a:	8053      	strh	r3, [r2, #2]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	20000534 	.word	0x20000534

08000e9c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000eac:	4b39      	ldr	r3, [pc, #228]	@ (8000f94 <SSD1306_Putc+0xf8>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
	if (
 8000eb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000eba:	dc07      	bgt.n	8000ecc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000ebc:	4b35      	ldr	r3, [pc, #212]	@ (8000f94 <SSD1306_Putc+0xf8>)
 8000ebe:	885b      	ldrh	r3, [r3, #2]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	785b      	ldrb	r3, [r3, #1]
 8000ec6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ec8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000eca:	dd01      	ble.n	8000ed0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e05d      	b.n	8000f8c <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	e04b      	b.n	8000f6e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	3b20      	subs	r3, #32
 8000ede:	6839      	ldr	r1, [r7, #0]
 8000ee0:	7849      	ldrb	r1, [r1, #1]
 8000ee2:	fb01 f303 	mul.w	r3, r1, r3
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	440b      	add	r3, r1
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4413      	add	r3, r2
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	e030      	b.n	8000f5c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d010      	beq.n	8000f2c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000f0a:	4b22      	ldr	r3, [pc, #136]	@ (8000f94 <SSD1306_Putc+0xf8>)
 8000f0c:	881a      	ldrh	r2, [r3, #0]
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	4413      	add	r3, r2
 8000f14:	b298      	uxth	r0, r3
 8000f16:	4b1f      	ldr	r3, [pc, #124]	@ (8000f94 <SSD1306_Putc+0xf8>)
 8000f18:	885a      	ldrh	r2, [r3, #2]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	4413      	add	r3, r2
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	79ba      	ldrb	r2, [r7, #6]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f7ff ff43 	bl	8000db0 <SSD1306_DrawPixel>
 8000f2a:	e014      	b.n	8000f56 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000f2c:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <SSD1306_Putc+0xf8>)
 8000f2e:	881a      	ldrh	r2, [r3, #0]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	4413      	add	r3, r2
 8000f36:	b298      	uxth	r0, r3
 8000f38:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <SSD1306_Putc+0xf8>)
 8000f3a:	885a      	ldrh	r2, [r3, #2]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	4413      	add	r3, r2
 8000f42:	b299      	uxth	r1, r3
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	bf0c      	ite	eq
 8000f4a:	2301      	moveq	r3, #1
 8000f4c:	2300      	movne	r3, #0
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	461a      	mov	r2, r3
 8000f52:	f7ff ff2d 	bl	8000db0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d3c8      	bcc.n	8000efa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	461a      	mov	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d3ad      	bcc.n	8000ed6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <SSD1306_Putc+0xf8>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	7812      	ldrb	r2, [r2, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	4b03      	ldr	r3, [pc, #12]	@ (8000f94 <SSD1306_Putc+0xf8>)
 8000f88:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000534 	.word	0x20000534

08000f98 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000fa6:	e012      	b.n	8000fce <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	79fa      	ldrb	r2, [r7, #7]
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff73 	bl	8000e9c <SSD1306_Putc>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	461a      	mov	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d002      	beq.n	8000fc8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	e008      	b.n	8000fda <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1e8      	bne.n	8000fa8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b0c7      	sub	sp, #284	@ 0x11c
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	4604      	mov	r4, r0
 8000fec:	4608      	mov	r0, r1
 8000fee:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000ff2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000ff6:	600a      	str	r2, [r1, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ffe:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001002:	4622      	mov	r2, r4
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800100a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800100e:	4602      	mov	r2, r0
 8001010:	701a      	strb	r2, [r3, #0]
 8001012:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001016:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800101a:	460a      	mov	r2, r1
 800101c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800101e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001022:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001026:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800102a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800102e:	7812      	ldrb	r2, [r2, #0]
 8001030:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001032:	2300      	movs	r3, #0
 8001034:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001038:	e015      	b.n	8001066 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800103a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800103e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001042:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001046:	6812      	ldr	r2, [r2, #0]
 8001048:	441a      	add	r2, r3
 800104a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800104e:	3301      	adds	r3, #1
 8001050:	7811      	ldrb	r1, [r2, #0]
 8001052:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001056:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800105a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800105c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001060:	3301      	adds	r3, #1
 8001062:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001066:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800106a:	b29b      	uxth	r3, r3
 800106c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001070:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001074:	8812      	ldrh	r2, [r2, #0]
 8001076:	429a      	cmp	r2, r3
 8001078:	d8df      	bhi.n	800103a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800107a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800107e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b299      	uxth	r1, r3
 8001086:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800108a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	3301      	adds	r3, #1
 8001092:	b29b      	uxth	r3, r3
 8001094:	f107 020c 	add.w	r2, r7, #12
 8001098:	200a      	movs	r0, #10
 800109a:	9000      	str	r0, [sp, #0]
 800109c:	4803      	ldr	r0, [pc, #12]	@ (80010ac <ssd1306_I2C_WriteMulti+0xc8>)
 800109e:	f000 fe61 	bl	8001d64 <HAL_I2C_Master_Transmit>
}
 80010a2:	bf00      	nop
 80010a4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	20000088 	.word	0x20000088

080010b0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af02      	add	r7, sp, #8
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	460b      	mov	r3, r1
 80010bc:	71bb      	strb	r3, [r7, #6]
 80010be:	4613      	mov	r3, r2
 80010c0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80010c6:	797b      	ldrb	r3, [r7, #5]
 80010c8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	b299      	uxth	r1, r3
 80010ce:	f107 020c 	add.w	r2, r7, #12
 80010d2:	230a      	movs	r3, #10
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2302      	movs	r3, #2
 80010d8:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <ssd1306_I2C_Write+0x38>)
 80010da:	f000 fe43 	bl	8001d64 <HAL_I2C_Master_Transmit>
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000088 	.word	0x20000088

080010ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <HAL_MspInit+0x54>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	4a11      	ldr	r2, [pc, #68]	@ (8001140 <HAL_MspInit+0x54>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001100:	6453      	str	r3, [r2, #68]	@ 0x44
 8001102:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <HAL_MspInit+0x54>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <HAL_MspInit+0x54>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001116:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <HAL_MspInit+0x54>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800111c:	6413      	str	r3, [r2, #64]	@ 0x40
 800111e:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <HAL_MspInit+0x54>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	210f      	movs	r1, #15
 800112e:	f06f 0001 	mvn.w	r0, #1
 8001132:	f000 fac9 	bl	80016c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800

08001144 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	@ 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a19      	ldr	r2, [pc, #100]	@ (80011c8 <HAL_I2C_MspInit+0x84>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d12c      	bne.n	80011c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <HAL_I2C_MspInit+0x88>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a17      	ldr	r2, [pc, #92]	@ (80011cc <HAL_I2C_MspInit+0x88>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <HAL_I2C_MspInit+0x88>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001182:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001188:	2312      	movs	r3, #18
 800118a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001194:	2304      	movs	r3, #4
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <HAL_I2C_MspInit+0x8c>)
 80011a0:	f000 fabc 	bl	800171c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <HAL_I2C_MspInit+0x88>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ac:	4a07      	ldr	r2, [pc, #28]	@ (80011cc <HAL_I2C_MspInit+0x88>)
 80011ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <HAL_I2C_MspInit+0x88>)
 80011b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80011c0:	bf00      	nop
 80011c2:	3728      	adds	r7, #40	@ 0x28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40005400 	.word	0x40005400
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020400 	.word	0x40020400

080011d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	@ 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a19      	ldr	r2, [pc, #100]	@ (8001258 <HAL_UART_MspInit+0x84>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d12b      	bne.n	800124e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b18      	ldr	r3, [pc, #96]	@ (800125c <HAL_UART_MspInit+0x88>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	4a17      	ldr	r2, [pc, #92]	@ (800125c <HAL_UART_MspInit+0x88>)
 8001200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001204:	6413      	str	r3, [r2, #64]	@ 0x40
 8001206:	4b15      	ldr	r3, [pc, #84]	@ (800125c <HAL_UART_MspInit+0x88>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <HAL_UART_MspInit+0x88>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a10      	ldr	r2, [pc, #64]	@ (800125c <HAL_UART_MspInit+0x88>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <HAL_UART_MspInit+0x88>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800122e:	230c      	movs	r3, #12
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800123e:	2307      	movs	r3, #7
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	@ (8001260 <HAL_UART_MspInit+0x8c>)
 800124a:	f000 fa67 	bl	800171c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	@ 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40004400 	.word	0x40004400
 800125c:	40023800 	.word	0x40023800
 8001260:	40020000 	.word	0x40020000

08001264 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08e      	sub	sp, #56	@ 0x38
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	4b33      	ldr	r3, [pc, #204]	@ (8001348 <HAL_InitTick+0xe4>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	4a32      	ldr	r2, [pc, #200]	@ (8001348 <HAL_InitTick+0xe4>)
 800127e:	f043 0310 	orr.w	r3, r3, #16
 8001282:	6413      	str	r3, [r2, #64]	@ 0x40
 8001284:	4b30      	ldr	r3, [pc, #192]	@ (8001348 <HAL_InitTick+0xe4>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	f003 0310 	and.w	r3, r3, #16
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001290:	f107 0210 	add.w	r2, r7, #16
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f001 f9d6 	bl	800264c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012a0:	6a3b      	ldr	r3, [r7, #32]
 80012a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d103      	bne.n	80012b2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012aa:	f001 f9a7 	bl	80025fc <HAL_RCC_GetPCLK1Freq>
 80012ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80012b0:	e004      	b.n	80012bc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012b2:	f001 f9a3 	bl	80025fc <HAL_RCC_GetPCLK1Freq>
 80012b6:	4603      	mov	r3, r0
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012be:	4a23      	ldr	r2, [pc, #140]	@ (800134c <HAL_InitTick+0xe8>)
 80012c0:	fba2 2303 	umull	r2, r3, r2, r3
 80012c4:	0c9b      	lsrs	r3, r3, #18
 80012c6:	3b01      	subs	r3, #1
 80012c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012ca:	4b21      	ldr	r3, [pc, #132]	@ (8001350 <HAL_InitTick+0xec>)
 80012cc:	4a21      	ldr	r2, [pc, #132]	@ (8001354 <HAL_InitTick+0xf0>)
 80012ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001350 <HAL_InitTick+0xec>)
 80012d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001350 <HAL_InitTick+0xec>)
 80012da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012de:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <HAL_InitTick+0xec>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <HAL_InitTick+0xec>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ea:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <HAL_InitTick+0xec>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80012f0:	4817      	ldr	r0, [pc, #92]	@ (8001350 <HAL_InitTick+0xec>)
 80012f2:	f001 feab 	bl	800304c <HAL_TIM_Base_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80012fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001300:	2b00      	cmp	r3, #0
 8001302:	d11b      	bne.n	800133c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001304:	4812      	ldr	r0, [pc, #72]	@ (8001350 <HAL_InitTick+0xec>)
 8001306:	f001 fefb 	bl	8003100 <HAL_TIM_Base_Start_IT>
 800130a:	4603      	mov	r3, r0
 800130c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001310:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001314:	2b00      	cmp	r3, #0
 8001316:	d111      	bne.n	800133c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001318:	2036      	movs	r0, #54	@ 0x36
 800131a:	f000 f9f1 	bl	8001700 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b0f      	cmp	r3, #15
 8001322:	d808      	bhi.n	8001336 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001324:	2200      	movs	r2, #0
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	2036      	movs	r0, #54	@ 0x36
 800132a:	f000 f9cd 	bl	80016c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800132e:	4a0a      	ldr	r2, [pc, #40]	@ (8001358 <HAL_InitTick+0xf4>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	e002      	b.n	800133c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800133c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001340:	4618      	mov	r0, r3
 8001342:	3738      	adds	r7, #56	@ 0x38
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	431bde83 	.word	0x431bde83
 8001350:	2000053c 	.word	0x2000053c
 8001354:	40001000 	.word	0x40001000
 8001358:	2000000c 	.word	0x2000000c

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <NMI_Handler+0x4>

08001364 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <MemManage_Handler+0x4>

08001374 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <BusFault_Handler+0x4>

0800137c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <UsageFault_Handler+0x4>

08001384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001398:	4802      	ldr	r0, [pc, #8]	@ (80013a4 <TIM6_DAC_IRQHandler+0x10>)
 800139a:	f001 ff21 	bl	80031e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000053c 	.word	0x2000053c

080013a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b0:	4a14      	ldr	r2, [pc, #80]	@ (8001404 <_sbrk+0x5c>)
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <_sbrk+0x60>)
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013bc:	4b13      	ldr	r3, [pc, #76]	@ (800140c <_sbrk+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <_sbrk+0x64>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <_sbrk+0x68>)
 80013c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d207      	bcs.n	80013e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d8:	f005 fb54 	bl	8006a84 <__errno>
 80013dc:	4603      	mov	r3, r0
 80013de:	220c      	movs	r2, #12
 80013e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	e009      	b.n	80013fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e8:	4b08      	ldr	r3, [pc, #32]	@ (800140c <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ee:	4b07      	ldr	r3, [pc, #28]	@ (800140c <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	4a05      	ldr	r2, [pc, #20]	@ (800140c <_sbrk+0x64>)
 80013f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fa:	68fb      	ldr	r3, [r7, #12]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20020000 	.word	0x20020000
 8001408:	00000400 	.word	0x00000400
 800140c:	20000584 	.word	0x20000584
 8001410:	200050c0 	.word	0x200050c0

08001414 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <SystemInit+0x20>)
 800141a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800141e:	4a05      	ldr	r2, [pc, #20]	@ (8001434 <SystemInit+0x20>)
 8001420:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001424:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001438:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001470 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800143c:	f7ff ffea 	bl	8001414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001440:	480c      	ldr	r0, [pc, #48]	@ (8001474 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001442:	490d      	ldr	r1, [pc, #52]	@ (8001478 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001444:	4a0d      	ldr	r2, [pc, #52]	@ (800147c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001448:	e002      	b.n	8001450 <LoopCopyDataInit>

0800144a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800144c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144e:	3304      	adds	r3, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001454:	d3f9      	bcc.n	800144a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001456:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001458:	4c0a      	ldr	r4, [pc, #40]	@ (8001484 <LoopFillZerobss+0x22>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800145c:	e001      	b.n	8001462 <LoopFillZerobss>

0800145e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001460:	3204      	adds	r2, #4

08001462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001464:	d3fb      	bcc.n	800145e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001466:	f005 fb13 	bl	8006a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146a:	f7ff fa55 	bl	8000918 <main>
  bx  lr    
 800146e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001470:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001478:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800147c:	080081ec 	.word	0x080081ec
  ldr r2, =_sbss
 8001480:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001484:	200050bc 	.word	0x200050bc

08001488 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001488:	e7fe      	b.n	8001488 <ADC_IRQHandler>
	...

0800148c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001490:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <HAL_Init+0x40>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0d      	ldr	r2, [pc, #52]	@ (80014cc <HAL_Init+0x40>)
 8001496:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800149a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800149c:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <HAL_Init+0x40>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a0a      	ldr	r2, [pc, #40]	@ (80014cc <HAL_Init+0x40>)
 80014a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a8:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <HAL_Init+0x40>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a07      	ldr	r2, [pc, #28]	@ (80014cc <HAL_Init+0x40>)
 80014ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b4:	2003      	movs	r0, #3
 80014b6:	f000 f8fc 	bl	80016b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ba:	200f      	movs	r0, #15
 80014bc:	f7ff fed2 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c0:	f7ff fe14 	bl	80010ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023c00 	.word	0x40023c00

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000010 	.word	0x20000010
 80014f4:	20000588 	.word	0x20000588

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	@ (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000588 	.word	0x20000588

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff ffee 	bl	80014f8 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001528:	d005      	beq.n	8001536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152a:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <HAL_Delay+0x44>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001536:	bf00      	nop
 8001538:	f7ff ffde 	bl	80014f8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d8f7      	bhi.n	8001538 <HAL_Delay+0x28>
  {
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000010 	.word	0x20000010

08001558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001580:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158a:	4a04      	ldr	r2, [pc, #16]	@ (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <__NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	db0b      	blt.n	80015e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	f003 021f 	and.w	r2, r3, #31
 80015d4:	4907      	ldr	r1, [pc, #28]	@ (80015f4 <__NVIC_EnableIRQ+0x38>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	2001      	movs	r0, #1
 80015de:	fa00 f202 	lsl.w	r2, r0, r2
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e100 	.word	0xe000e100

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	@ (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	@ (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	@ 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	@ 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ff4c 	bl	8001558 <__NVIC_SetPriorityGrouping>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
 80016d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016da:	f7ff ff61 	bl	80015a0 <__NVIC_GetPriorityGrouping>
 80016de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	68b9      	ldr	r1, [r7, #8]
 80016e4:	6978      	ldr	r0, [r7, #20]
 80016e6:	f7ff ffb1 	bl	800164c <NVIC_EncodePriority>
 80016ea:	4602      	mov	r2, r0
 80016ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff80 	bl	80015f8 <__NVIC_SetPriority>
}
 80016f8:	bf00      	nop
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff54 	bl	80015bc <__NVIC_EnableIRQ>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	@ 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	e165      	b.n	8001a04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001738:	2201      	movs	r2, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	429a      	cmp	r2, r3
 8001752:	f040 8154 	bne.w	80019fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	2b01      	cmp	r3, #1
 8001760:	d005      	beq.n	800176e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800176a:	2b02      	cmp	r3, #2
 800176c:	d130      	bne.n	80017d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	2203      	movs	r2, #3
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a4:	2201      	movs	r2, #1
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 0201 	and.w	r2, r3, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d017      	beq.n	800180c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d123      	bne.n	8001860 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	08da      	lsrs	r2, r3, #3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3208      	adds	r2, #8
 8001820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	220f      	movs	r2, #15
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	08da      	lsrs	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3208      	adds	r2, #8
 800185a:	69b9      	ldr	r1, [r7, #24]
 800185c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0203 	and.w	r2, r3, #3
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80ae 	beq.w	80019fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b5d      	ldr	r3, [pc, #372]	@ (8001a1c <HAL_GPIO_Init+0x300>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018aa:	4a5c      	ldr	r2, [pc, #368]	@ (8001a1c <HAL_GPIO_Init+0x300>)
 80018ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018b2:	4b5a      	ldr	r3, [pc, #360]	@ (8001a1c <HAL_GPIO_Init+0x300>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018be:	4a58      	ldr	r2, [pc, #352]	@ (8001a20 <HAL_GPIO_Init+0x304>)
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001a24 <HAL_GPIO_Init+0x308>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d025      	beq.n	8001936 <HAL_GPIO_Init+0x21a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001a28 <HAL_GPIO_Init+0x30c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01f      	beq.n	8001932 <HAL_GPIO_Init+0x216>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4d      	ldr	r2, [pc, #308]	@ (8001a2c <HAL_GPIO_Init+0x310>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d019      	beq.n	800192e <HAL_GPIO_Init+0x212>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001a30 <HAL_GPIO_Init+0x314>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d013      	beq.n	800192a <HAL_GPIO_Init+0x20e>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4b      	ldr	r2, [pc, #300]	@ (8001a34 <HAL_GPIO_Init+0x318>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00d      	beq.n	8001926 <HAL_GPIO_Init+0x20a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4a      	ldr	r2, [pc, #296]	@ (8001a38 <HAL_GPIO_Init+0x31c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d007      	beq.n	8001922 <HAL_GPIO_Init+0x206>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a49      	ldr	r2, [pc, #292]	@ (8001a3c <HAL_GPIO_Init+0x320>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d101      	bne.n	800191e <HAL_GPIO_Init+0x202>
 800191a:	2306      	movs	r3, #6
 800191c:	e00c      	b.n	8001938 <HAL_GPIO_Init+0x21c>
 800191e:	2307      	movs	r3, #7
 8001920:	e00a      	b.n	8001938 <HAL_GPIO_Init+0x21c>
 8001922:	2305      	movs	r3, #5
 8001924:	e008      	b.n	8001938 <HAL_GPIO_Init+0x21c>
 8001926:	2304      	movs	r3, #4
 8001928:	e006      	b.n	8001938 <HAL_GPIO_Init+0x21c>
 800192a:	2303      	movs	r3, #3
 800192c:	e004      	b.n	8001938 <HAL_GPIO_Init+0x21c>
 800192e:	2302      	movs	r3, #2
 8001930:	e002      	b.n	8001938 <HAL_GPIO_Init+0x21c>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <HAL_GPIO_Init+0x21c>
 8001936:	2300      	movs	r3, #0
 8001938:	69fa      	ldr	r2, [r7, #28]
 800193a:	f002 0203 	and.w	r2, r2, #3
 800193e:	0092      	lsls	r2, r2, #2
 8001940:	4093      	lsls	r3, r2
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001948:	4935      	ldr	r1, [pc, #212]	@ (8001a20 <HAL_GPIO_Init+0x304>)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	3302      	adds	r3, #2
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001956:	4b3a      	ldr	r3, [pc, #232]	@ (8001a40 <HAL_GPIO_Init+0x324>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800197a:	4a31      	ldr	r2, [pc, #196]	@ (8001a40 <HAL_GPIO_Init+0x324>)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001980:	4b2f      	ldr	r3, [pc, #188]	@ (8001a40 <HAL_GPIO_Init+0x324>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a4:	4a26      	ldr	r2, [pc, #152]	@ (8001a40 <HAL_GPIO_Init+0x324>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019aa:	4b25      	ldr	r3, [pc, #148]	@ (8001a40 <HAL_GPIO_Init+0x324>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001a40 <HAL_GPIO_Init+0x324>)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a40 <HAL_GPIO_Init+0x324>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019f8:	4a11      	ldr	r2, [pc, #68]	@ (8001a40 <HAL_GPIO_Init+0x324>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3301      	adds	r3, #1
 8001a02:	61fb      	str	r3, [r7, #28]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	2b0f      	cmp	r3, #15
 8001a08:	f67f ae96 	bls.w	8001738 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3724      	adds	r7, #36	@ 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40013800 	.word	0x40013800
 8001a24:	40020000 	.word	0x40020000
 8001a28:	40020400 	.word	0x40020400
 8001a2c:	40020800 	.word	0x40020800
 8001a30:	40020c00 	.word	0x40020c00
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40021400 	.word	0x40021400
 8001a3c:	40021800 	.word	0x40021800
 8001a40:	40013c00 	.word	0x40013c00

08001a44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	887b      	ldrh	r3, [r7, #2]
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
 8001a60:	e001      	b.n	8001a66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a84:	787b      	ldrb	r3, [r7, #1]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a90:	e003      	b.n	8001a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a92:	887b      	ldrh	r3, [r7, #2]
 8001a94:	041a      	lsls	r2, r3, #16
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	619a      	str	r2, [r3, #24]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b085      	sub	sp, #20
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ab8:	887a      	ldrh	r2, [r7, #2]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4013      	ands	r3, r2
 8001abe:	041a      	lsls	r2, r3, #16
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	43d9      	mvns	r1, r3
 8001ac4:	887b      	ldrh	r3, [r7, #2]
 8001ac6:	400b      	ands	r3, r1
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	619a      	str	r2, [r3, #24]
}
 8001ace:	bf00      	nop
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e12b      	b.n	8001d46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d106      	bne.n	8001b08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fb1e 	bl	8001144 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2224      	movs	r2, #36	@ 0x24
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0201 	bic.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b40:	f000 fd5c 	bl	80025fc <HAL_RCC_GetPCLK1Freq>
 8001b44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	4a81      	ldr	r2, [pc, #516]	@ (8001d50 <HAL_I2C_Init+0x274>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d807      	bhi.n	8001b60 <HAL_I2C_Init+0x84>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4a80      	ldr	r2, [pc, #512]	@ (8001d54 <HAL_I2C_Init+0x278>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	bf94      	ite	ls
 8001b58:	2301      	movls	r3, #1
 8001b5a:	2300      	movhi	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	e006      	b.n	8001b6e <HAL_I2C_Init+0x92>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4a7d      	ldr	r2, [pc, #500]	@ (8001d58 <HAL_I2C_Init+0x27c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	bf94      	ite	ls
 8001b68:	2301      	movls	r3, #1
 8001b6a:	2300      	movhi	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e0e7      	b.n	8001d46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4a78      	ldr	r2, [pc, #480]	@ (8001d5c <HAL_I2C_Init+0x280>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	0c9b      	lsrs	r3, r3, #18
 8001b80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	4a6a      	ldr	r2, [pc, #424]	@ (8001d50 <HAL_I2C_Init+0x274>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d802      	bhi.n	8001bb0 <HAL_I2C_Init+0xd4>
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	3301      	adds	r3, #1
 8001bae:	e009      	b.n	8001bc4 <HAL_I2C_Init+0xe8>
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001bb6:	fb02 f303 	mul.w	r3, r2, r3
 8001bba:	4a69      	ldr	r2, [pc, #420]	@ (8001d60 <HAL_I2C_Init+0x284>)
 8001bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc0:	099b      	lsrs	r3, r3, #6
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001bd6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	495c      	ldr	r1, [pc, #368]	@ (8001d50 <HAL_I2C_Init+0x274>)
 8001be0:	428b      	cmp	r3, r1
 8001be2:	d819      	bhi.n	8001c18 <HAL_I2C_Init+0x13c>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1e59      	subs	r1, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bf2:	1c59      	adds	r1, r3, #1
 8001bf4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00a      	beq.n	8001c14 <HAL_I2C_Init+0x138>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	1e59      	subs	r1, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c12:	e051      	b.n	8001cb8 <HAL_I2C_Init+0x1dc>
 8001c14:	2304      	movs	r3, #4
 8001c16:	e04f      	b.n	8001cb8 <HAL_I2C_Init+0x1dc>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d111      	bne.n	8001c44 <HAL_I2C_Init+0x168>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1e58      	subs	r0, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6859      	ldr	r1, [r3, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	440b      	add	r3, r1
 8001c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	bf0c      	ite	eq
 8001c3c:	2301      	moveq	r3, #1
 8001c3e:	2300      	movne	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	e012      	b.n	8001c6a <HAL_I2C_Init+0x18e>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	1e58      	subs	r0, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	0099      	lsls	r1, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	bf0c      	ite	eq
 8001c64:	2301      	moveq	r3, #1
 8001c66:	2300      	movne	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_I2C_Init+0x196>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e022      	b.n	8001cb8 <HAL_I2C_Init+0x1dc>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10e      	bne.n	8001c98 <HAL_I2C_Init+0x1bc>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1e58      	subs	r0, r3, #1
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6859      	ldr	r1, [r3, #4]
 8001c82:	460b      	mov	r3, r1
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	440b      	add	r3, r1
 8001c88:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c96:	e00f      	b.n	8001cb8 <HAL_I2C_Init+0x1dc>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1e58      	subs	r0, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6859      	ldr	r1, [r3, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	0099      	lsls	r1, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	6809      	ldr	r1, [r1, #0]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69da      	ldr	r2, [r3, #28]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001ce6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6911      	ldr	r1, [r2, #16]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68d2      	ldr	r2, [r2, #12]
 8001cf2:	4311      	orrs	r1, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695a      	ldr	r2, [r3, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2220      	movs	r2, #32
 8001d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	000186a0 	.word	0x000186a0
 8001d54:	001e847f 	.word	0x001e847f
 8001d58:	003d08ff 	.word	0x003d08ff
 8001d5c:	431bde83 	.word	0x431bde83
 8001d60:	10624dd3 	.word	0x10624dd3

08001d64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af02      	add	r7, sp, #8
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	460b      	mov	r3, r1
 8001d72:	817b      	strh	r3, [r7, #10]
 8001d74:	4613      	mov	r3, r2
 8001d76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff fbbe 	bl	80014f8 <HAL_GetTick>
 8001d7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b20      	cmp	r3, #32
 8001d88:	f040 80e0 	bne.w	8001f4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	2319      	movs	r3, #25
 8001d92:	2201      	movs	r2, #1
 8001d94:	4970      	ldr	r1, [pc, #448]	@ (8001f58 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 f964 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001da2:	2302      	movs	r3, #2
 8001da4:	e0d3      	b.n	8001f4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_I2C_Master_Transmit+0x50>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e0cc      	b.n	8001f4e <HAL_I2C_Master_Transmit+0x1ea>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d007      	beq.n	8001dda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 0201 	orr.w	r2, r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001de8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2221      	movs	r2, #33	@ 0x21
 8001dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2210      	movs	r2, #16
 8001df6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	893a      	ldrh	r2, [r7, #8]
 8001e0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4a50      	ldr	r2, [pc, #320]	@ (8001f5c <HAL_I2C_Master_Transmit+0x1f8>)
 8001e1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e1c:	8979      	ldrh	r1, [r7, #10]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	6a3a      	ldr	r2, [r7, #32]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 f89c 	bl	8001f60 <I2C_MasterRequestWrite>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e08d      	b.n	8001f4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e48:	e066      	b.n	8001f18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	6a39      	ldr	r1, [r7, #32]
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 fa22 	bl	8002298 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00d      	beq.n	8001e76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d107      	bne.n	8001e72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e06b      	b.n	8001f4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	781a      	ldrb	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d11b      	bne.n	8001eec <HAL_I2C_Master_Transmit+0x188>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d017      	beq.n	8001eec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec0:	781a      	ldrb	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	6a39      	ldr	r1, [r7, #32]
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 fa19 	bl	8002328 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00d      	beq.n	8001f18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d107      	bne.n	8001f14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e01a      	b.n	8001f4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d194      	bne.n	8001e4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e000      	b.n	8001f4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f4c:	2302      	movs	r3, #2
  }
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	00100002 	.word	0x00100002
 8001f5c:	ffff0000 	.word	0xffff0000

08001f60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d006      	beq.n	8001f8a <I2C_MasterRequestWrite+0x2a>
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d003      	beq.n	8001f8a <I2C_MasterRequestWrite+0x2a>
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f88:	d108      	bne.n	8001f9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	e00b      	b.n	8001fb4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa0:	2b12      	cmp	r3, #18
 8001fa2:	d107      	bne.n	8001fb4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 f84f 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00d      	beq.n	8001fe8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fda:	d103      	bne.n	8001fe4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fe2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e035      	b.n	8002054 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ff0:	d108      	bne.n	8002004 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ff2:	897b      	ldrh	r3, [r7, #10]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002000:	611a      	str	r2, [r3, #16]
 8002002:	e01b      	b.n	800203c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002004:	897b      	ldrh	r3, [r7, #10]
 8002006:	11db      	asrs	r3, r3, #7
 8002008:	b2db      	uxtb	r3, r3
 800200a:	f003 0306 	and.w	r3, r3, #6
 800200e:	b2db      	uxtb	r3, r3
 8002010:	f063 030f 	orn	r3, r3, #15
 8002014:	b2da      	uxtb	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	490e      	ldr	r1, [pc, #56]	@ (800205c <I2C_MasterRequestWrite+0xfc>)
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 f898 	bl	8002158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e010      	b.n	8002054 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002032:	897b      	ldrh	r3, [r7, #10]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	4907      	ldr	r1, [pc, #28]	@ (8002060 <I2C_MasterRequestWrite+0x100>)
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 f888 	bl	8002158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	00010008 	.word	0x00010008
 8002060:	00010002 	.word	0x00010002

08002064 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	4613      	mov	r3, r2
 8002072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002074:	e048      	b.n	8002108 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d044      	beq.n	8002108 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800207e:	f7ff fa3b 	bl	80014f8 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d302      	bcc.n	8002094 <I2C_WaitOnFlagUntilTimeout+0x30>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d139      	bne.n	8002108 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	0c1b      	lsrs	r3, r3, #16
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d10d      	bne.n	80020ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	43da      	mvns	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	4013      	ands	r3, r2
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bf0c      	ite	eq
 80020b0:	2301      	moveq	r3, #1
 80020b2:	2300      	movne	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	e00c      	b.n	80020d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	43da      	mvns	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	4013      	ands	r3, r2
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d116      	bne.n	8002108 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	f043 0220 	orr.w	r2, r3, #32
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e023      	b.n	8002150 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	0c1b      	lsrs	r3, r3, #16
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b01      	cmp	r3, #1
 8002110:	d10d      	bne.n	800212e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	43da      	mvns	r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	4013      	ands	r3, r2
 800211e:	b29b      	uxth	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf0c      	ite	eq
 8002124:	2301      	moveq	r3, #1
 8002126:	2300      	movne	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	e00c      	b.n	8002148 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	43da      	mvns	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	4013      	ands	r3, r2
 800213a:	b29b      	uxth	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	429a      	cmp	r2, r3
 800214c:	d093      	beq.n	8002076 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002166:	e071      	b.n	800224c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002176:	d123      	bne.n	80021c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002186:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002190:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ac:	f043 0204 	orr.w	r2, r3, #4
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e067      	b.n	8002290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c6:	d041      	beq.n	800224c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021c8:	f7ff f996 	bl	80014f8 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d302      	bcc.n	80021de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d136      	bne.n	800224c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d10c      	bne.n	8002202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	4013      	ands	r3, r2
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf14      	ite	ne
 80021fa:	2301      	movne	r3, #1
 80021fc:	2300      	moveq	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	e00b      	b.n	800221a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	43da      	mvns	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	4013      	ands	r3, r2
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf14      	ite	ne
 8002214:	2301      	movne	r3, #1
 8002216:	2300      	moveq	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d016      	beq.n	800224c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002238:	f043 0220 	orr.w	r2, r3, #32
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e021      	b.n	8002290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	0c1b      	lsrs	r3, r3, #16
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b01      	cmp	r3, #1
 8002254:	d10c      	bne.n	8002270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	43da      	mvns	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	4013      	ands	r3, r2
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf14      	ite	ne
 8002268:	2301      	movne	r3, #1
 800226a:	2300      	moveq	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	e00b      	b.n	8002288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4013      	ands	r3, r2
 800227c:	b29b      	uxth	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	bf14      	ite	ne
 8002282:	2301      	movne	r3, #1
 8002284:	2300      	moveq	r3, #0
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	f47f af6d 	bne.w	8002168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022a4:	e034      	b.n	8002310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f886 	bl	80023b8 <I2C_IsAcknowledgeFailed>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e034      	b.n	8002320 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d028      	beq.n	8002310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022be:	f7ff f91b 	bl	80014f8 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d302      	bcc.n	80022d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d11d      	bne.n	8002310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022de:	2b80      	cmp	r3, #128	@ 0x80
 80022e0:	d016      	beq.n	8002310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	f043 0220 	orr.w	r2, r3, #32
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e007      	b.n	8002320 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800231a:	2b80      	cmp	r3, #128	@ 0x80
 800231c:	d1c3      	bne.n	80022a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002334:	e034      	b.n	80023a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f83e 	bl	80023b8 <I2C_IsAcknowledgeFailed>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e034      	b.n	80023b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d028      	beq.n	80023a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234e:	f7ff f8d3 	bl	80014f8 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	429a      	cmp	r2, r3
 800235c:	d302      	bcc.n	8002364 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d11d      	bne.n	80023a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b04      	cmp	r3, #4
 8002370:	d016      	beq.n	80023a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	f043 0220 	orr.w	r2, r3, #32
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e007      	b.n	80023b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d1c3      	bne.n	8002336 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ce:	d11b      	bne.n	8002408 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f4:	f043 0204 	orr.w	r2, r3, #4
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0cc      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800242c:	4b68      	ldr	r3, [pc, #416]	@ (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d90c      	bls.n	8002454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b65      	ldr	r3, [pc, #404]	@ (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b63      	ldr	r3, [pc, #396]	@ (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0b8      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d020      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800246c:	4b59      	ldr	r3, [pc, #356]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4a58      	ldr	r2, [pc, #352]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002476:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002484:	4b53      	ldr	r3, [pc, #332]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	4a52      	ldr	r2, [pc, #328]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800248e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002490:	4b50      	ldr	r3, [pc, #320]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	494d      	ldr	r1, [pc, #308]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d044      	beq.n	8002538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	4b47      	ldr	r3, [pc, #284]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d119      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e07f      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d003      	beq.n	80024d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d6:	4b3f      	ldr	r3, [pc, #252]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e06f      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e6:	4b3b      	ldr	r3, [pc, #236]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e067      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f6:	4b37      	ldr	r3, [pc, #220]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f023 0203 	bic.w	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4934      	ldr	r1, [pc, #208]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	4313      	orrs	r3, r2
 8002506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002508:	f7fe fff6 	bl	80014f8 <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	e00a      	b.n	8002526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002510:	f7fe fff2 	bl	80014f8 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e04f      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002526:	4b2b      	ldr	r3, [pc, #172]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 020c 	and.w	r2, r3, #12
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	429a      	cmp	r2, r3
 8002536:	d1eb      	bne.n	8002510 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002538:	4b25      	ldr	r3, [pc, #148]	@ (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d20c      	bcs.n	8002560 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b22      	ldr	r3, [pc, #136]	@ (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b20      	ldr	r3, [pc, #128]	@ (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e032      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800256c:	4b19      	ldr	r3, [pc, #100]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4916      	ldr	r1, [pc, #88]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	4313      	orrs	r3, r2
 800257c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d009      	beq.n	800259e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800258a:	4b12      	ldr	r3, [pc, #72]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	490e      	ldr	r1, [pc, #56]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	4313      	orrs	r3, r2
 800259c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800259e:	f000 f887 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 80025a2:	4602      	mov	r2, r0
 80025a4:	4b0b      	ldr	r3, [pc, #44]	@ (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	490a      	ldr	r1, [pc, #40]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	5ccb      	ldrb	r3, [r1, r3]
 80025b2:	fa22 f303 	lsr.w	r3, r2, r3
 80025b6:	4a09      	ldr	r2, [pc, #36]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80025ba:	4b09      	ldr	r3, [pc, #36]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fe50 	bl	8001264 <HAL_InitTick>

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40023c00 	.word	0x40023c00
 80025d4:	40023800 	.word	0x40023800
 80025d8:	08008190 	.word	0x08008190
 80025dc:	20000008 	.word	0x20000008
 80025e0:	2000000c 	.word	0x2000000c

080025e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e8:	4b03      	ldr	r3, [pc, #12]	@ (80025f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ea:	681b      	ldr	r3, [r3, #0]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000008 	.word	0x20000008

080025fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002600:	f7ff fff0 	bl	80025e4 <HAL_RCC_GetHCLKFreq>
 8002604:	4602      	mov	r2, r0
 8002606:	4b05      	ldr	r3, [pc, #20]	@ (800261c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	0a9b      	lsrs	r3, r3, #10
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	4903      	ldr	r1, [pc, #12]	@ (8002620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002612:	5ccb      	ldrb	r3, [r1, r3]
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40023800 	.word	0x40023800
 8002620:	080081a0 	.word	0x080081a0

08002624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002628:	f7ff ffdc 	bl	80025e4 <HAL_RCC_GetHCLKFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b05      	ldr	r3, [pc, #20]	@ (8002644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	0b5b      	lsrs	r3, r3, #13
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	4903      	ldr	r1, [pc, #12]	@ (8002648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40023800 	.word	0x40023800
 8002648:	080081a0 	.word	0x080081a0

0800264c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	220f      	movs	r2, #15
 800265a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800265c:	4b12      	ldr	r3, [pc, #72]	@ (80026a8 <HAL_RCC_GetClockConfig+0x5c>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0203 	and.w	r2, r3, #3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002668:	4b0f      	ldr	r3, [pc, #60]	@ (80026a8 <HAL_RCC_GetClockConfig+0x5c>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002674:	4b0c      	ldr	r3, [pc, #48]	@ (80026a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002680:	4b09      	ldr	r3, [pc, #36]	@ (80026a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	08db      	lsrs	r3, r3, #3
 8002686:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800268e:	4b07      	ldr	r3, [pc, #28]	@ (80026ac <HAL_RCC_GetClockConfig+0x60>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 020f 	and.w	r2, r3, #15
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	601a      	str	r2, [r3, #0]
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40023c00 	.word	0x40023c00

080026b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b4:	b0ae      	sub	sp, #184	@ 0xb8
 80026b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d6:	4bcb      	ldr	r3, [pc, #812]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b0c      	cmp	r3, #12
 80026e0:	f200 8206 	bhi.w	8002af0 <HAL_RCC_GetSysClockFreq+0x440>
 80026e4:	a201      	add	r2, pc, #4	@ (adr r2, 80026ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80026e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ea:	bf00      	nop
 80026ec:	08002721 	.word	0x08002721
 80026f0:	08002af1 	.word	0x08002af1
 80026f4:	08002af1 	.word	0x08002af1
 80026f8:	08002af1 	.word	0x08002af1
 80026fc:	08002729 	.word	0x08002729
 8002700:	08002af1 	.word	0x08002af1
 8002704:	08002af1 	.word	0x08002af1
 8002708:	08002af1 	.word	0x08002af1
 800270c:	08002731 	.word	0x08002731
 8002710:	08002af1 	.word	0x08002af1
 8002714:	08002af1 	.word	0x08002af1
 8002718:	08002af1 	.word	0x08002af1
 800271c:	08002921 	.word	0x08002921
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002720:	4bb9      	ldr	r3, [pc, #740]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x358>)
 8002722:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002726:	e1e7      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002728:	4bb8      	ldr	r3, [pc, #736]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x35c>)
 800272a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800272e:	e1e3      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002730:	4bb4      	ldr	r3, [pc, #720]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002738:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800273c:	4bb1      	ldr	r3, [pc, #708]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d071      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002748:	4bae      	ldr	r3, [pc, #696]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	099b      	lsrs	r3, r3, #6
 800274e:	2200      	movs	r2, #0
 8002750:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002754:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002758:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800275c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002760:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800276a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800276e:	4622      	mov	r2, r4
 8002770:	462b      	mov	r3, r5
 8002772:	f04f 0000 	mov.w	r0, #0
 8002776:	f04f 0100 	mov.w	r1, #0
 800277a:	0159      	lsls	r1, r3, #5
 800277c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002780:	0150      	lsls	r0, r2, #5
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4621      	mov	r1, r4
 8002788:	1a51      	subs	r1, r2, r1
 800278a:	6439      	str	r1, [r7, #64]	@ 0x40
 800278c:	4629      	mov	r1, r5
 800278e:	eb63 0301 	sbc.w	r3, r3, r1
 8002792:	647b      	str	r3, [r7, #68]	@ 0x44
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80027a0:	4649      	mov	r1, r9
 80027a2:	018b      	lsls	r3, r1, #6
 80027a4:	4641      	mov	r1, r8
 80027a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027aa:	4641      	mov	r1, r8
 80027ac:	018a      	lsls	r2, r1, #6
 80027ae:	4641      	mov	r1, r8
 80027b0:	1a51      	subs	r1, r2, r1
 80027b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027b4:	4649      	mov	r1, r9
 80027b6:	eb63 0301 	sbc.w	r3, r3, r1
 80027ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80027c8:	4649      	mov	r1, r9
 80027ca:	00cb      	lsls	r3, r1, #3
 80027cc:	4641      	mov	r1, r8
 80027ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027d2:	4641      	mov	r1, r8
 80027d4:	00ca      	lsls	r2, r1, #3
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	4603      	mov	r3, r0
 80027dc:	4622      	mov	r2, r4
 80027de:	189b      	adds	r3, r3, r2
 80027e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80027e2:	462b      	mov	r3, r5
 80027e4:	460a      	mov	r2, r1
 80027e6:	eb42 0303 	adc.w	r3, r2, r3
 80027ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80027f8:	4629      	mov	r1, r5
 80027fa:	024b      	lsls	r3, r1, #9
 80027fc:	4621      	mov	r1, r4
 80027fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002802:	4621      	mov	r1, r4
 8002804:	024a      	lsls	r2, r1, #9
 8002806:	4610      	mov	r0, r2
 8002808:	4619      	mov	r1, r3
 800280a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800280e:	2200      	movs	r2, #0
 8002810:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002814:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002818:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800281c:	f7fd fd50 	bl	80002c0 <__aeabi_uldivmod>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4613      	mov	r3, r2
 8002826:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800282a:	e067      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282c:	4b75      	ldr	r3, [pc, #468]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	099b      	lsrs	r3, r3, #6
 8002832:	2200      	movs	r2, #0
 8002834:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002838:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800283c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002844:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002846:	2300      	movs	r3, #0
 8002848:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800284a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800284e:	4622      	mov	r2, r4
 8002850:	462b      	mov	r3, r5
 8002852:	f04f 0000 	mov.w	r0, #0
 8002856:	f04f 0100 	mov.w	r1, #0
 800285a:	0159      	lsls	r1, r3, #5
 800285c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002860:	0150      	lsls	r0, r2, #5
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4621      	mov	r1, r4
 8002868:	1a51      	subs	r1, r2, r1
 800286a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800286c:	4629      	mov	r1, r5
 800286e:	eb63 0301 	sbc.w	r3, r3, r1
 8002872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002880:	4649      	mov	r1, r9
 8002882:	018b      	lsls	r3, r1, #6
 8002884:	4641      	mov	r1, r8
 8002886:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800288a:	4641      	mov	r1, r8
 800288c:	018a      	lsls	r2, r1, #6
 800288e:	4641      	mov	r1, r8
 8002890:	ebb2 0a01 	subs.w	sl, r2, r1
 8002894:	4649      	mov	r1, r9
 8002896:	eb63 0b01 	sbc.w	fp, r3, r1
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028ae:	4692      	mov	sl, r2
 80028b0:	469b      	mov	fp, r3
 80028b2:	4623      	mov	r3, r4
 80028b4:	eb1a 0303 	adds.w	r3, sl, r3
 80028b8:	623b      	str	r3, [r7, #32]
 80028ba:	462b      	mov	r3, r5
 80028bc:	eb4b 0303 	adc.w	r3, fp, r3
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80028ce:	4629      	mov	r1, r5
 80028d0:	028b      	lsls	r3, r1, #10
 80028d2:	4621      	mov	r1, r4
 80028d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028d8:	4621      	mov	r1, r4
 80028da:	028a      	lsls	r2, r1, #10
 80028dc:	4610      	mov	r0, r2
 80028de:	4619      	mov	r1, r3
 80028e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028e4:	2200      	movs	r2, #0
 80028e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80028e8:	677a      	str	r2, [r7, #116]	@ 0x74
 80028ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80028ee:	f7fd fce7 	bl	80002c0 <__aeabi_uldivmod>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4613      	mov	r3, r2
 80028f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028fc:	4b41      	ldr	r3, [pc, #260]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	3301      	adds	r3, #1
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800290e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002912:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800291e:	e0eb      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002920:	4b38      	ldr	r3, [pc, #224]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002928:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800292c:	4b35      	ldr	r3, [pc, #212]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d06b      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002938:	4b32      	ldr	r3, [pc, #200]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	099b      	lsrs	r3, r3, #6
 800293e:	2200      	movs	r2, #0
 8002940:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002942:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002944:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294a:	663b      	str	r3, [r7, #96]	@ 0x60
 800294c:	2300      	movs	r3, #0
 800294e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002950:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002954:	4622      	mov	r2, r4
 8002956:	462b      	mov	r3, r5
 8002958:	f04f 0000 	mov.w	r0, #0
 800295c:	f04f 0100 	mov.w	r1, #0
 8002960:	0159      	lsls	r1, r3, #5
 8002962:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002966:	0150      	lsls	r0, r2, #5
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4621      	mov	r1, r4
 800296e:	1a51      	subs	r1, r2, r1
 8002970:	61b9      	str	r1, [r7, #24]
 8002972:	4629      	mov	r1, r5
 8002974:	eb63 0301 	sbc.w	r3, r3, r1
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002986:	4659      	mov	r1, fp
 8002988:	018b      	lsls	r3, r1, #6
 800298a:	4651      	mov	r1, sl
 800298c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002990:	4651      	mov	r1, sl
 8002992:	018a      	lsls	r2, r1, #6
 8002994:	4651      	mov	r1, sl
 8002996:	ebb2 0801 	subs.w	r8, r2, r1
 800299a:	4659      	mov	r1, fp
 800299c:	eb63 0901 	sbc.w	r9, r3, r1
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029b4:	4690      	mov	r8, r2
 80029b6:	4699      	mov	r9, r3
 80029b8:	4623      	mov	r3, r4
 80029ba:	eb18 0303 	adds.w	r3, r8, r3
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	462b      	mov	r3, r5
 80029c2:	eb49 0303 	adc.w	r3, r9, r3
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80029d4:	4629      	mov	r1, r5
 80029d6:	024b      	lsls	r3, r1, #9
 80029d8:	4621      	mov	r1, r4
 80029da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029de:	4621      	mov	r1, r4
 80029e0:	024a      	lsls	r2, r1, #9
 80029e2:	4610      	mov	r0, r2
 80029e4:	4619      	mov	r1, r3
 80029e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029ea:	2200      	movs	r2, #0
 80029ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029ee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80029f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029f4:	f7fd fc64 	bl	80002c0 <__aeabi_uldivmod>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4613      	mov	r3, r2
 80029fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a02:	e065      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x420>
 8002a04:	40023800 	.word	0x40023800
 8002a08:	00f42400 	.word	0x00f42400
 8002a0c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a10:	4b3d      	ldr	r3, [pc, #244]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	099b      	lsrs	r3, r3, #6
 8002a16:	2200      	movs	r2, #0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a20:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a22:	2300      	movs	r3, #0
 8002a24:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a26:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002a2a:	4642      	mov	r2, r8
 8002a2c:	464b      	mov	r3, r9
 8002a2e:	f04f 0000 	mov.w	r0, #0
 8002a32:	f04f 0100 	mov.w	r1, #0
 8002a36:	0159      	lsls	r1, r3, #5
 8002a38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a3c:	0150      	lsls	r0, r2, #5
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4641      	mov	r1, r8
 8002a44:	1a51      	subs	r1, r2, r1
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	4649      	mov	r1, r9
 8002a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a5c:	4659      	mov	r1, fp
 8002a5e:	018b      	lsls	r3, r1, #6
 8002a60:	4651      	mov	r1, sl
 8002a62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a66:	4651      	mov	r1, sl
 8002a68:	018a      	lsls	r2, r1, #6
 8002a6a:	4651      	mov	r1, sl
 8002a6c:	1a54      	subs	r4, r2, r1
 8002a6e:	4659      	mov	r1, fp
 8002a70:	eb63 0501 	sbc.w	r5, r3, r1
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	00eb      	lsls	r3, r5, #3
 8002a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a82:	00e2      	lsls	r2, r4, #3
 8002a84:	4614      	mov	r4, r2
 8002a86:	461d      	mov	r5, r3
 8002a88:	4643      	mov	r3, r8
 8002a8a:	18e3      	adds	r3, r4, r3
 8002a8c:	603b      	str	r3, [r7, #0]
 8002a8e:	464b      	mov	r3, r9
 8002a90:	eb45 0303 	adc.w	r3, r5, r3
 8002a94:	607b      	str	r3, [r7, #4]
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aa2:	4629      	mov	r1, r5
 8002aa4:	028b      	lsls	r3, r1, #10
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002aac:	4621      	mov	r1, r4
 8002aae:	028a      	lsls	r2, r1, #10
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ab8:	2200      	movs	r2, #0
 8002aba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002abc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002abe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ac2:	f7fd fbfd 	bl	80002c0 <__aeabi_uldivmod>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4613      	mov	r3, r2
 8002acc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	0f1b      	lsrs	r3, r3, #28
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002ade:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ae2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002aee:	e003      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002af0:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002af2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002af6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	37b8      	adds	r7, #184	@ 0xb8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	00f42400 	.word	0x00f42400

08002b10 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e28d      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 8083 	beq.w	8002c36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b30:	4b94      	ldr	r3, [pc, #592]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d019      	beq.n	8002b70 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b3c:	4b91      	ldr	r3, [pc, #580]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d106      	bne.n	8002b56 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b48:	4b8e      	ldr	r3, [pc, #568]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b54:	d00c      	beq.n	8002b70 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b56:	4b8b      	ldr	r3, [pc, #556]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b5e:	2b0c      	cmp	r3, #12
 8002b60:	d112      	bne.n	8002b88 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b62:	4b88      	ldr	r3, [pc, #544]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b6e:	d10b      	bne.n	8002b88 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b70:	4b84      	ldr	r3, [pc, #528]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d05b      	beq.n	8002c34 <HAL_RCC_OscConfig+0x124>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d157      	bne.n	8002c34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e25a      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b90:	d106      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x90>
 8002b92:	4b7c      	ldr	r3, [pc, #496]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a7b      	ldr	r2, [pc, #492]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	e01d      	b.n	8002bdc <HAL_RCC_OscConfig+0xcc>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0xb4>
 8002baa:	4b76      	ldr	r3, [pc, #472]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a75      	ldr	r2, [pc, #468]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	4b73      	ldr	r3, [pc, #460]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a72      	ldr	r2, [pc, #456]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCC_OscConfig+0xcc>
 8002bc4:	4b6f      	ldr	r3, [pc, #444]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a6e      	ldr	r2, [pc, #440]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	4b6c      	ldr	r3, [pc, #432]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a6b      	ldr	r2, [pc, #428]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d013      	beq.n	8002c0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7fe fc88 	bl	80014f8 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bec:	f7fe fc84 	bl	80014f8 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	@ 0x64
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e21f      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfe:	4b61      	ldr	r3, [pc, #388]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0xdc>
 8002c0a:	e014      	b.n	8002c36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fc74 	bl	80014f8 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c14:	f7fe fc70 	bl	80014f8 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	@ 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e20b      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c26:	4b57      	ldr	r3, [pc, #348]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x104>
 8002c32:	e000      	b.n	8002c36 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d06f      	beq.n	8002d22 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c42:	4b50      	ldr	r3, [pc, #320]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d017      	beq.n	8002c7e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c4e:	4b4d      	ldr	r3, [pc, #308]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d105      	bne.n	8002c66 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00b      	beq.n	8002c7e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c66:	4b47      	ldr	r3, [pc, #284]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c6e:	2b0c      	cmp	r3, #12
 8002c70:	d11c      	bne.n	8002cac <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c72:	4b44      	ldr	r3, [pc, #272]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d116      	bne.n	8002cac <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7e:	4b41      	ldr	r3, [pc, #260]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <HAL_RCC_OscConfig+0x186>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d001      	beq.n	8002c96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e1d3      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c96:	4b3b      	ldr	r3, [pc, #236]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4937      	ldr	r1, [pc, #220]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002caa:	e03a      	b.n	8002d22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d020      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb4:	4b34      	ldr	r3, [pc, #208]	@ (8002d88 <HAL_RCC_OscConfig+0x278>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cba:	f7fe fc1d 	bl	80014f8 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc2:	f7fe fc19 	bl	80014f8 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e1b4      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce0:	4b28      	ldr	r3, [pc, #160]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4925      	ldr	r1, [pc, #148]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	600b      	str	r3, [r1, #0]
 8002cf4:	e015      	b.n	8002d22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf6:	4b24      	ldr	r3, [pc, #144]	@ (8002d88 <HAL_RCC_OscConfig+0x278>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe fbfc 	bl	80014f8 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d04:	f7fe fbf8 	bl	80014f8 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e193      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d16:	4b1b      	ldr	r3, [pc, #108]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d036      	beq.n	8002d9c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d016      	beq.n	8002d64 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d36:	4b15      	ldr	r3, [pc, #84]	@ (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3c:	f7fe fbdc 	bl	80014f8 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d44:	f7fe fbd8 	bl	80014f8 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e173      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d56:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0x234>
 8002d62:	e01b      	b.n	8002d9c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d64:	4b09      	ldr	r3, [pc, #36]	@ (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6a:	f7fe fbc5 	bl	80014f8 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d70:	e00e      	b.n	8002d90 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d72:	f7fe fbc1 	bl	80014f8 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d907      	bls.n	8002d90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e15c      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
 8002d84:	40023800 	.word	0x40023800
 8002d88:	42470000 	.word	0x42470000
 8002d8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d90:	4b8a      	ldr	r3, [pc, #552]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1ea      	bne.n	8002d72 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 8097 	beq.w	8002ed8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002daa:	2300      	movs	r3, #0
 8002dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dae:	4b83      	ldr	r3, [pc, #524]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10f      	bne.n	8002dda <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	4b7f      	ldr	r3, [pc, #508]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	4a7e      	ldr	r2, [pc, #504]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dca:	4b7c      	ldr	r3, [pc, #496]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dda:	4b79      	ldr	r3, [pc, #484]	@ (8002fc0 <HAL_RCC_OscConfig+0x4b0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d118      	bne.n	8002e18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de6:	4b76      	ldr	r3, [pc, #472]	@ (8002fc0 <HAL_RCC_OscConfig+0x4b0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a75      	ldr	r2, [pc, #468]	@ (8002fc0 <HAL_RCC_OscConfig+0x4b0>)
 8002dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df2:	f7fe fb81 	bl	80014f8 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfa:	f7fe fb7d 	bl	80014f8 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e118      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0c:	4b6c      	ldr	r3, [pc, #432]	@ (8002fc0 <HAL_RCC_OscConfig+0x4b0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d106      	bne.n	8002e2e <HAL_RCC_OscConfig+0x31e>
 8002e20:	4b66      	ldr	r3, [pc, #408]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e24:	4a65      	ldr	r2, [pc, #404]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e2c:	e01c      	b.n	8002e68 <HAL_RCC_OscConfig+0x358>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b05      	cmp	r3, #5
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x340>
 8002e36:	4b61      	ldr	r3, [pc, #388]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3a:	4a60      	ldr	r2, [pc, #384]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e3c:	f043 0304 	orr.w	r3, r3, #4
 8002e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e42:	4b5e      	ldr	r3, [pc, #376]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e46:	4a5d      	ldr	r2, [pc, #372]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCC_OscConfig+0x358>
 8002e50:	4b5a      	ldr	r3, [pc, #360]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e54:	4a59      	ldr	r2, [pc, #356]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e56:	f023 0301 	bic.w	r3, r3, #1
 8002e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e5c:	4b57      	ldr	r3, [pc, #348]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e60:	4a56      	ldr	r2, [pc, #344]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e62:	f023 0304 	bic.w	r3, r3, #4
 8002e66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d015      	beq.n	8002e9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e70:	f7fe fb42 	bl	80014f8 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e76:	e00a      	b.n	8002e8e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e78:	f7fe fb3e 	bl	80014f8 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e0d7      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8e:	4b4b      	ldr	r3, [pc, #300]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0ee      	beq.n	8002e78 <HAL_RCC_OscConfig+0x368>
 8002e9a:	e014      	b.n	8002ec6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9c:	f7fe fb2c 	bl	80014f8 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea2:	e00a      	b.n	8002eba <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea4:	f7fe fb28 	bl	80014f8 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e0c1      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eba:	4b40      	ldr	r3, [pc, #256]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1ee      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d105      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed0:	4a3a      	ldr	r2, [pc, #232]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002ed2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ed6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80ad 	beq.w	800303c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ee2:	4b36      	ldr	r3, [pc, #216]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d060      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d145      	bne.n	8002f82 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef6:	4b33      	ldr	r3, [pc, #204]	@ (8002fc4 <HAL_RCC_OscConfig+0x4b4>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7fe fafc 	bl	80014f8 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f04:	f7fe faf8 	bl	80014f8 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e093      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f16:	4b29      	ldr	r3, [pc, #164]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69da      	ldr	r2, [r3, #28]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	019b      	lsls	r3, r3, #6
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f38:	085b      	lsrs	r3, r3, #1
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	041b      	lsls	r3, r3, #16
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f44:	061b      	lsls	r3, r3, #24
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4c:	071b      	lsls	r3, r3, #28
 8002f4e:	491b      	ldr	r1, [pc, #108]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f54:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc4 <HAL_RCC_OscConfig+0x4b4>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5a:	f7fe facd 	bl	80014f8 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f62:	f7fe fac9 	bl	80014f8 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e064      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f74:	4b11      	ldr	r3, [pc, #68]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x452>
 8002f80:	e05c      	b.n	800303c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f82:	4b10      	ldr	r3, [pc, #64]	@ (8002fc4 <HAL_RCC_OscConfig+0x4b4>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe fab6 	bl	80014f8 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f90:	f7fe fab2 	bl	80014f8 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e04d      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa2:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x480>
 8002fae:	e045      	b.n	800303c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d107      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e040      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40007000 	.word	0x40007000
 8002fc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8003048 <HAL_RCC_OscConfig+0x538>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d030      	beq.n	8003038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d129      	bne.n	8003038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d122      	bne.n	8003038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ffe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003000:	4293      	cmp	r3, r2
 8003002:	d119      	bne.n	8003038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300e:	085b      	lsrs	r3, r3, #1
 8003010:	3b01      	subs	r3, #1
 8003012:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003014:	429a      	cmp	r2, r3
 8003016:	d10f      	bne.n	8003038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003022:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d107      	bne.n	8003038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003032:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800

0800304c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e041      	b.n	80030e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f839 	bl	80030ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3304      	adds	r3, #4
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f000 f9c0 	bl	8003410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b01      	cmp	r3, #1
 8003112:	d001      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e04e      	b.n	80031b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a23      	ldr	r2, [pc, #140]	@ (80031c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d022      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x80>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003142:	d01d      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x80>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1f      	ldr	r2, [pc, #124]	@ (80031c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d018      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x80>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1e      	ldr	r2, [pc, #120]	@ (80031cc <HAL_TIM_Base_Start_IT+0xcc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d013      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x80>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1c      	ldr	r2, [pc, #112]	@ (80031d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00e      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x80>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a1b      	ldr	r2, [pc, #108]	@ (80031d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d009      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x80>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a19      	ldr	r2, [pc, #100]	@ (80031d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d004      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x80>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a18      	ldr	r2, [pc, #96]	@ (80031dc <HAL_TIM_Base_Start_IT+0xdc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d111      	bne.n	80031a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b06      	cmp	r3, #6
 8003190:	d010      	beq.n	80031b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f042 0201 	orr.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a2:	e007      	b.n	80031b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40010000 	.word	0x40010000
 80031c8:	40000400 	.word	0x40000400
 80031cc:	40000800 	.word	0x40000800
 80031d0:	40000c00 	.word	0x40000c00
 80031d4:	40010400 	.word	0x40010400
 80031d8:	40014000 	.word	0x40014000
 80031dc:	40001800 	.word	0x40001800

080031e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d020      	beq.n	8003244 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d01b      	beq.n	8003244 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0202 	mvn.w	r2, #2
 8003214:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f8d2 	bl	80033d4 <HAL_TIM_IC_CaptureCallback>
 8003230:	e005      	b.n	800323e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f8c4 	bl	80033c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f8d5 	bl	80033e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b00      	cmp	r3, #0
 800324c:	d020      	beq.n	8003290 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01b      	beq.n	8003290 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0204 	mvn.w	r2, #4
 8003260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2202      	movs	r2, #2
 8003266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f8ac 	bl	80033d4 <HAL_TIM_IC_CaptureCallback>
 800327c:	e005      	b.n	800328a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f89e 	bl	80033c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f8af 	bl	80033e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d020      	beq.n	80032dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01b      	beq.n	80032dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0208 	mvn.w	r2, #8
 80032ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2204      	movs	r2, #4
 80032b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f886 	bl	80033d4 <HAL_TIM_IC_CaptureCallback>
 80032c8:	e005      	b.n	80032d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f878 	bl	80033c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f889 	bl	80033e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d020      	beq.n	8003328 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01b      	beq.n	8003328 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0210 	mvn.w	r2, #16
 80032f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2208      	movs	r2, #8
 80032fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f860 	bl	80033d4 <HAL_TIM_IC_CaptureCallback>
 8003314:	e005      	b.n	8003322 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f852 	bl	80033c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f863 	bl	80033e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00c      	beq.n	800334c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d007      	beq.n	800334c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0201 	mvn.w	r2, #1
 8003344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fd fcec 	bl	8000d24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00c      	beq.n	8003370 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f906 	bl	800357c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00c      	beq.n	8003394 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d007      	beq.n	8003394 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800338c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f834 	bl	80033fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00c      	beq.n	80033b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d007      	beq.n	80033b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0220 	mvn.w	r2, #32
 80033b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f8d8 	bl	8003568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033b8:	bf00      	nop
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a46      	ldr	r2, [pc, #280]	@ (800353c <TIM_Base_SetConfig+0x12c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d013      	beq.n	8003450 <TIM_Base_SetConfig+0x40>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800342e:	d00f      	beq.n	8003450 <TIM_Base_SetConfig+0x40>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a43      	ldr	r2, [pc, #268]	@ (8003540 <TIM_Base_SetConfig+0x130>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00b      	beq.n	8003450 <TIM_Base_SetConfig+0x40>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a42      	ldr	r2, [pc, #264]	@ (8003544 <TIM_Base_SetConfig+0x134>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d007      	beq.n	8003450 <TIM_Base_SetConfig+0x40>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a41      	ldr	r2, [pc, #260]	@ (8003548 <TIM_Base_SetConfig+0x138>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d003      	beq.n	8003450 <TIM_Base_SetConfig+0x40>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a40      	ldr	r2, [pc, #256]	@ (800354c <TIM_Base_SetConfig+0x13c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d108      	bne.n	8003462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a35      	ldr	r2, [pc, #212]	@ (800353c <TIM_Base_SetConfig+0x12c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d02b      	beq.n	80034c2 <TIM_Base_SetConfig+0xb2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003470:	d027      	beq.n	80034c2 <TIM_Base_SetConfig+0xb2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a32      	ldr	r2, [pc, #200]	@ (8003540 <TIM_Base_SetConfig+0x130>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d023      	beq.n	80034c2 <TIM_Base_SetConfig+0xb2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a31      	ldr	r2, [pc, #196]	@ (8003544 <TIM_Base_SetConfig+0x134>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d01f      	beq.n	80034c2 <TIM_Base_SetConfig+0xb2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a30      	ldr	r2, [pc, #192]	@ (8003548 <TIM_Base_SetConfig+0x138>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d01b      	beq.n	80034c2 <TIM_Base_SetConfig+0xb2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a2f      	ldr	r2, [pc, #188]	@ (800354c <TIM_Base_SetConfig+0x13c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d017      	beq.n	80034c2 <TIM_Base_SetConfig+0xb2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a2e      	ldr	r2, [pc, #184]	@ (8003550 <TIM_Base_SetConfig+0x140>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d013      	beq.n	80034c2 <TIM_Base_SetConfig+0xb2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a2d      	ldr	r2, [pc, #180]	@ (8003554 <TIM_Base_SetConfig+0x144>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00f      	beq.n	80034c2 <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003558 <TIM_Base_SetConfig+0x148>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00b      	beq.n	80034c2 <TIM_Base_SetConfig+0xb2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a2b      	ldr	r2, [pc, #172]	@ (800355c <TIM_Base_SetConfig+0x14c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d007      	beq.n	80034c2 <TIM_Base_SetConfig+0xb2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003560 <TIM_Base_SetConfig+0x150>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d003      	beq.n	80034c2 <TIM_Base_SetConfig+0xb2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a29      	ldr	r2, [pc, #164]	@ (8003564 <TIM_Base_SetConfig+0x154>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d108      	bne.n	80034d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a10      	ldr	r2, [pc, #64]	@ (800353c <TIM_Base_SetConfig+0x12c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <TIM_Base_SetConfig+0xf8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a12      	ldr	r2, [pc, #72]	@ (800354c <TIM_Base_SetConfig+0x13c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d103      	bne.n	8003510 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b01      	cmp	r3, #1
 8003520:	d105      	bne.n	800352e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f023 0201 	bic.w	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	611a      	str	r2, [r3, #16]
  }
}
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40010000 	.word	0x40010000
 8003540:	40000400 	.word	0x40000400
 8003544:	40000800 	.word	0x40000800
 8003548:	40000c00 	.word	0x40000c00
 800354c:	40010400 	.word	0x40010400
 8003550:	40014000 	.word	0x40014000
 8003554:	40014400 	.word	0x40014400
 8003558:	40014800 	.word	0x40014800
 800355c:	40001800 	.word	0x40001800
 8003560:	40001c00 	.word	0x40001c00
 8003564:	40002000 	.word	0x40002000

08003568 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e042      	b.n	8003628 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fd fe0c 	bl	80011d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2224      	movs	r2, #36	@ 0x24
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f973 	bl	80038c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695a      	ldr	r2, [r3, #20]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003608:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08a      	sub	sp, #40	@ 0x28
 8003634:	af02      	add	r7, sp, #8
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	4613      	mov	r3, r2
 800363e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b20      	cmp	r3, #32
 800364e:	d175      	bne.n	800373c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_UART_Transmit+0x2c>
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e06e      	b.n	800373e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2221      	movs	r2, #33	@ 0x21
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800366e:	f7fd ff43 	bl	80014f8 <HAL_GetTick>
 8003672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	88fa      	ldrh	r2, [r7, #6]
 8003678:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	88fa      	ldrh	r2, [r7, #6]
 800367e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003688:	d108      	bne.n	800369c <HAL_UART_Transmit+0x6c>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d104      	bne.n	800369c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	e003      	b.n	80036a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036a4:	e02e      	b.n	8003704 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2200      	movs	r2, #0
 80036ae:	2180      	movs	r1, #128	@ 0x80
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 f848 	bl	8003746 <UART_WaitOnFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e03a      	b.n	800373e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10b      	bne.n	80036e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	3302      	adds	r3, #2
 80036e2:	61bb      	str	r3, [r7, #24]
 80036e4:	e007      	b.n	80036f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	781a      	ldrb	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	3301      	adds	r3, #1
 80036f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1cb      	bne.n	80036a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2200      	movs	r2, #0
 8003716:	2140      	movs	r1, #64	@ 0x40
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f814 	bl	8003746 <UART_WaitOnFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e006      	b.n	800373e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	e000      	b.n	800373e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800373c:	2302      	movs	r3, #2
  }
}
 800373e:	4618      	mov	r0, r3
 8003740:	3720      	adds	r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003756:	e03b      	b.n	80037d0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375e:	d037      	beq.n	80037d0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003760:	f7fd feca 	bl	80014f8 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	6a3a      	ldr	r2, [r7, #32]
 800376c:	429a      	cmp	r2, r3
 800376e:	d302      	bcc.n	8003776 <UART_WaitOnFlagUntilTimeout+0x30>
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e03a      	b.n	80037f0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d023      	beq.n	80037d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b80      	cmp	r3, #128	@ 0x80
 800378c:	d020      	beq.n	80037d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b40      	cmp	r3, #64	@ 0x40
 8003792:	d01d      	beq.n	80037d0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d116      	bne.n	80037d0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f81d 	bl	80037f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2208      	movs	r2, #8
 80037c2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e00f      	b.n	80037f0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	4013      	ands	r3, r2
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	429a      	cmp	r2, r3
 80037de:	bf0c      	ite	eq
 80037e0:	2301      	moveq	r3, #1
 80037e2:	2300      	movne	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	461a      	mov	r2, r3
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d0b4      	beq.n	8003758 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b095      	sub	sp, #84	@ 0x54
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	330c      	adds	r3, #12
 8003806:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800380a:	e853 3f00 	ldrex	r3, [r3]
 800380e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003812:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	330c      	adds	r3, #12
 800381e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003820:	643a      	str	r2, [r7, #64]	@ 0x40
 8003822:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003826:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800382e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e5      	bne.n	8003800 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	3314      	adds	r3, #20
 800383a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	e853 3f00 	ldrex	r3, [r3]
 8003842:	61fb      	str	r3, [r7, #28]
   return(result);
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f023 0301 	bic.w	r3, r3, #1
 800384a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3314      	adds	r3, #20
 8003852:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003854:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003856:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003858:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800385a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800385c:	e841 2300 	strex	r3, r2, [r1]
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e5      	bne.n	8003834 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386c:	2b01      	cmp	r3, #1
 800386e:	d119      	bne.n	80038a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	330c      	adds	r3, #12
 8003876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	e853 3f00 	ldrex	r3, [r3]
 800387e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f023 0310 	bic.w	r3, r3, #16
 8003886:	647b      	str	r3, [r7, #68]	@ 0x44
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	330c      	adds	r3, #12
 800388e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003890:	61ba      	str	r2, [r7, #24]
 8003892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003894:	6979      	ldr	r1, [r7, #20]
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	e841 2300 	strex	r3, r2, [r1]
 800389c:	613b      	str	r3, [r7, #16]
   return(result);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e5      	bne.n	8003870 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038b2:	bf00      	nop
 80038b4:	3754      	adds	r7, #84	@ 0x54
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c4:	b0c0      	sub	sp, #256	@ 0x100
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038dc:	68d9      	ldr	r1, [r3, #12]
 80038de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	ea40 0301 	orr.w	r3, r0, r1
 80038e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	431a      	orrs	r2, r3
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003918:	f021 010c 	bic.w	r1, r1, #12
 800391c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003926:	430b      	orrs	r3, r1
 8003928:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800392a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800393a:	6999      	ldr	r1, [r3, #24]
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	ea40 0301 	orr.w	r3, r0, r1
 8003946:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	4b8f      	ldr	r3, [pc, #572]	@ (8003b8c <UART_SetConfig+0x2cc>)
 8003950:	429a      	cmp	r2, r3
 8003952:	d005      	beq.n	8003960 <UART_SetConfig+0xa0>
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4b8d      	ldr	r3, [pc, #564]	@ (8003b90 <UART_SetConfig+0x2d0>)
 800395c:	429a      	cmp	r2, r3
 800395e:	d104      	bne.n	800396a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003960:	f7fe fe60 	bl	8002624 <HAL_RCC_GetPCLK2Freq>
 8003964:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003968:	e003      	b.n	8003972 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800396a:	f7fe fe47 	bl	80025fc <HAL_RCC_GetPCLK1Freq>
 800396e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800397c:	f040 810c 	bne.w	8003b98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003984:	2200      	movs	r2, #0
 8003986:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800398a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800398e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003992:	4622      	mov	r2, r4
 8003994:	462b      	mov	r3, r5
 8003996:	1891      	adds	r1, r2, r2
 8003998:	65b9      	str	r1, [r7, #88]	@ 0x58
 800399a:	415b      	adcs	r3, r3
 800399c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800399e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039a2:	4621      	mov	r1, r4
 80039a4:	eb12 0801 	adds.w	r8, r2, r1
 80039a8:	4629      	mov	r1, r5
 80039aa:	eb43 0901 	adc.w	r9, r3, r1
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039c2:	4690      	mov	r8, r2
 80039c4:	4699      	mov	r9, r3
 80039c6:	4623      	mov	r3, r4
 80039c8:	eb18 0303 	adds.w	r3, r8, r3
 80039cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80039d0:	462b      	mov	r3, r5
 80039d2:	eb49 0303 	adc.w	r3, r9, r3
 80039d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80039da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80039e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80039ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80039ee:	460b      	mov	r3, r1
 80039f0:	18db      	adds	r3, r3, r3
 80039f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80039f4:	4613      	mov	r3, r2
 80039f6:	eb42 0303 	adc.w	r3, r2, r3
 80039fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80039fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a04:	f7fc fc5c 	bl	80002c0 <__aeabi_uldivmod>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4b61      	ldr	r3, [pc, #388]	@ (8003b94 <UART_SetConfig+0x2d4>)
 8003a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	011c      	lsls	r4, r3, #4
 8003a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a28:	4642      	mov	r2, r8
 8003a2a:	464b      	mov	r3, r9
 8003a2c:	1891      	adds	r1, r2, r2
 8003a2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a30:	415b      	adcs	r3, r3
 8003a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a38:	4641      	mov	r1, r8
 8003a3a:	eb12 0a01 	adds.w	sl, r2, r1
 8003a3e:	4649      	mov	r1, r9
 8003a40:	eb43 0b01 	adc.w	fp, r3, r1
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a58:	4692      	mov	sl, r2
 8003a5a:	469b      	mov	fp, r3
 8003a5c:	4643      	mov	r3, r8
 8003a5e:	eb1a 0303 	adds.w	r3, sl, r3
 8003a62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a66:	464b      	mov	r3, r9
 8003a68:	eb4b 0303 	adc.w	r3, fp, r3
 8003a6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003a80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a84:	460b      	mov	r3, r1
 8003a86:	18db      	adds	r3, r3, r3
 8003a88:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	eb42 0303 	adc.w	r3, r2, r3
 8003a90:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003a96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003a9a:	f7fc fc11 	bl	80002c0 <__aeabi_uldivmod>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8003b94 <UART_SetConfig+0x2d4>)
 8003aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	2264      	movs	r2, #100	@ 0x64
 8003aae:	fb02 f303 	mul.w	r3, r2, r3
 8003ab2:	1acb      	subs	r3, r1, r3
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003aba:	4b36      	ldr	r3, [pc, #216]	@ (8003b94 <UART_SetConfig+0x2d4>)
 8003abc:	fba3 2302 	umull	r2, r3, r3, r2
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ac8:	441c      	add	r4, r3
 8003aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ad4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ad8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003adc:	4642      	mov	r2, r8
 8003ade:	464b      	mov	r3, r9
 8003ae0:	1891      	adds	r1, r2, r2
 8003ae2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ae4:	415b      	adcs	r3, r3
 8003ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ae8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003aec:	4641      	mov	r1, r8
 8003aee:	1851      	adds	r1, r2, r1
 8003af0:	6339      	str	r1, [r7, #48]	@ 0x30
 8003af2:	4649      	mov	r1, r9
 8003af4:	414b      	adcs	r3, r1
 8003af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b04:	4659      	mov	r1, fp
 8003b06:	00cb      	lsls	r3, r1, #3
 8003b08:	4651      	mov	r1, sl
 8003b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b0e:	4651      	mov	r1, sl
 8003b10:	00ca      	lsls	r2, r1, #3
 8003b12:	4610      	mov	r0, r2
 8003b14:	4619      	mov	r1, r3
 8003b16:	4603      	mov	r3, r0
 8003b18:	4642      	mov	r2, r8
 8003b1a:	189b      	adds	r3, r3, r2
 8003b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b20:	464b      	mov	r3, r9
 8003b22:	460a      	mov	r2, r1
 8003b24:	eb42 0303 	adc.w	r3, r2, r3
 8003b28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b40:	460b      	mov	r3, r1
 8003b42:	18db      	adds	r3, r3, r3
 8003b44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b46:	4613      	mov	r3, r2
 8003b48:	eb42 0303 	adc.w	r3, r2, r3
 8003b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b56:	f7fc fbb3 	bl	80002c0 <__aeabi_uldivmod>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b94 <UART_SetConfig+0x2d4>)
 8003b60:	fba3 1302 	umull	r1, r3, r3, r2
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	2164      	movs	r1, #100	@ 0x64
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	3332      	adds	r3, #50	@ 0x32
 8003b72:	4a08      	ldr	r2, [pc, #32]	@ (8003b94 <UART_SetConfig+0x2d4>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	f003 0207 	and.w	r2, r3, #7
 8003b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4422      	add	r2, r4
 8003b86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b88:	e106      	b.n	8003d98 <UART_SetConfig+0x4d8>
 8003b8a:	bf00      	nop
 8003b8c:	40011000 	.word	0x40011000
 8003b90:	40011400 	.word	0x40011400
 8003b94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ba2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ba6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003baa:	4642      	mov	r2, r8
 8003bac:	464b      	mov	r3, r9
 8003bae:	1891      	adds	r1, r2, r2
 8003bb0:	6239      	str	r1, [r7, #32]
 8003bb2:	415b      	adcs	r3, r3
 8003bb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bba:	4641      	mov	r1, r8
 8003bbc:	1854      	adds	r4, r2, r1
 8003bbe:	4649      	mov	r1, r9
 8003bc0:	eb43 0501 	adc.w	r5, r3, r1
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	00eb      	lsls	r3, r5, #3
 8003bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bd2:	00e2      	lsls	r2, r4, #3
 8003bd4:	4614      	mov	r4, r2
 8003bd6:	461d      	mov	r5, r3
 8003bd8:	4643      	mov	r3, r8
 8003bda:	18e3      	adds	r3, r4, r3
 8003bdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003be0:	464b      	mov	r3, r9
 8003be2:	eb45 0303 	adc.w	r3, r5, r3
 8003be6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003bf6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c06:	4629      	mov	r1, r5
 8003c08:	008b      	lsls	r3, r1, #2
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c10:	4621      	mov	r1, r4
 8003c12:	008a      	lsls	r2, r1, #2
 8003c14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c18:	f7fc fb52 	bl	80002c0 <__aeabi_uldivmod>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4b60      	ldr	r3, [pc, #384]	@ (8003da4 <UART_SetConfig+0x4e4>)
 8003c22:	fba3 2302 	umull	r2, r3, r3, r2
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	011c      	lsls	r4, r3, #4
 8003c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c3c:	4642      	mov	r2, r8
 8003c3e:	464b      	mov	r3, r9
 8003c40:	1891      	adds	r1, r2, r2
 8003c42:	61b9      	str	r1, [r7, #24]
 8003c44:	415b      	adcs	r3, r3
 8003c46:	61fb      	str	r3, [r7, #28]
 8003c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c4c:	4641      	mov	r1, r8
 8003c4e:	1851      	adds	r1, r2, r1
 8003c50:	6139      	str	r1, [r7, #16]
 8003c52:	4649      	mov	r1, r9
 8003c54:	414b      	adcs	r3, r1
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c64:	4659      	mov	r1, fp
 8003c66:	00cb      	lsls	r3, r1, #3
 8003c68:	4651      	mov	r1, sl
 8003c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c6e:	4651      	mov	r1, sl
 8003c70:	00ca      	lsls	r2, r1, #3
 8003c72:	4610      	mov	r0, r2
 8003c74:	4619      	mov	r1, r3
 8003c76:	4603      	mov	r3, r0
 8003c78:	4642      	mov	r2, r8
 8003c7a:	189b      	adds	r3, r3, r2
 8003c7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c80:	464b      	mov	r3, r9
 8003c82:	460a      	mov	r2, r1
 8003c84:	eb42 0303 	adc.w	r3, r2, r3
 8003c88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ca4:	4649      	mov	r1, r9
 8003ca6:	008b      	lsls	r3, r1, #2
 8003ca8:	4641      	mov	r1, r8
 8003caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cae:	4641      	mov	r1, r8
 8003cb0:	008a      	lsls	r2, r1, #2
 8003cb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003cb6:	f7fc fb03 	bl	80002c0 <__aeabi_uldivmod>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4b38      	ldr	r3, [pc, #224]	@ (8003da4 <UART_SetConfig+0x4e4>)
 8003cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	2264      	movs	r2, #100	@ 0x64
 8003cca:	fb02 f303 	mul.w	r3, r2, r3
 8003cce:	1acb      	subs	r3, r1, r3
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	3332      	adds	r3, #50	@ 0x32
 8003cd4:	4a33      	ldr	r2, [pc, #204]	@ (8003da4 <UART_SetConfig+0x4e4>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ce0:	441c      	add	r4, r3
 8003ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003cea:	677a      	str	r2, [r7, #116]	@ 0x74
 8003cec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003cf0:	4642      	mov	r2, r8
 8003cf2:	464b      	mov	r3, r9
 8003cf4:	1891      	adds	r1, r2, r2
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	415b      	adcs	r3, r3
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d00:	4641      	mov	r1, r8
 8003d02:	1851      	adds	r1, r2, r1
 8003d04:	6039      	str	r1, [r7, #0]
 8003d06:	4649      	mov	r1, r9
 8003d08:	414b      	adcs	r3, r1
 8003d0a:	607b      	str	r3, [r7, #4]
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d18:	4659      	mov	r1, fp
 8003d1a:	00cb      	lsls	r3, r1, #3
 8003d1c:	4651      	mov	r1, sl
 8003d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d22:	4651      	mov	r1, sl
 8003d24:	00ca      	lsls	r2, r1, #3
 8003d26:	4610      	mov	r0, r2
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	4642      	mov	r2, r8
 8003d2e:	189b      	adds	r3, r3, r2
 8003d30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d32:	464b      	mov	r3, r9
 8003d34:	460a      	mov	r2, r1
 8003d36:	eb42 0303 	adc.w	r3, r2, r3
 8003d3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d46:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d54:	4649      	mov	r1, r9
 8003d56:	008b      	lsls	r3, r1, #2
 8003d58:	4641      	mov	r1, r8
 8003d5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d5e:	4641      	mov	r1, r8
 8003d60:	008a      	lsls	r2, r1, #2
 8003d62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003d66:	f7fc faab 	bl	80002c0 <__aeabi_uldivmod>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003da4 <UART_SetConfig+0x4e4>)
 8003d70:	fba3 1302 	umull	r1, r3, r3, r2
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	2164      	movs	r1, #100	@ 0x64
 8003d78:	fb01 f303 	mul.w	r3, r1, r3
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	3332      	adds	r3, #50	@ 0x32
 8003d82:	4a08      	ldr	r2, [pc, #32]	@ (8003da4 <UART_SetConfig+0x4e4>)
 8003d84:	fba2 2303 	umull	r2, r3, r2, r3
 8003d88:	095b      	lsrs	r3, r3, #5
 8003d8a:	f003 020f 	and.w	r2, r3, #15
 8003d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4422      	add	r2, r4
 8003d96:	609a      	str	r2, [r3, #8]
}
 8003d98:	bf00      	nop
 8003d9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003da4:	51eb851f 	.word	0x51eb851f

08003da8 <__NVIC_SetPriority>:
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	6039      	str	r1, [r7, #0]
 8003db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	db0a      	blt.n	8003dd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	490c      	ldr	r1, [pc, #48]	@ (8003df4 <__NVIC_SetPriority+0x4c>)
 8003dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc6:	0112      	lsls	r2, r2, #4
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	440b      	add	r3, r1
 8003dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003dd0:	e00a      	b.n	8003de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	4908      	ldr	r1, [pc, #32]	@ (8003df8 <__NVIC_SetPriority+0x50>)
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	3b04      	subs	r3, #4
 8003de0:	0112      	lsls	r2, r2, #4
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	440b      	add	r3, r1
 8003de6:	761a      	strb	r2, [r3, #24]
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	e000e100 	.word	0xe000e100
 8003df8:	e000ed00 	.word	0xe000ed00

08003dfc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003e00:	4b05      	ldr	r3, [pc, #20]	@ (8003e18 <SysTick_Handler+0x1c>)
 8003e02:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003e04:	f001 fd46 	bl	8005894 <xTaskGetSchedulerState>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d001      	beq.n	8003e12 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003e0e:	f002 fb3b 	bl	8006488 <xPortSysTickHandler>
  }
}
 8003e12:	bf00      	nop
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	e000e010 	.word	0xe000e010

08003e1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003e20:	2100      	movs	r1, #0
 8003e22:	f06f 0004 	mvn.w	r0, #4
 8003e26:	f7ff ffbf 	bl	8003da8 <__NVIC_SetPriority>
#endif
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e36:	f3ef 8305 	mrs	r3, IPSR
 8003e3a:	603b      	str	r3, [r7, #0]
  return(result);
 8003e3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003e42:	f06f 0305 	mvn.w	r3, #5
 8003e46:	607b      	str	r3, [r7, #4]
 8003e48:	e00c      	b.n	8003e64 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e74 <osKernelInitialize+0x44>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d105      	bne.n	8003e5e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003e52:	4b08      	ldr	r3, [pc, #32]	@ (8003e74 <osKernelInitialize+0x44>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	607b      	str	r3, [r7, #4]
 8003e5c:	e002      	b.n	8003e64 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e64:	687b      	ldr	r3, [r7, #4]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	2000058c 	.word	0x2000058c

08003e78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e7e:	f3ef 8305 	mrs	r3, IPSR
 8003e82:	603b      	str	r3, [r7, #0]
  return(result);
 8003e84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003e8a:	f06f 0305 	mvn.w	r3, #5
 8003e8e:	607b      	str	r3, [r7, #4]
 8003e90:	e010      	b.n	8003eb4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003e92:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec0 <osKernelStart+0x48>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d109      	bne.n	8003eae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003e9a:	f7ff ffbf 	bl	8003e1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003e9e:	4b08      	ldr	r3, [pc, #32]	@ (8003ec0 <osKernelStart+0x48>)
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ea4:	f001 f892 	bl	8004fcc <vTaskStartScheduler>
      stat = osOK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	607b      	str	r3, [r7, #4]
 8003eac:	e002      	b.n	8003eb4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003eae:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003eb4:	687b      	ldr	r3, [r7, #4]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	2000058c 	.word	0x2000058c

08003ec4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08e      	sub	sp, #56	@ 0x38
 8003ec8:	af04      	add	r7, sp, #16
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ed4:	f3ef 8305 	mrs	r3, IPSR
 8003ed8:	617b      	str	r3, [r7, #20]
  return(result);
 8003eda:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d17e      	bne.n	8003fde <osThreadNew+0x11a>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d07b      	beq.n	8003fde <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003ee6:	2380      	movs	r3, #128	@ 0x80
 8003ee8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003eea:	2318      	movs	r3, #24
 8003eec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d045      	beq.n	8003f8a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <osThreadNew+0x48>
        name = attr->name;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <osThreadNew+0x6e>
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	2b38      	cmp	r3, #56	@ 0x38
 8003f24:	d805      	bhi.n	8003f32 <osThreadNew+0x6e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <osThreadNew+0x72>
        return (NULL);
 8003f32:	2300      	movs	r3, #0
 8003f34:	e054      	b.n	8003fe0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	089b      	lsrs	r3, r3, #2
 8003f44:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00e      	beq.n	8003f6c <osThreadNew+0xa8>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	2ba7      	cmp	r3, #167	@ 0xa7
 8003f54:	d90a      	bls.n	8003f6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d006      	beq.n	8003f6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <osThreadNew+0xa8>
        mem = 1;
 8003f66:	2301      	movs	r3, #1
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	e010      	b.n	8003f8e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10c      	bne.n	8003f8e <osThreadNew+0xca>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d108      	bne.n	8003f8e <osThreadNew+0xca>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d104      	bne.n	8003f8e <osThreadNew+0xca>
          mem = 0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61bb      	str	r3, [r7, #24]
 8003f88:	e001      	b.n	8003f8e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d110      	bne.n	8003fb6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f9c:	9202      	str	r2, [sp, #8]
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	6a3a      	ldr	r2, [r7, #32]
 8003fa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 fe1a 	bl	8004be4 <xTaskCreateStatic>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	e013      	b.n	8003fde <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d110      	bne.n	8003fde <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	f107 0310 	add.w	r3, r7, #16
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fe68 	bl	8004ca4 <xTaskCreate>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d001      	beq.n	8003fde <osThreadNew+0x11a>
            hTask = NULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003fde:	693b      	ldr	r3, [r7, #16]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3728      	adds	r7, #40	@ 0x28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ff0:	f3ef 8305 	mrs	r3, IPSR
 8003ff4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ff6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <osDelay+0x1c>
    stat = osErrorISR;
 8003ffc:	f06f 0305 	mvn.w	r3, #5
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	e007      	b.n	8004014 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <osDelay+0x2c>
      vTaskDelay(ticks);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 ffa6 	bl	8004f60 <vTaskDelay>
    }
  }

  return (stat);
 8004014:	68fb      	ldr	r3, [r7, #12]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4a07      	ldr	r2, [pc, #28]	@ (800404c <vApplicationGetIdleTaskMemory+0x2c>)
 8004030:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	4a06      	ldr	r2, [pc, #24]	@ (8004050 <vApplicationGetIdleTaskMemory+0x30>)
 8004036:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2280      	movs	r2, #128	@ 0x80
 800403c:	601a      	str	r2, [r3, #0]
}
 800403e:	bf00      	nop
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000590 	.word	0x20000590
 8004050:	20000638 	.word	0x20000638

08004054 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4a07      	ldr	r2, [pc, #28]	@ (8004080 <vApplicationGetTimerTaskMemory+0x2c>)
 8004064:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4a06      	ldr	r2, [pc, #24]	@ (8004084 <vApplicationGetTimerTaskMemory+0x30>)
 800406a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004072:	601a      	str	r2, [r3, #0]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	20000838 	.word	0x20000838
 8004084:	200008e0 	.word	0x200008e0

08004088 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f103 0208 	add.w	r2, r3, #8
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f04f 32ff 	mov.w	r2, #4294967295
 80040a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f103 0208 	add.w	r2, r3, #8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f103 0208 	add.w	r2, r3, #8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040e2:	b480      	push	{r7}
 80040e4:	b085      	sub	sp, #20
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	601a      	str	r2, [r3, #0]
}
 800411e:	bf00      	nop
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800412a:	b480      	push	{r7}
 800412c:	b085      	sub	sp, #20
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004140:	d103      	bne.n	800414a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	e00c      	b.n	8004164 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3308      	adds	r3, #8
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	e002      	b.n	8004158 <vListInsert+0x2e>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	429a      	cmp	r2, r3
 8004162:	d2f6      	bcs.n	8004152 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	601a      	str	r2, [r3, #0]
}
 8004190:	bf00      	nop
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6892      	ldr	r2, [r2, #8]
 80041b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6852      	ldr	r2, [r2, #4]
 80041bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d103      	bne.n	80041d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	1e5a      	subs	r2, r3, #1
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10b      	bne.n	800421c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004216:	bf00      	nop
 8004218:	bf00      	nop
 800421a:	e7fd      	b.n	8004218 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800421c:	f002 f8a4 	bl	8006368 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004228:	68f9      	ldr	r1, [r7, #12]
 800422a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	441a      	add	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800424c:	3b01      	subs	r3, #1
 800424e:	68f9      	ldr	r1, [r7, #12]
 8004250:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004252:	fb01 f303 	mul.w	r3, r1, r3
 8004256:	441a      	add	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	22ff      	movs	r2, #255	@ 0xff
 8004260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	22ff      	movs	r2, #255	@ 0xff
 8004268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d114      	bne.n	800429c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01a      	beq.n	80042b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3310      	adds	r3, #16
 800427e:	4618      	mov	r0, r3
 8004280:	f001 f942 	bl	8005508 <xTaskRemoveFromEventList>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d012      	beq.n	80042b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800428a:	4b0d      	ldr	r3, [pc, #52]	@ (80042c0 <xQueueGenericReset+0xd0>)
 800428c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	e009      	b.n	80042b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3310      	adds	r3, #16
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff fef1 	bl	8004088 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3324      	adds	r3, #36	@ 0x24
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff feec 	bl	8004088 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042b0:	f002 f88c 	bl	80063cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042b4:	2301      	movs	r3, #1
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	e000ed04 	.word	0xe000ed04

080042c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08e      	sub	sp, #56	@ 0x38
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10b      	bne.n	80042f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80042ea:	bf00      	nop
 80042ec:	bf00      	nop
 80042ee:	e7fd      	b.n	80042ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10b      	bne.n	800430e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004308:	bf00      	nop
 800430a:	bf00      	nop
 800430c:	e7fd      	b.n	800430a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <xQueueGenericCreateStatic+0x56>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <xQueueGenericCreateStatic+0x5a>
 800431a:	2301      	movs	r3, #1
 800431c:	e000      	b.n	8004320 <xQueueGenericCreateStatic+0x5c>
 800431e:	2300      	movs	r3, #0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10b      	bne.n	800433c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	623b      	str	r3, [r7, #32]
}
 8004336:	bf00      	nop
 8004338:	bf00      	nop
 800433a:	e7fd      	b.n	8004338 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d102      	bne.n	8004348 <xQueueGenericCreateStatic+0x84>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <xQueueGenericCreateStatic+0x88>
 8004348:	2301      	movs	r3, #1
 800434a:	e000      	b.n	800434e <xQueueGenericCreateStatic+0x8a>
 800434c:	2300      	movs	r3, #0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10b      	bne.n	800436a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	61fb      	str	r3, [r7, #28]
}
 8004364:	bf00      	nop
 8004366:	bf00      	nop
 8004368:	e7fd      	b.n	8004366 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800436a:	2350      	movs	r3, #80	@ 0x50
 800436c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b50      	cmp	r3, #80	@ 0x50
 8004372:	d00b      	beq.n	800438c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	61bb      	str	r3, [r7, #24]
}
 8004386:	bf00      	nop
 8004388:	bf00      	nop
 800438a:	e7fd      	b.n	8004388 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800438c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00d      	beq.n	80043b4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80043a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	68b9      	ldr	r1, [r7, #8]
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f805 	bl	80043be <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80043b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3730      	adds	r7, #48	@ 0x30
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b084      	sub	sp, #16
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d103      	bne.n	80043da <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	e002      	b.n	80043e0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80043ec:	2101      	movs	r1, #1
 80043ee:	69b8      	ldr	r0, [r7, #24]
 80043f0:	f7ff fefe 	bl	80041f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	78fa      	ldrb	r2, [r7, #3]
 80043f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80043fc:	bf00      	nop
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08e      	sub	sp, #56	@ 0x38
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004412:	2300      	movs	r3, #0
 8004414:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800441a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10b      	bne.n	8004438 <xQueueGenericSend+0x34>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004432:	bf00      	nop
 8004434:	bf00      	nop
 8004436:	e7fd      	b.n	8004434 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d103      	bne.n	8004446 <xQueueGenericSend+0x42>
 800443e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <xQueueGenericSend+0x46>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <xQueueGenericSend+0x48>
 800444a:	2300      	movs	r3, #0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10b      	bne.n	8004468 <xQueueGenericSend+0x64>
	__asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004462:	bf00      	nop
 8004464:	bf00      	nop
 8004466:	e7fd      	b.n	8004464 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d103      	bne.n	8004476 <xQueueGenericSend+0x72>
 800446e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <xQueueGenericSend+0x76>
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <xQueueGenericSend+0x78>
 800447a:	2300      	movs	r3, #0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10b      	bne.n	8004498 <xQueueGenericSend+0x94>
	__asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	623b      	str	r3, [r7, #32]
}
 8004492:	bf00      	nop
 8004494:	bf00      	nop
 8004496:	e7fd      	b.n	8004494 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004498:	f001 f9fc 	bl	8005894 <xTaskGetSchedulerState>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d102      	bne.n	80044a8 <xQueueGenericSend+0xa4>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <xQueueGenericSend+0xa8>
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <xQueueGenericSend+0xaa>
 80044ac:	2300      	movs	r3, #0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10b      	bne.n	80044ca <xQueueGenericSend+0xc6>
	__asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	61fb      	str	r3, [r7, #28]
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
 80044c8:	e7fd      	b.n	80044c6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044ca:	f001 ff4d 	bl	8006368 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d302      	bcc.n	80044e0 <xQueueGenericSend+0xdc>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d129      	bne.n	8004534 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044e6:	f000 fa0f 	bl	8004908 <prvCopyDataToQueue>
 80044ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d010      	beq.n	8004516 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f6:	3324      	adds	r3, #36	@ 0x24
 80044f8:	4618      	mov	r0, r3
 80044fa:	f001 f805 	bl	8005508 <xTaskRemoveFromEventList>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d013      	beq.n	800452c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004504:	4b3f      	ldr	r3, [pc, #252]	@ (8004604 <xQueueGenericSend+0x200>)
 8004506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	e00a      	b.n	800452c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004518:	2b00      	cmp	r3, #0
 800451a:	d007      	beq.n	800452c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800451c:	4b39      	ldr	r3, [pc, #228]	@ (8004604 <xQueueGenericSend+0x200>)
 800451e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800452c:	f001 ff4e 	bl	80063cc <vPortExitCritical>
				return pdPASS;
 8004530:	2301      	movs	r3, #1
 8004532:	e063      	b.n	80045fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d103      	bne.n	8004542 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800453a:	f001 ff47 	bl	80063cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800453e:	2300      	movs	r3, #0
 8004540:	e05c      	b.n	80045fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004544:	2b00      	cmp	r3, #0
 8004546:	d106      	bne.n	8004556 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004548:	f107 0314 	add.w	r3, r7, #20
 800454c:	4618      	mov	r0, r3
 800454e:	f001 f83f 	bl	80055d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004552:	2301      	movs	r3, #1
 8004554:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004556:	f001 ff39 	bl	80063cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800455a:	f000 fda7 	bl	80050ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800455e:	f001 ff03 	bl	8006368 <vPortEnterCritical>
 8004562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004564:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004568:	b25b      	sxtb	r3, r3
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456e:	d103      	bne.n	8004578 <xQueueGenericSend+0x174>
 8004570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800457e:	b25b      	sxtb	r3, r3
 8004580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004584:	d103      	bne.n	800458e <xQueueGenericSend+0x18a>
 8004586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800458e:	f001 ff1d 	bl	80063cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004592:	1d3a      	adds	r2, r7, #4
 8004594:	f107 0314 	add.w	r3, r7, #20
 8004598:	4611      	mov	r1, r2
 800459a:	4618      	mov	r0, r3
 800459c:	f001 f82e 	bl	80055fc <xTaskCheckForTimeOut>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d124      	bne.n	80045f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80045a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045a8:	f000 faa6 	bl	8004af8 <prvIsQueueFull>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d018      	beq.n	80045e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b4:	3310      	adds	r3, #16
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	4611      	mov	r1, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 ff52 	bl	8005464 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80045c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045c2:	f000 fa31 	bl	8004a28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80045c6:	f000 fd7f 	bl	80050c8 <xTaskResumeAll>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f47f af7c 	bne.w	80044ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80045d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004604 <xQueueGenericSend+0x200>)
 80045d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	e772      	b.n	80044ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80045e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045e6:	f000 fa1f 	bl	8004a28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045ea:	f000 fd6d 	bl	80050c8 <xTaskResumeAll>
 80045ee:	e76c      	b.n	80044ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80045f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045f2:	f000 fa19 	bl	8004a28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045f6:	f000 fd67 	bl	80050c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80045fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3738      	adds	r7, #56	@ 0x38
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	e000ed04 	.word	0xe000ed04

08004608 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b090      	sub	sp, #64	@ 0x40
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800461a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10b      	bne.n	8004638 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004632:	bf00      	nop
 8004634:	bf00      	nop
 8004636:	e7fd      	b.n	8004634 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d103      	bne.n	8004646 <xQueueGenericSendFromISR+0x3e>
 800463e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <xQueueGenericSendFromISR+0x42>
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <xQueueGenericSendFromISR+0x44>
 800464a:	2300      	movs	r3, #0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10b      	bne.n	8004668 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004662:	bf00      	nop
 8004664:	bf00      	nop
 8004666:	e7fd      	b.n	8004664 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d103      	bne.n	8004676 <xQueueGenericSendFromISR+0x6e>
 800466e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <xQueueGenericSendFromISR+0x72>
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <xQueueGenericSendFromISR+0x74>
 800467a:	2300      	movs	r3, #0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10b      	bne.n	8004698 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	623b      	str	r3, [r7, #32]
}
 8004692:	bf00      	nop
 8004694:	bf00      	nop
 8004696:	e7fd      	b.n	8004694 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004698:	f001 ff46 	bl	8006528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800469c:	f3ef 8211 	mrs	r2, BASEPRI
 80046a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	61fa      	str	r2, [r7, #28]
 80046b2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80046b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d302      	bcc.n	80046ca <xQueueGenericSendFromISR+0xc2>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d12f      	bne.n	800472a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80046ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80046e0:	f000 f912 	bl	8004908 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80046e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80046e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ec:	d112      	bne.n	8004714 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d016      	beq.n	8004724 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f8:	3324      	adds	r3, #36	@ 0x24
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 ff04 	bl	8005508 <xTaskRemoveFromEventList>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00e      	beq.n	8004724 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00b      	beq.n	8004724 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	e007      	b.n	8004724 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004714:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004718:	3301      	adds	r3, #1
 800471a:	b2db      	uxtb	r3, r3
 800471c:	b25a      	sxtb	r2, r3
 800471e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004724:	2301      	movs	r3, #1
 8004726:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004728:	e001      	b.n	800472e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800472a:	2300      	movs	r3, #0
 800472c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800472e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004730:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004738:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800473a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800473c:	4618      	mov	r0, r3
 800473e:	3740      	adds	r7, #64	@ 0x40
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08c      	sub	sp, #48	@ 0x30
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004750:	2300      	movs	r3, #0
 8004752:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10b      	bne.n	8004776 <xQueueReceive+0x32>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	623b      	str	r3, [r7, #32]
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	e7fd      	b.n	8004772 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d103      	bne.n	8004784 <xQueueReceive+0x40>
 800477c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <xQueueReceive+0x44>
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <xQueueReceive+0x46>
 8004788:	2300      	movs	r3, #0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10b      	bne.n	80047a6 <xQueueReceive+0x62>
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	61fb      	str	r3, [r7, #28]
}
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	e7fd      	b.n	80047a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047a6:	f001 f875 	bl	8005894 <xTaskGetSchedulerState>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d102      	bne.n	80047b6 <xQueueReceive+0x72>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <xQueueReceive+0x76>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <xQueueReceive+0x78>
 80047ba:	2300      	movs	r3, #0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10b      	bne.n	80047d8 <xQueueReceive+0x94>
	__asm volatile
 80047c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	61bb      	str	r3, [r7, #24]
}
 80047d2:	bf00      	nop
 80047d4:	bf00      	nop
 80047d6:	e7fd      	b.n	80047d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047d8:	f001 fdc6 	bl	8006368 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d01f      	beq.n	8004828 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047ec:	f000 f8f6 	bl	80049dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80047f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f2:	1e5a      	subs	r2, r3, #1
 80047f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00f      	beq.n	8004820 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004802:	3310      	adds	r3, #16
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fe7f 	bl	8005508 <xTaskRemoveFromEventList>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d007      	beq.n	8004820 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004810:	4b3c      	ldr	r3, [pc, #240]	@ (8004904 <xQueueReceive+0x1c0>)
 8004812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004820:	f001 fdd4 	bl	80063cc <vPortExitCritical>
				return pdPASS;
 8004824:	2301      	movs	r3, #1
 8004826:	e069      	b.n	80048fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d103      	bne.n	8004836 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800482e:	f001 fdcd 	bl	80063cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004832:	2300      	movs	r3, #0
 8004834:	e062      	b.n	80048fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004838:	2b00      	cmp	r3, #0
 800483a:	d106      	bne.n	800484a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800483c:	f107 0310 	add.w	r3, r7, #16
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fec5 	bl	80055d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004846:	2301      	movs	r3, #1
 8004848:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800484a:	f001 fdbf 	bl	80063cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800484e:	f000 fc2d 	bl	80050ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004852:	f001 fd89 	bl	8006368 <vPortEnterCritical>
 8004856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004858:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800485c:	b25b      	sxtb	r3, r3
 800485e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004862:	d103      	bne.n	800486c <xQueueReceive+0x128>
 8004864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800486c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004872:	b25b      	sxtb	r3, r3
 8004874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004878:	d103      	bne.n	8004882 <xQueueReceive+0x13e>
 800487a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004882:	f001 fda3 	bl	80063cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004886:	1d3a      	adds	r2, r7, #4
 8004888:	f107 0310 	add.w	r3, r7, #16
 800488c:	4611      	mov	r1, r2
 800488e:	4618      	mov	r0, r3
 8004890:	f000 feb4 	bl	80055fc <xTaskCheckForTimeOut>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d123      	bne.n	80048e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800489a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800489c:	f000 f916 	bl	8004acc <prvIsQueueEmpty>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d017      	beq.n	80048d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80048a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a8:	3324      	adds	r3, #36	@ 0x24
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	4611      	mov	r1, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fdd8 	bl	8005464 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80048b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048b6:	f000 f8b7 	bl	8004a28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048ba:	f000 fc05 	bl	80050c8 <xTaskResumeAll>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d189      	bne.n	80047d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80048c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004904 <xQueueReceive+0x1c0>)
 80048c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	e780      	b.n	80047d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80048d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048d8:	f000 f8a6 	bl	8004a28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048dc:	f000 fbf4 	bl	80050c8 <xTaskResumeAll>
 80048e0:	e77a      	b.n	80047d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80048e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048e4:	f000 f8a0 	bl	8004a28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048e8:	f000 fbee 	bl	80050c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048ee:	f000 f8ed 	bl	8004acc <prvIsQueueEmpty>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f43f af6f 	beq.w	80047d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3730      	adds	r7, #48	@ 0x30
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	e000ed04 	.word	0xe000ed04

08004908 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004914:	2300      	movs	r3, #0
 8004916:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10d      	bne.n	8004942 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d14d      	bne.n	80049ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	4618      	mov	r0, r3
 8004934:	f000 ffcc 	bl	80058d0 <xTaskPriorityDisinherit>
 8004938:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	609a      	str	r2, [r3, #8]
 8004940:	e043      	b.n	80049ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d119      	bne.n	800497c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6858      	ldr	r0, [r3, #4]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004950:	461a      	mov	r2, r3
 8004952:	68b9      	ldr	r1, [r7, #8]
 8004954:	f002 f8c2 	bl	8006adc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	441a      	add	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	429a      	cmp	r2, r3
 8004970:	d32b      	bcc.n	80049ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	605a      	str	r2, [r3, #4]
 800497a:	e026      	b.n	80049ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	68d8      	ldr	r0, [r3, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004984:	461a      	mov	r2, r3
 8004986:	68b9      	ldr	r1, [r7, #8]
 8004988:	f002 f8a8 	bl	8006adc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004994:	425b      	negs	r3, r3
 8004996:	441a      	add	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d207      	bcs.n	80049b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b0:	425b      	negs	r3, r3
 80049b2:	441a      	add	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d105      	bne.n	80049ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80049d2:	697b      	ldr	r3, [r7, #20]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d018      	beq.n	8004a20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	441a      	add	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d303      	bcc.n	8004a10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68d9      	ldr	r1, [r3, #12]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a18:	461a      	mov	r2, r3
 8004a1a:	6838      	ldr	r0, [r7, #0]
 8004a1c:	f002 f85e 	bl	8006adc <memcpy>
	}
}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a30:	f001 fc9a 	bl	8006368 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a3c:	e011      	b.n	8004a62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d012      	beq.n	8004a6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3324      	adds	r3, #36	@ 0x24
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fd5c 	bl	8005508 <xTaskRemoveFromEventList>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a56:	f000 fe35 	bl	80056c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	dce9      	bgt.n	8004a3e <prvUnlockQueue+0x16>
 8004a6a:	e000      	b.n	8004a6e <prvUnlockQueue+0x46>
					break;
 8004a6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	22ff      	movs	r2, #255	@ 0xff
 8004a72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004a76:	f001 fca9 	bl	80063cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a7a:	f001 fc75 	bl	8006368 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a86:	e011      	b.n	8004aac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d012      	beq.n	8004ab6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3310      	adds	r3, #16
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fd37 	bl	8005508 <xTaskRemoveFromEventList>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004aa0:	f000 fe10 	bl	80056c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004aa4:	7bbb      	ldrb	r3, [r7, #14]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	dce9      	bgt.n	8004a88 <prvUnlockQueue+0x60>
 8004ab4:	e000      	b.n	8004ab8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ab6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	22ff      	movs	r2, #255	@ 0xff
 8004abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004ac0:	f001 fc84 	bl	80063cc <vPortExitCritical>
}
 8004ac4:	bf00      	nop
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ad4:	f001 fc48 	bl	8006368 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d102      	bne.n	8004ae6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	e001      	b.n	8004aea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004aea:	f001 fc6f 	bl	80063cc <vPortExitCritical>

	return xReturn;
 8004aee:	68fb      	ldr	r3, [r7, #12]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b00:	f001 fc32 	bl	8006368 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d102      	bne.n	8004b16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b10:	2301      	movs	r3, #1
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	e001      	b.n	8004b1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b1a:	f001 fc57 	bl	80063cc <vPortExitCritical>

	return xReturn;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	e014      	b.n	8004b62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b38:	4a0f      	ldr	r2, [pc, #60]	@ (8004b78 <vQueueAddToRegistry+0x50>)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10b      	bne.n	8004b5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b44:	490c      	ldr	r1, [pc, #48]	@ (8004b78 <vQueueAddToRegistry+0x50>)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004b78 <vQueueAddToRegistry+0x50>)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	4413      	add	r3, r2
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b5a:	e006      	b.n	8004b6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2b07      	cmp	r3, #7
 8004b66:	d9e7      	bls.n	8004b38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b68:	bf00      	nop
 8004b6a:	bf00      	nop
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	20000ce0 	.word	0x20000ce0

08004b7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b8c:	f001 fbec 	bl	8006368 <vPortEnterCritical>
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b96:	b25b      	sxtb	r3, r3
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9c:	d103      	bne.n	8004ba6 <vQueueWaitForMessageRestricted+0x2a>
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bac:	b25b      	sxtb	r3, r3
 8004bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb2:	d103      	bne.n	8004bbc <vQueueWaitForMessageRestricted+0x40>
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bbc:	f001 fc06 	bl	80063cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d106      	bne.n	8004bd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	3324      	adds	r3, #36	@ 0x24
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fc6d 	bl	80054b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004bd6:	6978      	ldr	r0, [r7, #20]
 8004bd8:	f7ff ff26 	bl	8004a28 <prvUnlockQueue>
	}
 8004bdc:	bf00      	nop
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08e      	sub	sp, #56	@ 0x38
 8004be8:	af04      	add	r7, sp, #16
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10b      	bne.n	8004c10 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	623b      	str	r3, [r7, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	bf00      	nop
 8004c0e:	e7fd      	b.n	8004c0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10b      	bne.n	8004c2e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	61fb      	str	r3, [r7, #28]
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	e7fd      	b.n	8004c2a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c2e:	23a8      	movs	r3, #168	@ 0xa8
 8004c30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2ba8      	cmp	r3, #168	@ 0xa8
 8004c36:	d00b      	beq.n	8004c50 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	61bb      	str	r3, [r7, #24]
}
 8004c4a:	bf00      	nop
 8004c4c:	bf00      	nop
 8004c4e:	e7fd      	b.n	8004c4c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d01e      	beq.n	8004c96 <xTaskCreateStatic+0xb2>
 8004c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d01b      	beq.n	8004c96 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c60:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c66:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c70:	2300      	movs	r3, #0
 8004c72:	9303      	str	r3, [sp, #12]
 8004c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c76:	9302      	str	r3, [sp, #8]
 8004c78:	f107 0314 	add.w	r3, r7, #20
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 f851 	bl	8004d30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c90:	f000 f8f6 	bl	8004e80 <prvAddNewTaskToReadyList>
 8004c94:	e001      	b.n	8004c9a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c9a:	697b      	ldr	r3, [r7, #20]
	}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3728      	adds	r7, #40	@ 0x28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08c      	sub	sp, #48	@ 0x30
 8004ca8:	af04      	add	r7, sp, #16
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004cb4:	88fb      	ldrh	r3, [r7, #6]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f001 fc77 	bl	80065ac <pvPortMalloc>
 8004cbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00e      	beq.n	8004ce4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004cc6:	20a8      	movs	r0, #168	@ 0xa8
 8004cc8:	f001 fc70 	bl	80065ac <pvPortMalloc>
 8004ccc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8004cda:	e005      	b.n	8004ce8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004cdc:	6978      	ldr	r0, [r7, #20]
 8004cde:	f001 fd33 	bl	8006748 <vPortFree>
 8004ce2:	e001      	b.n	8004ce8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d017      	beq.n	8004d1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004cf6:	88fa      	ldrh	r2, [r7, #6]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	9303      	str	r3, [sp, #12]
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	9302      	str	r3, [sp, #8]
 8004d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d02:	9301      	str	r3, [sp, #4]
 8004d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 f80f 	bl	8004d30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d12:	69f8      	ldr	r0, [r7, #28]
 8004d14:	f000 f8b4 	bl	8004e80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	61bb      	str	r3, [r7, #24]
 8004d1c:	e002      	b.n	8004d24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d24:	69bb      	ldr	r3, [r7, #24]
	}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3720      	adds	r7, #32
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d40:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	461a      	mov	r2, r3
 8004d48:	21a5      	movs	r1, #165	@ 0xa5
 8004d4a:	f001 fe3d 	bl	80069c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	f023 0307 	bic.w	r3, r3, #7
 8004d66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00b      	beq.n	8004d8a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	617b      	str	r3, [r7, #20]
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
 8004d88:	e7fd      	b.n	8004d86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01f      	beq.n	8004dd0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d90:	2300      	movs	r3, #0
 8004d92:	61fb      	str	r3, [r7, #28]
 8004d94:	e012      	b.n	8004dbc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	7819      	ldrb	r1, [r3, #0]
 8004d9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	4413      	add	r3, r2
 8004da4:	3334      	adds	r3, #52	@ 0x34
 8004da6:	460a      	mov	r2, r1
 8004da8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d006      	beq.n	8004dc4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	3301      	adds	r3, #1
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	2b0f      	cmp	r3, #15
 8004dc0:	d9e9      	bls.n	8004d96 <prvInitialiseNewTask+0x66>
 8004dc2:	e000      	b.n	8004dc6 <prvInitialiseNewTask+0x96>
			{
				break;
 8004dc4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004dce:	e003      	b.n	8004dd8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dda:	2b37      	cmp	r3, #55	@ 0x37
 8004ddc:	d901      	bls.n	8004de2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004dde:	2337      	movs	r3, #55	@ 0x37
 8004de0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004de6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df0:	2200      	movs	r2, #0
 8004df2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df6:	3304      	adds	r3, #4
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff f965 	bl	80040c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e00:	3318      	adds	r3, #24
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff f960 	bl	80040c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e0c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e10:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e16:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e1c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e20:	2200      	movs	r2, #0
 8004e22:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e30:	3354      	adds	r3, #84	@ 0x54
 8004e32:	224c      	movs	r2, #76	@ 0x4c
 8004e34:	2100      	movs	r1, #0
 8004e36:	4618      	mov	r0, r3
 8004e38:	f001 fdc6 	bl	80069c8 <memset>
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3e:	4a0d      	ldr	r2, [pc, #52]	@ (8004e74 <prvInitialiseNewTask+0x144>)
 8004e40:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e44:	4a0c      	ldr	r2, [pc, #48]	@ (8004e78 <prvInitialiseNewTask+0x148>)
 8004e46:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8004e7c <prvInitialiseNewTask+0x14c>)
 8004e4c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	68f9      	ldr	r1, [r7, #12]
 8004e52:	69b8      	ldr	r0, [r7, #24]
 8004e54:	f001 f95a 	bl	800610c <pxPortInitialiseStack>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e6a:	bf00      	nop
 8004e6c:	3720      	adds	r7, #32
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20004f74 	.word	0x20004f74
 8004e78:	20004fdc 	.word	0x20004fdc
 8004e7c:	20005044 	.word	0x20005044

08004e80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e88:	f001 fa6e 	bl	8006368 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8004f44 <prvAddNewTaskToReadyList+0xc4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3301      	adds	r3, #1
 8004e92:	4a2c      	ldr	r2, [pc, #176]	@ (8004f44 <prvAddNewTaskToReadyList+0xc4>)
 8004e94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e96:	4b2c      	ldr	r3, [pc, #176]	@ (8004f48 <prvAddNewTaskToReadyList+0xc8>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d109      	bne.n	8004eb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8004f48 <prvAddNewTaskToReadyList+0xc8>)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ea4:	4b27      	ldr	r3, [pc, #156]	@ (8004f44 <prvAddNewTaskToReadyList+0xc4>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d110      	bne.n	8004ece <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004eac:	f000 fc2e 	bl	800570c <prvInitialiseTaskLists>
 8004eb0:	e00d      	b.n	8004ece <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004eb2:	4b26      	ldr	r3, [pc, #152]	@ (8004f4c <prvAddNewTaskToReadyList+0xcc>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004eba:	4b23      	ldr	r3, [pc, #140]	@ (8004f48 <prvAddNewTaskToReadyList+0xc8>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d802      	bhi.n	8004ece <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8004f48 <prvAddNewTaskToReadyList+0xc8>)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ece:	4b20      	ldr	r3, [pc, #128]	@ (8004f50 <prvAddNewTaskToReadyList+0xd0>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8004f50 <prvAddNewTaskToReadyList+0xd0>)
 8004ed6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f50 <prvAddNewTaskToReadyList+0xd0>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f54 <prvAddNewTaskToReadyList+0xd4>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d903      	bls.n	8004ef4 <prvAddNewTaskToReadyList+0x74>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef0:	4a18      	ldr	r2, [pc, #96]	@ (8004f54 <prvAddNewTaskToReadyList+0xd4>)
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4a15      	ldr	r2, [pc, #84]	@ (8004f58 <prvAddNewTaskToReadyList+0xd8>)
 8004f02:	441a      	add	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3304      	adds	r3, #4
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	f7ff f8e9 	bl	80040e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f10:	f001 fa5c 	bl	80063cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f14:	4b0d      	ldr	r3, [pc, #52]	@ (8004f4c <prvAddNewTaskToReadyList+0xcc>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00e      	beq.n	8004f3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f48 <prvAddNewTaskToReadyList+0xc8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d207      	bcs.n	8004f3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f5c <prvAddNewTaskToReadyList+0xdc>)
 8004f2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f3a:	bf00      	nop
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	200011f4 	.word	0x200011f4
 8004f48:	20000d20 	.word	0x20000d20
 8004f4c:	20001200 	.word	0x20001200
 8004f50:	20001210 	.word	0x20001210
 8004f54:	200011fc 	.word	0x200011fc
 8004f58:	20000d24 	.word	0x20000d24
 8004f5c:	e000ed04 	.word	0xe000ed04

08004f60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d018      	beq.n	8004fa4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f72:	4b14      	ldr	r3, [pc, #80]	@ (8004fc4 <vTaskDelay+0x64>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00b      	beq.n	8004f92 <vTaskDelay+0x32>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	60bb      	str	r3, [r7, #8]
}
 8004f8c:	bf00      	nop
 8004f8e:	bf00      	nop
 8004f90:	e7fd      	b.n	8004f8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f92:	f000 f88b 	bl	80050ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f96:	2100      	movs	r1, #0
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 fd09 	bl	80059b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f9e:	f000 f893 	bl	80050c8 <xTaskResumeAll>
 8004fa2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d107      	bne.n	8004fba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004faa:	4b07      	ldr	r3, [pc, #28]	@ (8004fc8 <vTaskDelay+0x68>)
 8004fac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fba:	bf00      	nop
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	2000121c 	.word	0x2000121c
 8004fc8:	e000ed04 	.word	0xe000ed04

08004fcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08a      	sub	sp, #40	@ 0x28
 8004fd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004fda:	463a      	mov	r2, r7
 8004fdc:	1d39      	adds	r1, r7, #4
 8004fde:	f107 0308 	add.w	r3, r7, #8
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff f81c 	bl	8004020 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004fe8:	6839      	ldr	r1, [r7, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	9202      	str	r2, [sp, #8]
 8004ff0:	9301      	str	r3, [sp, #4]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	460a      	mov	r2, r1
 8004ffa:	4924      	ldr	r1, [pc, #144]	@ (800508c <vTaskStartScheduler+0xc0>)
 8004ffc:	4824      	ldr	r0, [pc, #144]	@ (8005090 <vTaskStartScheduler+0xc4>)
 8004ffe:	f7ff fdf1 	bl	8004be4 <xTaskCreateStatic>
 8005002:	4603      	mov	r3, r0
 8005004:	4a23      	ldr	r2, [pc, #140]	@ (8005094 <vTaskStartScheduler+0xc8>)
 8005006:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005008:	4b22      	ldr	r3, [pc, #136]	@ (8005094 <vTaskStartScheduler+0xc8>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005010:	2301      	movs	r3, #1
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	e001      	b.n	800501a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d102      	bne.n	8005026 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005020:	f000 fd1a 	bl	8005a58 <xTimerCreateTimerTask>
 8005024:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d11b      	bne.n	8005064 <vTaskStartScheduler+0x98>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	613b      	str	r3, [r7, #16]
}
 800503e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005040:	4b15      	ldr	r3, [pc, #84]	@ (8005098 <vTaskStartScheduler+0xcc>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3354      	adds	r3, #84	@ 0x54
 8005046:	4a15      	ldr	r2, [pc, #84]	@ (800509c <vTaskStartScheduler+0xd0>)
 8005048:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800504a:	4b15      	ldr	r3, [pc, #84]	@ (80050a0 <vTaskStartScheduler+0xd4>)
 800504c:	f04f 32ff 	mov.w	r2, #4294967295
 8005050:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005052:	4b14      	ldr	r3, [pc, #80]	@ (80050a4 <vTaskStartScheduler+0xd8>)
 8005054:	2201      	movs	r2, #1
 8005056:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005058:	4b13      	ldr	r3, [pc, #76]	@ (80050a8 <vTaskStartScheduler+0xdc>)
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800505e:	f001 f8df 	bl	8006220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005062:	e00f      	b.n	8005084 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506a:	d10b      	bne.n	8005084 <vTaskStartScheduler+0xb8>
	__asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	60fb      	str	r3, [r7, #12]
}
 800507e:	bf00      	nop
 8005080:	bf00      	nop
 8005082:	e7fd      	b.n	8005080 <vTaskStartScheduler+0xb4>
}
 8005084:	bf00      	nop
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	080073b0 	.word	0x080073b0
 8005090:	080056dd 	.word	0x080056dd
 8005094:	20001218 	.word	0x20001218
 8005098:	20000d20 	.word	0x20000d20
 800509c:	20000018 	.word	0x20000018
 80050a0:	20001214 	.word	0x20001214
 80050a4:	20001200 	.word	0x20001200
 80050a8:	200011f8 	.word	0x200011f8

080050ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80050b0:	4b04      	ldr	r3, [pc, #16]	@ (80050c4 <vTaskSuspendAll+0x18>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3301      	adds	r3, #1
 80050b6:	4a03      	ldr	r2, [pc, #12]	@ (80050c4 <vTaskSuspendAll+0x18>)
 80050b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80050ba:	bf00      	nop
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	2000121c 	.word	0x2000121c

080050c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80050d6:	4b42      	ldr	r3, [pc, #264]	@ (80051e0 <xTaskResumeAll+0x118>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10b      	bne.n	80050f6 <xTaskResumeAll+0x2e>
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	603b      	str	r3, [r7, #0]
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	e7fd      	b.n	80050f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050f6:	f001 f937 	bl	8006368 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80050fa:	4b39      	ldr	r3, [pc, #228]	@ (80051e0 <xTaskResumeAll+0x118>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3b01      	subs	r3, #1
 8005100:	4a37      	ldr	r2, [pc, #220]	@ (80051e0 <xTaskResumeAll+0x118>)
 8005102:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005104:	4b36      	ldr	r3, [pc, #216]	@ (80051e0 <xTaskResumeAll+0x118>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d162      	bne.n	80051d2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800510c:	4b35      	ldr	r3, [pc, #212]	@ (80051e4 <xTaskResumeAll+0x11c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d05e      	beq.n	80051d2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005114:	e02f      	b.n	8005176 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005116:	4b34      	ldr	r3, [pc, #208]	@ (80051e8 <xTaskResumeAll+0x120>)
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3318      	adds	r3, #24
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff f83a 	bl	800419c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3304      	adds	r3, #4
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff f835 	bl	800419c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005136:	4b2d      	ldr	r3, [pc, #180]	@ (80051ec <xTaskResumeAll+0x124>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d903      	bls.n	8005146 <xTaskResumeAll+0x7e>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005142:	4a2a      	ldr	r2, [pc, #168]	@ (80051ec <xTaskResumeAll+0x124>)
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800514a:	4613      	mov	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4a27      	ldr	r2, [pc, #156]	@ (80051f0 <xTaskResumeAll+0x128>)
 8005154:	441a      	add	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	3304      	adds	r3, #4
 800515a:	4619      	mov	r1, r3
 800515c:	4610      	mov	r0, r2
 800515e:	f7fe ffc0 	bl	80040e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005166:	4b23      	ldr	r3, [pc, #140]	@ (80051f4 <xTaskResumeAll+0x12c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516c:	429a      	cmp	r2, r3
 800516e:	d302      	bcc.n	8005176 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005170:	4b21      	ldr	r3, [pc, #132]	@ (80051f8 <xTaskResumeAll+0x130>)
 8005172:	2201      	movs	r2, #1
 8005174:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005176:	4b1c      	ldr	r3, [pc, #112]	@ (80051e8 <xTaskResumeAll+0x120>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1cb      	bne.n	8005116 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005184:	f000 fb66 	bl	8005854 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005188:	4b1c      	ldr	r3, [pc, #112]	@ (80051fc <xTaskResumeAll+0x134>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d010      	beq.n	80051b6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005194:	f000 f846 	bl	8005224 <xTaskIncrementTick>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800519e:	4b16      	ldr	r3, [pc, #88]	@ (80051f8 <xTaskResumeAll+0x130>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1f1      	bne.n	8005194 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80051b0:	4b12      	ldr	r3, [pc, #72]	@ (80051fc <xTaskResumeAll+0x134>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80051b6:	4b10      	ldr	r3, [pc, #64]	@ (80051f8 <xTaskResumeAll+0x130>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d009      	beq.n	80051d2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80051be:	2301      	movs	r3, #1
 80051c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80051c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005200 <xTaskResumeAll+0x138>)
 80051c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051d2:	f001 f8fb 	bl	80063cc <vPortExitCritical>

	return xAlreadyYielded;
 80051d6:	68bb      	ldr	r3, [r7, #8]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	2000121c 	.word	0x2000121c
 80051e4:	200011f4 	.word	0x200011f4
 80051e8:	200011b4 	.word	0x200011b4
 80051ec:	200011fc 	.word	0x200011fc
 80051f0:	20000d24 	.word	0x20000d24
 80051f4:	20000d20 	.word	0x20000d20
 80051f8:	20001208 	.word	0x20001208
 80051fc:	20001204 	.word	0x20001204
 8005200:	e000ed04 	.word	0xe000ed04

08005204 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800520a:	4b05      	ldr	r3, [pc, #20]	@ (8005220 <xTaskGetTickCount+0x1c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005210:	687b      	ldr	r3, [r7, #4]
}
 8005212:	4618      	mov	r0, r3
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	200011f8 	.word	0x200011f8

08005224 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800522a:	2300      	movs	r3, #0
 800522c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800522e:	4b4f      	ldr	r3, [pc, #316]	@ (800536c <xTaskIncrementTick+0x148>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	f040 8090 	bne.w	8005358 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005238:	4b4d      	ldr	r3, [pc, #308]	@ (8005370 <xTaskIncrementTick+0x14c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3301      	adds	r3, #1
 800523e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005240:	4a4b      	ldr	r2, [pc, #300]	@ (8005370 <xTaskIncrementTick+0x14c>)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d121      	bne.n	8005290 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800524c:	4b49      	ldr	r3, [pc, #292]	@ (8005374 <xTaskIncrementTick+0x150>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00b      	beq.n	800526e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	603b      	str	r3, [r7, #0]
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	e7fd      	b.n	800526a <xTaskIncrementTick+0x46>
 800526e:	4b41      	ldr	r3, [pc, #260]	@ (8005374 <xTaskIncrementTick+0x150>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	4b40      	ldr	r3, [pc, #256]	@ (8005378 <xTaskIncrementTick+0x154>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a3e      	ldr	r2, [pc, #248]	@ (8005374 <xTaskIncrementTick+0x150>)
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	4a3e      	ldr	r2, [pc, #248]	@ (8005378 <xTaskIncrementTick+0x154>)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	4b3e      	ldr	r3, [pc, #248]	@ (800537c <xTaskIncrementTick+0x158>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3301      	adds	r3, #1
 8005288:	4a3c      	ldr	r2, [pc, #240]	@ (800537c <xTaskIncrementTick+0x158>)
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	f000 fae2 	bl	8005854 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005290:	4b3b      	ldr	r3, [pc, #236]	@ (8005380 <xTaskIncrementTick+0x15c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	429a      	cmp	r2, r3
 8005298:	d349      	bcc.n	800532e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800529a:	4b36      	ldr	r3, [pc, #216]	@ (8005374 <xTaskIncrementTick+0x150>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d104      	bne.n	80052ae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a4:	4b36      	ldr	r3, [pc, #216]	@ (8005380 <xTaskIncrementTick+0x15c>)
 80052a6:	f04f 32ff 	mov.w	r2, #4294967295
 80052aa:	601a      	str	r2, [r3, #0]
					break;
 80052ac:	e03f      	b.n	800532e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ae:	4b31      	ldr	r3, [pc, #196]	@ (8005374 <xTaskIncrementTick+0x150>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d203      	bcs.n	80052ce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80052c6:	4a2e      	ldr	r2, [pc, #184]	@ (8005380 <xTaskIncrementTick+0x15c>)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80052cc:	e02f      	b.n	800532e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	3304      	adds	r3, #4
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fe ff62 	bl	800419c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d004      	beq.n	80052ea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	3318      	adds	r3, #24
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fe ff59 	bl	800419c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ee:	4b25      	ldr	r3, [pc, #148]	@ (8005384 <xTaskIncrementTick+0x160>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d903      	bls.n	80052fe <xTaskIncrementTick+0xda>
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fa:	4a22      	ldr	r2, [pc, #136]	@ (8005384 <xTaskIncrementTick+0x160>)
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005302:	4613      	mov	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4a1f      	ldr	r2, [pc, #124]	@ (8005388 <xTaskIncrementTick+0x164>)
 800530c:	441a      	add	r2, r3
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	3304      	adds	r3, #4
 8005312:	4619      	mov	r1, r3
 8005314:	4610      	mov	r0, r2
 8005316:	f7fe fee4 	bl	80040e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800531e:	4b1b      	ldr	r3, [pc, #108]	@ (800538c <xTaskIncrementTick+0x168>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005324:	429a      	cmp	r2, r3
 8005326:	d3b8      	bcc.n	800529a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005328:	2301      	movs	r3, #1
 800532a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800532c:	e7b5      	b.n	800529a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800532e:	4b17      	ldr	r3, [pc, #92]	@ (800538c <xTaskIncrementTick+0x168>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005334:	4914      	ldr	r1, [pc, #80]	@ (8005388 <xTaskIncrementTick+0x164>)
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d901      	bls.n	800534a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005346:	2301      	movs	r3, #1
 8005348:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800534a:	4b11      	ldr	r3, [pc, #68]	@ (8005390 <xTaskIncrementTick+0x16c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005352:	2301      	movs	r3, #1
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e004      	b.n	8005362 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005358:	4b0e      	ldr	r3, [pc, #56]	@ (8005394 <xTaskIncrementTick+0x170>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3301      	adds	r3, #1
 800535e:	4a0d      	ldr	r2, [pc, #52]	@ (8005394 <xTaskIncrementTick+0x170>)
 8005360:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005362:	697b      	ldr	r3, [r7, #20]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	2000121c 	.word	0x2000121c
 8005370:	200011f8 	.word	0x200011f8
 8005374:	200011ac 	.word	0x200011ac
 8005378:	200011b0 	.word	0x200011b0
 800537c:	2000120c 	.word	0x2000120c
 8005380:	20001214 	.word	0x20001214
 8005384:	200011fc 	.word	0x200011fc
 8005388:	20000d24 	.word	0x20000d24
 800538c:	20000d20 	.word	0x20000d20
 8005390:	20001208 	.word	0x20001208
 8005394:	20001204 	.word	0x20001204

08005398 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800539e:	4b2b      	ldr	r3, [pc, #172]	@ (800544c <vTaskSwitchContext+0xb4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053a6:	4b2a      	ldr	r3, [pc, #168]	@ (8005450 <vTaskSwitchContext+0xb8>)
 80053a8:	2201      	movs	r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053ac:	e047      	b.n	800543e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80053ae:	4b28      	ldr	r3, [pc, #160]	@ (8005450 <vTaskSwitchContext+0xb8>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053b4:	4b27      	ldr	r3, [pc, #156]	@ (8005454 <vTaskSwitchContext+0xbc>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	e011      	b.n	80053e0 <vTaskSwitchContext+0x48>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10b      	bne.n	80053da <vTaskSwitchContext+0x42>
	__asm volatile
 80053c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	607b      	str	r3, [r7, #4]
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop
 80053d8:	e7fd      	b.n	80053d6 <vTaskSwitchContext+0x3e>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3b01      	subs	r3, #1
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	491d      	ldr	r1, [pc, #116]	@ (8005458 <vTaskSwitchContext+0xc0>)
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4613      	mov	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0e3      	beq.n	80053bc <vTaskSwitchContext+0x24>
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4a16      	ldr	r2, [pc, #88]	@ (8005458 <vTaskSwitchContext+0xc0>)
 8005400:	4413      	add	r3, r2
 8005402:	60bb      	str	r3, [r7, #8]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	605a      	str	r2, [r3, #4]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	3308      	adds	r3, #8
 8005416:	429a      	cmp	r2, r3
 8005418:	d104      	bne.n	8005424 <vTaskSwitchContext+0x8c>
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	605a      	str	r2, [r3, #4]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	4a0c      	ldr	r2, [pc, #48]	@ (800545c <vTaskSwitchContext+0xc4>)
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	4a09      	ldr	r2, [pc, #36]	@ (8005454 <vTaskSwitchContext+0xbc>)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005434:	4b09      	ldr	r3, [pc, #36]	@ (800545c <vTaskSwitchContext+0xc4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3354      	adds	r3, #84	@ 0x54
 800543a:	4a09      	ldr	r2, [pc, #36]	@ (8005460 <vTaskSwitchContext+0xc8>)
 800543c:	6013      	str	r3, [r2, #0]
}
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	2000121c 	.word	0x2000121c
 8005450:	20001208 	.word	0x20001208
 8005454:	200011fc 	.word	0x200011fc
 8005458:	20000d24 	.word	0x20000d24
 800545c:	20000d20 	.word	0x20000d20
 8005460:	20000018 	.word	0x20000018

08005464 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10b      	bne.n	800548c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	60fb      	str	r3, [r7, #12]
}
 8005486:	bf00      	nop
 8005488:	bf00      	nop
 800548a:	e7fd      	b.n	8005488 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800548c:	4b07      	ldr	r3, [pc, #28]	@ (80054ac <vTaskPlaceOnEventList+0x48>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3318      	adds	r3, #24
 8005492:	4619      	mov	r1, r3
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7fe fe48 	bl	800412a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800549a:	2101      	movs	r1, #1
 800549c:	6838      	ldr	r0, [r7, #0]
 800549e:	f000 fa87 	bl	80059b0 <prvAddCurrentTaskToDelayedList>
}
 80054a2:	bf00      	nop
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000d20 	.word	0x20000d20

080054b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10b      	bne.n	80054da <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	617b      	str	r3, [r7, #20]
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop
 80054d8:	e7fd      	b.n	80054d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054da:	4b0a      	ldr	r3, [pc, #40]	@ (8005504 <vTaskPlaceOnEventListRestricted+0x54>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3318      	adds	r3, #24
 80054e0:	4619      	mov	r1, r3
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f7fe fdfd 	bl	80040e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80054ee:	f04f 33ff 	mov.w	r3, #4294967295
 80054f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	68b8      	ldr	r0, [r7, #8]
 80054f8:	f000 fa5a 	bl	80059b0 <prvAddCurrentTaskToDelayedList>
	}
 80054fc:	bf00      	nop
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	20000d20 	.word	0x20000d20

08005508 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10b      	bne.n	8005536 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	60fb      	str	r3, [r7, #12]
}
 8005530:	bf00      	nop
 8005532:	bf00      	nop
 8005534:	e7fd      	b.n	8005532 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	3318      	adds	r3, #24
 800553a:	4618      	mov	r0, r3
 800553c:	f7fe fe2e 	bl	800419c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005540:	4b1d      	ldr	r3, [pc, #116]	@ (80055b8 <xTaskRemoveFromEventList+0xb0>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d11d      	bne.n	8005584 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	3304      	adds	r3, #4
 800554c:	4618      	mov	r0, r3
 800554e:	f7fe fe25 	bl	800419c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005556:	4b19      	ldr	r3, [pc, #100]	@ (80055bc <xTaskRemoveFromEventList+0xb4>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d903      	bls.n	8005566 <xTaskRemoveFromEventList+0x5e>
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005562:	4a16      	ldr	r2, [pc, #88]	@ (80055bc <xTaskRemoveFromEventList+0xb4>)
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4a13      	ldr	r2, [pc, #76]	@ (80055c0 <xTaskRemoveFromEventList+0xb8>)
 8005574:	441a      	add	r2, r3
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	3304      	adds	r3, #4
 800557a:	4619      	mov	r1, r3
 800557c:	4610      	mov	r0, r2
 800557e:	f7fe fdb0 	bl	80040e2 <vListInsertEnd>
 8005582:	e005      	b.n	8005590 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	3318      	adds	r3, #24
 8005588:	4619      	mov	r1, r3
 800558a:	480e      	ldr	r0, [pc, #56]	@ (80055c4 <xTaskRemoveFromEventList+0xbc>)
 800558c:	f7fe fda9 	bl	80040e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005594:	4b0c      	ldr	r3, [pc, #48]	@ (80055c8 <xTaskRemoveFromEventList+0xc0>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559a:	429a      	cmp	r2, r3
 800559c:	d905      	bls.n	80055aa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800559e:	2301      	movs	r3, #1
 80055a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055a2:	4b0a      	ldr	r3, [pc, #40]	@ (80055cc <xTaskRemoveFromEventList+0xc4>)
 80055a4:	2201      	movs	r2, #1
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	e001      	b.n	80055ae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80055aa:	2300      	movs	r3, #0
 80055ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80055ae:	697b      	ldr	r3, [r7, #20]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3718      	adds	r7, #24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	2000121c 	.word	0x2000121c
 80055bc:	200011fc 	.word	0x200011fc
 80055c0:	20000d24 	.word	0x20000d24
 80055c4:	200011b4 	.word	0x200011b4
 80055c8:	20000d20 	.word	0x20000d20
 80055cc:	20001208 	.word	0x20001208

080055d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055d8:	4b06      	ldr	r3, [pc, #24]	@ (80055f4 <vTaskInternalSetTimeOutState+0x24>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055e0:	4b05      	ldr	r3, [pc, #20]	@ (80055f8 <vTaskInternalSetTimeOutState+0x28>)
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	605a      	str	r2, [r3, #4]
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	2000120c 	.word	0x2000120c
 80055f8:	200011f8 	.word	0x200011f8

080055fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b088      	sub	sp, #32
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10b      	bne.n	8005624 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	613b      	str	r3, [r7, #16]
}
 800561e:	bf00      	nop
 8005620:	bf00      	nop
 8005622:	e7fd      	b.n	8005620 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10b      	bne.n	8005642 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	60fb      	str	r3, [r7, #12]
}
 800563c:	bf00      	nop
 800563e:	bf00      	nop
 8005640:	e7fd      	b.n	800563e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005642:	f000 fe91 	bl	8006368 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005646:	4b1d      	ldr	r3, [pc, #116]	@ (80056bc <xTaskCheckForTimeOut+0xc0>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565e:	d102      	bne.n	8005666 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005660:	2300      	movs	r3, #0
 8005662:	61fb      	str	r3, [r7, #28]
 8005664:	e023      	b.n	80056ae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	4b15      	ldr	r3, [pc, #84]	@ (80056c0 <xTaskCheckForTimeOut+0xc4>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d007      	beq.n	8005682 <xTaskCheckForTimeOut+0x86>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	429a      	cmp	r2, r3
 800567a:	d302      	bcc.n	8005682 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800567c:	2301      	movs	r3, #1
 800567e:	61fb      	str	r3, [r7, #28]
 8005680:	e015      	b.n	80056ae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	429a      	cmp	r2, r3
 800568a:	d20b      	bcs.n	80056a4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	1ad2      	subs	r2, r2, r3
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff ff99 	bl	80055d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800569e:	2300      	movs	r3, #0
 80056a0:	61fb      	str	r3, [r7, #28]
 80056a2:	e004      	b.n	80056ae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056aa:	2301      	movs	r3, #1
 80056ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056ae:	f000 fe8d 	bl	80063cc <vPortExitCritical>

	return xReturn;
 80056b2:	69fb      	ldr	r3, [r7, #28]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3720      	adds	r7, #32
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	200011f8 	.word	0x200011f8
 80056c0:	2000120c 	.word	0x2000120c

080056c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056c8:	4b03      	ldr	r3, [pc, #12]	@ (80056d8 <vTaskMissedYield+0x14>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	601a      	str	r2, [r3, #0]
}
 80056ce:	bf00      	nop
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	20001208 	.word	0x20001208

080056dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056e4:	f000 f852 	bl	800578c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056e8:	4b06      	ldr	r3, [pc, #24]	@ (8005704 <prvIdleTask+0x28>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d9f9      	bls.n	80056e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80056f0:	4b05      	ldr	r3, [pc, #20]	@ (8005708 <prvIdleTask+0x2c>)
 80056f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005700:	e7f0      	b.n	80056e4 <prvIdleTask+0x8>
 8005702:	bf00      	nop
 8005704:	20000d24 	.word	0x20000d24
 8005708:	e000ed04 	.word	0xe000ed04

0800570c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005712:	2300      	movs	r3, #0
 8005714:	607b      	str	r3, [r7, #4]
 8005716:	e00c      	b.n	8005732 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4a12      	ldr	r2, [pc, #72]	@ (800576c <prvInitialiseTaskLists+0x60>)
 8005724:	4413      	add	r3, r2
 8005726:	4618      	mov	r0, r3
 8005728:	f7fe fcae 	bl	8004088 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3301      	adds	r3, #1
 8005730:	607b      	str	r3, [r7, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b37      	cmp	r3, #55	@ 0x37
 8005736:	d9ef      	bls.n	8005718 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005738:	480d      	ldr	r0, [pc, #52]	@ (8005770 <prvInitialiseTaskLists+0x64>)
 800573a:	f7fe fca5 	bl	8004088 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800573e:	480d      	ldr	r0, [pc, #52]	@ (8005774 <prvInitialiseTaskLists+0x68>)
 8005740:	f7fe fca2 	bl	8004088 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005744:	480c      	ldr	r0, [pc, #48]	@ (8005778 <prvInitialiseTaskLists+0x6c>)
 8005746:	f7fe fc9f 	bl	8004088 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800574a:	480c      	ldr	r0, [pc, #48]	@ (800577c <prvInitialiseTaskLists+0x70>)
 800574c:	f7fe fc9c 	bl	8004088 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005750:	480b      	ldr	r0, [pc, #44]	@ (8005780 <prvInitialiseTaskLists+0x74>)
 8005752:	f7fe fc99 	bl	8004088 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005756:	4b0b      	ldr	r3, [pc, #44]	@ (8005784 <prvInitialiseTaskLists+0x78>)
 8005758:	4a05      	ldr	r2, [pc, #20]	@ (8005770 <prvInitialiseTaskLists+0x64>)
 800575a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800575c:	4b0a      	ldr	r3, [pc, #40]	@ (8005788 <prvInitialiseTaskLists+0x7c>)
 800575e:	4a05      	ldr	r2, [pc, #20]	@ (8005774 <prvInitialiseTaskLists+0x68>)
 8005760:	601a      	str	r2, [r3, #0]
}
 8005762:	bf00      	nop
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	20000d24 	.word	0x20000d24
 8005770:	20001184 	.word	0x20001184
 8005774:	20001198 	.word	0x20001198
 8005778:	200011b4 	.word	0x200011b4
 800577c:	200011c8 	.word	0x200011c8
 8005780:	200011e0 	.word	0x200011e0
 8005784:	200011ac 	.word	0x200011ac
 8005788:	200011b0 	.word	0x200011b0

0800578c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005792:	e019      	b.n	80057c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005794:	f000 fde8 	bl	8006368 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005798:	4b10      	ldr	r3, [pc, #64]	@ (80057dc <prvCheckTasksWaitingTermination+0x50>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3304      	adds	r3, #4
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7fe fcf9 	bl	800419c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057aa:	4b0d      	ldr	r3, [pc, #52]	@ (80057e0 <prvCheckTasksWaitingTermination+0x54>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	4a0b      	ldr	r2, [pc, #44]	@ (80057e0 <prvCheckTasksWaitingTermination+0x54>)
 80057b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057b4:	4b0b      	ldr	r3, [pc, #44]	@ (80057e4 <prvCheckTasksWaitingTermination+0x58>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	4a0a      	ldr	r2, [pc, #40]	@ (80057e4 <prvCheckTasksWaitingTermination+0x58>)
 80057bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057be:	f000 fe05 	bl	80063cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f810 	bl	80057e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057c8:	4b06      	ldr	r3, [pc, #24]	@ (80057e4 <prvCheckTasksWaitingTermination+0x58>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e1      	bne.n	8005794 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057d0:	bf00      	nop
 80057d2:	bf00      	nop
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	200011c8 	.word	0x200011c8
 80057e0:	200011f4 	.word	0x200011f4
 80057e4:	200011dc 	.word	0x200011dc

080057e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3354      	adds	r3, #84	@ 0x54
 80057f4:	4618      	mov	r0, r3
 80057f6:	f001 f8ef 	bl	80069d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005800:	2b00      	cmp	r3, #0
 8005802:	d108      	bne.n	8005816 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005808:	4618      	mov	r0, r3
 800580a:	f000 ff9d 	bl	8006748 <vPortFree>
				vPortFree( pxTCB );
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 ff9a 	bl	8006748 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005814:	e019      	b.n	800584a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800581c:	2b01      	cmp	r3, #1
 800581e:	d103      	bne.n	8005828 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 ff91 	bl	8006748 <vPortFree>
	}
 8005826:	e010      	b.n	800584a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800582e:	2b02      	cmp	r3, #2
 8005830:	d00b      	beq.n	800584a <prvDeleteTCB+0x62>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	60fb      	str	r3, [r7, #12]
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop
 8005848:	e7fd      	b.n	8005846 <prvDeleteTCB+0x5e>
	}
 800584a:	bf00      	nop
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800585a:	4b0c      	ldr	r3, [pc, #48]	@ (800588c <prvResetNextTaskUnblockTime+0x38>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d104      	bne.n	800586e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005864:	4b0a      	ldr	r3, [pc, #40]	@ (8005890 <prvResetNextTaskUnblockTime+0x3c>)
 8005866:	f04f 32ff 	mov.w	r2, #4294967295
 800586a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800586c:	e008      	b.n	8005880 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800586e:	4b07      	ldr	r3, [pc, #28]	@ (800588c <prvResetNextTaskUnblockTime+0x38>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	4a04      	ldr	r2, [pc, #16]	@ (8005890 <prvResetNextTaskUnblockTime+0x3c>)
 800587e:	6013      	str	r3, [r2, #0]
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	200011ac 	.word	0x200011ac
 8005890:	20001214 	.word	0x20001214

08005894 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800589a:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <xTaskGetSchedulerState+0x34>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d102      	bne.n	80058a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058a2:	2301      	movs	r3, #1
 80058a4:	607b      	str	r3, [r7, #4]
 80058a6:	e008      	b.n	80058ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058a8:	4b08      	ldr	r3, [pc, #32]	@ (80058cc <xTaskGetSchedulerState+0x38>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d102      	bne.n	80058b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058b0:	2302      	movs	r3, #2
 80058b2:	607b      	str	r3, [r7, #4]
 80058b4:	e001      	b.n	80058ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058b6:	2300      	movs	r3, #0
 80058b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058ba:	687b      	ldr	r3, [r7, #4]
	}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	20001200 	.word	0x20001200
 80058cc:	2000121c 	.word	0x2000121c

080058d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058dc:	2300      	movs	r3, #0
 80058de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d058      	beq.n	8005998 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80058e6:	4b2f      	ldr	r3, [pc, #188]	@ (80059a4 <xTaskPriorityDisinherit+0xd4>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d00b      	beq.n	8005908 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	60fb      	str	r3, [r7, #12]
}
 8005902:	bf00      	nop
 8005904:	bf00      	nop
 8005906:	e7fd      	b.n	8005904 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10b      	bne.n	8005928 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	60bb      	str	r3, [r7, #8]
}
 8005922:	bf00      	nop
 8005924:	bf00      	nop
 8005926:	e7fd      	b.n	8005924 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800592c:	1e5a      	subs	r2, r3, #1
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800593a:	429a      	cmp	r2, r3
 800593c:	d02c      	beq.n	8005998 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005942:	2b00      	cmp	r3, #0
 8005944:	d128      	bne.n	8005998 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	3304      	adds	r3, #4
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe fc26 	bl	800419c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005968:	4b0f      	ldr	r3, [pc, #60]	@ (80059a8 <xTaskPriorityDisinherit+0xd8>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	429a      	cmp	r2, r3
 800596e:	d903      	bls.n	8005978 <xTaskPriorityDisinherit+0xa8>
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005974:	4a0c      	ldr	r2, [pc, #48]	@ (80059a8 <xTaskPriorityDisinherit+0xd8>)
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800597c:	4613      	mov	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4a09      	ldr	r2, [pc, #36]	@ (80059ac <xTaskPriorityDisinherit+0xdc>)
 8005986:	441a      	add	r2, r3
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	3304      	adds	r3, #4
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f7fe fba7 	bl	80040e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005994:	2301      	movs	r3, #1
 8005996:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005998:	697b      	ldr	r3, [r7, #20]
	}
 800599a:	4618      	mov	r0, r3
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20000d20 	.word	0x20000d20
 80059a8:	200011fc 	.word	0x200011fc
 80059ac:	20000d24 	.word	0x20000d24

080059b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059ba:	4b21      	ldr	r3, [pc, #132]	@ (8005a40 <prvAddCurrentTaskToDelayedList+0x90>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059c0:	4b20      	ldr	r3, [pc, #128]	@ (8005a44 <prvAddCurrentTaskToDelayedList+0x94>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3304      	adds	r3, #4
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fe fbe8 	bl	800419c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d2:	d10a      	bne.n	80059ea <prvAddCurrentTaskToDelayedList+0x3a>
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059da:	4b1a      	ldr	r3, [pc, #104]	@ (8005a44 <prvAddCurrentTaskToDelayedList+0x94>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3304      	adds	r3, #4
 80059e0:	4619      	mov	r1, r3
 80059e2:	4819      	ldr	r0, [pc, #100]	@ (8005a48 <prvAddCurrentTaskToDelayedList+0x98>)
 80059e4:	f7fe fb7d 	bl	80040e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80059e8:	e026      	b.n	8005a38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4413      	add	r3, r2
 80059f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80059f2:	4b14      	ldr	r3, [pc, #80]	@ (8005a44 <prvAddCurrentTaskToDelayedList+0x94>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d209      	bcs.n	8005a16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a02:	4b12      	ldr	r3, [pc, #72]	@ (8005a4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	4b0f      	ldr	r3, [pc, #60]	@ (8005a44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4610      	mov	r0, r2
 8005a10:	f7fe fb8b 	bl	800412a <vListInsert>
}
 8005a14:	e010      	b.n	8005a38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a16:	4b0e      	ldr	r3, [pc, #56]	@ (8005a50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4619      	mov	r1, r3
 8005a22:	4610      	mov	r0, r2
 8005a24:	f7fe fb81 	bl	800412a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a28:	4b0a      	ldr	r3, [pc, #40]	@ (8005a54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d202      	bcs.n	8005a38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a32:	4a08      	ldr	r2, [pc, #32]	@ (8005a54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	6013      	str	r3, [r2, #0]
}
 8005a38:	bf00      	nop
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	200011f8 	.word	0x200011f8
 8005a44:	20000d20 	.word	0x20000d20
 8005a48:	200011e0 	.word	0x200011e0
 8005a4c:	200011b0 	.word	0x200011b0
 8005a50:	200011ac 	.word	0x200011ac
 8005a54:	20001214 	.word	0x20001214

08005a58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08a      	sub	sp, #40	@ 0x28
 8005a5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a62:	f000 fb13 	bl	800608c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a66:	4b1d      	ldr	r3, [pc, #116]	@ (8005adc <xTimerCreateTimerTask+0x84>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d021      	beq.n	8005ab2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a76:	1d3a      	adds	r2, r7, #4
 8005a78:	f107 0108 	add.w	r1, r7, #8
 8005a7c:	f107 030c 	add.w	r3, r7, #12
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fe fae7 	bl	8004054 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	9202      	str	r2, [sp, #8]
 8005a8e:	9301      	str	r3, [sp, #4]
 8005a90:	2302      	movs	r3, #2
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	2300      	movs	r3, #0
 8005a96:	460a      	mov	r2, r1
 8005a98:	4911      	ldr	r1, [pc, #68]	@ (8005ae0 <xTimerCreateTimerTask+0x88>)
 8005a9a:	4812      	ldr	r0, [pc, #72]	@ (8005ae4 <xTimerCreateTimerTask+0x8c>)
 8005a9c:	f7ff f8a2 	bl	8004be4 <xTaskCreateStatic>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	4a11      	ldr	r2, [pc, #68]	@ (8005ae8 <xTimerCreateTimerTask+0x90>)
 8005aa4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005aa6:	4b10      	ldr	r3, [pc, #64]	@ (8005ae8 <xTimerCreateTimerTask+0x90>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10b      	bne.n	8005ad0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005abc:	f383 8811 	msr	BASEPRI, r3
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	613b      	str	r3, [r7, #16]
}
 8005aca:	bf00      	nop
 8005acc:	bf00      	nop
 8005ace:	e7fd      	b.n	8005acc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ad0:	697b      	ldr	r3, [r7, #20]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20001250 	.word	0x20001250
 8005ae0:	080073b8 	.word	0x080073b8
 8005ae4:	08005c25 	.word	0x08005c25
 8005ae8:	20001254 	.word	0x20001254

08005aec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08a      	sub	sp, #40	@ 0x28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
 8005af8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10b      	bne.n	8005b1c <xTimerGenericCommand+0x30>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	623b      	str	r3, [r7, #32]
}
 8005b16:	bf00      	nop
 8005b18:	bf00      	nop
 8005b1a:	e7fd      	b.n	8005b18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b1c:	4b19      	ldr	r3, [pc, #100]	@ (8005b84 <xTimerGenericCommand+0x98>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d02a      	beq.n	8005b7a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b05      	cmp	r3, #5
 8005b34:	dc18      	bgt.n	8005b68 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b36:	f7ff fead 	bl	8005894 <xTaskGetSchedulerState>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d109      	bne.n	8005b54 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b40:	4b10      	ldr	r3, [pc, #64]	@ (8005b84 <xTimerGenericCommand+0x98>)
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	f107 0110 	add.w	r1, r7, #16
 8005b48:	2300      	movs	r3, #0
 8005b4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b4c:	f7fe fc5a 	bl	8004404 <xQueueGenericSend>
 8005b50:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b52:	e012      	b.n	8005b7a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b54:	4b0b      	ldr	r3, [pc, #44]	@ (8005b84 <xTimerGenericCommand+0x98>)
 8005b56:	6818      	ldr	r0, [r3, #0]
 8005b58:	f107 0110 	add.w	r1, r7, #16
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f7fe fc50 	bl	8004404 <xQueueGenericSend>
 8005b64:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b66:	e008      	b.n	8005b7a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b68:	4b06      	ldr	r3, [pc, #24]	@ (8005b84 <xTimerGenericCommand+0x98>)
 8005b6a:	6818      	ldr	r0, [r3, #0]
 8005b6c:	f107 0110 	add.w	r1, r7, #16
 8005b70:	2300      	movs	r3, #0
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	f7fe fd48 	bl	8004608 <xQueueGenericSendFromISR>
 8005b78:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3728      	adds	r7, #40	@ 0x28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	20001250 	.word	0x20001250

08005b88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b92:	4b23      	ldr	r3, [pc, #140]	@ (8005c20 <prvProcessExpiredTimer+0x98>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fe fafb 	bl	800419c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d023      	beq.n	8005bfc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	699a      	ldr	r2, [r3, #24]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	18d1      	adds	r1, r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	6978      	ldr	r0, [r7, #20]
 8005bc2:	f000 f8d5 	bl	8005d70 <prvInsertTimerInActiveList>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d020      	beq.n	8005c0e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bcc:	2300      	movs	r3, #0
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	6978      	ldr	r0, [r7, #20]
 8005bd8:	f7ff ff88 	bl	8005aec <xTimerGenericCommand>
 8005bdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d114      	bne.n	8005c0e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	60fb      	str	r3, [r7, #12]
}
 8005bf6:	bf00      	nop
 8005bf8:	bf00      	nop
 8005bfa:	e7fd      	b.n	8005bf8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c02:	f023 0301 	bic.w	r3, r3, #1
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	6978      	ldr	r0, [r7, #20]
 8005c14:	4798      	blx	r3
}
 8005c16:	bf00      	nop
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20001248 	.word	0x20001248

08005c24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c2c:	f107 0308 	add.w	r3, r7, #8
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 f859 	bl	8005ce8 <prvGetNextExpireTime>
 8005c36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f805 	bl	8005c4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c42:	f000 f8d7 	bl	8005df4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c46:	bf00      	nop
 8005c48:	e7f0      	b.n	8005c2c <prvTimerTask+0x8>
	...

08005c4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c56:	f7ff fa29 	bl	80050ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c5a:	f107 0308 	add.w	r3, r7, #8
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 f866 	bl	8005d30 <prvSampleTimeNow>
 8005c64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d130      	bne.n	8005cce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10a      	bne.n	8005c88 <prvProcessTimerOrBlockTask+0x3c>
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d806      	bhi.n	8005c88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c7a:	f7ff fa25 	bl	80050c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c7e:	68f9      	ldr	r1, [r7, #12]
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff ff81 	bl	8005b88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c86:	e024      	b.n	8005cd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d008      	beq.n	8005ca0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c8e:	4b13      	ldr	r3, [pc, #76]	@ (8005cdc <prvProcessTimerOrBlockTask+0x90>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <prvProcessTimerOrBlockTask+0x50>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e000      	b.n	8005c9e <prvProcessTimerOrBlockTask+0x52>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8005ce0 <prvProcessTimerOrBlockTask+0x94>)
 8005ca2:	6818      	ldr	r0, [r3, #0]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	4619      	mov	r1, r3
 8005cae:	f7fe ff65 	bl	8004b7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005cb2:	f7ff fa09 	bl	80050c8 <xTaskResumeAll>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005cbc:	4b09      	ldr	r3, [pc, #36]	@ (8005ce4 <prvProcessTimerOrBlockTask+0x98>)
 8005cbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	f3bf 8f6f 	isb	sy
}
 8005ccc:	e001      	b.n	8005cd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005cce:	f7ff f9fb 	bl	80050c8 <xTaskResumeAll>
}
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	2000124c 	.word	0x2000124c
 8005ce0:	20001250 	.word	0x20001250
 8005ce4:	e000ed04 	.word	0xe000ed04

08005ce8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8005d2c <prvGetNextExpireTime+0x44>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <prvGetNextExpireTime+0x16>
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	e000      	b.n	8005d00 <prvGetNextExpireTime+0x18>
 8005cfe:	2200      	movs	r2, #0
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d105      	bne.n	8005d18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d0c:	4b07      	ldr	r3, [pc, #28]	@ (8005d2c <prvGetNextExpireTime+0x44>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	e001      	b.n	8005d1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	20001248 	.word	0x20001248

08005d30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d38:	f7ff fa64 	bl	8005204 <xTaskGetTickCount>
 8005d3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d6c <prvSampleTimeNow+0x3c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d205      	bcs.n	8005d54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d48:	f000 f93a 	bl	8005fc0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	e002      	b.n	8005d5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d5a:	4a04      	ldr	r2, [pc, #16]	@ (8005d6c <prvSampleTimeNow+0x3c>)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d60:	68fb      	ldr	r3, [r7, #12]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20001258 	.word	0x20001258

08005d70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d812      	bhi.n	8005dbc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	1ad2      	subs	r2, r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d302      	bcc.n	8005daa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005da4:	2301      	movs	r3, #1
 8005da6:	617b      	str	r3, [r7, #20]
 8005da8:	e01b      	b.n	8005de2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005daa:	4b10      	ldr	r3, [pc, #64]	@ (8005dec <prvInsertTimerInActiveList+0x7c>)
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	3304      	adds	r3, #4
 8005db2:	4619      	mov	r1, r3
 8005db4:	4610      	mov	r0, r2
 8005db6:	f7fe f9b8 	bl	800412a <vListInsert>
 8005dba:	e012      	b.n	8005de2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d206      	bcs.n	8005dd2 <prvInsertTimerInActiveList+0x62>
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d302      	bcc.n	8005dd2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	617b      	str	r3, [r7, #20]
 8005dd0:	e007      	b.n	8005de2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dd2:	4b07      	ldr	r3, [pc, #28]	@ (8005df0 <prvInsertTimerInActiveList+0x80>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4610      	mov	r0, r2
 8005dde:	f7fe f9a4 	bl	800412a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005de2:	697b      	ldr	r3, [r7, #20]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	2000124c 	.word	0x2000124c
 8005df0:	20001248 	.word	0x20001248

08005df4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08e      	sub	sp, #56	@ 0x38
 8005df8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005dfa:	e0ce      	b.n	8005f9a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	da19      	bge.n	8005e36 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e02:	1d3b      	adds	r3, r7, #4
 8005e04:	3304      	adds	r3, #4
 8005e06:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10b      	bne.n	8005e26 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	61fb      	str	r3, [r7, #28]
}
 8005e20:	bf00      	nop
 8005e22:	bf00      	nop
 8005e24:	e7fd      	b.n	8005e22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e2c:	6850      	ldr	r0, [r2, #4]
 8005e2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e30:	6892      	ldr	r2, [r2, #8]
 8005e32:	4611      	mov	r1, r2
 8005e34:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f2c0 80ae 	blt.w	8005f9a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d004      	beq.n	8005e54 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fe f9a4 	bl	800419c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e54:	463b      	mov	r3, r7
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7ff ff6a 	bl	8005d30 <prvSampleTimeNow>
 8005e5c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b09      	cmp	r3, #9
 8005e62:	f200 8097 	bhi.w	8005f94 <prvProcessReceivedCommands+0x1a0>
 8005e66:	a201      	add	r2, pc, #4	@ (adr r2, 8005e6c <prvProcessReceivedCommands+0x78>)
 8005e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6c:	08005e95 	.word	0x08005e95
 8005e70:	08005e95 	.word	0x08005e95
 8005e74:	08005e95 	.word	0x08005e95
 8005e78:	08005f0b 	.word	0x08005f0b
 8005e7c:	08005f1f 	.word	0x08005f1f
 8005e80:	08005f6b 	.word	0x08005f6b
 8005e84:	08005e95 	.word	0x08005e95
 8005e88:	08005e95 	.word	0x08005e95
 8005e8c:	08005f0b 	.word	0x08005f0b
 8005e90:	08005f1f 	.word	0x08005f1f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e9a:	f043 0301 	orr.w	r3, r3, #1
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	18d1      	adds	r1, r2, r3
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eb4:	f7ff ff5c 	bl	8005d70 <prvInsertTimerInActiveList>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d06c      	beq.n	8005f98 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ec4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d061      	beq.n	8005f98 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	441a      	add	r2, r3
 8005edc:	2300      	movs	r3, #0
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ee6:	f7ff fe01 	bl	8005aec <xTimerGenericCommand>
 8005eea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d152      	bne.n	8005f98 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	61bb      	str	r3, [r7, #24]
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop
 8005f08:	e7fd      	b.n	8005f06 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f10:	f023 0301 	bic.w	r3, r3, #1
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005f1c:	e03d      	b.n	8005f9a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f24:	f043 0301 	orr.w	r3, r3, #1
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f34:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10b      	bne.n	8005f56 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	617b      	str	r3, [r7, #20]
}
 8005f50:	bf00      	nop
 8005f52:	bf00      	nop
 8005f54:	e7fd      	b.n	8005f52 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f58:	699a      	ldr	r2, [r3, #24]
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	18d1      	adds	r1, r2, r3
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f64:	f7ff ff04 	bl	8005d70 <prvInsertTimerInActiveList>
					break;
 8005f68:	e017      	b.n	8005f9a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d103      	bne.n	8005f80 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005f78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f7a:	f000 fbe5 	bl	8006748 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f7e:	e00c      	b.n	8005f9a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f86:	f023 0301 	bic.w	r3, r3, #1
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005f92:	e002      	b.n	8005f9a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005f94:	bf00      	nop
 8005f96:	e000      	b.n	8005f9a <prvProcessReceivedCommands+0x1a6>
					break;
 8005f98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f9a:	4b08      	ldr	r3, [pc, #32]	@ (8005fbc <prvProcessReceivedCommands+0x1c8>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	1d39      	adds	r1, r7, #4
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fe fbce 	bl	8004744 <xQueueReceive>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f47f af26 	bne.w	8005dfc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
 8005fb4:	3730      	adds	r7, #48	@ 0x30
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	20001250 	.word	0x20001250

08005fc0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fc6:	e049      	b.n	800605c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8006084 <prvSwitchTimerLists+0xc4>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd2:	4b2c      	ldr	r3, [pc, #176]	@ (8006084 <prvSwitchTimerLists+0xc4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3304      	adds	r3, #4
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fe f8db 	bl	800419c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d02f      	beq.n	800605c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	4413      	add	r3, r2
 8006004:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	429a      	cmp	r2, r3
 800600c:	d90e      	bls.n	800602c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800601a:	4b1a      	ldr	r3, [pc, #104]	@ (8006084 <prvSwitchTimerLists+0xc4>)
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3304      	adds	r3, #4
 8006022:	4619      	mov	r1, r3
 8006024:	4610      	mov	r0, r2
 8006026:	f7fe f880 	bl	800412a <vListInsert>
 800602a:	e017      	b.n	800605c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800602c:	2300      	movs	r3, #0
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	2300      	movs	r3, #0
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	2100      	movs	r1, #0
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f7ff fd58 	bl	8005aec <xTimerGenericCommand>
 800603c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10b      	bne.n	800605c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	603b      	str	r3, [r7, #0]
}
 8006056:	bf00      	nop
 8006058:	bf00      	nop
 800605a:	e7fd      	b.n	8006058 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800605c:	4b09      	ldr	r3, [pc, #36]	@ (8006084 <prvSwitchTimerLists+0xc4>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1b0      	bne.n	8005fc8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006066:	4b07      	ldr	r3, [pc, #28]	@ (8006084 <prvSwitchTimerLists+0xc4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800606c:	4b06      	ldr	r3, [pc, #24]	@ (8006088 <prvSwitchTimerLists+0xc8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a04      	ldr	r2, [pc, #16]	@ (8006084 <prvSwitchTimerLists+0xc4>)
 8006072:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006074:	4a04      	ldr	r2, [pc, #16]	@ (8006088 <prvSwitchTimerLists+0xc8>)
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	6013      	str	r3, [r2, #0]
}
 800607a:	bf00      	nop
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20001248 	.word	0x20001248
 8006088:	2000124c 	.word	0x2000124c

0800608c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006092:	f000 f969 	bl	8006368 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006096:	4b15      	ldr	r3, [pc, #84]	@ (80060ec <prvCheckForValidListAndQueue+0x60>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d120      	bne.n	80060e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800609e:	4814      	ldr	r0, [pc, #80]	@ (80060f0 <prvCheckForValidListAndQueue+0x64>)
 80060a0:	f7fd fff2 	bl	8004088 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80060a4:	4813      	ldr	r0, [pc, #76]	@ (80060f4 <prvCheckForValidListAndQueue+0x68>)
 80060a6:	f7fd ffef 	bl	8004088 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80060aa:	4b13      	ldr	r3, [pc, #76]	@ (80060f8 <prvCheckForValidListAndQueue+0x6c>)
 80060ac:	4a10      	ldr	r2, [pc, #64]	@ (80060f0 <prvCheckForValidListAndQueue+0x64>)
 80060ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80060b0:	4b12      	ldr	r3, [pc, #72]	@ (80060fc <prvCheckForValidListAndQueue+0x70>)
 80060b2:	4a10      	ldr	r2, [pc, #64]	@ (80060f4 <prvCheckForValidListAndQueue+0x68>)
 80060b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80060b6:	2300      	movs	r3, #0
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	4b11      	ldr	r3, [pc, #68]	@ (8006100 <prvCheckForValidListAndQueue+0x74>)
 80060bc:	4a11      	ldr	r2, [pc, #68]	@ (8006104 <prvCheckForValidListAndQueue+0x78>)
 80060be:	2110      	movs	r1, #16
 80060c0:	200a      	movs	r0, #10
 80060c2:	f7fe f8ff 	bl	80042c4 <xQueueGenericCreateStatic>
 80060c6:	4603      	mov	r3, r0
 80060c8:	4a08      	ldr	r2, [pc, #32]	@ (80060ec <prvCheckForValidListAndQueue+0x60>)
 80060ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80060cc:	4b07      	ldr	r3, [pc, #28]	@ (80060ec <prvCheckForValidListAndQueue+0x60>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d005      	beq.n	80060e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80060d4:	4b05      	ldr	r3, [pc, #20]	@ (80060ec <prvCheckForValidListAndQueue+0x60>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	490b      	ldr	r1, [pc, #44]	@ (8006108 <prvCheckForValidListAndQueue+0x7c>)
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fe fd24 	bl	8004b28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060e0:	f000 f974 	bl	80063cc <vPortExitCritical>
}
 80060e4:	bf00      	nop
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20001250 	.word	0x20001250
 80060f0:	20001220 	.word	0x20001220
 80060f4:	20001234 	.word	0x20001234
 80060f8:	20001248 	.word	0x20001248
 80060fc:	2000124c 	.word	0x2000124c
 8006100:	200012fc 	.word	0x200012fc
 8006104:	2000125c 	.word	0x2000125c
 8006108:	080073c0 	.word	0x080073c0

0800610c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3b04      	subs	r3, #4
 800611c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3b04      	subs	r3, #4
 800612a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f023 0201 	bic.w	r2, r3, #1
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	3b04      	subs	r3, #4
 800613a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800613c:	4a0c      	ldr	r2, [pc, #48]	@ (8006170 <pxPortInitialiseStack+0x64>)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3b14      	subs	r3, #20
 8006146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3b04      	subs	r3, #4
 8006152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f06f 0202 	mvn.w	r2, #2
 800615a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3b20      	subs	r3, #32
 8006160:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006162:	68fb      	ldr	r3, [r7, #12]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	08006175 	.word	0x08006175

08006174 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800617a:	2300      	movs	r3, #0
 800617c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800617e:	4b13      	ldr	r3, [pc, #76]	@ (80061cc <prvTaskExitError+0x58>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006186:	d00b      	beq.n	80061a0 <prvTaskExitError+0x2c>
	__asm volatile
 8006188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618c:	f383 8811 	msr	BASEPRI, r3
 8006190:	f3bf 8f6f 	isb	sy
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	60fb      	str	r3, [r7, #12]
}
 800619a:	bf00      	nop
 800619c:	bf00      	nop
 800619e:	e7fd      	b.n	800619c <prvTaskExitError+0x28>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	60bb      	str	r3, [r7, #8]
}
 80061b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061b4:	bf00      	nop
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d0fc      	beq.n	80061b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061bc:	bf00      	nop
 80061be:	bf00      	nop
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	20000014 	.word	0x20000014

080061d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061d0:	4b07      	ldr	r3, [pc, #28]	@ (80061f0 <pxCurrentTCBConst2>)
 80061d2:	6819      	ldr	r1, [r3, #0]
 80061d4:	6808      	ldr	r0, [r1, #0]
 80061d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061da:	f380 8809 	msr	PSP, r0
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f04f 0000 	mov.w	r0, #0
 80061e6:	f380 8811 	msr	BASEPRI, r0
 80061ea:	4770      	bx	lr
 80061ec:	f3af 8000 	nop.w

080061f0 <pxCurrentTCBConst2>:
 80061f0:	20000d20 	.word	0x20000d20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061f4:	bf00      	nop
 80061f6:	bf00      	nop

080061f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80061f8:	4808      	ldr	r0, [pc, #32]	@ (800621c <prvPortStartFirstTask+0x24>)
 80061fa:	6800      	ldr	r0, [r0, #0]
 80061fc:	6800      	ldr	r0, [r0, #0]
 80061fe:	f380 8808 	msr	MSP, r0
 8006202:	f04f 0000 	mov.w	r0, #0
 8006206:	f380 8814 	msr	CONTROL, r0
 800620a:	b662      	cpsie	i
 800620c:	b661      	cpsie	f
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	df00      	svc	0
 8006218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800621a:	bf00      	nop
 800621c:	e000ed08 	.word	0xe000ed08

08006220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006226:	4b47      	ldr	r3, [pc, #284]	@ (8006344 <xPortStartScheduler+0x124>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a47      	ldr	r2, [pc, #284]	@ (8006348 <xPortStartScheduler+0x128>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d10b      	bne.n	8006248 <xPortStartScheduler+0x28>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	613b      	str	r3, [r7, #16]
}
 8006242:	bf00      	nop
 8006244:	bf00      	nop
 8006246:	e7fd      	b.n	8006244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006248:	4b3e      	ldr	r3, [pc, #248]	@ (8006344 <xPortStartScheduler+0x124>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a3f      	ldr	r2, [pc, #252]	@ (800634c <xPortStartScheduler+0x12c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d10b      	bne.n	800626a <xPortStartScheduler+0x4a>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	60fb      	str	r3, [r7, #12]
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop
 8006268:	e7fd      	b.n	8006266 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800626a:	4b39      	ldr	r3, [pc, #228]	@ (8006350 <xPortStartScheduler+0x130>)
 800626c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	b2db      	uxtb	r3, r3
 8006274:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	22ff      	movs	r2, #255	@ 0xff
 800627a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	b2db      	uxtb	r3, r3
 8006288:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800628c:	b2da      	uxtb	r2, r3
 800628e:	4b31      	ldr	r3, [pc, #196]	@ (8006354 <xPortStartScheduler+0x134>)
 8006290:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006292:	4b31      	ldr	r3, [pc, #196]	@ (8006358 <xPortStartScheduler+0x138>)
 8006294:	2207      	movs	r2, #7
 8006296:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006298:	e009      	b.n	80062ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800629a:	4b2f      	ldr	r3, [pc, #188]	@ (8006358 <xPortStartScheduler+0x138>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3b01      	subs	r3, #1
 80062a0:	4a2d      	ldr	r2, [pc, #180]	@ (8006358 <xPortStartScheduler+0x138>)
 80062a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062ae:	78fb      	ldrb	r3, [r7, #3]
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062b6:	2b80      	cmp	r3, #128	@ 0x80
 80062b8:	d0ef      	beq.n	800629a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062ba:	4b27      	ldr	r3, [pc, #156]	@ (8006358 <xPortStartScheduler+0x138>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f1c3 0307 	rsb	r3, r3, #7
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d00b      	beq.n	80062de <xPortStartScheduler+0xbe>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	60bb      	str	r3, [r7, #8]
}
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	e7fd      	b.n	80062da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062de:	4b1e      	ldr	r3, [pc, #120]	@ (8006358 <xPortStartScheduler+0x138>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006358 <xPortStartScheduler+0x138>)
 80062e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006358 <xPortStartScheduler+0x138>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062f0:	4a19      	ldr	r2, [pc, #100]	@ (8006358 <xPortStartScheduler+0x138>)
 80062f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062fc:	4b17      	ldr	r3, [pc, #92]	@ (800635c <xPortStartScheduler+0x13c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a16      	ldr	r2, [pc, #88]	@ (800635c <xPortStartScheduler+0x13c>)
 8006302:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006306:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006308:	4b14      	ldr	r3, [pc, #80]	@ (800635c <xPortStartScheduler+0x13c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a13      	ldr	r2, [pc, #76]	@ (800635c <xPortStartScheduler+0x13c>)
 800630e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006312:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006314:	f000 f8da 	bl	80064cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006318:	4b11      	ldr	r3, [pc, #68]	@ (8006360 <xPortStartScheduler+0x140>)
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800631e:	f000 f8f9 	bl	8006514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006322:	4b10      	ldr	r3, [pc, #64]	@ (8006364 <xPortStartScheduler+0x144>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a0f      	ldr	r2, [pc, #60]	@ (8006364 <xPortStartScheduler+0x144>)
 8006328:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800632c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800632e:	f7ff ff63 	bl	80061f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006332:	f7ff f831 	bl	8005398 <vTaskSwitchContext>
	prvTaskExitError();
 8006336:	f7ff ff1d 	bl	8006174 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	e000ed00 	.word	0xe000ed00
 8006348:	410fc271 	.word	0x410fc271
 800634c:	410fc270 	.word	0x410fc270
 8006350:	e000e400 	.word	0xe000e400
 8006354:	2000134c 	.word	0x2000134c
 8006358:	20001350 	.word	0x20001350
 800635c:	e000ed20 	.word	0xe000ed20
 8006360:	20000014 	.word	0x20000014
 8006364:	e000ef34 	.word	0xe000ef34

08006368 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	607b      	str	r3, [r7, #4]
}
 8006380:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006382:	4b10      	ldr	r3, [pc, #64]	@ (80063c4 <vPortEnterCritical+0x5c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3301      	adds	r3, #1
 8006388:	4a0e      	ldr	r2, [pc, #56]	@ (80063c4 <vPortEnterCritical+0x5c>)
 800638a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800638c:	4b0d      	ldr	r3, [pc, #52]	@ (80063c4 <vPortEnterCritical+0x5c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d110      	bne.n	80063b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006394:	4b0c      	ldr	r3, [pc, #48]	@ (80063c8 <vPortEnterCritical+0x60>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00b      	beq.n	80063b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	603b      	str	r3, [r7, #0]
}
 80063b0:	bf00      	nop
 80063b2:	bf00      	nop
 80063b4:	e7fd      	b.n	80063b2 <vPortEnterCritical+0x4a>
	}
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	20000014 	.word	0x20000014
 80063c8:	e000ed04 	.word	0xe000ed04

080063cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063d2:	4b12      	ldr	r3, [pc, #72]	@ (800641c <vPortExitCritical+0x50>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10b      	bne.n	80063f2 <vPortExitCritical+0x26>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	607b      	str	r3, [r7, #4]
}
 80063ec:	bf00      	nop
 80063ee:	bf00      	nop
 80063f0:	e7fd      	b.n	80063ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80063f2:	4b0a      	ldr	r3, [pc, #40]	@ (800641c <vPortExitCritical+0x50>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	4a08      	ldr	r2, [pc, #32]	@ (800641c <vPortExitCritical+0x50>)
 80063fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063fc:	4b07      	ldr	r3, [pc, #28]	@ (800641c <vPortExitCritical+0x50>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d105      	bne.n	8006410 <vPortExitCritical+0x44>
 8006404:	2300      	movs	r3, #0
 8006406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	f383 8811 	msr	BASEPRI, r3
}
 800640e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	20000014 	.word	0x20000014

08006420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006420:	f3ef 8009 	mrs	r0, PSP
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	4b15      	ldr	r3, [pc, #84]	@ (8006480 <pxCurrentTCBConst>)
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	f01e 0f10 	tst.w	lr, #16
 8006430:	bf08      	it	eq
 8006432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800643a:	6010      	str	r0, [r2, #0]
 800643c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006440:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006444:	f380 8811 	msr	BASEPRI, r0
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f7fe ffa2 	bl	8005398 <vTaskSwitchContext>
 8006454:	f04f 0000 	mov.w	r0, #0
 8006458:	f380 8811 	msr	BASEPRI, r0
 800645c:	bc09      	pop	{r0, r3}
 800645e:	6819      	ldr	r1, [r3, #0]
 8006460:	6808      	ldr	r0, [r1, #0]
 8006462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006466:	f01e 0f10 	tst.w	lr, #16
 800646a:	bf08      	it	eq
 800646c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006470:	f380 8809 	msr	PSP, r0
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	f3af 8000 	nop.w

08006480 <pxCurrentTCBConst>:
 8006480:	20000d20 	.word	0x20000d20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop

08006488 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	607b      	str	r3, [r7, #4]
}
 80064a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80064a2:	f7fe febf 	bl	8005224 <xTaskIncrementTick>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064ac:	4b06      	ldr	r3, [pc, #24]	@ (80064c8 <xPortSysTickHandler+0x40>)
 80064ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	2300      	movs	r3, #0
 80064b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	f383 8811 	msr	BASEPRI, r3
}
 80064be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80064c0:	bf00      	nop
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	e000ed04 	.word	0xe000ed04

080064cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006500 <vPortSetupTimerInterrupt+0x34>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006504 <vPortSetupTimerInterrupt+0x38>)
 80064d8:	2200      	movs	r2, #0
 80064da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006508 <vPortSetupTimerInterrupt+0x3c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a0a      	ldr	r2, [pc, #40]	@ (800650c <vPortSetupTimerInterrupt+0x40>)
 80064e2:	fba2 2303 	umull	r2, r3, r2, r3
 80064e6:	099b      	lsrs	r3, r3, #6
 80064e8:	4a09      	ldr	r2, [pc, #36]	@ (8006510 <vPortSetupTimerInterrupt+0x44>)
 80064ea:	3b01      	subs	r3, #1
 80064ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064ee:	4b04      	ldr	r3, [pc, #16]	@ (8006500 <vPortSetupTimerInterrupt+0x34>)
 80064f0:	2207      	movs	r2, #7
 80064f2:	601a      	str	r2, [r3, #0]
}
 80064f4:	bf00      	nop
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	e000e010 	.word	0xe000e010
 8006504:	e000e018 	.word	0xe000e018
 8006508:	20000008 	.word	0x20000008
 800650c:	10624dd3 	.word	0x10624dd3
 8006510:	e000e014 	.word	0xe000e014

08006514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006514:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006524 <vPortEnableVFP+0x10>
 8006518:	6801      	ldr	r1, [r0, #0]
 800651a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800651e:	6001      	str	r1, [r0, #0]
 8006520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006522:	bf00      	nop
 8006524:	e000ed88 	.word	0xe000ed88

08006528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800652e:	f3ef 8305 	mrs	r3, IPSR
 8006532:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b0f      	cmp	r3, #15
 8006538:	d915      	bls.n	8006566 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800653a:	4a18      	ldr	r2, [pc, #96]	@ (800659c <vPortValidateInterruptPriority+0x74>)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006544:	4b16      	ldr	r3, [pc, #88]	@ (80065a0 <vPortValidateInterruptPriority+0x78>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	7afa      	ldrb	r2, [r7, #11]
 800654a:	429a      	cmp	r2, r3
 800654c:	d20b      	bcs.n	8006566 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	607b      	str	r3, [r7, #4]
}
 8006560:	bf00      	nop
 8006562:	bf00      	nop
 8006564:	e7fd      	b.n	8006562 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006566:	4b0f      	ldr	r3, [pc, #60]	@ (80065a4 <vPortValidateInterruptPriority+0x7c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800656e:	4b0e      	ldr	r3, [pc, #56]	@ (80065a8 <vPortValidateInterruptPriority+0x80>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	429a      	cmp	r2, r3
 8006574:	d90b      	bls.n	800658e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800657a:	f383 8811 	msr	BASEPRI, r3
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	603b      	str	r3, [r7, #0]
}
 8006588:	bf00      	nop
 800658a:	bf00      	nop
 800658c:	e7fd      	b.n	800658a <vPortValidateInterruptPriority+0x62>
	}
 800658e:	bf00      	nop
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	e000e3f0 	.word	0xe000e3f0
 80065a0:	2000134c 	.word	0x2000134c
 80065a4:	e000ed0c 	.word	0xe000ed0c
 80065a8:	20001350 	.word	0x20001350

080065ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08a      	sub	sp, #40	@ 0x28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80065b4:	2300      	movs	r3, #0
 80065b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80065b8:	f7fe fd78 	bl	80050ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80065bc:	4b5c      	ldr	r3, [pc, #368]	@ (8006730 <pvPortMalloc+0x184>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80065c4:	f000 f924 	bl	8006810 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065c8:	4b5a      	ldr	r3, [pc, #360]	@ (8006734 <pvPortMalloc+0x188>)
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4013      	ands	r3, r2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f040 8095 	bne.w	8006700 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d01e      	beq.n	800661a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80065dc:	2208      	movs	r2, #8
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4413      	add	r3, r2
 80065e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d015      	beq.n	800661a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f023 0307 	bic.w	r3, r3, #7
 80065f4:	3308      	adds	r3, #8
 80065f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f003 0307 	and.w	r3, r3, #7
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00b      	beq.n	800661a <pvPortMalloc+0x6e>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	617b      	str	r3, [r7, #20]
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop
 8006618:	e7fd      	b.n	8006616 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d06f      	beq.n	8006700 <pvPortMalloc+0x154>
 8006620:	4b45      	ldr	r3, [pc, #276]	@ (8006738 <pvPortMalloc+0x18c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	429a      	cmp	r2, r3
 8006628:	d86a      	bhi.n	8006700 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800662a:	4b44      	ldr	r3, [pc, #272]	@ (800673c <pvPortMalloc+0x190>)
 800662c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800662e:	4b43      	ldr	r3, [pc, #268]	@ (800673c <pvPortMalloc+0x190>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006634:	e004      	b.n	8006640 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006638:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800663a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	429a      	cmp	r2, r3
 8006648:	d903      	bls.n	8006652 <pvPortMalloc+0xa6>
 800664a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1f1      	bne.n	8006636 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006652:	4b37      	ldr	r3, [pc, #220]	@ (8006730 <pvPortMalloc+0x184>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006658:	429a      	cmp	r2, r3
 800665a:	d051      	beq.n	8006700 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2208      	movs	r2, #8
 8006662:	4413      	add	r3, r2
 8006664:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800666e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	1ad2      	subs	r2, r2, r3
 8006676:	2308      	movs	r3, #8
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	429a      	cmp	r2, r3
 800667c:	d920      	bls.n	80066c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800667e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4413      	add	r3, r2
 8006684:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00b      	beq.n	80066a8 <pvPortMalloc+0xfc>
	__asm volatile
 8006690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	613b      	str	r3, [r7, #16]
}
 80066a2:	bf00      	nop
 80066a4:	bf00      	nop
 80066a6:	e7fd      	b.n	80066a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80066a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	1ad2      	subs	r2, r2, r3
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80066b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80066ba:	69b8      	ldr	r0, [r7, #24]
 80066bc:	f000 f90a 	bl	80068d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006738 <pvPortMalloc+0x18c>)
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006738 <pvPortMalloc+0x18c>)
 80066cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066ce:	4b1a      	ldr	r3, [pc, #104]	@ (8006738 <pvPortMalloc+0x18c>)
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006740 <pvPortMalloc+0x194>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d203      	bcs.n	80066e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066da:	4b17      	ldr	r3, [pc, #92]	@ (8006738 <pvPortMalloc+0x18c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a18      	ldr	r2, [pc, #96]	@ (8006740 <pvPortMalloc+0x194>)
 80066e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	4b13      	ldr	r3, [pc, #76]	@ (8006734 <pvPortMalloc+0x188>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	431a      	orrs	r2, r3
 80066ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f2:	2200      	movs	r2, #0
 80066f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80066f6:	4b13      	ldr	r3, [pc, #76]	@ (8006744 <pvPortMalloc+0x198>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3301      	adds	r3, #1
 80066fc:	4a11      	ldr	r2, [pc, #68]	@ (8006744 <pvPortMalloc+0x198>)
 80066fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006700:	f7fe fce2 	bl	80050c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00b      	beq.n	8006726 <pvPortMalloc+0x17a>
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	60fb      	str	r3, [r7, #12]
}
 8006720:	bf00      	nop
 8006722:	bf00      	nop
 8006724:	e7fd      	b.n	8006722 <pvPortMalloc+0x176>
	return pvReturn;
 8006726:	69fb      	ldr	r3, [r7, #28]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3728      	adds	r7, #40	@ 0x28
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	20004f5c 	.word	0x20004f5c
 8006734:	20004f70 	.word	0x20004f70
 8006738:	20004f60 	.word	0x20004f60
 800673c:	20004f54 	.word	0x20004f54
 8006740:	20004f64 	.word	0x20004f64
 8006744:	20004f68 	.word	0x20004f68

08006748 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d04f      	beq.n	80067fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800675a:	2308      	movs	r3, #8
 800675c:	425b      	negs	r3, r3
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	4413      	add	r3, r2
 8006762:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	4b25      	ldr	r3, [pc, #148]	@ (8006804 <vPortFree+0xbc>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4013      	ands	r3, r2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10b      	bne.n	800678e <vPortFree+0x46>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	60fb      	str	r3, [r7, #12]
}
 8006788:	bf00      	nop
 800678a:	bf00      	nop
 800678c:	e7fd      	b.n	800678a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00b      	beq.n	80067ae <vPortFree+0x66>
	__asm volatile
 8006796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	60bb      	str	r3, [r7, #8]
}
 80067a8:	bf00      	nop
 80067aa:	bf00      	nop
 80067ac:	e7fd      	b.n	80067aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	4b14      	ldr	r3, [pc, #80]	@ (8006804 <vPortFree+0xbc>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4013      	ands	r3, r2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d01e      	beq.n	80067fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d11a      	bne.n	80067fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006804 <vPortFree+0xbc>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	43db      	mvns	r3, r3
 80067ce:	401a      	ands	r2, r3
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80067d4:	f7fe fc6a 	bl	80050ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006808 <vPortFree+0xc0>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4413      	add	r3, r2
 80067e2:	4a09      	ldr	r2, [pc, #36]	@ (8006808 <vPortFree+0xc0>)
 80067e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067e6:	6938      	ldr	r0, [r7, #16]
 80067e8:	f000 f874 	bl	80068d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80067ec:	4b07      	ldr	r3, [pc, #28]	@ (800680c <vPortFree+0xc4>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3301      	adds	r3, #1
 80067f2:	4a06      	ldr	r2, [pc, #24]	@ (800680c <vPortFree+0xc4>)
 80067f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80067f6:	f7fe fc67 	bl	80050c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80067fa:	bf00      	nop
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	20004f70 	.word	0x20004f70
 8006808:	20004f60 	.word	0x20004f60
 800680c:	20004f6c 	.word	0x20004f6c

08006810 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006816:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800681a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800681c:	4b27      	ldr	r3, [pc, #156]	@ (80068bc <prvHeapInit+0xac>)
 800681e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00c      	beq.n	8006844 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3307      	adds	r3, #7
 800682e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0307 	bic.w	r3, r3, #7
 8006836:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	4a1f      	ldr	r2, [pc, #124]	@ (80068bc <prvHeapInit+0xac>)
 8006840:	4413      	add	r3, r2
 8006842:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006848:	4a1d      	ldr	r2, [pc, #116]	@ (80068c0 <prvHeapInit+0xb0>)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800684e:	4b1c      	ldr	r3, [pc, #112]	@ (80068c0 <prvHeapInit+0xb0>)
 8006850:	2200      	movs	r2, #0
 8006852:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	4413      	add	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800685c:	2208      	movs	r2, #8
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	1a9b      	subs	r3, r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0307 	bic.w	r3, r3, #7
 800686a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4a15      	ldr	r2, [pc, #84]	@ (80068c4 <prvHeapInit+0xb4>)
 8006870:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006872:	4b14      	ldr	r3, [pc, #80]	@ (80068c4 <prvHeapInit+0xb4>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2200      	movs	r2, #0
 8006878:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800687a:	4b12      	ldr	r3, [pc, #72]	@ (80068c4 <prvHeapInit+0xb4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	1ad2      	subs	r2, r2, r3
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006890:	4b0c      	ldr	r3, [pc, #48]	@ (80068c4 <prvHeapInit+0xb4>)
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	4a0a      	ldr	r2, [pc, #40]	@ (80068c8 <prvHeapInit+0xb8>)
 800689e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	4a09      	ldr	r2, [pc, #36]	@ (80068cc <prvHeapInit+0xbc>)
 80068a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80068a8:	4b09      	ldr	r3, [pc, #36]	@ (80068d0 <prvHeapInit+0xc0>)
 80068aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80068ae:	601a      	str	r2, [r3, #0]
}
 80068b0:	bf00      	nop
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	20001354 	.word	0x20001354
 80068c0:	20004f54 	.word	0x20004f54
 80068c4:	20004f5c 	.word	0x20004f5c
 80068c8:	20004f64 	.word	0x20004f64
 80068cc:	20004f60 	.word	0x20004f60
 80068d0:	20004f70 	.word	0x20004f70

080068d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80068dc:	4b28      	ldr	r3, [pc, #160]	@ (8006980 <prvInsertBlockIntoFreeList+0xac>)
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	e002      	b.n	80068e8 <prvInsertBlockIntoFreeList+0x14>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d8f7      	bhi.n	80068e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	4413      	add	r3, r2
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	429a      	cmp	r2, r3
 8006902:	d108      	bne.n	8006916 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	441a      	add	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	441a      	add	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d118      	bne.n	800695c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	4b15      	ldr	r3, [pc, #84]	@ (8006984 <prvInsertBlockIntoFreeList+0xb0>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d00d      	beq.n	8006952 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	441a      	add	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	e008      	b.n	8006964 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006952:	4b0c      	ldr	r3, [pc, #48]	@ (8006984 <prvInsertBlockIntoFreeList+0xb0>)
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	e003      	b.n	8006964 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	429a      	cmp	r2, r3
 800696a:	d002      	beq.n	8006972 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006972:	bf00      	nop
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	20004f54 	.word	0x20004f54
 8006984:	20004f5c 	.word	0x20004f5c

08006988 <siprintf>:
 8006988:	b40e      	push	{r1, r2, r3}
 800698a:	b500      	push	{lr}
 800698c:	b09c      	sub	sp, #112	@ 0x70
 800698e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006990:	9002      	str	r0, [sp, #8]
 8006992:	9006      	str	r0, [sp, #24]
 8006994:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006998:	4809      	ldr	r0, [pc, #36]	@ (80069c0 <siprintf+0x38>)
 800699a:	9107      	str	r1, [sp, #28]
 800699c:	9104      	str	r1, [sp, #16]
 800699e:	4909      	ldr	r1, [pc, #36]	@ (80069c4 <siprintf+0x3c>)
 80069a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80069a4:	9105      	str	r1, [sp, #20]
 80069a6:	6800      	ldr	r0, [r0, #0]
 80069a8:	9301      	str	r3, [sp, #4]
 80069aa:	a902      	add	r1, sp, #8
 80069ac:	f000 f9f8 	bl	8006da0 <_svfiprintf_r>
 80069b0:	9b02      	ldr	r3, [sp, #8]
 80069b2:	2200      	movs	r2, #0
 80069b4:	701a      	strb	r2, [r3, #0]
 80069b6:	b01c      	add	sp, #112	@ 0x70
 80069b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80069bc:	b003      	add	sp, #12
 80069be:	4770      	bx	lr
 80069c0:	20000018 	.word	0x20000018
 80069c4:	ffff0208 	.word	0xffff0208

080069c8 <memset>:
 80069c8:	4402      	add	r2, r0
 80069ca:	4603      	mov	r3, r0
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d100      	bne.n	80069d2 <memset+0xa>
 80069d0:	4770      	bx	lr
 80069d2:	f803 1b01 	strb.w	r1, [r3], #1
 80069d6:	e7f9      	b.n	80069cc <memset+0x4>

080069d8 <_reclaim_reent>:
 80069d8:	4b29      	ldr	r3, [pc, #164]	@ (8006a80 <_reclaim_reent+0xa8>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4283      	cmp	r3, r0
 80069de:	b570      	push	{r4, r5, r6, lr}
 80069e0:	4604      	mov	r4, r0
 80069e2:	d04b      	beq.n	8006a7c <_reclaim_reent+0xa4>
 80069e4:	69c3      	ldr	r3, [r0, #28]
 80069e6:	b1ab      	cbz	r3, 8006a14 <_reclaim_reent+0x3c>
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	b16b      	cbz	r3, 8006a08 <_reclaim_reent+0x30>
 80069ec:	2500      	movs	r5, #0
 80069ee:	69e3      	ldr	r3, [r4, #28]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	5959      	ldr	r1, [r3, r5]
 80069f4:	2900      	cmp	r1, #0
 80069f6:	d13b      	bne.n	8006a70 <_reclaim_reent+0x98>
 80069f8:	3504      	adds	r5, #4
 80069fa:	2d80      	cmp	r5, #128	@ 0x80
 80069fc:	d1f7      	bne.n	80069ee <_reclaim_reent+0x16>
 80069fe:	69e3      	ldr	r3, [r4, #28]
 8006a00:	4620      	mov	r0, r4
 8006a02:	68d9      	ldr	r1, [r3, #12]
 8006a04:	f000 f878 	bl	8006af8 <_free_r>
 8006a08:	69e3      	ldr	r3, [r4, #28]
 8006a0a:	6819      	ldr	r1, [r3, #0]
 8006a0c:	b111      	cbz	r1, 8006a14 <_reclaim_reent+0x3c>
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f000 f872 	bl	8006af8 <_free_r>
 8006a14:	6961      	ldr	r1, [r4, #20]
 8006a16:	b111      	cbz	r1, 8006a1e <_reclaim_reent+0x46>
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f000 f86d 	bl	8006af8 <_free_r>
 8006a1e:	69e1      	ldr	r1, [r4, #28]
 8006a20:	b111      	cbz	r1, 8006a28 <_reclaim_reent+0x50>
 8006a22:	4620      	mov	r0, r4
 8006a24:	f000 f868 	bl	8006af8 <_free_r>
 8006a28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006a2a:	b111      	cbz	r1, 8006a32 <_reclaim_reent+0x5a>
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f000 f863 	bl	8006af8 <_free_r>
 8006a32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a34:	b111      	cbz	r1, 8006a3c <_reclaim_reent+0x64>
 8006a36:	4620      	mov	r0, r4
 8006a38:	f000 f85e 	bl	8006af8 <_free_r>
 8006a3c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006a3e:	b111      	cbz	r1, 8006a46 <_reclaim_reent+0x6e>
 8006a40:	4620      	mov	r0, r4
 8006a42:	f000 f859 	bl	8006af8 <_free_r>
 8006a46:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006a48:	b111      	cbz	r1, 8006a50 <_reclaim_reent+0x78>
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f000 f854 	bl	8006af8 <_free_r>
 8006a50:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006a52:	b111      	cbz	r1, 8006a5a <_reclaim_reent+0x82>
 8006a54:	4620      	mov	r0, r4
 8006a56:	f000 f84f 	bl	8006af8 <_free_r>
 8006a5a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006a5c:	b111      	cbz	r1, 8006a64 <_reclaim_reent+0x8c>
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f000 f84a 	bl	8006af8 <_free_r>
 8006a64:	6a23      	ldr	r3, [r4, #32]
 8006a66:	b14b      	cbz	r3, 8006a7c <_reclaim_reent+0xa4>
 8006a68:	4620      	mov	r0, r4
 8006a6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a6e:	4718      	bx	r3
 8006a70:	680e      	ldr	r6, [r1, #0]
 8006a72:	4620      	mov	r0, r4
 8006a74:	f000 f840 	bl	8006af8 <_free_r>
 8006a78:	4631      	mov	r1, r6
 8006a7a:	e7bb      	b.n	80069f4 <_reclaim_reent+0x1c>
 8006a7c:	bd70      	pop	{r4, r5, r6, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000018 	.word	0x20000018

08006a84 <__errno>:
 8006a84:	4b01      	ldr	r3, [pc, #4]	@ (8006a8c <__errno+0x8>)
 8006a86:	6818      	ldr	r0, [r3, #0]
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	20000018 	.word	0x20000018

08006a90 <__libc_init_array>:
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	4d0d      	ldr	r5, [pc, #52]	@ (8006ac8 <__libc_init_array+0x38>)
 8006a94:	4c0d      	ldr	r4, [pc, #52]	@ (8006acc <__libc_init_array+0x3c>)
 8006a96:	1b64      	subs	r4, r4, r5
 8006a98:	10a4      	asrs	r4, r4, #2
 8006a9a:	2600      	movs	r6, #0
 8006a9c:	42a6      	cmp	r6, r4
 8006a9e:	d109      	bne.n	8006ab4 <__libc_init_array+0x24>
 8006aa0:	4d0b      	ldr	r5, [pc, #44]	@ (8006ad0 <__libc_init_array+0x40>)
 8006aa2:	4c0c      	ldr	r4, [pc, #48]	@ (8006ad4 <__libc_init_array+0x44>)
 8006aa4:	f000 fc66 	bl	8007374 <_init>
 8006aa8:	1b64      	subs	r4, r4, r5
 8006aaa:	10a4      	asrs	r4, r4, #2
 8006aac:	2600      	movs	r6, #0
 8006aae:	42a6      	cmp	r6, r4
 8006ab0:	d105      	bne.n	8006abe <__libc_init_array+0x2e>
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}
 8006ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab8:	4798      	blx	r3
 8006aba:	3601      	adds	r6, #1
 8006abc:	e7ee      	b.n	8006a9c <__libc_init_array+0xc>
 8006abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac2:	4798      	blx	r3
 8006ac4:	3601      	adds	r6, #1
 8006ac6:	e7f2      	b.n	8006aae <__libc_init_array+0x1e>
 8006ac8:	080081e4 	.word	0x080081e4
 8006acc:	080081e4 	.word	0x080081e4
 8006ad0:	080081e4 	.word	0x080081e4
 8006ad4:	080081e8 	.word	0x080081e8

08006ad8 <__retarget_lock_acquire_recursive>:
 8006ad8:	4770      	bx	lr

08006ada <__retarget_lock_release_recursive>:
 8006ada:	4770      	bx	lr

08006adc <memcpy>:
 8006adc:	440a      	add	r2, r1
 8006ade:	4291      	cmp	r1, r2
 8006ae0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ae4:	d100      	bne.n	8006ae8 <memcpy+0xc>
 8006ae6:	4770      	bx	lr
 8006ae8:	b510      	push	{r4, lr}
 8006aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006af2:	4291      	cmp	r1, r2
 8006af4:	d1f9      	bne.n	8006aea <memcpy+0xe>
 8006af6:	bd10      	pop	{r4, pc}

08006af8 <_free_r>:
 8006af8:	b538      	push	{r3, r4, r5, lr}
 8006afa:	4605      	mov	r5, r0
 8006afc:	2900      	cmp	r1, #0
 8006afe:	d041      	beq.n	8006b84 <_free_r+0x8c>
 8006b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b04:	1f0c      	subs	r4, r1, #4
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	bfb8      	it	lt
 8006b0a:	18e4      	addlt	r4, r4, r3
 8006b0c:	f000 f8e0 	bl	8006cd0 <__malloc_lock>
 8006b10:	4a1d      	ldr	r2, [pc, #116]	@ (8006b88 <_free_r+0x90>)
 8006b12:	6813      	ldr	r3, [r2, #0]
 8006b14:	b933      	cbnz	r3, 8006b24 <_free_r+0x2c>
 8006b16:	6063      	str	r3, [r4, #4]
 8006b18:	6014      	str	r4, [r2, #0]
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b20:	f000 b8dc 	b.w	8006cdc <__malloc_unlock>
 8006b24:	42a3      	cmp	r3, r4
 8006b26:	d908      	bls.n	8006b3a <_free_r+0x42>
 8006b28:	6820      	ldr	r0, [r4, #0]
 8006b2a:	1821      	adds	r1, r4, r0
 8006b2c:	428b      	cmp	r3, r1
 8006b2e:	bf01      	itttt	eq
 8006b30:	6819      	ldreq	r1, [r3, #0]
 8006b32:	685b      	ldreq	r3, [r3, #4]
 8006b34:	1809      	addeq	r1, r1, r0
 8006b36:	6021      	streq	r1, [r4, #0]
 8006b38:	e7ed      	b.n	8006b16 <_free_r+0x1e>
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	b10b      	cbz	r3, 8006b44 <_free_r+0x4c>
 8006b40:	42a3      	cmp	r3, r4
 8006b42:	d9fa      	bls.n	8006b3a <_free_r+0x42>
 8006b44:	6811      	ldr	r1, [r2, #0]
 8006b46:	1850      	adds	r0, r2, r1
 8006b48:	42a0      	cmp	r0, r4
 8006b4a:	d10b      	bne.n	8006b64 <_free_r+0x6c>
 8006b4c:	6820      	ldr	r0, [r4, #0]
 8006b4e:	4401      	add	r1, r0
 8006b50:	1850      	adds	r0, r2, r1
 8006b52:	4283      	cmp	r3, r0
 8006b54:	6011      	str	r1, [r2, #0]
 8006b56:	d1e0      	bne.n	8006b1a <_free_r+0x22>
 8006b58:	6818      	ldr	r0, [r3, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	6053      	str	r3, [r2, #4]
 8006b5e:	4408      	add	r0, r1
 8006b60:	6010      	str	r0, [r2, #0]
 8006b62:	e7da      	b.n	8006b1a <_free_r+0x22>
 8006b64:	d902      	bls.n	8006b6c <_free_r+0x74>
 8006b66:	230c      	movs	r3, #12
 8006b68:	602b      	str	r3, [r5, #0]
 8006b6a:	e7d6      	b.n	8006b1a <_free_r+0x22>
 8006b6c:	6820      	ldr	r0, [r4, #0]
 8006b6e:	1821      	adds	r1, r4, r0
 8006b70:	428b      	cmp	r3, r1
 8006b72:	bf04      	itt	eq
 8006b74:	6819      	ldreq	r1, [r3, #0]
 8006b76:	685b      	ldreq	r3, [r3, #4]
 8006b78:	6063      	str	r3, [r4, #4]
 8006b7a:	bf04      	itt	eq
 8006b7c:	1809      	addeq	r1, r1, r0
 8006b7e:	6021      	streq	r1, [r4, #0]
 8006b80:	6054      	str	r4, [r2, #4]
 8006b82:	e7ca      	b.n	8006b1a <_free_r+0x22>
 8006b84:	bd38      	pop	{r3, r4, r5, pc}
 8006b86:	bf00      	nop
 8006b88:	200050b8 	.word	0x200050b8

08006b8c <sbrk_aligned>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	4e0f      	ldr	r6, [pc, #60]	@ (8006bcc <sbrk_aligned+0x40>)
 8006b90:	460c      	mov	r4, r1
 8006b92:	6831      	ldr	r1, [r6, #0]
 8006b94:	4605      	mov	r5, r0
 8006b96:	b911      	cbnz	r1, 8006b9e <sbrk_aligned+0x12>
 8006b98:	f000 fba6 	bl	80072e8 <_sbrk_r>
 8006b9c:	6030      	str	r0, [r6, #0]
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	f000 fba1 	bl	80072e8 <_sbrk_r>
 8006ba6:	1c43      	adds	r3, r0, #1
 8006ba8:	d103      	bne.n	8006bb2 <sbrk_aligned+0x26>
 8006baa:	f04f 34ff 	mov.w	r4, #4294967295
 8006bae:	4620      	mov	r0, r4
 8006bb0:	bd70      	pop	{r4, r5, r6, pc}
 8006bb2:	1cc4      	adds	r4, r0, #3
 8006bb4:	f024 0403 	bic.w	r4, r4, #3
 8006bb8:	42a0      	cmp	r0, r4
 8006bba:	d0f8      	beq.n	8006bae <sbrk_aligned+0x22>
 8006bbc:	1a21      	subs	r1, r4, r0
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	f000 fb92 	bl	80072e8 <_sbrk_r>
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d1f2      	bne.n	8006bae <sbrk_aligned+0x22>
 8006bc8:	e7ef      	b.n	8006baa <sbrk_aligned+0x1e>
 8006bca:	bf00      	nop
 8006bcc:	200050b4 	.word	0x200050b4

08006bd0 <_malloc_r>:
 8006bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bd4:	1ccd      	adds	r5, r1, #3
 8006bd6:	f025 0503 	bic.w	r5, r5, #3
 8006bda:	3508      	adds	r5, #8
 8006bdc:	2d0c      	cmp	r5, #12
 8006bde:	bf38      	it	cc
 8006be0:	250c      	movcc	r5, #12
 8006be2:	2d00      	cmp	r5, #0
 8006be4:	4606      	mov	r6, r0
 8006be6:	db01      	blt.n	8006bec <_malloc_r+0x1c>
 8006be8:	42a9      	cmp	r1, r5
 8006bea:	d904      	bls.n	8006bf6 <_malloc_r+0x26>
 8006bec:	230c      	movs	r3, #12
 8006bee:	6033      	str	r3, [r6, #0]
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ccc <_malloc_r+0xfc>
 8006bfa:	f000 f869 	bl	8006cd0 <__malloc_lock>
 8006bfe:	f8d8 3000 	ldr.w	r3, [r8]
 8006c02:	461c      	mov	r4, r3
 8006c04:	bb44      	cbnz	r4, 8006c58 <_malloc_r+0x88>
 8006c06:	4629      	mov	r1, r5
 8006c08:	4630      	mov	r0, r6
 8006c0a:	f7ff ffbf 	bl	8006b8c <sbrk_aligned>
 8006c0e:	1c43      	adds	r3, r0, #1
 8006c10:	4604      	mov	r4, r0
 8006c12:	d158      	bne.n	8006cc6 <_malloc_r+0xf6>
 8006c14:	f8d8 4000 	ldr.w	r4, [r8]
 8006c18:	4627      	mov	r7, r4
 8006c1a:	2f00      	cmp	r7, #0
 8006c1c:	d143      	bne.n	8006ca6 <_malloc_r+0xd6>
 8006c1e:	2c00      	cmp	r4, #0
 8006c20:	d04b      	beq.n	8006cba <_malloc_r+0xea>
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	4639      	mov	r1, r7
 8006c26:	4630      	mov	r0, r6
 8006c28:	eb04 0903 	add.w	r9, r4, r3
 8006c2c:	f000 fb5c 	bl	80072e8 <_sbrk_r>
 8006c30:	4581      	cmp	r9, r0
 8006c32:	d142      	bne.n	8006cba <_malloc_r+0xea>
 8006c34:	6821      	ldr	r1, [r4, #0]
 8006c36:	1a6d      	subs	r5, r5, r1
 8006c38:	4629      	mov	r1, r5
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	f7ff ffa6 	bl	8006b8c <sbrk_aligned>
 8006c40:	3001      	adds	r0, #1
 8006c42:	d03a      	beq.n	8006cba <_malloc_r+0xea>
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	442b      	add	r3, r5
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	bb62      	cbnz	r2, 8006cac <_malloc_r+0xdc>
 8006c52:	f8c8 7000 	str.w	r7, [r8]
 8006c56:	e00f      	b.n	8006c78 <_malloc_r+0xa8>
 8006c58:	6822      	ldr	r2, [r4, #0]
 8006c5a:	1b52      	subs	r2, r2, r5
 8006c5c:	d420      	bmi.n	8006ca0 <_malloc_r+0xd0>
 8006c5e:	2a0b      	cmp	r2, #11
 8006c60:	d917      	bls.n	8006c92 <_malloc_r+0xc2>
 8006c62:	1961      	adds	r1, r4, r5
 8006c64:	42a3      	cmp	r3, r4
 8006c66:	6025      	str	r5, [r4, #0]
 8006c68:	bf18      	it	ne
 8006c6a:	6059      	strne	r1, [r3, #4]
 8006c6c:	6863      	ldr	r3, [r4, #4]
 8006c6e:	bf08      	it	eq
 8006c70:	f8c8 1000 	streq.w	r1, [r8]
 8006c74:	5162      	str	r2, [r4, r5]
 8006c76:	604b      	str	r3, [r1, #4]
 8006c78:	4630      	mov	r0, r6
 8006c7a:	f000 f82f 	bl	8006cdc <__malloc_unlock>
 8006c7e:	f104 000b 	add.w	r0, r4, #11
 8006c82:	1d23      	adds	r3, r4, #4
 8006c84:	f020 0007 	bic.w	r0, r0, #7
 8006c88:	1ac2      	subs	r2, r0, r3
 8006c8a:	bf1c      	itt	ne
 8006c8c:	1a1b      	subne	r3, r3, r0
 8006c8e:	50a3      	strne	r3, [r4, r2]
 8006c90:	e7af      	b.n	8006bf2 <_malloc_r+0x22>
 8006c92:	6862      	ldr	r2, [r4, #4]
 8006c94:	42a3      	cmp	r3, r4
 8006c96:	bf0c      	ite	eq
 8006c98:	f8c8 2000 	streq.w	r2, [r8]
 8006c9c:	605a      	strne	r2, [r3, #4]
 8006c9e:	e7eb      	b.n	8006c78 <_malloc_r+0xa8>
 8006ca0:	4623      	mov	r3, r4
 8006ca2:	6864      	ldr	r4, [r4, #4]
 8006ca4:	e7ae      	b.n	8006c04 <_malloc_r+0x34>
 8006ca6:	463c      	mov	r4, r7
 8006ca8:	687f      	ldr	r7, [r7, #4]
 8006caa:	e7b6      	b.n	8006c1a <_malloc_r+0x4a>
 8006cac:	461a      	mov	r2, r3
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	42a3      	cmp	r3, r4
 8006cb2:	d1fb      	bne.n	8006cac <_malloc_r+0xdc>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	6053      	str	r3, [r2, #4]
 8006cb8:	e7de      	b.n	8006c78 <_malloc_r+0xa8>
 8006cba:	230c      	movs	r3, #12
 8006cbc:	6033      	str	r3, [r6, #0]
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	f000 f80c 	bl	8006cdc <__malloc_unlock>
 8006cc4:	e794      	b.n	8006bf0 <_malloc_r+0x20>
 8006cc6:	6005      	str	r5, [r0, #0]
 8006cc8:	e7d6      	b.n	8006c78 <_malloc_r+0xa8>
 8006cca:	bf00      	nop
 8006ccc:	200050b8 	.word	0x200050b8

08006cd0 <__malloc_lock>:
 8006cd0:	4801      	ldr	r0, [pc, #4]	@ (8006cd8 <__malloc_lock+0x8>)
 8006cd2:	f7ff bf01 	b.w	8006ad8 <__retarget_lock_acquire_recursive>
 8006cd6:	bf00      	nop
 8006cd8:	200050b0 	.word	0x200050b0

08006cdc <__malloc_unlock>:
 8006cdc:	4801      	ldr	r0, [pc, #4]	@ (8006ce4 <__malloc_unlock+0x8>)
 8006cde:	f7ff befc 	b.w	8006ada <__retarget_lock_release_recursive>
 8006ce2:	bf00      	nop
 8006ce4:	200050b0 	.word	0x200050b0

08006ce8 <__ssputs_r>:
 8006ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cec:	688e      	ldr	r6, [r1, #8]
 8006cee:	461f      	mov	r7, r3
 8006cf0:	42be      	cmp	r6, r7
 8006cf2:	680b      	ldr	r3, [r1, #0]
 8006cf4:	4682      	mov	sl, r0
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	4690      	mov	r8, r2
 8006cfa:	d82d      	bhi.n	8006d58 <__ssputs_r+0x70>
 8006cfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006d04:	d026      	beq.n	8006d54 <__ssputs_r+0x6c>
 8006d06:	6965      	ldr	r5, [r4, #20]
 8006d08:	6909      	ldr	r1, [r1, #16]
 8006d0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d0e:	eba3 0901 	sub.w	r9, r3, r1
 8006d12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d16:	1c7b      	adds	r3, r7, #1
 8006d18:	444b      	add	r3, r9
 8006d1a:	106d      	asrs	r5, r5, #1
 8006d1c:	429d      	cmp	r5, r3
 8006d1e:	bf38      	it	cc
 8006d20:	461d      	movcc	r5, r3
 8006d22:	0553      	lsls	r3, r2, #21
 8006d24:	d527      	bpl.n	8006d76 <__ssputs_r+0x8e>
 8006d26:	4629      	mov	r1, r5
 8006d28:	f7ff ff52 	bl	8006bd0 <_malloc_r>
 8006d2c:	4606      	mov	r6, r0
 8006d2e:	b360      	cbz	r0, 8006d8a <__ssputs_r+0xa2>
 8006d30:	6921      	ldr	r1, [r4, #16]
 8006d32:	464a      	mov	r2, r9
 8006d34:	f7ff fed2 	bl	8006adc <memcpy>
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d42:	81a3      	strh	r3, [r4, #12]
 8006d44:	6126      	str	r6, [r4, #16]
 8006d46:	6165      	str	r5, [r4, #20]
 8006d48:	444e      	add	r6, r9
 8006d4a:	eba5 0509 	sub.w	r5, r5, r9
 8006d4e:	6026      	str	r6, [r4, #0]
 8006d50:	60a5      	str	r5, [r4, #8]
 8006d52:	463e      	mov	r6, r7
 8006d54:	42be      	cmp	r6, r7
 8006d56:	d900      	bls.n	8006d5a <__ssputs_r+0x72>
 8006d58:	463e      	mov	r6, r7
 8006d5a:	6820      	ldr	r0, [r4, #0]
 8006d5c:	4632      	mov	r2, r6
 8006d5e:	4641      	mov	r1, r8
 8006d60:	f000 faa8 	bl	80072b4 <memmove>
 8006d64:	68a3      	ldr	r3, [r4, #8]
 8006d66:	1b9b      	subs	r3, r3, r6
 8006d68:	60a3      	str	r3, [r4, #8]
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	4433      	add	r3, r6
 8006d6e:	6023      	str	r3, [r4, #0]
 8006d70:	2000      	movs	r0, #0
 8006d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d76:	462a      	mov	r2, r5
 8006d78:	f000 fac6 	bl	8007308 <_realloc_r>
 8006d7c:	4606      	mov	r6, r0
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	d1e0      	bne.n	8006d44 <__ssputs_r+0x5c>
 8006d82:	6921      	ldr	r1, [r4, #16]
 8006d84:	4650      	mov	r0, sl
 8006d86:	f7ff feb7 	bl	8006af8 <_free_r>
 8006d8a:	230c      	movs	r3, #12
 8006d8c:	f8ca 3000 	str.w	r3, [sl]
 8006d90:	89a3      	ldrh	r3, [r4, #12]
 8006d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d96:	81a3      	strh	r3, [r4, #12]
 8006d98:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9c:	e7e9      	b.n	8006d72 <__ssputs_r+0x8a>
	...

08006da0 <_svfiprintf_r>:
 8006da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da4:	4698      	mov	r8, r3
 8006da6:	898b      	ldrh	r3, [r1, #12]
 8006da8:	061b      	lsls	r3, r3, #24
 8006daa:	b09d      	sub	sp, #116	@ 0x74
 8006dac:	4607      	mov	r7, r0
 8006dae:	460d      	mov	r5, r1
 8006db0:	4614      	mov	r4, r2
 8006db2:	d510      	bpl.n	8006dd6 <_svfiprintf_r+0x36>
 8006db4:	690b      	ldr	r3, [r1, #16]
 8006db6:	b973      	cbnz	r3, 8006dd6 <_svfiprintf_r+0x36>
 8006db8:	2140      	movs	r1, #64	@ 0x40
 8006dba:	f7ff ff09 	bl	8006bd0 <_malloc_r>
 8006dbe:	6028      	str	r0, [r5, #0]
 8006dc0:	6128      	str	r0, [r5, #16]
 8006dc2:	b930      	cbnz	r0, 8006dd2 <_svfiprintf_r+0x32>
 8006dc4:	230c      	movs	r3, #12
 8006dc6:	603b      	str	r3, [r7, #0]
 8006dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dcc:	b01d      	add	sp, #116	@ 0x74
 8006dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd2:	2340      	movs	r3, #64	@ 0x40
 8006dd4:	616b      	str	r3, [r5, #20]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dda:	2320      	movs	r3, #32
 8006ddc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006de0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006de4:	2330      	movs	r3, #48	@ 0x30
 8006de6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006f84 <_svfiprintf_r+0x1e4>
 8006dea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006dee:	f04f 0901 	mov.w	r9, #1
 8006df2:	4623      	mov	r3, r4
 8006df4:	469a      	mov	sl, r3
 8006df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dfa:	b10a      	cbz	r2, 8006e00 <_svfiprintf_r+0x60>
 8006dfc:	2a25      	cmp	r2, #37	@ 0x25
 8006dfe:	d1f9      	bne.n	8006df4 <_svfiprintf_r+0x54>
 8006e00:	ebba 0b04 	subs.w	fp, sl, r4
 8006e04:	d00b      	beq.n	8006e1e <_svfiprintf_r+0x7e>
 8006e06:	465b      	mov	r3, fp
 8006e08:	4622      	mov	r2, r4
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	f7ff ff6b 	bl	8006ce8 <__ssputs_r>
 8006e12:	3001      	adds	r0, #1
 8006e14:	f000 80a7 	beq.w	8006f66 <_svfiprintf_r+0x1c6>
 8006e18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e1a:	445a      	add	r2, fp
 8006e1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 809f 	beq.w	8006f66 <_svfiprintf_r+0x1c6>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e32:	f10a 0a01 	add.w	sl, sl, #1
 8006e36:	9304      	str	r3, [sp, #16]
 8006e38:	9307      	str	r3, [sp, #28]
 8006e3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e40:	4654      	mov	r4, sl
 8006e42:	2205      	movs	r2, #5
 8006e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e48:	484e      	ldr	r0, [pc, #312]	@ (8006f84 <_svfiprintf_r+0x1e4>)
 8006e4a:	f7f9 f9e9 	bl	8000220 <memchr>
 8006e4e:	9a04      	ldr	r2, [sp, #16]
 8006e50:	b9d8      	cbnz	r0, 8006e8a <_svfiprintf_r+0xea>
 8006e52:	06d0      	lsls	r0, r2, #27
 8006e54:	bf44      	itt	mi
 8006e56:	2320      	movmi	r3, #32
 8006e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e5c:	0711      	lsls	r1, r2, #28
 8006e5e:	bf44      	itt	mi
 8006e60:	232b      	movmi	r3, #43	@ 0x2b
 8006e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e66:	f89a 3000 	ldrb.w	r3, [sl]
 8006e6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e6c:	d015      	beq.n	8006e9a <_svfiprintf_r+0xfa>
 8006e6e:	9a07      	ldr	r2, [sp, #28]
 8006e70:	4654      	mov	r4, sl
 8006e72:	2000      	movs	r0, #0
 8006e74:	f04f 0c0a 	mov.w	ip, #10
 8006e78:	4621      	mov	r1, r4
 8006e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e7e:	3b30      	subs	r3, #48	@ 0x30
 8006e80:	2b09      	cmp	r3, #9
 8006e82:	d94b      	bls.n	8006f1c <_svfiprintf_r+0x17c>
 8006e84:	b1b0      	cbz	r0, 8006eb4 <_svfiprintf_r+0x114>
 8006e86:	9207      	str	r2, [sp, #28]
 8006e88:	e014      	b.n	8006eb4 <_svfiprintf_r+0x114>
 8006e8a:	eba0 0308 	sub.w	r3, r0, r8
 8006e8e:	fa09 f303 	lsl.w	r3, r9, r3
 8006e92:	4313      	orrs	r3, r2
 8006e94:	9304      	str	r3, [sp, #16]
 8006e96:	46a2      	mov	sl, r4
 8006e98:	e7d2      	b.n	8006e40 <_svfiprintf_r+0xa0>
 8006e9a:	9b03      	ldr	r3, [sp, #12]
 8006e9c:	1d19      	adds	r1, r3, #4
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	9103      	str	r1, [sp, #12]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	bfbb      	ittet	lt
 8006ea6:	425b      	neglt	r3, r3
 8006ea8:	f042 0202 	orrlt.w	r2, r2, #2
 8006eac:	9307      	strge	r3, [sp, #28]
 8006eae:	9307      	strlt	r3, [sp, #28]
 8006eb0:	bfb8      	it	lt
 8006eb2:	9204      	strlt	r2, [sp, #16]
 8006eb4:	7823      	ldrb	r3, [r4, #0]
 8006eb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8006eb8:	d10a      	bne.n	8006ed0 <_svfiprintf_r+0x130>
 8006eba:	7863      	ldrb	r3, [r4, #1]
 8006ebc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ebe:	d132      	bne.n	8006f26 <_svfiprintf_r+0x186>
 8006ec0:	9b03      	ldr	r3, [sp, #12]
 8006ec2:	1d1a      	adds	r2, r3, #4
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	9203      	str	r2, [sp, #12]
 8006ec8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ecc:	3402      	adds	r4, #2
 8006ece:	9305      	str	r3, [sp, #20]
 8006ed0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006f94 <_svfiprintf_r+0x1f4>
 8006ed4:	7821      	ldrb	r1, [r4, #0]
 8006ed6:	2203      	movs	r2, #3
 8006ed8:	4650      	mov	r0, sl
 8006eda:	f7f9 f9a1 	bl	8000220 <memchr>
 8006ede:	b138      	cbz	r0, 8006ef0 <_svfiprintf_r+0x150>
 8006ee0:	9b04      	ldr	r3, [sp, #16]
 8006ee2:	eba0 000a 	sub.w	r0, r0, sl
 8006ee6:	2240      	movs	r2, #64	@ 0x40
 8006ee8:	4082      	lsls	r2, r0
 8006eea:	4313      	orrs	r3, r2
 8006eec:	3401      	adds	r4, #1
 8006eee:	9304      	str	r3, [sp, #16]
 8006ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ef4:	4824      	ldr	r0, [pc, #144]	@ (8006f88 <_svfiprintf_r+0x1e8>)
 8006ef6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006efa:	2206      	movs	r2, #6
 8006efc:	f7f9 f990 	bl	8000220 <memchr>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d036      	beq.n	8006f72 <_svfiprintf_r+0x1d2>
 8006f04:	4b21      	ldr	r3, [pc, #132]	@ (8006f8c <_svfiprintf_r+0x1ec>)
 8006f06:	bb1b      	cbnz	r3, 8006f50 <_svfiprintf_r+0x1b0>
 8006f08:	9b03      	ldr	r3, [sp, #12]
 8006f0a:	3307      	adds	r3, #7
 8006f0c:	f023 0307 	bic.w	r3, r3, #7
 8006f10:	3308      	adds	r3, #8
 8006f12:	9303      	str	r3, [sp, #12]
 8006f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f16:	4433      	add	r3, r6
 8006f18:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f1a:	e76a      	b.n	8006df2 <_svfiprintf_r+0x52>
 8006f1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f20:	460c      	mov	r4, r1
 8006f22:	2001      	movs	r0, #1
 8006f24:	e7a8      	b.n	8006e78 <_svfiprintf_r+0xd8>
 8006f26:	2300      	movs	r3, #0
 8006f28:	3401      	adds	r4, #1
 8006f2a:	9305      	str	r3, [sp, #20]
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	f04f 0c0a 	mov.w	ip, #10
 8006f32:	4620      	mov	r0, r4
 8006f34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f38:	3a30      	subs	r2, #48	@ 0x30
 8006f3a:	2a09      	cmp	r2, #9
 8006f3c:	d903      	bls.n	8006f46 <_svfiprintf_r+0x1a6>
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0c6      	beq.n	8006ed0 <_svfiprintf_r+0x130>
 8006f42:	9105      	str	r1, [sp, #20]
 8006f44:	e7c4      	b.n	8006ed0 <_svfiprintf_r+0x130>
 8006f46:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e7f0      	b.n	8006f32 <_svfiprintf_r+0x192>
 8006f50:	ab03      	add	r3, sp, #12
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	462a      	mov	r2, r5
 8006f56:	4b0e      	ldr	r3, [pc, #56]	@ (8006f90 <_svfiprintf_r+0x1f0>)
 8006f58:	a904      	add	r1, sp, #16
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	f3af 8000 	nop.w
 8006f60:	1c42      	adds	r2, r0, #1
 8006f62:	4606      	mov	r6, r0
 8006f64:	d1d6      	bne.n	8006f14 <_svfiprintf_r+0x174>
 8006f66:	89ab      	ldrh	r3, [r5, #12]
 8006f68:	065b      	lsls	r3, r3, #25
 8006f6a:	f53f af2d 	bmi.w	8006dc8 <_svfiprintf_r+0x28>
 8006f6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f70:	e72c      	b.n	8006dcc <_svfiprintf_r+0x2c>
 8006f72:	ab03      	add	r3, sp, #12
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	462a      	mov	r2, r5
 8006f78:	4b05      	ldr	r3, [pc, #20]	@ (8006f90 <_svfiprintf_r+0x1f0>)
 8006f7a:	a904      	add	r1, sp, #16
 8006f7c:	4638      	mov	r0, r7
 8006f7e:	f000 f879 	bl	8007074 <_printf_i>
 8006f82:	e7ed      	b.n	8006f60 <_svfiprintf_r+0x1c0>
 8006f84:	080081a8 	.word	0x080081a8
 8006f88:	080081b2 	.word	0x080081b2
 8006f8c:	00000000 	.word	0x00000000
 8006f90:	08006ce9 	.word	0x08006ce9
 8006f94:	080081ae 	.word	0x080081ae

08006f98 <_printf_common>:
 8006f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f9c:	4616      	mov	r6, r2
 8006f9e:	4698      	mov	r8, r3
 8006fa0:	688a      	ldr	r2, [r1, #8]
 8006fa2:	690b      	ldr	r3, [r1, #16]
 8006fa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	bfb8      	it	lt
 8006fac:	4613      	movlt	r3, r2
 8006fae:	6033      	str	r3, [r6, #0]
 8006fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006fb4:	4607      	mov	r7, r0
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	b10a      	cbz	r2, 8006fbe <_printf_common+0x26>
 8006fba:	3301      	adds	r3, #1
 8006fbc:	6033      	str	r3, [r6, #0]
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	0699      	lsls	r1, r3, #26
 8006fc2:	bf42      	ittt	mi
 8006fc4:	6833      	ldrmi	r3, [r6, #0]
 8006fc6:	3302      	addmi	r3, #2
 8006fc8:	6033      	strmi	r3, [r6, #0]
 8006fca:	6825      	ldr	r5, [r4, #0]
 8006fcc:	f015 0506 	ands.w	r5, r5, #6
 8006fd0:	d106      	bne.n	8006fe0 <_printf_common+0x48>
 8006fd2:	f104 0a19 	add.w	sl, r4, #25
 8006fd6:	68e3      	ldr	r3, [r4, #12]
 8006fd8:	6832      	ldr	r2, [r6, #0]
 8006fda:	1a9b      	subs	r3, r3, r2
 8006fdc:	42ab      	cmp	r3, r5
 8006fde:	dc26      	bgt.n	800702e <_printf_common+0x96>
 8006fe0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006fe4:	6822      	ldr	r2, [r4, #0]
 8006fe6:	3b00      	subs	r3, #0
 8006fe8:	bf18      	it	ne
 8006fea:	2301      	movne	r3, #1
 8006fec:	0692      	lsls	r2, r2, #26
 8006fee:	d42b      	bmi.n	8007048 <_printf_common+0xb0>
 8006ff0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ff4:	4641      	mov	r1, r8
 8006ff6:	4638      	mov	r0, r7
 8006ff8:	47c8      	blx	r9
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	d01e      	beq.n	800703c <_printf_common+0xa4>
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	6922      	ldr	r2, [r4, #16]
 8007002:	f003 0306 	and.w	r3, r3, #6
 8007006:	2b04      	cmp	r3, #4
 8007008:	bf02      	ittt	eq
 800700a:	68e5      	ldreq	r5, [r4, #12]
 800700c:	6833      	ldreq	r3, [r6, #0]
 800700e:	1aed      	subeq	r5, r5, r3
 8007010:	68a3      	ldr	r3, [r4, #8]
 8007012:	bf0c      	ite	eq
 8007014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007018:	2500      	movne	r5, #0
 800701a:	4293      	cmp	r3, r2
 800701c:	bfc4      	itt	gt
 800701e:	1a9b      	subgt	r3, r3, r2
 8007020:	18ed      	addgt	r5, r5, r3
 8007022:	2600      	movs	r6, #0
 8007024:	341a      	adds	r4, #26
 8007026:	42b5      	cmp	r5, r6
 8007028:	d11a      	bne.n	8007060 <_printf_common+0xc8>
 800702a:	2000      	movs	r0, #0
 800702c:	e008      	b.n	8007040 <_printf_common+0xa8>
 800702e:	2301      	movs	r3, #1
 8007030:	4652      	mov	r2, sl
 8007032:	4641      	mov	r1, r8
 8007034:	4638      	mov	r0, r7
 8007036:	47c8      	blx	r9
 8007038:	3001      	adds	r0, #1
 800703a:	d103      	bne.n	8007044 <_printf_common+0xac>
 800703c:	f04f 30ff 	mov.w	r0, #4294967295
 8007040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007044:	3501      	adds	r5, #1
 8007046:	e7c6      	b.n	8006fd6 <_printf_common+0x3e>
 8007048:	18e1      	adds	r1, r4, r3
 800704a:	1c5a      	adds	r2, r3, #1
 800704c:	2030      	movs	r0, #48	@ 0x30
 800704e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007052:	4422      	add	r2, r4
 8007054:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007058:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800705c:	3302      	adds	r3, #2
 800705e:	e7c7      	b.n	8006ff0 <_printf_common+0x58>
 8007060:	2301      	movs	r3, #1
 8007062:	4622      	mov	r2, r4
 8007064:	4641      	mov	r1, r8
 8007066:	4638      	mov	r0, r7
 8007068:	47c8      	blx	r9
 800706a:	3001      	adds	r0, #1
 800706c:	d0e6      	beq.n	800703c <_printf_common+0xa4>
 800706e:	3601      	adds	r6, #1
 8007070:	e7d9      	b.n	8007026 <_printf_common+0x8e>
	...

08007074 <_printf_i>:
 8007074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007078:	7e0f      	ldrb	r7, [r1, #24]
 800707a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800707c:	2f78      	cmp	r7, #120	@ 0x78
 800707e:	4691      	mov	r9, r2
 8007080:	4680      	mov	r8, r0
 8007082:	460c      	mov	r4, r1
 8007084:	469a      	mov	sl, r3
 8007086:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800708a:	d807      	bhi.n	800709c <_printf_i+0x28>
 800708c:	2f62      	cmp	r7, #98	@ 0x62
 800708e:	d80a      	bhi.n	80070a6 <_printf_i+0x32>
 8007090:	2f00      	cmp	r7, #0
 8007092:	f000 80d2 	beq.w	800723a <_printf_i+0x1c6>
 8007096:	2f58      	cmp	r7, #88	@ 0x58
 8007098:	f000 80b9 	beq.w	800720e <_printf_i+0x19a>
 800709c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070a4:	e03a      	b.n	800711c <_printf_i+0xa8>
 80070a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070aa:	2b15      	cmp	r3, #21
 80070ac:	d8f6      	bhi.n	800709c <_printf_i+0x28>
 80070ae:	a101      	add	r1, pc, #4	@ (adr r1, 80070b4 <_printf_i+0x40>)
 80070b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070b4:	0800710d 	.word	0x0800710d
 80070b8:	08007121 	.word	0x08007121
 80070bc:	0800709d 	.word	0x0800709d
 80070c0:	0800709d 	.word	0x0800709d
 80070c4:	0800709d 	.word	0x0800709d
 80070c8:	0800709d 	.word	0x0800709d
 80070cc:	08007121 	.word	0x08007121
 80070d0:	0800709d 	.word	0x0800709d
 80070d4:	0800709d 	.word	0x0800709d
 80070d8:	0800709d 	.word	0x0800709d
 80070dc:	0800709d 	.word	0x0800709d
 80070e0:	08007221 	.word	0x08007221
 80070e4:	0800714b 	.word	0x0800714b
 80070e8:	080071db 	.word	0x080071db
 80070ec:	0800709d 	.word	0x0800709d
 80070f0:	0800709d 	.word	0x0800709d
 80070f4:	08007243 	.word	0x08007243
 80070f8:	0800709d 	.word	0x0800709d
 80070fc:	0800714b 	.word	0x0800714b
 8007100:	0800709d 	.word	0x0800709d
 8007104:	0800709d 	.word	0x0800709d
 8007108:	080071e3 	.word	0x080071e3
 800710c:	6833      	ldr	r3, [r6, #0]
 800710e:	1d1a      	adds	r2, r3, #4
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6032      	str	r2, [r6, #0]
 8007114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007118:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800711c:	2301      	movs	r3, #1
 800711e:	e09d      	b.n	800725c <_printf_i+0x1e8>
 8007120:	6833      	ldr	r3, [r6, #0]
 8007122:	6820      	ldr	r0, [r4, #0]
 8007124:	1d19      	adds	r1, r3, #4
 8007126:	6031      	str	r1, [r6, #0]
 8007128:	0606      	lsls	r6, r0, #24
 800712a:	d501      	bpl.n	8007130 <_printf_i+0xbc>
 800712c:	681d      	ldr	r5, [r3, #0]
 800712e:	e003      	b.n	8007138 <_printf_i+0xc4>
 8007130:	0645      	lsls	r5, r0, #25
 8007132:	d5fb      	bpl.n	800712c <_printf_i+0xb8>
 8007134:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007138:	2d00      	cmp	r5, #0
 800713a:	da03      	bge.n	8007144 <_printf_i+0xd0>
 800713c:	232d      	movs	r3, #45	@ 0x2d
 800713e:	426d      	negs	r5, r5
 8007140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007144:	4859      	ldr	r0, [pc, #356]	@ (80072ac <_printf_i+0x238>)
 8007146:	230a      	movs	r3, #10
 8007148:	e011      	b.n	800716e <_printf_i+0xfa>
 800714a:	6821      	ldr	r1, [r4, #0]
 800714c:	6833      	ldr	r3, [r6, #0]
 800714e:	0608      	lsls	r0, r1, #24
 8007150:	f853 5b04 	ldr.w	r5, [r3], #4
 8007154:	d402      	bmi.n	800715c <_printf_i+0xe8>
 8007156:	0649      	lsls	r1, r1, #25
 8007158:	bf48      	it	mi
 800715a:	b2ad      	uxthmi	r5, r5
 800715c:	2f6f      	cmp	r7, #111	@ 0x6f
 800715e:	4853      	ldr	r0, [pc, #332]	@ (80072ac <_printf_i+0x238>)
 8007160:	6033      	str	r3, [r6, #0]
 8007162:	bf14      	ite	ne
 8007164:	230a      	movne	r3, #10
 8007166:	2308      	moveq	r3, #8
 8007168:	2100      	movs	r1, #0
 800716a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800716e:	6866      	ldr	r6, [r4, #4]
 8007170:	60a6      	str	r6, [r4, #8]
 8007172:	2e00      	cmp	r6, #0
 8007174:	bfa2      	ittt	ge
 8007176:	6821      	ldrge	r1, [r4, #0]
 8007178:	f021 0104 	bicge.w	r1, r1, #4
 800717c:	6021      	strge	r1, [r4, #0]
 800717e:	b90d      	cbnz	r5, 8007184 <_printf_i+0x110>
 8007180:	2e00      	cmp	r6, #0
 8007182:	d04b      	beq.n	800721c <_printf_i+0x1a8>
 8007184:	4616      	mov	r6, r2
 8007186:	fbb5 f1f3 	udiv	r1, r5, r3
 800718a:	fb03 5711 	mls	r7, r3, r1, r5
 800718e:	5dc7      	ldrb	r7, [r0, r7]
 8007190:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007194:	462f      	mov	r7, r5
 8007196:	42bb      	cmp	r3, r7
 8007198:	460d      	mov	r5, r1
 800719a:	d9f4      	bls.n	8007186 <_printf_i+0x112>
 800719c:	2b08      	cmp	r3, #8
 800719e:	d10b      	bne.n	80071b8 <_printf_i+0x144>
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	07df      	lsls	r7, r3, #31
 80071a4:	d508      	bpl.n	80071b8 <_printf_i+0x144>
 80071a6:	6923      	ldr	r3, [r4, #16]
 80071a8:	6861      	ldr	r1, [r4, #4]
 80071aa:	4299      	cmp	r1, r3
 80071ac:	bfde      	ittt	le
 80071ae:	2330      	movle	r3, #48	@ 0x30
 80071b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071b8:	1b92      	subs	r2, r2, r6
 80071ba:	6122      	str	r2, [r4, #16]
 80071bc:	f8cd a000 	str.w	sl, [sp]
 80071c0:	464b      	mov	r3, r9
 80071c2:	aa03      	add	r2, sp, #12
 80071c4:	4621      	mov	r1, r4
 80071c6:	4640      	mov	r0, r8
 80071c8:	f7ff fee6 	bl	8006f98 <_printf_common>
 80071cc:	3001      	adds	r0, #1
 80071ce:	d14a      	bne.n	8007266 <_printf_i+0x1f2>
 80071d0:	f04f 30ff 	mov.w	r0, #4294967295
 80071d4:	b004      	add	sp, #16
 80071d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	f043 0320 	orr.w	r3, r3, #32
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	4833      	ldr	r0, [pc, #204]	@ (80072b0 <_printf_i+0x23c>)
 80071e4:	2778      	movs	r7, #120	@ 0x78
 80071e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	6831      	ldr	r1, [r6, #0]
 80071ee:	061f      	lsls	r7, r3, #24
 80071f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80071f4:	d402      	bmi.n	80071fc <_printf_i+0x188>
 80071f6:	065f      	lsls	r7, r3, #25
 80071f8:	bf48      	it	mi
 80071fa:	b2ad      	uxthmi	r5, r5
 80071fc:	6031      	str	r1, [r6, #0]
 80071fe:	07d9      	lsls	r1, r3, #31
 8007200:	bf44      	itt	mi
 8007202:	f043 0320 	orrmi.w	r3, r3, #32
 8007206:	6023      	strmi	r3, [r4, #0]
 8007208:	b11d      	cbz	r5, 8007212 <_printf_i+0x19e>
 800720a:	2310      	movs	r3, #16
 800720c:	e7ac      	b.n	8007168 <_printf_i+0xf4>
 800720e:	4827      	ldr	r0, [pc, #156]	@ (80072ac <_printf_i+0x238>)
 8007210:	e7e9      	b.n	80071e6 <_printf_i+0x172>
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	f023 0320 	bic.w	r3, r3, #32
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	e7f6      	b.n	800720a <_printf_i+0x196>
 800721c:	4616      	mov	r6, r2
 800721e:	e7bd      	b.n	800719c <_printf_i+0x128>
 8007220:	6833      	ldr	r3, [r6, #0]
 8007222:	6825      	ldr	r5, [r4, #0]
 8007224:	6961      	ldr	r1, [r4, #20]
 8007226:	1d18      	adds	r0, r3, #4
 8007228:	6030      	str	r0, [r6, #0]
 800722a:	062e      	lsls	r6, r5, #24
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	d501      	bpl.n	8007234 <_printf_i+0x1c0>
 8007230:	6019      	str	r1, [r3, #0]
 8007232:	e002      	b.n	800723a <_printf_i+0x1c6>
 8007234:	0668      	lsls	r0, r5, #25
 8007236:	d5fb      	bpl.n	8007230 <_printf_i+0x1bc>
 8007238:	8019      	strh	r1, [r3, #0]
 800723a:	2300      	movs	r3, #0
 800723c:	6123      	str	r3, [r4, #16]
 800723e:	4616      	mov	r6, r2
 8007240:	e7bc      	b.n	80071bc <_printf_i+0x148>
 8007242:	6833      	ldr	r3, [r6, #0]
 8007244:	1d1a      	adds	r2, r3, #4
 8007246:	6032      	str	r2, [r6, #0]
 8007248:	681e      	ldr	r6, [r3, #0]
 800724a:	6862      	ldr	r2, [r4, #4]
 800724c:	2100      	movs	r1, #0
 800724e:	4630      	mov	r0, r6
 8007250:	f7f8 ffe6 	bl	8000220 <memchr>
 8007254:	b108      	cbz	r0, 800725a <_printf_i+0x1e6>
 8007256:	1b80      	subs	r0, r0, r6
 8007258:	6060      	str	r0, [r4, #4]
 800725a:	6863      	ldr	r3, [r4, #4]
 800725c:	6123      	str	r3, [r4, #16]
 800725e:	2300      	movs	r3, #0
 8007260:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007264:	e7aa      	b.n	80071bc <_printf_i+0x148>
 8007266:	6923      	ldr	r3, [r4, #16]
 8007268:	4632      	mov	r2, r6
 800726a:	4649      	mov	r1, r9
 800726c:	4640      	mov	r0, r8
 800726e:	47d0      	blx	sl
 8007270:	3001      	adds	r0, #1
 8007272:	d0ad      	beq.n	80071d0 <_printf_i+0x15c>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	079b      	lsls	r3, r3, #30
 8007278:	d413      	bmi.n	80072a2 <_printf_i+0x22e>
 800727a:	68e0      	ldr	r0, [r4, #12]
 800727c:	9b03      	ldr	r3, [sp, #12]
 800727e:	4298      	cmp	r0, r3
 8007280:	bfb8      	it	lt
 8007282:	4618      	movlt	r0, r3
 8007284:	e7a6      	b.n	80071d4 <_printf_i+0x160>
 8007286:	2301      	movs	r3, #1
 8007288:	4632      	mov	r2, r6
 800728a:	4649      	mov	r1, r9
 800728c:	4640      	mov	r0, r8
 800728e:	47d0      	blx	sl
 8007290:	3001      	adds	r0, #1
 8007292:	d09d      	beq.n	80071d0 <_printf_i+0x15c>
 8007294:	3501      	adds	r5, #1
 8007296:	68e3      	ldr	r3, [r4, #12]
 8007298:	9903      	ldr	r1, [sp, #12]
 800729a:	1a5b      	subs	r3, r3, r1
 800729c:	42ab      	cmp	r3, r5
 800729e:	dcf2      	bgt.n	8007286 <_printf_i+0x212>
 80072a0:	e7eb      	b.n	800727a <_printf_i+0x206>
 80072a2:	2500      	movs	r5, #0
 80072a4:	f104 0619 	add.w	r6, r4, #25
 80072a8:	e7f5      	b.n	8007296 <_printf_i+0x222>
 80072aa:	bf00      	nop
 80072ac:	080081b9 	.word	0x080081b9
 80072b0:	080081ca 	.word	0x080081ca

080072b4 <memmove>:
 80072b4:	4288      	cmp	r0, r1
 80072b6:	b510      	push	{r4, lr}
 80072b8:	eb01 0402 	add.w	r4, r1, r2
 80072bc:	d902      	bls.n	80072c4 <memmove+0x10>
 80072be:	4284      	cmp	r4, r0
 80072c0:	4623      	mov	r3, r4
 80072c2:	d807      	bhi.n	80072d4 <memmove+0x20>
 80072c4:	1e43      	subs	r3, r0, #1
 80072c6:	42a1      	cmp	r1, r4
 80072c8:	d008      	beq.n	80072dc <memmove+0x28>
 80072ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072d2:	e7f8      	b.n	80072c6 <memmove+0x12>
 80072d4:	4402      	add	r2, r0
 80072d6:	4601      	mov	r1, r0
 80072d8:	428a      	cmp	r2, r1
 80072da:	d100      	bne.n	80072de <memmove+0x2a>
 80072dc:	bd10      	pop	{r4, pc}
 80072de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072e6:	e7f7      	b.n	80072d8 <memmove+0x24>

080072e8 <_sbrk_r>:
 80072e8:	b538      	push	{r3, r4, r5, lr}
 80072ea:	4d06      	ldr	r5, [pc, #24]	@ (8007304 <_sbrk_r+0x1c>)
 80072ec:	2300      	movs	r3, #0
 80072ee:	4604      	mov	r4, r0
 80072f0:	4608      	mov	r0, r1
 80072f2:	602b      	str	r3, [r5, #0]
 80072f4:	f7fa f858 	bl	80013a8 <_sbrk>
 80072f8:	1c43      	adds	r3, r0, #1
 80072fa:	d102      	bne.n	8007302 <_sbrk_r+0x1a>
 80072fc:	682b      	ldr	r3, [r5, #0]
 80072fe:	b103      	cbz	r3, 8007302 <_sbrk_r+0x1a>
 8007300:	6023      	str	r3, [r4, #0]
 8007302:	bd38      	pop	{r3, r4, r5, pc}
 8007304:	200050ac 	.word	0x200050ac

08007308 <_realloc_r>:
 8007308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800730c:	4680      	mov	r8, r0
 800730e:	4615      	mov	r5, r2
 8007310:	460c      	mov	r4, r1
 8007312:	b921      	cbnz	r1, 800731e <_realloc_r+0x16>
 8007314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007318:	4611      	mov	r1, r2
 800731a:	f7ff bc59 	b.w	8006bd0 <_malloc_r>
 800731e:	b92a      	cbnz	r2, 800732c <_realloc_r+0x24>
 8007320:	f7ff fbea 	bl	8006af8 <_free_r>
 8007324:	2400      	movs	r4, #0
 8007326:	4620      	mov	r0, r4
 8007328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800732c:	f000 f81a 	bl	8007364 <_malloc_usable_size_r>
 8007330:	4285      	cmp	r5, r0
 8007332:	4606      	mov	r6, r0
 8007334:	d802      	bhi.n	800733c <_realloc_r+0x34>
 8007336:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800733a:	d8f4      	bhi.n	8007326 <_realloc_r+0x1e>
 800733c:	4629      	mov	r1, r5
 800733e:	4640      	mov	r0, r8
 8007340:	f7ff fc46 	bl	8006bd0 <_malloc_r>
 8007344:	4607      	mov	r7, r0
 8007346:	2800      	cmp	r0, #0
 8007348:	d0ec      	beq.n	8007324 <_realloc_r+0x1c>
 800734a:	42b5      	cmp	r5, r6
 800734c:	462a      	mov	r2, r5
 800734e:	4621      	mov	r1, r4
 8007350:	bf28      	it	cs
 8007352:	4632      	movcs	r2, r6
 8007354:	f7ff fbc2 	bl	8006adc <memcpy>
 8007358:	4621      	mov	r1, r4
 800735a:	4640      	mov	r0, r8
 800735c:	f7ff fbcc 	bl	8006af8 <_free_r>
 8007360:	463c      	mov	r4, r7
 8007362:	e7e0      	b.n	8007326 <_realloc_r+0x1e>

08007364 <_malloc_usable_size_r>:
 8007364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007368:	1f18      	subs	r0, r3, #4
 800736a:	2b00      	cmp	r3, #0
 800736c:	bfbc      	itt	lt
 800736e:	580b      	ldrlt	r3, [r1, r0]
 8007370:	18c0      	addlt	r0, r0, r3
 8007372:	4770      	bx	lr

08007374 <_init>:
 8007374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007376:	bf00      	nop
 8007378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800737a:	bc08      	pop	{r3}
 800737c:	469e      	mov	lr, r3
 800737e:	4770      	bx	lr

08007380 <_fini>:
 8007380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007382:	bf00      	nop
 8007384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007386:	bc08      	pop	{r3}
 8007388:	469e      	mov	lr, r3
 800738a:	4770      	bx	lr
