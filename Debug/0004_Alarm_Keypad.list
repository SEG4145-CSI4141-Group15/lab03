
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b80  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e88  08006d50  08006d50  00007d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bd8  08007bd8  0000907c  2**0
                  CONTENTS
  4 .ARM          00000008  08007bd8  08007bd8  00008bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007be0  08007be0  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007be0  08007be0  00008be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007be4  08007be4  00008be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007be8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000501c  2000007c  08007c64  0000907c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005098  08007c64  00009098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000190a5  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000383f  00000000  00000000  00022151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  00025990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001131  00000000  00000000  00026fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f2f  00000000  00000000  000280d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a748  00000000  00000000  0004c008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbd9e  00000000  00000000  00066750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001424ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006084  00000000  00000000  00142534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  001485b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006d38 	.word	0x08006d38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08006d38 	.word	0x08006d38

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b96a 	b.w	8000520 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9d08      	ldr	r5, [sp, #32]
 800026a:	460c      	mov	r4, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14e      	bne.n	800030e <__udivmoddi4+0xaa>
 8000270:	4694      	mov	ip, r2
 8000272:	458c      	cmp	ip, r1
 8000274:	4686      	mov	lr, r0
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	d962      	bls.n	8000342 <__udivmoddi4+0xde>
 800027c:	b14a      	cbz	r2, 8000292 <__udivmoddi4+0x2e>
 800027e:	f1c2 0320 	rsb	r3, r2, #32
 8000282:	4091      	lsls	r1, r2
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	4319      	orrs	r1, r3
 800028e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000292:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000296:	fa1f f68c 	uxth.w	r6, ip
 800029a:	fbb1 f4f7 	udiv	r4, r1, r7
 800029e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a2:	fb07 1114 	mls	r1, r7, r4, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb04 f106 	mul.w	r1, r4, r6
 80002ae:	4299      	cmp	r1, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x64>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ba:	f080 8112 	bcs.w	80004e2 <__udivmoddi4+0x27e>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 810f 	bls.w	80004e2 <__udivmoddi4+0x27e>
 80002c4:	3c02      	subs	r4, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a59      	subs	r1, r3, r1
 80002ca:	fa1f f38e 	uxth.w	r3, lr
 80002ce:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d2:	fb07 1110 	mls	r1, r7, r0, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb00 f606 	mul.w	r6, r0, r6
 80002de:	429e      	cmp	r6, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x94>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ea:	f080 80fc 	bcs.w	80004e6 <__udivmoddi4+0x282>
 80002ee:	429e      	cmp	r6, r3
 80002f0:	f240 80f9 	bls.w	80004e6 <__udivmoddi4+0x282>
 80002f4:	4463      	add	r3, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	1b9b      	subs	r3, r3, r6
 80002fa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa6>
 8000302:	40d3      	lsrs	r3, r2
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xba>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb4>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa6>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x150>
 8000326:	42a3      	cmp	r3, r4
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xcc>
 800032a:	4290      	cmp	r0, r2
 800032c:	f0c0 80f0 	bcc.w	8000510 <__udivmoddi4+0x2ac>
 8000330:	1a86      	subs	r6, r0, r2
 8000332:	eb64 0303 	sbc.w	r3, r4, r3
 8000336:	2001      	movs	r0, #1
 8000338:	2d00      	cmp	r5, #0
 800033a:	d0e6      	beq.n	800030a <__udivmoddi4+0xa6>
 800033c:	e9c5 6300 	strd	r6, r3, [r5]
 8000340:	e7e3      	b.n	800030a <__udivmoddi4+0xa6>
 8000342:	2a00      	cmp	r2, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x204>
 8000348:	eba1 040c 	sub.w	r4, r1, ip
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	fa1f f78c 	uxth.w	r7, ip
 8000354:	2101      	movs	r1, #1
 8000356:	fbb4 f6f8 	udiv	r6, r4, r8
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb08 4416 	mls	r4, r8, r6, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb07 f006 	mul.w	r0, r7, r6
 800036a:	4298      	cmp	r0, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x11c>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 34ff 	add.w	r4, r6, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x11a>
 8000378:	4298      	cmp	r0, r3
 800037a:	f200 80cd 	bhi.w	8000518 <__udivmoddi4+0x2b4>
 800037e:	4626      	mov	r6, r4
 8000380:	1a1c      	subs	r4, r3, r0
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb4 f0f8 	udiv	r0, r4, r8
 800038a:	fb08 4410 	mls	r4, r8, r0, r4
 800038e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000392:	fb00 f707 	mul.w	r7, r0, r7
 8000396:	429f      	cmp	r7, r3
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x148>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x146>
 80003a4:	429f      	cmp	r7, r3
 80003a6:	f200 80b0 	bhi.w	800050a <__udivmoddi4+0x2a6>
 80003aa:	4620      	mov	r0, r4
 80003ac:	1bdb      	subs	r3, r3, r7
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x9c>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c4:	fa04 f301 	lsl.w	r3, r4, r1
 80003c8:	ea43 030c 	orr.w	r3, r3, ip
 80003cc:	40f4      	lsrs	r4, r6
 80003ce:	fa00 f801 	lsl.w	r8, r0, r1
 80003d2:	0c38      	lsrs	r0, r7, #16
 80003d4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d8:	fbb4 fef0 	udiv	lr, r4, r0
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	fb00 441e 	mls	r4, r0, lr, r4
 80003e4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e8:	fb0e f90c 	mul.w	r9, lr, ip
 80003ec:	45a1      	cmp	r9, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90a      	bls.n	800040a <__udivmoddi4+0x1a6>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fa:	f080 8084 	bcs.w	8000506 <__udivmoddi4+0x2a2>
 80003fe:	45a1      	cmp	r9, r4
 8000400:	f240 8081 	bls.w	8000506 <__udivmoddi4+0x2a2>
 8000404:	f1ae 0e02 	sub.w	lr, lr, #2
 8000408:	443c      	add	r4, r7
 800040a:	eba4 0409 	sub.w	r4, r4, r9
 800040e:	fa1f f983 	uxth.w	r9, r3
 8000412:	fbb4 f3f0 	udiv	r3, r4, r0
 8000416:	fb00 4413 	mls	r4, r0, r3, r4
 800041a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000422:	45a4      	cmp	ip, r4
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x1d2>
 8000426:	193c      	adds	r4, r7, r4
 8000428:	f103 30ff 	add.w	r0, r3, #4294967295
 800042c:	d267      	bcs.n	80004fe <__udivmoddi4+0x29a>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d965      	bls.n	80004fe <__udivmoddi4+0x29a>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043a:	fba0 9302 	umull	r9, r3, r0, r2
 800043e:	eba4 040c 	sub.w	r4, r4, ip
 8000442:	429c      	cmp	r4, r3
 8000444:	46ce      	mov	lr, r9
 8000446:	469c      	mov	ip, r3
 8000448:	d351      	bcc.n	80004ee <__udivmoddi4+0x28a>
 800044a:	d04e      	beq.n	80004ea <__udivmoddi4+0x286>
 800044c:	b155      	cbz	r5, 8000464 <__udivmoddi4+0x200>
 800044e:	ebb8 030e 	subs.w	r3, r8, lr
 8000452:	eb64 040c 	sbc.w	r4, r4, ip
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	40cb      	lsrs	r3, r1
 800045c:	431e      	orrs	r6, r3
 800045e:	40cc      	lsrs	r4, r1
 8000460:	e9c5 6400 	strd	r6, r4, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	e750      	b.n	800030a <__udivmoddi4+0xa6>
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa24 f303 	lsr.w	r3, r4, r3
 8000478:	4094      	lsls	r4, r2
 800047a:	430c      	orrs	r4, r1
 800047c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000480:	fa00 fe02 	lsl.w	lr, r0, r2
 8000484:	fa1f f78c 	uxth.w	r7, ip
 8000488:	fbb3 f0f8 	udiv	r0, r3, r8
 800048c:	fb08 3110 	mls	r1, r8, r0, r3
 8000490:	0c23      	lsrs	r3, r4, #16
 8000492:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000496:	fb00 f107 	mul.w	r1, r0, r7
 800049a:	4299      	cmp	r1, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x24c>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a6:	d22c      	bcs.n	8000502 <__udivmoddi4+0x29e>
 80004a8:	4299      	cmp	r1, r3
 80004aa:	d92a      	bls.n	8000502 <__udivmoddi4+0x29e>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a5b      	subs	r3, r3, r1
 80004b2:	b2a4      	uxth	r4, r4
 80004b4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b8:	fb08 3311 	mls	r3, r8, r1, r3
 80004bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c0:	fb01 f307 	mul.w	r3, r1, r7
 80004c4:	42a3      	cmp	r3, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x276>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d0:	d213      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004d2:	42a3      	cmp	r3, r4
 80004d4:	d911      	bls.n	80004fa <__udivmoddi4+0x296>
 80004d6:	3902      	subs	r1, #2
 80004d8:	4464      	add	r4, ip
 80004da:	1ae4      	subs	r4, r4, r3
 80004dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e0:	e739      	b.n	8000356 <__udivmoddi4+0xf2>
 80004e2:	4604      	mov	r4, r0
 80004e4:	e6f0      	b.n	80002c8 <__udivmoddi4+0x64>
 80004e6:	4608      	mov	r0, r1
 80004e8:	e706      	b.n	80002f8 <__udivmoddi4+0x94>
 80004ea:	45c8      	cmp	r8, r9
 80004ec:	d2ae      	bcs.n	800044c <__udivmoddi4+0x1e8>
 80004ee:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7a8      	b.n	800044c <__udivmoddi4+0x1e8>
 80004fa:	4631      	mov	r1, r6
 80004fc:	e7ed      	b.n	80004da <__udivmoddi4+0x276>
 80004fe:	4603      	mov	r3, r0
 8000500:	e799      	b.n	8000436 <__udivmoddi4+0x1d2>
 8000502:	4630      	mov	r0, r6
 8000504:	e7d4      	b.n	80004b0 <__udivmoddi4+0x24c>
 8000506:	46d6      	mov	lr, sl
 8000508:	e77f      	b.n	800040a <__udivmoddi4+0x1a6>
 800050a:	4463      	add	r3, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e74d      	b.n	80003ac <__udivmoddi4+0x148>
 8000510:	4606      	mov	r6, r0
 8000512:	4623      	mov	r3, r4
 8000514:	4608      	mov	r0, r1
 8000516:	e70f      	b.n	8000338 <__udivmoddi4+0xd4>
 8000518:	3e02      	subs	r6, #2
 800051a:	4463      	add	r3, ip
 800051c:	e730      	b.n	8000380 <__udivmoddi4+0x11c>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
	int done=1;
 800052a:	2301      	movs	r3, #1
 800052c:	607b      	str	r3, [r7, #4]
	while(done)
 800052e:	e19b      	b.n	8000868 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000536:	48b3      	ldr	r0, [pc, #716]	@ (8000804 <Get_Key+0x2e0>)
 8000538:	f001 fbda 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 800053c:	2200      	movs	r2, #0
 800053e:	2110      	movs	r1, #16
 8000540:	48b0      	ldr	r0, [pc, #704]	@ (8000804 <Get_Key+0x2e0>)
 8000542:	f001 fbd5 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000546:	2200      	movs	r2, #0
 8000548:	2120      	movs	r1, #32
 800054a:	48ae      	ldr	r0, [pc, #696]	@ (8000804 <Get_Key+0x2e0>)
 800054c:	f001 fbd0 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000550:	2200      	movs	r2, #0
 8000552:	2108      	movs	r1, #8
 8000554:	48ab      	ldr	r0, [pc, #684]	@ (8000804 <Get_Key+0x2e0>)
 8000556:	f001 fbcb 	bl	8001cf0 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 800055a:	2140      	movs	r1, #64	@ 0x40
 800055c:	48a9      	ldr	r0, [pc, #676]	@ (8000804 <Get_Key+0x2e0>)
 800055e:	f001 fbaf 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d00b      	beq.n	8000580 <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000568:	bf00      	nop
 800056a:	2140      	movs	r1, #64	@ 0x40
 800056c:	48a5      	ldr	r0, [pc, #660]	@ (8000804 <Get_Key+0x2e0>)
 800056e:	f001 fba7 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d1f8      	bne.n	800056a <Get_Key+0x46>
		key='1';
 8000578:	4ba3      	ldr	r3, [pc, #652]	@ (8000808 <Get_Key+0x2e4>)
 800057a:	2231      	movs	r2, #49	@ 0x31
 800057c:	701a      	strb	r2, [r3, #0]
		break;
 800057e:	e177      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000580:	2180      	movs	r1, #128	@ 0x80
 8000582:	48a2      	ldr	r0, [pc, #648]	@ (800080c <Get_Key+0x2e8>)
 8000584:	f001 fb9c 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d00b      	beq.n	80005a6 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800058e:	bf00      	nop
 8000590:	2180      	movs	r1, #128	@ 0x80
 8000592:	489e      	ldr	r0, [pc, #632]	@ (800080c <Get_Key+0x2e8>)
 8000594:	f001 fb94 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d1f8      	bne.n	8000590 <Get_Key+0x6c>
		key='4';
 800059e:	4b9a      	ldr	r3, [pc, #616]	@ (8000808 <Get_Key+0x2e4>)
 80005a0:	2234      	movs	r2, #52	@ 0x34
 80005a2:	701a      	strb	r2, [r3, #0]
		break;
 80005a4:	e164      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80005a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005aa:	4899      	ldr	r0, [pc, #612]	@ (8000810 <Get_Key+0x2ec>)
 80005ac:	f001 fb88 	bl	8001cc0 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00c      	beq.n	80005d0 <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80005b6:	bf00      	nop
 80005b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005bc:	4894      	ldr	r0, [pc, #592]	@ (8000810 <Get_Key+0x2ec>)
 80005be:	f001 fb7f 	bl	8001cc0 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1f7      	bne.n	80005b8 <Get_Key+0x94>
		key='7';
 80005c8:	4b8f      	ldr	r3, [pc, #572]	@ (8000808 <Get_Key+0x2e4>)
 80005ca:	2237      	movs	r2, #55	@ 0x37
 80005cc:	701a      	strb	r2, [r3, #0]
		break;
 80005ce:	e14f      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80005d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d4:	488e      	ldr	r0, [pc, #568]	@ (8000810 <Get_Key+0x2ec>)
 80005d6:	f001 fb73 	bl	8001cc0 <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00c      	beq.n	80005fa <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80005e0:	bf00      	nop
 80005e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005e6:	488a      	ldr	r0, [pc, #552]	@ (8000810 <Get_Key+0x2ec>)
 80005e8:	f001 fb6a 	bl	8001cc0 <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1f7      	bne.n	80005e2 <Get_Key+0xbe>
		key='*';
 80005f2:	4b85      	ldr	r3, [pc, #532]	@ (8000808 <Get_Key+0x2e4>)
 80005f4:	222a      	movs	r2, #42	@ 0x2a
 80005f6:	701a      	strb	r2, [r3, #0]
		break;
 80005f8:	e13a      	b.n	8000870 <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000600:	4880      	ldr	r0, [pc, #512]	@ (8000804 <Get_Key+0x2e0>)
 8000602:	f001 fb75 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 8000606:	2201      	movs	r2, #1
 8000608:	2110      	movs	r1, #16
 800060a:	487e      	ldr	r0, [pc, #504]	@ (8000804 <Get_Key+0x2e0>)
 800060c:	f001 fb70 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000610:	2200      	movs	r2, #0
 8000612:	2120      	movs	r1, #32
 8000614:	487b      	ldr	r0, [pc, #492]	@ (8000804 <Get_Key+0x2e0>)
 8000616:	f001 fb6b 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 800061a:	2200      	movs	r2, #0
 800061c:	2108      	movs	r1, #8
 800061e:	4879      	ldr	r0, [pc, #484]	@ (8000804 <Get_Key+0x2e0>)
 8000620:	f001 fb66 	bl	8001cf0 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000624:	2140      	movs	r1, #64	@ 0x40
 8000626:	4877      	ldr	r0, [pc, #476]	@ (8000804 <Get_Key+0x2e0>)
 8000628:	f001 fb4a 	bl	8001cc0 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d00b      	beq.n	800064a <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000632:	bf00      	nop
 8000634:	2140      	movs	r1, #64	@ 0x40
 8000636:	4873      	ldr	r0, [pc, #460]	@ (8000804 <Get_Key+0x2e0>)
 8000638:	f001 fb42 	bl	8001cc0 <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1f8      	bne.n	8000634 <Get_Key+0x110>
		key='2';
 8000642:	4b71      	ldr	r3, [pc, #452]	@ (8000808 <Get_Key+0x2e4>)
 8000644:	2232      	movs	r2, #50	@ 0x32
 8000646:	701a      	strb	r2, [r3, #0]
		break;
 8000648:	e112      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800064a:	2180      	movs	r1, #128	@ 0x80
 800064c:	486f      	ldr	r0, [pc, #444]	@ (800080c <Get_Key+0x2e8>)
 800064e:	f001 fb37 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d00b      	beq.n	8000670 <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000658:	bf00      	nop
 800065a:	2180      	movs	r1, #128	@ 0x80
 800065c:	486b      	ldr	r0, [pc, #428]	@ (800080c <Get_Key+0x2e8>)
 800065e:	f001 fb2f 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f8      	bne.n	800065a <Get_Key+0x136>
		key='5';
 8000668:	4b67      	ldr	r3, [pc, #412]	@ (8000808 <Get_Key+0x2e4>)
 800066a:	2235      	movs	r2, #53	@ 0x35
 800066c:	701a      	strb	r2, [r3, #0]
		break;
 800066e:	e0ff      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000670:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000674:	4866      	ldr	r0, [pc, #408]	@ (8000810 <Get_Key+0x2ec>)
 8000676:	f001 fb23 	bl	8001cc0 <HAL_GPIO_ReadPin>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00c      	beq.n	800069a <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000680:	bf00      	nop
 8000682:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000686:	4862      	ldr	r0, [pc, #392]	@ (8000810 <Get_Key+0x2ec>)
 8000688:	f001 fb1a 	bl	8001cc0 <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f7      	bne.n	8000682 <Get_Key+0x15e>
		key='8';
 8000692:	4b5d      	ldr	r3, [pc, #372]	@ (8000808 <Get_Key+0x2e4>)
 8000694:	2238      	movs	r2, #56	@ 0x38
 8000696:	701a      	strb	r2, [r3, #0]
		break;
 8000698:	e0ea      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800069a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800069e:	485c      	ldr	r0, [pc, #368]	@ (8000810 <Get_Key+0x2ec>)
 80006a0:	f001 fb0e 	bl	8001cc0 <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d00c      	beq.n	80006c4 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80006aa:	bf00      	nop
 80006ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006b0:	4857      	ldr	r0, [pc, #348]	@ (8000810 <Get_Key+0x2ec>)
 80006b2:	f001 fb05 	bl	8001cc0 <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1f7      	bne.n	80006ac <Get_Key+0x188>
		key='0';
 80006bc:	4b52      	ldr	r3, [pc, #328]	@ (8000808 <Get_Key+0x2e4>)
 80006be:	2230      	movs	r2, #48	@ 0x30
 80006c0:	701a      	strb	r2, [r3, #0]
		break;
 80006c2:	e0d5      	b.n	8000870 <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ca:	484e      	ldr	r0, [pc, #312]	@ (8000804 <Get_Key+0x2e0>)
 80006cc:	f001 fb10 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 80006d0:	2200      	movs	r2, #0
 80006d2:	2110      	movs	r1, #16
 80006d4:	484b      	ldr	r0, [pc, #300]	@ (8000804 <Get_Key+0x2e0>)
 80006d6:	f001 fb0b 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 80006da:	2201      	movs	r2, #1
 80006dc:	2120      	movs	r1, #32
 80006de:	4849      	ldr	r0, [pc, #292]	@ (8000804 <Get_Key+0x2e0>)
 80006e0:	f001 fb06 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 80006e4:	2200      	movs	r2, #0
 80006e6:	2108      	movs	r1, #8
 80006e8:	4846      	ldr	r0, [pc, #280]	@ (8000804 <Get_Key+0x2e0>)
 80006ea:	f001 fb01 	bl	8001cf0 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006ee:	2140      	movs	r1, #64	@ 0x40
 80006f0:	4844      	ldr	r0, [pc, #272]	@ (8000804 <Get_Key+0x2e0>)
 80006f2:	f001 fae5 	bl	8001cc0 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00b      	beq.n	8000714 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006fc:	bf00      	nop
 80006fe:	2140      	movs	r1, #64	@ 0x40
 8000700:	4840      	ldr	r0, [pc, #256]	@ (8000804 <Get_Key+0x2e0>)
 8000702:	f001 fadd 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d1f8      	bne.n	80006fe <Get_Key+0x1da>
		key='3';
 800070c:	4b3e      	ldr	r3, [pc, #248]	@ (8000808 <Get_Key+0x2e4>)
 800070e:	2233      	movs	r2, #51	@ 0x33
 8000710:	701a      	strb	r2, [r3, #0]
		break;
 8000712:	e0ad      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000714:	2180      	movs	r1, #128	@ 0x80
 8000716:	483d      	ldr	r0, [pc, #244]	@ (800080c <Get_Key+0x2e8>)
 8000718:	f001 fad2 	bl	8001cc0 <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d00b      	beq.n	800073a <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000722:	bf00      	nop
 8000724:	2180      	movs	r1, #128	@ 0x80
 8000726:	4839      	ldr	r0, [pc, #228]	@ (800080c <Get_Key+0x2e8>)
 8000728:	f001 faca 	bl	8001cc0 <HAL_GPIO_ReadPin>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1f8      	bne.n	8000724 <Get_Key+0x200>
		key='6';
 8000732:	4b35      	ldr	r3, [pc, #212]	@ (8000808 <Get_Key+0x2e4>)
 8000734:	2236      	movs	r2, #54	@ 0x36
 8000736:	701a      	strb	r2, [r3, #0]
		break;
 8000738:	e09a      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800073a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800073e:	4834      	ldr	r0, [pc, #208]	@ (8000810 <Get_Key+0x2ec>)
 8000740:	f001 fabe 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00c      	beq.n	8000764 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800074a:	bf00      	nop
 800074c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000750:	482f      	ldr	r0, [pc, #188]	@ (8000810 <Get_Key+0x2ec>)
 8000752:	f001 fab5 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1f7      	bne.n	800074c <Get_Key+0x228>
		key='9';
 800075c:	4b2a      	ldr	r3, [pc, #168]	@ (8000808 <Get_Key+0x2e4>)
 800075e:	2239      	movs	r2, #57	@ 0x39
 8000760:	701a      	strb	r2, [r3, #0]
		break;
 8000762:	e085      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000764:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000768:	4829      	ldr	r0, [pc, #164]	@ (8000810 <Get_Key+0x2ec>)
 800076a:	f001 faa9 	bl	8001cc0 <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d00c      	beq.n	800078e <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000774:	bf00      	nop
 8000776:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800077a:	4825      	ldr	r0, [pc, #148]	@ (8000810 <Get_Key+0x2ec>)
 800077c:	f001 faa0 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1f7      	bne.n	8000776 <Get_Key+0x252>
		key='#';
 8000786:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <Get_Key+0x2e4>)
 8000788:	2223      	movs	r2, #35	@ 0x23
 800078a:	701a      	strb	r2, [r3, #0]
		break;
 800078c:	e070      	b.n	8000870 <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000794:	481b      	ldr	r0, [pc, #108]	@ (8000804 <Get_Key+0x2e0>)
 8000796:	f001 faab 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 800079a:	2200      	movs	r2, #0
 800079c:	2110      	movs	r1, #16
 800079e:	4819      	ldr	r0, [pc, #100]	@ (8000804 <Get_Key+0x2e0>)
 80007a0:	f001 faa6 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80007a4:	2200      	movs	r2, #0
 80007a6:	2120      	movs	r1, #32
 80007a8:	4816      	ldr	r0, [pc, #88]	@ (8000804 <Get_Key+0x2e0>)
 80007aa:	f001 faa1 	bl	8001cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 80007ae:	2201      	movs	r2, #1
 80007b0:	2108      	movs	r1, #8
 80007b2:	4814      	ldr	r0, [pc, #80]	@ (8000804 <Get_Key+0x2e0>)
 80007b4:	f001 fa9c 	bl	8001cf0 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80007b8:	2140      	movs	r1, #64	@ 0x40
 80007ba:	4812      	ldr	r0, [pc, #72]	@ (8000804 <Get_Key+0x2e0>)
 80007bc:	f001 fa80 	bl	8001cc0 <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00b      	beq.n	80007de <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80007c6:	bf00      	nop
 80007c8:	2140      	movs	r1, #64	@ 0x40
 80007ca:	480e      	ldr	r0, [pc, #56]	@ (8000804 <Get_Key+0x2e0>)
 80007cc:	f001 fa78 	bl	8001cc0 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f8      	bne.n	80007c8 <Get_Key+0x2a4>
		key='A';
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <Get_Key+0x2e4>)
 80007d8:	2241      	movs	r2, #65	@ 0x41
 80007da:	701a      	strb	r2, [r3, #0]
		break;
 80007dc:	e048      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007de:	2180      	movs	r1, #128	@ 0x80
 80007e0:	480a      	ldr	r0, [pc, #40]	@ (800080c <Get_Key+0x2e8>)
 80007e2:	f001 fa6d 	bl	8001cc0 <HAL_GPIO_ReadPin>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d013      	beq.n	8000814 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007ec:	bf00      	nop
 80007ee:	2180      	movs	r1, #128	@ 0x80
 80007f0:	4806      	ldr	r0, [pc, #24]	@ (800080c <Get_Key+0x2e8>)
 80007f2:	f001 fa65 	bl	8001cc0 <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f8      	bne.n	80007ee <Get_Key+0x2ca>
		key='B';
 80007fc:	4b02      	ldr	r3, [pc, #8]	@ (8000808 <Get_Key+0x2e4>)
 80007fe:	2242      	movs	r2, #66	@ 0x42
 8000800:	701a      	strb	r2, [r3, #0]
		break;
 8000802:	e035      	b.n	8000870 <Get_Key+0x34c>
 8000804:	40020400 	.word	0x40020400
 8000808:	20000098 	.word	0x20000098
 800080c:	40020800 	.word	0x40020800
 8000810:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000814:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000818:	481a      	ldr	r0, [pc, #104]	@ (8000884 <Get_Key+0x360>)
 800081a:	f001 fa51 	bl	8001cc0 <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00c      	beq.n	800083e <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000824:	bf00      	nop
 8000826:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800082a:	4816      	ldr	r0, [pc, #88]	@ (8000884 <Get_Key+0x360>)
 800082c:	f001 fa48 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1f7      	bne.n	8000826 <Get_Key+0x302>
		key='C';
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <Get_Key+0x364>)
 8000838:	2243      	movs	r2, #67	@ 0x43
 800083a:	701a      	strb	r2, [r3, #0]
		break;
 800083c:	e018      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800083e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000842:	4810      	ldr	r0, [pc, #64]	@ (8000884 <Get_Key+0x360>)
 8000844:	f001 fa3c 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00c      	beq.n	8000868 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800084e:	bf00      	nop
 8000850:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000854:	480b      	ldr	r0, [pc, #44]	@ (8000884 <Get_Key+0x360>)
 8000856:	f001 fa33 	bl	8001cc0 <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1f7      	bne.n	8000850 <Get_Key+0x32c>
		key='D';
 8000860:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <Get_Key+0x364>)
 8000862:	2244      	movs	r2, #68	@ 0x44
 8000864:	701a      	strb	r2, [r3, #0]
		break;
 8000866:	e003      	b.n	8000870 <Get_Key+0x34c>
	while(done)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	f47f ae60 	bne.w	8000530 <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000870:	2120      	movs	r1, #32
 8000872:	4804      	ldr	r0, [pc, #16]	@ (8000884 <Get_Key+0x360>)
 8000874:	f001 fa55 	bl	8001d22 <HAL_GPIO_TogglePin>
	return(key);
 8000878:	4b03      	ldr	r3, [pc, #12]	@ (8000888 <Get_Key+0x364>)
 800087a:	781b      	ldrb	r3, [r3, #0]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40020000 	.word	0x40020000
 8000888:	20000098 	.word	0x20000098

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000890:	f000 ff5e 	bl	8001750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000894:	f000 f858 	bl	8000948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000898:	f000 f8f2 	bl	8000a80 <MX_GPIO_Init>
  MX_I2C1_Init();
 800089c:	f000 f8c2 	bl	8000a24 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008a0:	f003 f912 	bl	8003ac8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
	xSemaphore = xSemaphoreCreateMutex();
 80008a4:	2001      	movs	r0, #1
 80008a6:	f003 fc4e 	bl	8004146 <xQueueCreateMutex>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a16      	ldr	r2, [pc, #88]	@ (8000908 <main+0x7c>)
 80008ae:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of KeypadTask */
  KeypadTaskHandle = osThreadNew(StartKeypadTask, NULL, &KeypadTask_attributes);
 80008b0:	4a16      	ldr	r2, [pc, #88]	@ (800090c <main+0x80>)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4816      	ldr	r0, [pc, #88]	@ (8000910 <main+0x84>)
 80008b6:	f003 f951 	bl	8003b5c <osThreadNew>
 80008ba:	4603      	mov	r3, r0
 80008bc:	4a15      	ldr	r2, [pc, #84]	@ (8000914 <main+0x88>)
 80008be:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(StartLCDTask, NULL, &LCDTask_attributes);
 80008c0:	4a15      	ldr	r2, [pc, #84]	@ (8000918 <main+0x8c>)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4815      	ldr	r0, [pc, #84]	@ (800091c <main+0x90>)
 80008c6:	f003 f949 	bl	8003b5c <osThreadNew>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4a14      	ldr	r2, [pc, #80]	@ (8000920 <main+0x94>)
 80008ce:	6013      	str	r3, [r2, #0]

  /* creation of LEDsTask */
  LEDsTaskHandle = osThreadNew(StartLEDsTask, NULL, &LEDsTask_attributes);
 80008d0:	4a14      	ldr	r2, [pc, #80]	@ (8000924 <main+0x98>)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4814      	ldr	r0, [pc, #80]	@ (8000928 <main+0x9c>)
 80008d6:	f003 f941 	bl	8003b5c <osThreadNew>
 80008da:	4603      	mov	r3, r0
 80008dc:	4a13      	ldr	r2, [pc, #76]	@ (800092c <main+0xa0>)
 80008de:	6013      	str	r3, [r2, #0]

  /* creation of PIRTask */
  PIRTaskHandle = osThreadNew(StartPIRTask, NULL, &PIRTask_attributes);
 80008e0:	4a13      	ldr	r2, [pc, #76]	@ (8000930 <main+0xa4>)
 80008e2:	2100      	movs	r1, #0
 80008e4:	4813      	ldr	r0, [pc, #76]	@ (8000934 <main+0xa8>)
 80008e6:	f003 f939 	bl	8003b5c <osThreadNew>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4a12      	ldr	r2, [pc, #72]	@ (8000938 <main+0xac>)
 80008ee:	6013      	str	r3, [r2, #0]

  /* creation of BuzzerTask */
  BuzzerTaskHandle = osThreadNew(StartBuzzerTask, NULL, &BuzzerTask_attributes);
 80008f0:	4a12      	ldr	r2, [pc, #72]	@ (800093c <main+0xb0>)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4812      	ldr	r0, [pc, #72]	@ (8000940 <main+0xb4>)
 80008f6:	f003 f931 	bl	8003b5c <osThreadNew>
 80008fa:	4603      	mov	r3, r0
 80008fc:	4a11      	ldr	r2, [pc, #68]	@ (8000944 <main+0xb8>)
 80008fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000900:	f003 f906 	bl	8003b10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <main+0x78>
 8000908:	20000118 	.word	0x20000118
 800090c:	08007b0c 	.word	0x08007b0c
 8000910:	08000c0d 	.word	0x08000c0d
 8000914:	200000f0 	.word	0x200000f0
 8000918:	08007b30 	.word	0x08007b30
 800091c:	08000d19 	.word	0x08000d19
 8000920:	200000f4 	.word	0x200000f4
 8000924:	08007b54 	.word	0x08007b54
 8000928:	08000e0d 	.word	0x08000e0d
 800092c:	200000f8 	.word	0x200000f8
 8000930:	08007b78 	.word	0x08007b78
 8000934:	08000e61 	.word	0x08000e61
 8000938:	200000fc 	.word	0x200000fc
 800093c:	08007b9c 	.word	0x08007b9c
 8000940:	08000ec9 	.word	0x08000ec9
 8000944:	20000100 	.word	0x20000100

08000948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b094      	sub	sp, #80	@ 0x50
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	2234      	movs	r2, #52	@ 0x34
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f006 f8fe 	bl	8006b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	4b2a      	ldr	r3, [pc, #168]	@ (8000a1c <SystemClock_Config+0xd4>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000974:	4a29      	ldr	r2, [pc, #164]	@ (8000a1c <SystemClock_Config+0xd4>)
 8000976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800097a:	6413      	str	r3, [r2, #64]	@ 0x40
 800097c:	4b27      	ldr	r3, [pc, #156]	@ (8000a1c <SystemClock_Config+0xd4>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000988:	2300      	movs	r3, #0
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	4b24      	ldr	r3, [pc, #144]	@ (8000a20 <SystemClock_Config+0xd8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000994:	4a22      	ldr	r2, [pc, #136]	@ (8000a20 <SystemClock_Config+0xd8>)
 8000996:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	4b20      	ldr	r3, [pc, #128]	@ (8000a20 <SystemClock_Config+0xd8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ac:	2301      	movs	r3, #1
 80009ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b0:	2310      	movs	r3, #16
 80009b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b4:	2302      	movs	r3, #2
 80009b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b8:	2300      	movs	r3, #0
 80009ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009bc:	2310      	movs	r3, #16
 80009be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009c6:	2304      	movs	r3, #4
 80009c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 faf2 	bl	8002fc0 <HAL_RCC_OscConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009e2:	f000 fa9f 	bl	8000f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e6:	230f      	movs	r3, #15
 80009e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ea:	2302      	movs	r3, #2
 80009ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009fc:	f107 0308 	add.w	r3, r7, #8
 8000a00:	2102      	movs	r1, #2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 ff74 	bl	80028f0 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a0e:	f000 fa89 	bl	8000f24 <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3750      	adds	r7, #80	@ 0x50
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40007000 	.word	0x40007000

08000a24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a2a:	4a13      	ldr	r2, [pc, #76]	@ (8000a78 <MX_I2C1_Init+0x54>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a30:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <MX_I2C1_Init+0x58>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a54:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a62:	f001 f979 	bl	8001d58 <HAL_I2C_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a6c:	f000 fa5a 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000009c 	.word	0x2000009c
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	00061a80 	.word	0x00061a80

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b58      	ldr	r3, [pc, #352]	@ (8000bfc <MX_GPIO_Init+0x17c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a57      	ldr	r2, [pc, #348]	@ (8000bfc <MX_GPIO_Init+0x17c>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b55      	ldr	r3, [pc, #340]	@ (8000bfc <MX_GPIO_Init+0x17c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b51      	ldr	r3, [pc, #324]	@ (8000bfc <MX_GPIO_Init+0x17c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a50      	ldr	r2, [pc, #320]	@ (8000bfc <MX_GPIO_Init+0x17c>)
 8000abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b4e      	ldr	r3, [pc, #312]	@ (8000bfc <MX_GPIO_Init+0x17c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8000bfc <MX_GPIO_Init+0x17c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a49      	ldr	r2, [pc, #292]	@ (8000bfc <MX_GPIO_Init+0x17c>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b47      	ldr	r3, [pc, #284]	@ (8000bfc <MX_GPIO_Init+0x17c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b43      	ldr	r3, [pc, #268]	@ (8000bfc <MX_GPIO_Init+0x17c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a42      	ldr	r2, [pc, #264]	@ (8000bfc <MX_GPIO_Init+0x17c>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b40      	ldr	r3, [pc, #256]	@ (8000bfc <MX_GPIO_Init+0x17c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 618c 	mov.w	r1, #1120	@ 0x460
 8000b0c:	483c      	ldr	r0, [pc, #240]	@ (8000c00 <MX_GPIO_Init+0x180>)
 8000b0e:	f001 f8ef 	bl	8001cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 8000b18:	483a      	ldr	r0, [pc, #232]	@ (8000c04 <MX_GPIO_Init+0x184>)
 8000b1a:	f001 f8e9 	bl	8001cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b22:	2303      	movs	r3, #3
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4833      	ldr	r0, [pc, #204]	@ (8000c00 <MX_GPIO_Init+0x180>)
 8000b32:	f000 ff31 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b36:	230c      	movs	r3, #12
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b46:	2307      	movs	r3, #7
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	482b      	ldr	r0, [pc, #172]	@ (8000c00 <MX_GPIO_Init+0x180>)
 8000b52:	f000 ff21 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
 8000b56:	f44f 638c 	mov.w	r3, #1120	@ 0x460
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4824      	ldr	r0, [pc, #144]	@ (8000c00 <MX_GPIO_Init+0x180>)
 8000b70:	f000 ff12 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b74:	2380      	movs	r3, #128	@ 0x80
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	481e      	ldr	r0, [pc, #120]	@ (8000c00 <MX_GPIO_Init+0x180>)
 8000b88:	f000 ff06 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin;
 8000b8c:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4817      	ldr	r0, [pc, #92]	@ (8000c04 <MX_GPIO_Init+0x184>)
 8000ba6:	f000 fef7 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000baa:	2380      	movs	r3, #128	@ 0x80
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4812      	ldr	r0, [pc, #72]	@ (8000c08 <MX_GPIO_Init+0x188>)
 8000bbe:	f000 feeb 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000bc2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480a      	ldr	r0, [pc, #40]	@ (8000c00 <MX_GPIO_Init+0x180>)
 8000bd8:	f000 fede 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000bdc:	2340      	movs	r3, #64	@ 0x40
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <MX_GPIO_Init+0x184>)
 8000bf0:	f000 fed2 	bl	8001998 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf4:	bf00      	nop
 8000bf6:	3728      	adds	r7, #40	@ 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000
 8000c04:	40020400 	.word	0x40020400
 8000c08:	40020800 	.word	0x40020800

08000c0c <StartKeypadTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartKeypadTask */
void StartKeypadTask(void *argument)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */

	char code[5];
	int numInputs = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]

	osDelay(1000);
 8000c18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c1c:	f003 f830 	bl	8003c80 <osDelay>

	for (;;) {

		if(sync_LCD == 0) {
 8000c20:	4b37      	ldr	r3, [pc, #220]	@ (8000d00 <StartKeypadTask+0xf4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d165      	bne.n	8000cf4 <StartKeypadTask+0xe8>
			if(xSemaphoreTake(xSemaphore, ( TickType_t ) 10 ) == pdTRUE && sync_LCD == 0) {
 8000c28:	4b36      	ldr	r3, [pc, #216]	@ (8000d04 <StartKeypadTask+0xf8>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	210a      	movs	r1, #10
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 fd24 	bl	800467c <xQueueSemaphoreTake>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d15c      	bne.n	8000cf4 <StartKeypadTask+0xe8>
 8000c3a:	4b31      	ldr	r3, [pc, #196]	@ (8000d00 <StartKeypadTask+0xf4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d158      	bne.n	8000cf4 <StartKeypadTask+0xe8>
				key = Get_Key();
 8000c42:	f7ff fc6f 	bl	8000524 <Get_Key>
 8000c46:	4603      	mov	r3, r0
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d08 <StartKeypadTask+0xfc>)
 8000c4c:	701a      	strb	r2, [r3, #0]
				hold[numInputs] = key;
 8000c4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d08 <StartKeypadTask+0xfc>)
 8000c50:	7819      	ldrb	r1, [r3, #0]
 8000c52:	4a2e      	ldr	r2, [pc, #184]	@ (8000d0c <StartKeypadTask+0x100>)
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	4413      	add	r3, r2
 8000c58:	460a      	mov	r2, r1
 8000c5a:	701a      	strb	r2, [r3, #0]
				numInputs++;
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	61fb      	str	r3, [r7, #28]
				// Signal LCDTask to update the display after pressing each key
				//osEventFlagsSet(lcdEvent, 0x01);

				if (numInputs == 4) {
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	2b04      	cmp	r3, #4
 8000c66:	d13b      	bne.n	8000ce0 <StartKeypadTask+0xd4>
					if (armed == 0) {
 8000c68:	4b29      	ldr	r3, [pc, #164]	@ (8000d10 <StartKeypadTask+0x104>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d109      	bne.n	8000c84 <StartKeypadTask+0x78>
						strcpy(code, hold);
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	4925      	ldr	r1, [pc, #148]	@ (8000d0c <StartKeypadTask+0x100>)
 8000c76:	4618      	mov	r0, r3
 8000c78:	f005 fff2 	bl	8006c60 <strcpy>
						armed = 1;
 8000c7c:	4b24      	ldr	r3, [pc, #144]	@ (8000d10 <StartKeypadTask+0x104>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	e01d      	b.n	8000cc0 <StartKeypadTask+0xb4>

					} else {
						if (strcmp(code, hold) == 0) {
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	4920      	ldr	r1, [pc, #128]	@ (8000d0c <StartKeypadTask+0x100>)
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fac0 	bl	8000210 <strcmp>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d114      	bne.n	8000cc0 <StartKeypadTask+0xb4>
							armed = 0;
 8000c96:	4b1e      	ldr	r3, [pc, #120]	@ (8000d10 <StartKeypadTask+0x104>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
							detected = 0;
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d14 <StartKeypadTask+0x108>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
							for (int i = 0; i < 4; i++) {
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
 8000ca6:	e008      	b.n	8000cba <StartKeypadTask+0xae>
								code[i] = '\0';
 8000ca8:	f107 020c 	add.w	r2, r7, #12
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	4413      	add	r3, r2
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < 4; i++) {
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	61bb      	str	r3, [r7, #24]
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	ddf3      	ble.n	8000ca8 <StartKeypadTask+0x9c>
							}
						}
					}

					for (int i = 0; i < 4; i++) {
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	e007      	b.n	8000cd6 <StartKeypadTask+0xca>
						hold[i] = '\0';
 8000cc6:	4a11      	ldr	r2, [pc, #68]	@ (8000d0c <StartKeypadTask+0x100>)
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	4413      	add	r3, r2
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 4; i++) {
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	2b03      	cmp	r3, #3
 8000cda:	ddf4      	ble.n	8000cc6 <StartKeypadTask+0xba>
					}
					numInputs = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
				}

				xSemaphoreGive(xSemaphore);
 8000ce0:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <StartKeypadTask+0xf8>)
 8000ce2:	6818      	ldr	r0, [r3, #0]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	f003 fa45 	bl	8004178 <xQueueGenericSend>
				sync_LCD = 1;
 8000cee:	4b04      	ldr	r3, [pc, #16]	@ (8000d00 <StartKeypadTask+0xf4>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	601a      	str	r2, [r3, #0]
			}
		}
		osDelay(300);
 8000cf4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000cf8:	f002 ffc2 	bl	8003c80 <osDelay>
		if(sync_LCD == 0) {
 8000cfc:	e790      	b.n	8000c20 <StartKeypadTask+0x14>
 8000cfe:	bf00      	nop
 8000d00:	20000110 	.word	0x20000110
 8000d04:	20000118 	.word	0x20000118
 8000d08:	20000098 	.word	0x20000098
 8000d0c:	20000104 	.word	0x20000104
 8000d10:	2000010c 	.word	0x2000010c
 8000d14:	20000114 	.word	0x20000114

08000d18 <StartLCDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLCDTask */
void StartLCDTask(void *argument)
{
 8000d18:	b5b0      	push	{r4, r5, r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCDTask */
	SSD1306_Init();
 8000d20:	f000 f906 	bl	8000f30 <SSD1306_Init>

	// Initial message on the LCD
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000d24:	2000      	movs	r0, #0
 8000d26:	f000 f9f5 	bl	8001114 <SSD1306_Fill>
	SSD1306_GotoXY(0, 0);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f000 fa69 	bl	8001204 <SSD1306_GotoXY>
	SSD1306_Puts(armed_messages[armed], &Font_11x18, 1);
 8000d32:	4b2f      	ldr	r3, [pc, #188]	@ (8000df0 <StartLCDTask+0xd8>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4a2d      	ldr	r2, [pc, #180]	@ (8000df4 <StartLCDTask+0xdc>)
 8000d40:	4413      	add	r3, r2
 8000d42:	2201      	movs	r2, #1
 8000d44:	492c      	ldr	r1, [pc, #176]	@ (8000df8 <StartLCDTask+0xe0>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 faf0 	bl	800132c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000d4c:	f000 f9b4 	bl	80010b8 <SSD1306_UpdateScreen>

	osDelay(100);
 8000d50:	2064      	movs	r0, #100	@ 0x64
 8000d52:	f002 ff95 	bl	8003c80 <osDelay>

	/* Infinite loop */
	for (;;) {
		// Wait for a keypad event
		//osEventFlagsWait(lcdEvent, 0x01, osFlagsWaitAny, osWaitForever)}
		if(xSemaphoreTake(xSemaphore, ( TickType_t ) 10 ) == pdTRUE) {
 8000d56:	4b29      	ldr	r3, [pc, #164]	@ (8000dfc <StartLCDTask+0xe4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	210a      	movs	r1, #10
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 fc8d 	bl	800467c <xQueueSemaphoreTake>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d13f      	bne.n	8000de8 <StartLCDTask+0xd0>
			SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f000 f9d3 	bl	8001114 <SSD1306_Fill>
			SSD1306_GotoXY(0, 0);
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2000      	movs	r0, #0
 8000d72:	f000 fa47 	bl	8001204 <SSD1306_GotoXY>
			SSD1306_Puts(armed_messages[armed], &Font_11x18, 1);
 8000d76:	4b1e      	ldr	r3, [pc, #120]	@ (8000df0 <StartLCDTask+0xd8>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	4a1c      	ldr	r2, [pc, #112]	@ (8000df4 <StartLCDTask+0xdc>)
 8000d84:	4413      	add	r3, r2
 8000d86:	2201      	movs	r2, #1
 8000d88:	491b      	ldr	r1, [pc, #108]	@ (8000df8 <StartLCDTask+0xe0>)
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 face 	bl	800132c <SSD1306_Puts>

			if (strlen(hold) > 0) {
 8000d90:	4b1b      	ldr	r3, [pc, #108]	@ (8000e00 <StartLCDTask+0xe8>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d01b      	beq.n	8000dd0 <StartLCDTask+0xb8>

				char stars[4][5] = { "*", "**", "***", "****" };
 8000d98:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <StartLCDTask+0xec>)
 8000d9a:	f107 040c 	add.w	r4, r7, #12
 8000d9e:	461d      	mov	r5, r3
 8000da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da4:	682b      	ldr	r3, [r5, #0]
 8000da6:	6023      	str	r3, [r4, #0]

				SSD1306_GotoXY(0, 30);
 8000da8:	211e      	movs	r1, #30
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 fa2a 	bl	8001204 <SSD1306_GotoXY>
				SSD1306_Puts(stars[strlen(hold) - 1], &Font_11x18, 1);
 8000db0:	4813      	ldr	r0, [pc, #76]	@ (8000e00 <StartLCDTask+0xe8>)
 8000db2:	f7ff fa37 	bl	8000224 <strlen>
 8000db6:	4603      	mov	r3, r0
 8000db8:	1e5a      	subs	r2, r3, #1
 8000dba:	f107 010c 	add.w	r1, r7, #12
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	490b      	ldr	r1, [pc, #44]	@ (8000df8 <StartLCDTask+0xe0>)
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 faae 	bl	800132c <SSD1306_Puts>
			}


			SSD1306_UpdateScreen();
 8000dd0:	f000 f972 	bl	80010b8 <SSD1306_UpdateScreen>
			xSemaphoreGive(xSemaphore);
 8000dd4:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <StartLCDTask+0xe4>)
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	2300      	movs	r3, #0
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	f003 f9cb 	bl	8004178 <xQueueGenericSend>
			sync_LCD = 0;
 8000de2:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <StartLCDTask+0xf0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
		}
		osDelay(100);
 8000de8:	2064      	movs	r0, #100	@ 0x64
 8000dea:	f002 ff49 	bl	8003c80 <osDelay>
		if(xSemaphoreTake(xSemaphore, ( TickType_t ) 10 ) == pdTRUE) {
 8000dee:	e7b2      	b.n	8000d56 <StartLCDTask+0x3e>
 8000df0:	2000010c 	.word	0x2000010c
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000118 	.word	0x20000118
 8000e00:	20000104 	.word	0x20000104
 8000e04:	08006d84 	.word	0x08006d84
 8000e08:	20000110 	.word	0x20000110

08000e0c <StartLEDsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLEDsTask */
void StartLEDsTask(void *argument)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDsTask */

	/* Infinite loop */
	for (;;) {
		// Not armed
		if (armed) {
 8000e14:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <StartLEDsTask+0x4c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d00a      	beq.n	8000e32 <StartLEDsTask+0x26>
			// Turn on Green LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2140      	movs	r1, #64	@ 0x40
 8000e20:	480e      	ldr	r0, [pc, #56]	@ (8000e5c <StartLEDsTask+0x50>)
 8000e22:	f000 ff65 	bl	8001cf0 <HAL_GPIO_WritePin>

			// Turn off Red LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e2c:	480b      	ldr	r0, [pc, #44]	@ (8000e5c <StartLEDsTask+0x50>)
 8000e2e:	f000 ff5f 	bl	8001cf0 <HAL_GPIO_WritePin>
		}

		osDelay(10);
 8000e32:	200a      	movs	r0, #10
 8000e34:	f002 ff24 	bl	8003c80 <osDelay>
		// Armed
		if (!armed) {
 8000e38:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <StartLEDsTask+0x4c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1e9      	bne.n	8000e14 <StartLEDsTask+0x8>
			// Turn off Green LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2140      	movs	r1, #64	@ 0x40
 8000e44:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <StartLEDsTask+0x50>)
 8000e46:	f000 ff53 	bl	8001cf0 <HAL_GPIO_WritePin>

			// Turn on Red LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e50:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <StartLEDsTask+0x50>)
 8000e52:	f000 ff4d 	bl	8001cf0 <HAL_GPIO_WritePin>
		if (armed) {
 8000e56:	e7dd      	b.n	8000e14 <StartLEDsTask+0x8>
 8000e58:	2000010c 	.word	0x2000010c
 8000e5c:	40020000 	.word	0x40020000

08000e60 <StartPIRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPIRTask */
void StartPIRTask(void *argument)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPIRTask */
	/* Infinite loop */
	osDelay(1000);
 8000e68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e6c:	f002 ff08 	bl	8003c80 <osDelay>
	for (;;) {
		if(sync_LCD == 0) {
 8000e70:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <StartPIRTask+0x58>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d11a      	bne.n	8000eae <StartPIRTask+0x4e>
			//if(xSemaphoreTake(xSemaphore, ( TickType_t ) 10 ) == pdTRUE) {
		// If the PIR detects something, wait 60 seconds to let the user enter the code to disarm the system, otherwise sound the buzzer
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET) {
 8000e78:	2180      	movs	r1, #128	@ 0x80
 8000e7a:	4810      	ldr	r0, [pc, #64]	@ (8000ebc <StartPIRTask+0x5c>)
 8000e7c:	f000 ff20 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d113      	bne.n	8000eae <StartPIRTask+0x4e>
				// Delay 60 seconds
					if (armed) {
 8000e86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <StartPIRTask+0x60>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00f      	beq.n	8000eae <StartPIRTask+0x4e>
						osDelay(2000);
 8000e8e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e92:	f002 fef5 	bl	8003c80 <osDelay>
						if(armed) {
 8000e96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <StartPIRTask+0x60>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d007      	beq.n	8000eae <StartPIRTask+0x4e>
							detected = 1;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <StartPIRTask+0x64>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2120      	movs	r1, #32
 8000ea8:	4804      	ldr	r0, [pc, #16]	@ (8000ebc <StartPIRTask+0x5c>)
 8000eaa:	f000 ff21 	bl	8001cf0 <HAL_GPIO_WritePin>
					//}
					// After detection, keypad loses functionality
			}
		//}
	}
	osDelay(100);
 8000eae:	2064      	movs	r0, #100	@ 0x64
 8000eb0:	f002 fee6 	bl	8003c80 <osDelay>
		if(sync_LCD == 0) {
 8000eb4:	e7dc      	b.n	8000e70 <StartPIRTask+0x10>
 8000eb6:	bf00      	nop
 8000eb8:	20000110 	.word	0x20000110
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	2000010c 	.word	0x2000010c
 8000ec4:	20000114 	.word	0x20000114

08000ec8 <StartBuzzerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBuzzerTask */
void StartBuzzerTask(void *argument)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBuzzerTask */

	/* Infinite loop */
	for (;;) {

		if(detected) {
 8000ed0:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <StartBuzzerTask+0x30>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d005      	beq.n	8000ee4 <StartBuzzerTask+0x1c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2120      	movs	r1, #32
 8000edc:	4807      	ldr	r0, [pc, #28]	@ (8000efc <StartBuzzerTask+0x34>)
 8000ede:	f000 ff07 	bl	8001cf0 <HAL_GPIO_WritePin>
 8000ee2:	e004      	b.n	8000eee <StartBuzzerTask+0x26>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	4804      	ldr	r0, [pc, #16]	@ (8000efc <StartBuzzerTask+0x34>)
 8000eea:	f000 ff01 	bl	8001cf0 <HAL_GPIO_WritePin>
		}

		osDelay(100);
 8000eee:	2064      	movs	r0, #100	@ 0x64
 8000ef0:	f002 fec6 	bl	8003c80 <osDelay>
		if(detected) {
 8000ef4:	e7ec      	b.n	8000ed0 <StartBuzzerTask+0x8>
 8000ef6:	bf00      	nop
 8000ef8:	20000114 	.word	0x20000114
 8000efc:	40020000 	.word	0x40020000

08000f00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d101      	bne.n	8000f16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f12:	f000 fc3f 	bl	8001794 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40001000 	.word	0x40001000

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <Error_Handler+0x8>

08000f30 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000f36:	f000 fa1f 	bl	8001378 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000f3a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2178      	movs	r1, #120	@ 0x78
 8000f42:	485b      	ldr	r0, [pc, #364]	@ (80010b0 <SSD1306_Init+0x180>)
 8000f44:	f001 f94a 	bl	80021dc <HAL_I2C_IsDeviceReady>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e0a9      	b.n	80010a6 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000f52:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000f56:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f58:	e002      	b.n	8000f60 <SSD1306_Init+0x30>
		p--;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1f9      	bne.n	8000f5a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000f66:	22ae      	movs	r2, #174	@ 0xae
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2078      	movs	r0, #120	@ 0x78
 8000f6c:	f000 fa80 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000f70:	2220      	movs	r2, #32
 8000f72:	2100      	movs	r1, #0
 8000f74:	2078      	movs	r0, #120	@ 0x78
 8000f76:	f000 fa7b 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000f7a:	2210      	movs	r2, #16
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2078      	movs	r0, #120	@ 0x78
 8000f80:	f000 fa76 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f84:	22b0      	movs	r2, #176	@ 0xb0
 8000f86:	2100      	movs	r1, #0
 8000f88:	2078      	movs	r0, #120	@ 0x78
 8000f8a:	f000 fa71 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000f8e:	22c8      	movs	r2, #200	@ 0xc8
 8000f90:	2100      	movs	r1, #0
 8000f92:	2078      	movs	r0, #120	@ 0x78
 8000f94:	f000 fa6c 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2078      	movs	r0, #120	@ 0x78
 8000f9e:	f000 fa67 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000fa2:	2210      	movs	r2, #16
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2078      	movs	r0, #120	@ 0x78
 8000fa8:	f000 fa62 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000fac:	2240      	movs	r2, #64	@ 0x40
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2078      	movs	r0, #120	@ 0x78
 8000fb2:	f000 fa5d 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000fb6:	2281      	movs	r2, #129	@ 0x81
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2078      	movs	r0, #120	@ 0x78
 8000fbc:	f000 fa58 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000fc0:	22ff      	movs	r2, #255	@ 0xff
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2078      	movs	r0, #120	@ 0x78
 8000fc6:	f000 fa53 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000fca:	22a1      	movs	r2, #161	@ 0xa1
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2078      	movs	r0, #120	@ 0x78
 8000fd0:	f000 fa4e 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000fd4:	22a6      	movs	r2, #166	@ 0xa6
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2078      	movs	r0, #120	@ 0x78
 8000fda:	f000 fa49 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000fde:	22a8      	movs	r2, #168	@ 0xa8
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2078      	movs	r0, #120	@ 0x78
 8000fe4:	f000 fa44 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000fe8:	223f      	movs	r2, #63	@ 0x3f
 8000fea:	2100      	movs	r1, #0
 8000fec:	2078      	movs	r0, #120	@ 0x78
 8000fee:	f000 fa3f 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ff2:	22a4      	movs	r2, #164	@ 0xa4
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2078      	movs	r0, #120	@ 0x78
 8000ff8:	f000 fa3a 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000ffc:	22d3      	movs	r2, #211	@ 0xd3
 8000ffe:	2100      	movs	r1, #0
 8001000:	2078      	movs	r0, #120	@ 0x78
 8001002:	f000 fa35 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	2078      	movs	r0, #120	@ 0x78
 800100c:	f000 fa30 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001010:	22d5      	movs	r2, #213	@ 0xd5
 8001012:	2100      	movs	r1, #0
 8001014:	2078      	movs	r0, #120	@ 0x78
 8001016:	f000 fa2b 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800101a:	22f0      	movs	r2, #240	@ 0xf0
 800101c:	2100      	movs	r1, #0
 800101e:	2078      	movs	r0, #120	@ 0x78
 8001020:	f000 fa26 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001024:	22d9      	movs	r2, #217	@ 0xd9
 8001026:	2100      	movs	r1, #0
 8001028:	2078      	movs	r0, #120	@ 0x78
 800102a:	f000 fa21 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800102e:	2222      	movs	r2, #34	@ 0x22
 8001030:	2100      	movs	r1, #0
 8001032:	2078      	movs	r0, #120	@ 0x78
 8001034:	f000 fa1c 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001038:	22da      	movs	r2, #218	@ 0xda
 800103a:	2100      	movs	r1, #0
 800103c:	2078      	movs	r0, #120	@ 0x78
 800103e:	f000 fa17 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001042:	2212      	movs	r2, #18
 8001044:	2100      	movs	r1, #0
 8001046:	2078      	movs	r0, #120	@ 0x78
 8001048:	f000 fa12 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800104c:	22db      	movs	r2, #219	@ 0xdb
 800104e:	2100      	movs	r1, #0
 8001050:	2078      	movs	r0, #120	@ 0x78
 8001052:	f000 fa0d 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001056:	2220      	movs	r2, #32
 8001058:	2100      	movs	r1, #0
 800105a:	2078      	movs	r0, #120	@ 0x78
 800105c:	f000 fa08 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001060:	228d      	movs	r2, #141	@ 0x8d
 8001062:	2100      	movs	r1, #0
 8001064:	2078      	movs	r0, #120	@ 0x78
 8001066:	f000 fa03 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800106a:	2214      	movs	r2, #20
 800106c:	2100      	movs	r1, #0
 800106e:	2078      	movs	r0, #120	@ 0x78
 8001070:	f000 f9fe 	bl	8001470 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001074:	22af      	movs	r2, #175	@ 0xaf
 8001076:	2100      	movs	r1, #0
 8001078:	2078      	movs	r0, #120	@ 0x78
 800107a:	f000 f9f9 	bl	8001470 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800107e:	222e      	movs	r2, #46	@ 0x2e
 8001080:	2100      	movs	r1, #0
 8001082:	2078      	movs	r0, #120	@ 0x78
 8001084:	f000 f9f4 	bl	8001470 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001088:	2000      	movs	r0, #0
 800108a:	f000 f843 	bl	8001114 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800108e:	f000 f813 	bl	80010b8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001092:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <SSD1306_Init+0x184>)
 8001094:	2200      	movs	r2, #0
 8001096:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <SSD1306_Init+0x184>)
 800109a:	2200      	movs	r2, #0
 800109c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800109e:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <SSD1306_Init+0x184>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80010a4:	2301      	movs	r3, #1
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000009c 	.word	0x2000009c
 80010b4:	2000051c 	.word	0x2000051c

080010b8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80010be:	2300      	movs	r3, #0
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	e01d      	b.n	8001100 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	3b50      	subs	r3, #80	@ 0x50
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	461a      	mov	r2, r3
 80010cc:	2100      	movs	r1, #0
 80010ce:	2078      	movs	r0, #120	@ 0x78
 80010d0:	f000 f9ce 	bl	8001470 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	2078      	movs	r0, #120	@ 0x78
 80010da:	f000 f9c9 	bl	8001470 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80010de:	2210      	movs	r2, #16
 80010e0:	2100      	movs	r1, #0
 80010e2:	2078      	movs	r0, #120	@ 0x78
 80010e4:	f000 f9c4 	bl	8001470 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	01db      	lsls	r3, r3, #7
 80010ec:	4a08      	ldr	r2, [pc, #32]	@ (8001110 <SSD1306_UpdateScreen+0x58>)
 80010ee:	441a      	add	r2, r3
 80010f0:	2380      	movs	r3, #128	@ 0x80
 80010f2:	2140      	movs	r1, #64	@ 0x40
 80010f4:	2078      	movs	r0, #120	@ 0x78
 80010f6:	f000 f955 	bl	80013a4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	3301      	adds	r3, #1
 80010fe:	71fb      	strb	r3, [r7, #7]
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2b07      	cmp	r3, #7
 8001104:	d9de      	bls.n	80010c4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001106:	bf00      	nop
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000011c 	.word	0x2000011c

08001114 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <SSD1306_Fill+0x14>
 8001124:	2300      	movs	r3, #0
 8001126:	e000      	b.n	800112a <SSD1306_Fill+0x16>
 8001128:	23ff      	movs	r3, #255	@ 0xff
 800112a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800112e:	4619      	mov	r1, r3
 8001130:	4803      	ldr	r0, [pc, #12]	@ (8001140 <SSD1306_Fill+0x2c>)
 8001132:	f005 fd11 	bl	8006b58 <memset>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000011c 	.word	0x2000011c

08001144 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	80fb      	strh	r3, [r7, #6]
 800114e:	460b      	mov	r3, r1
 8001150:	80bb      	strh	r3, [r7, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	70fb      	strb	r3, [r7, #3]
	if (
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	2b7f      	cmp	r3, #127	@ 0x7f
 800115a:	d848      	bhi.n	80011ee <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800115c:	88bb      	ldrh	r3, [r7, #4]
 800115e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001160:	d845      	bhi.n	80011ee <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001162:	4b26      	ldr	r3, [pc, #152]	@ (80011fc <SSD1306_DrawPixel+0xb8>)
 8001164:	791b      	ldrb	r3, [r3, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d006      	beq.n	8001178 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	2b00      	cmp	r3, #0
 800116e:	bf0c      	ite	eq
 8001170:	2301      	moveq	r3, #1
 8001172:	2300      	movne	r3, #0
 8001174:	b2db      	uxtb	r3, r3
 8001176:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d11a      	bne.n	80011b4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800117e:	88fa      	ldrh	r2, [r7, #6]
 8001180:	88bb      	ldrh	r3, [r7, #4]
 8001182:	08db      	lsrs	r3, r3, #3
 8001184:	b298      	uxth	r0, r3
 8001186:	4603      	mov	r3, r0
 8001188:	01db      	lsls	r3, r3, #7
 800118a:	4413      	add	r3, r2
 800118c:	4a1c      	ldr	r2, [pc, #112]	@ (8001200 <SSD1306_DrawPixel+0xbc>)
 800118e:	5cd3      	ldrb	r3, [r2, r3]
 8001190:	b25a      	sxtb	r2, r3
 8001192:	88bb      	ldrh	r3, [r7, #4]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	2101      	movs	r1, #1
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	b25b      	sxtb	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b259      	sxtb	r1, r3
 80011a4:	88fa      	ldrh	r2, [r7, #6]
 80011a6:	4603      	mov	r3, r0
 80011a8:	01db      	lsls	r3, r3, #7
 80011aa:	4413      	add	r3, r2
 80011ac:	b2c9      	uxtb	r1, r1
 80011ae:	4a14      	ldr	r2, [pc, #80]	@ (8001200 <SSD1306_DrawPixel+0xbc>)
 80011b0:	54d1      	strb	r1, [r2, r3]
 80011b2:	e01d      	b.n	80011f0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80011b4:	88fa      	ldrh	r2, [r7, #6]
 80011b6:	88bb      	ldrh	r3, [r7, #4]
 80011b8:	08db      	lsrs	r3, r3, #3
 80011ba:	b298      	uxth	r0, r3
 80011bc:	4603      	mov	r3, r0
 80011be:	01db      	lsls	r3, r3, #7
 80011c0:	4413      	add	r3, r2
 80011c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001200 <SSD1306_DrawPixel+0xbc>)
 80011c4:	5cd3      	ldrb	r3, [r2, r3]
 80011c6:	b25a      	sxtb	r2, r3
 80011c8:	88bb      	ldrh	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	2101      	movs	r1, #1
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	4013      	ands	r3, r2
 80011dc:	b259      	sxtb	r1, r3
 80011de:	88fa      	ldrh	r2, [r7, #6]
 80011e0:	4603      	mov	r3, r0
 80011e2:	01db      	lsls	r3, r3, #7
 80011e4:	4413      	add	r3, r2
 80011e6:	b2c9      	uxtb	r1, r1
 80011e8:	4a05      	ldr	r2, [pc, #20]	@ (8001200 <SSD1306_DrawPixel+0xbc>)
 80011ea:	54d1      	strb	r1, [r2, r3]
 80011ec:	e000      	b.n	80011f0 <SSD1306_DrawPixel+0xac>
		return;
 80011ee:	bf00      	nop
	}
}
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	2000051c 	.word	0x2000051c
 8001200:	2000011c 	.word	0x2000011c

08001204 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	460a      	mov	r2, r1
 800120e:	80fb      	strh	r3, [r7, #6]
 8001210:	4613      	mov	r3, r2
 8001212:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001214:	4a05      	ldr	r2, [pc, #20]	@ (800122c <SSD1306_GotoXY+0x28>)
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800121a:	4a04      	ldr	r2, [pc, #16]	@ (800122c <SSD1306_GotoXY+0x28>)
 800121c:	88bb      	ldrh	r3, [r7, #4]
 800121e:	8053      	strh	r3, [r2, #2]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	2000051c 	.word	0x2000051c

08001230 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	4613      	mov	r3, r2
 800123e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001240:	4b39      	ldr	r3, [pc, #228]	@ (8001328 <SSD1306_Putc+0xf8>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
	if (
 800124c:	2b7f      	cmp	r3, #127	@ 0x7f
 800124e:	dc07      	bgt.n	8001260 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001250:	4b35      	ldr	r3, [pc, #212]	@ (8001328 <SSD1306_Putc+0xf8>)
 8001252:	885b      	ldrh	r3, [r3, #2]
 8001254:	461a      	mov	r2, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	785b      	ldrb	r3, [r3, #1]
 800125a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800125c:	2b3f      	cmp	r3, #63	@ 0x3f
 800125e:	dd01      	ble.n	8001264 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001260:	2300      	movs	r3, #0
 8001262:	e05d      	b.n	8001320 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	e04b      	b.n	8001302 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	3b20      	subs	r3, #32
 8001272:	6839      	ldr	r1, [r7, #0]
 8001274:	7849      	ldrb	r1, [r1, #1]
 8001276:	fb01 f303 	mul.w	r3, r1, r3
 800127a:	4619      	mov	r1, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	440b      	add	r3, r1
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4413      	add	r3, r2
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	e030      	b.n	80012f0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d010      	beq.n	80012c0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800129e:	4b22      	ldr	r3, [pc, #136]	@ (8001328 <SSD1306_Putc+0xf8>)
 80012a0:	881a      	ldrh	r2, [r3, #0]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	4413      	add	r3, r2
 80012a8:	b298      	uxth	r0, r3
 80012aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001328 <SSD1306_Putc+0xf8>)
 80012ac:	885a      	ldrh	r2, [r3, #2]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4413      	add	r3, r2
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	79ba      	ldrb	r2, [r7, #6]
 80012b8:	4619      	mov	r1, r3
 80012ba:	f7ff ff43 	bl	8001144 <SSD1306_DrawPixel>
 80012be:	e014      	b.n	80012ea <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80012c0:	4b19      	ldr	r3, [pc, #100]	@ (8001328 <SSD1306_Putc+0xf8>)
 80012c2:	881a      	ldrh	r2, [r3, #0]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	4413      	add	r3, r2
 80012ca:	b298      	uxth	r0, r3
 80012cc:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <SSD1306_Putc+0xf8>)
 80012ce:	885a      	ldrh	r2, [r3, #2]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4413      	add	r3, r2
 80012d6:	b299      	uxth	r1, r3
 80012d8:	79bb      	ldrb	r3, [r7, #6]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bf0c      	ite	eq
 80012de:	2301      	moveq	r3, #1
 80012e0:	2300      	movne	r3, #0
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	f7ff ff2d 	bl	8001144 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	3301      	adds	r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d3c8      	bcc.n	800128e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3301      	adds	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	785b      	ldrb	r3, [r3, #1]
 8001306:	461a      	mov	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	4293      	cmp	r3, r2
 800130c:	d3ad      	bcc.n	800126a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800130e:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <SSD1306_Putc+0xf8>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	7812      	ldrb	r2, [r2, #0]
 8001316:	4413      	add	r3, r2
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b03      	ldr	r3, [pc, #12]	@ (8001328 <SSD1306_Putc+0xf8>)
 800131c:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800131e:	79fb      	ldrb	r3, [r7, #7]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2000051c 	.word	0x2000051c

0800132c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	4613      	mov	r3, r2
 8001338:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800133a:	e012      	b.n	8001362 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	79fa      	ldrb	r2, [r7, #7]
 8001342:	68b9      	ldr	r1, [r7, #8]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff73 	bl	8001230 <SSD1306_Putc>
 800134a:	4603      	mov	r3, r0
 800134c:	461a      	mov	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d002      	beq.n	800135c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	e008      	b.n	800136e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3301      	adds	r3, #1
 8001360:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1e8      	bne.n	800133c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	781b      	ldrb	r3, [r3, #0]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800137e:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <ssd1306_I2C_Init+0x28>)
 8001380:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001382:	e002      	b.n	800138a <ssd1306_I2C_Init+0x12>
		p--;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	607b      	str	r3, [r7, #4]
	while(p>0)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1f9      	bne.n	8001384 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	0003d090 	.word	0x0003d090

080013a4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b0c7      	sub	sp, #284	@ 0x11c
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	4604      	mov	r4, r0
 80013ac:	4608      	mov	r0, r1
 80013ae:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80013b2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80013b6:	600a      	str	r2, [r1, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013be:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80013c2:	4622      	mov	r2, r4
 80013c4:	701a      	strb	r2, [r3, #0]
 80013c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013ca:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80013ce:	4602      	mov	r2, r0
 80013d0:	701a      	strb	r2, [r3, #0]
 80013d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013da:	460a      	mov	r2, r1
 80013dc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80013de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013e6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80013ea:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80013ee:	7812      	ldrb	r2, [r2, #0]
 80013f0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80013f8:	e015      	b.n	8001426 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80013fa:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80013fe:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001402:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	441a      	add	r2, r3
 800140a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800140e:	3301      	adds	r3, #1
 8001410:	7811      	ldrb	r1, [r2, #0]
 8001412:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001416:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800141a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800141c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001420:	3301      	adds	r3, #1
 8001422:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001426:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800142a:	b29b      	uxth	r3, r3
 800142c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001430:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001434:	8812      	ldrh	r2, [r2, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d8df      	bhi.n	80013fa <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800143a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800143e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b299      	uxth	r1, r3
 8001446:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800144a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	3301      	adds	r3, #1
 8001452:	b29b      	uxth	r3, r3
 8001454:	f107 020c 	add.w	r2, r7, #12
 8001458:	200a      	movs	r0, #10
 800145a:	9000      	str	r0, [sp, #0]
 800145c:	4803      	ldr	r0, [pc, #12]	@ (800146c <ssd1306_I2C_WriteMulti+0xc8>)
 800145e:	f000 fdbf 	bl	8001fe0 <HAL_I2C_Master_Transmit>
}
 8001462:	bf00      	nop
 8001464:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001468:	46bd      	mov	sp, r7
 800146a:	bd90      	pop	{r4, r7, pc}
 800146c:	2000009c 	.word	0x2000009c

08001470 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af02      	add	r7, sp, #8
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
 800147a:	460b      	mov	r3, r1
 800147c:	71bb      	strb	r3, [r7, #6]
 800147e:	4613      	mov	r3, r2
 8001480:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001482:	79bb      	ldrb	r3, [r7, #6]
 8001484:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001486:	797b      	ldrb	r3, [r7, #5]
 8001488:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	b299      	uxth	r1, r3
 800148e:	f107 020c 	add.w	r2, r7, #12
 8001492:	230a      	movs	r3, #10
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2302      	movs	r3, #2
 8001498:	4803      	ldr	r0, [pc, #12]	@ (80014a8 <ssd1306_I2C_Write+0x38>)
 800149a:	f000 fda1 	bl	8001fe0 <HAL_I2C_Master_Transmit>
}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	2000009c 	.word	0x2000009c

080014ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <HAL_MspInit+0x54>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ba:	4a11      	ldr	r2, [pc, #68]	@ (8001500 <HAL_MspInit+0x54>)
 80014bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <HAL_MspInit+0x54>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001500 <HAL_MspInit+0x54>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001500 <HAL_MspInit+0x54>)
 80014d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014de:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <HAL_MspInit+0x54>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	210f      	movs	r1, #15
 80014ee:	f06f 0001 	mvn.w	r0, #1
 80014f2:	f000 fa27 	bl	8001944 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800

08001504 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a19      	ldr	r2, [pc, #100]	@ (8001588 <HAL_I2C_MspInit+0x84>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d12c      	bne.n	8001580 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b18      	ldr	r3, [pc, #96]	@ (800158c <HAL_I2C_MspInit+0x88>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a17      	ldr	r2, [pc, #92]	@ (800158c <HAL_I2C_MspInit+0x88>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <HAL_I2C_MspInit+0x88>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001542:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001548:	2312      	movs	r3, #18
 800154a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001554:	2304      	movs	r3, #4
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	480c      	ldr	r0, [pc, #48]	@ (8001590 <HAL_I2C_MspInit+0x8c>)
 8001560:	f000 fa1a 	bl	8001998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	4b08      	ldr	r3, [pc, #32]	@ (800158c <HAL_I2C_MspInit+0x88>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	4a07      	ldr	r2, [pc, #28]	@ (800158c <HAL_I2C_MspInit+0x88>)
 800156e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001572:	6413      	str	r3, [r2, #64]	@ 0x40
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <HAL_I2C_MspInit+0x88>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001578:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001580:	bf00      	nop
 8001582:	3728      	adds	r7, #40	@ 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40005400 	.word	0x40005400
 800158c:	40023800 	.word	0x40023800
 8001590:	40020400 	.word	0x40020400

08001594 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08e      	sub	sp, #56	@ 0x38
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	4b33      	ldr	r3, [pc, #204]	@ (8001678 <HAL_InitTick+0xe4>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ac:	4a32      	ldr	r2, [pc, #200]	@ (8001678 <HAL_InitTick+0xe4>)
 80015ae:	f043 0310 	orr.w	r3, r3, #16
 80015b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b4:	4b30      	ldr	r3, [pc, #192]	@ (8001678 <HAL_InitTick+0xe4>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b8:	f003 0310 	and.w	r3, r3, #16
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015c0:	f107 0210 	add.w	r2, r7, #16
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4611      	mov	r1, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f001 fa96 	bl	8002afc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d103      	bne.n	80015e2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015da:	f001 fa7b 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 80015de:	6378      	str	r0, [r7, #52]	@ 0x34
 80015e0:	e004      	b.n	80015ec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015e2:	f001 fa77 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 80015e6:	4603      	mov	r3, r0
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015ee:	4a23      	ldr	r2, [pc, #140]	@ (800167c <HAL_InitTick+0xe8>)
 80015f0:	fba2 2303 	umull	r2, r3, r2, r3
 80015f4:	0c9b      	lsrs	r3, r3, #18
 80015f6:	3b01      	subs	r3, #1
 80015f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015fa:	4b21      	ldr	r3, [pc, #132]	@ (8001680 <HAL_InitTick+0xec>)
 80015fc:	4a21      	ldr	r2, [pc, #132]	@ (8001684 <HAL_InitTick+0xf0>)
 80015fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001600:	4b1f      	ldr	r3, [pc, #124]	@ (8001680 <HAL_InitTick+0xec>)
 8001602:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001606:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001608:	4a1d      	ldr	r2, [pc, #116]	@ (8001680 <HAL_InitTick+0xec>)
 800160a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800160c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800160e:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <HAL_InitTick+0xec>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <HAL_InitTick+0xec>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161a:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <HAL_InitTick+0xec>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001620:	4817      	ldr	r0, [pc, #92]	@ (8001680 <HAL_InitTick+0xec>)
 8001622:	f001 ff6b 	bl	80034fc <HAL_TIM_Base_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800162c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001630:	2b00      	cmp	r3, #0
 8001632:	d11b      	bne.n	800166c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001634:	4812      	ldr	r0, [pc, #72]	@ (8001680 <HAL_InitTick+0xec>)
 8001636:	f001 ffbb 	bl	80035b0 <HAL_TIM_Base_Start_IT>
 800163a:	4603      	mov	r3, r0
 800163c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001640:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001644:	2b00      	cmp	r3, #0
 8001646:	d111      	bne.n	800166c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001648:	2036      	movs	r0, #54	@ 0x36
 800164a:	f000 f997 	bl	800197c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b0f      	cmp	r3, #15
 8001652:	d808      	bhi.n	8001666 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001654:	2200      	movs	r2, #0
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	2036      	movs	r0, #54	@ 0x36
 800165a:	f000 f973 	bl	8001944 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <HAL_InitTick+0xf4>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	e002      	b.n	800166c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800166c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001670:	4618      	mov	r0, r3
 8001672:	3738      	adds	r7, #56	@ 0x38
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40023800 	.word	0x40023800
 800167c:	431bde83 	.word	0x431bde83
 8001680:	20000524 	.word	0x20000524
 8001684:	40001000 	.word	0x40001000
 8001688:	20000020 	.word	0x20000020

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <NMI_Handler+0x4>

08001694 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <HardFault_Handler+0x4>

0800169c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <MemManage_Handler+0x4>

080016a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016c8:	4802      	ldr	r0, [pc, #8]	@ (80016d4 <TIM6_DAC_IRQHandler+0x10>)
 80016ca:	f001 ffe1 	bl	8003690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000524 	.word	0x20000524

080016d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <SystemInit+0x20>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016e2:	4a05      	ldr	r2, [pc, #20]	@ (80016f8 <SystemInit+0x20>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001734 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001700:	f7ff ffea 	bl	80016d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001704:	480c      	ldr	r0, [pc, #48]	@ (8001738 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001706:	490d      	ldr	r1, [pc, #52]	@ (800173c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001708:	4a0d      	ldr	r2, [pc, #52]	@ (8001740 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0a      	ldr	r2, [pc, #40]	@ (8001744 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800171c:	4c0a      	ldr	r4, [pc, #40]	@ (8001748 <LoopFillZerobss+0x22>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800172a:	f005 fa73 	bl	8006c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172e:	f7ff f8ad 	bl	800088c <main>
  bx  lr    
 8001732:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001734:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800173c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001740:	08007be8 	.word	0x08007be8
  ldr r2, =_sbss
 8001744:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001748:	20005098 	.word	0x20005098

0800174c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC_IRQHandler>
	...

08001750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001754:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0d      	ldr	r2, [pc, #52]	@ (8001790 <HAL_Init+0x40>)
 800175a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800175e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001760:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0a      	ldr	r2, [pc, #40]	@ (8001790 <HAL_Init+0x40>)
 8001766:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800176a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800176c:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <HAL_Init+0x40>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a07      	ldr	r2, [pc, #28]	@ (8001790 <HAL_Init+0x40>)
 8001772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001778:	2003      	movs	r0, #3
 800177a:	f000 f8d8 	bl	800192e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177e:	200f      	movs	r0, #15
 8001780:	f7ff ff08 	bl	8001594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001784:	f7ff fe92 	bl	80014ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00

08001794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <HAL_IncTick+0x20>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <HAL_IncTick+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a04      	ldr	r2, [pc, #16]	@ (80017b8 <HAL_IncTick+0x24>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000024 	.word	0x20000024
 80017b8:	2000056c 	.word	0x2000056c

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	2000056c 	.word	0x2000056c

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	@ (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	@ (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	@ (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	@ (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	@ 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	@ 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ff4c 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001956:	f7ff ff61 	bl	800181c <__NVIC_GetPriorityGrouping>
 800195a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	68b9      	ldr	r1, [r7, #8]
 8001960:	6978      	ldr	r0, [r7, #20]
 8001962:	f7ff ffb1 	bl	80018c8 <NVIC_EncodePriority>
 8001966:	4602      	mov	r2, r0
 8001968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196c:	4611      	mov	r1, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff ff80 	bl	8001874 <__NVIC_SetPriority>
}
 8001974:	bf00      	nop
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff54 	bl	8001838 <__NVIC_EnableIRQ>
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	@ 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	e165      	b.n	8001c80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019b4:	2201      	movs	r2, #1
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	f040 8154 	bne.w	8001c7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d005      	beq.n	80019ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d130      	bne.n	8001a4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	2203      	movs	r2, #3
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a20:	2201      	movs	r2, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 0201 	and.w	r2, r3, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d017      	beq.n	8001a88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2203      	movs	r2, #3
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d123      	bne.n	8001adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	08da      	lsrs	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3208      	adds	r2, #8
 8001a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	220f      	movs	r2, #15
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	08da      	lsrs	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3208      	adds	r2, #8
 8001ad6:	69b9      	ldr	r1, [r7, #24]
 8001ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0203 	and.w	r2, r3, #3
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80ae 	beq.w	8001c7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b5d      	ldr	r3, [pc, #372]	@ (8001c98 <HAL_GPIO_Init+0x300>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b26:	4a5c      	ldr	r2, [pc, #368]	@ (8001c98 <HAL_GPIO_Init+0x300>)
 8001b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b2e:	4b5a      	ldr	r3, [pc, #360]	@ (8001c98 <HAL_GPIO_Init+0x300>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b3a:	4a58      	ldr	r2, [pc, #352]	@ (8001c9c <HAL_GPIO_Init+0x304>)
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	3302      	adds	r3, #2
 8001b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	220f      	movs	r2, #15
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4f      	ldr	r2, [pc, #316]	@ (8001ca0 <HAL_GPIO_Init+0x308>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d025      	beq.n	8001bb2 <HAL_GPIO_Init+0x21a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4e      	ldr	r2, [pc, #312]	@ (8001ca4 <HAL_GPIO_Init+0x30c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d01f      	beq.n	8001bae <HAL_GPIO_Init+0x216>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4d      	ldr	r2, [pc, #308]	@ (8001ca8 <HAL_GPIO_Init+0x310>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d019      	beq.n	8001baa <HAL_GPIO_Init+0x212>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4c      	ldr	r2, [pc, #304]	@ (8001cac <HAL_GPIO_Init+0x314>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d013      	beq.n	8001ba6 <HAL_GPIO_Init+0x20e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4b      	ldr	r2, [pc, #300]	@ (8001cb0 <HAL_GPIO_Init+0x318>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00d      	beq.n	8001ba2 <HAL_GPIO_Init+0x20a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4a      	ldr	r2, [pc, #296]	@ (8001cb4 <HAL_GPIO_Init+0x31c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d007      	beq.n	8001b9e <HAL_GPIO_Init+0x206>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a49      	ldr	r2, [pc, #292]	@ (8001cb8 <HAL_GPIO_Init+0x320>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d101      	bne.n	8001b9a <HAL_GPIO_Init+0x202>
 8001b96:	2306      	movs	r3, #6
 8001b98:	e00c      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	e00a      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001b9e:	2305      	movs	r3, #5
 8001ba0:	e008      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e004      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e002      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	f002 0203 	and.w	r2, r2, #3
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	4093      	lsls	r3, r2
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc4:	4935      	ldr	r1, [pc, #212]	@ (8001c9c <HAL_GPIO_Init+0x304>)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8001cbc <HAL_GPIO_Init+0x324>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bf6:	4a31      	ldr	r2, [pc, #196]	@ (8001cbc <HAL_GPIO_Init+0x324>)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8001cbc <HAL_GPIO_Init+0x324>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c20:	4a26      	ldr	r2, [pc, #152]	@ (8001cbc <HAL_GPIO_Init+0x324>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c26:	4b25      	ldr	r3, [pc, #148]	@ (8001cbc <HAL_GPIO_Init+0x324>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cbc <HAL_GPIO_Init+0x324>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c50:	4b1a      	ldr	r3, [pc, #104]	@ (8001cbc <HAL_GPIO_Init+0x324>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c74:	4a11      	ldr	r2, [pc, #68]	@ (8001cbc <HAL_GPIO_Init+0x324>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2b0f      	cmp	r3, #15
 8001c84:	f67f ae96 	bls.w	80019b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3724      	adds	r7, #36	@ 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020c00 	.word	0x40020c00
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40021400 	.word	0x40021400
 8001cb8:	40021800 	.word	0x40021800
 8001cbc:	40013c00 	.word	0x40013c00

08001cc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	887b      	ldrh	r3, [r7, #2]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
 8001cdc:	e001      	b.n	8001ce2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d00:	787b      	ldrb	r3, [r7, #1]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d0c:	e003      	b.n	8001d16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d0e:	887b      	ldrh	r3, [r7, #2]
 8001d10:	041a      	lsls	r2, r3, #16
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	619a      	str	r2, [r3, #24]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b085      	sub	sp, #20
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d34:	887a      	ldrh	r2, [r7, #2]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	041a      	lsls	r2, r3, #16
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	887b      	ldrh	r3, [r7, #2]
 8001d42:	400b      	ands	r3, r1
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	619a      	str	r2, [r3, #24]
}
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e12b      	b.n	8001fc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff fbc0 	bl	8001504 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2224      	movs	r2, #36	@ 0x24
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0201 	bic.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001daa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dbc:	f000 fe8a 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8001dc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4a81      	ldr	r2, [pc, #516]	@ (8001fcc <HAL_I2C_Init+0x274>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d807      	bhi.n	8001ddc <HAL_I2C_Init+0x84>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4a80      	ldr	r2, [pc, #512]	@ (8001fd0 <HAL_I2C_Init+0x278>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	bf94      	ite	ls
 8001dd4:	2301      	movls	r3, #1
 8001dd6:	2300      	movhi	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	e006      	b.n	8001dea <HAL_I2C_Init+0x92>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4a7d      	ldr	r2, [pc, #500]	@ (8001fd4 <HAL_I2C_Init+0x27c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	bf94      	ite	ls
 8001de4:	2301      	movls	r3, #1
 8001de6:	2300      	movhi	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0e7      	b.n	8001fc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4a78      	ldr	r2, [pc, #480]	@ (8001fd8 <HAL_I2C_Init+0x280>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	0c9b      	lsrs	r3, r3, #18
 8001dfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	4a6a      	ldr	r2, [pc, #424]	@ (8001fcc <HAL_I2C_Init+0x274>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d802      	bhi.n	8001e2c <HAL_I2C_Init+0xd4>
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	e009      	b.n	8001e40 <HAL_I2C_Init+0xe8>
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e32:	fb02 f303 	mul.w	r3, r2, r3
 8001e36:	4a69      	ldr	r2, [pc, #420]	@ (8001fdc <HAL_I2C_Init+0x284>)
 8001e38:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3c:	099b      	lsrs	r3, r3, #6
 8001e3e:	3301      	adds	r3, #1
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	430b      	orrs	r3, r1
 8001e46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e52:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	495c      	ldr	r1, [pc, #368]	@ (8001fcc <HAL_I2C_Init+0x274>)
 8001e5c:	428b      	cmp	r3, r1
 8001e5e:	d819      	bhi.n	8001e94 <HAL_I2C_Init+0x13c>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1e59      	subs	r1, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e6e:	1c59      	adds	r1, r3, #1
 8001e70:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e74:	400b      	ands	r3, r1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <HAL_I2C_Init+0x138>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1e59      	subs	r1, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e88:	3301      	adds	r3, #1
 8001e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e8e:	e051      	b.n	8001f34 <HAL_I2C_Init+0x1dc>
 8001e90:	2304      	movs	r3, #4
 8001e92:	e04f      	b.n	8001f34 <HAL_I2C_Init+0x1dc>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d111      	bne.n	8001ec0 <HAL_I2C_Init+0x168>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1e58      	subs	r0, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6859      	ldr	r1, [r3, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	440b      	add	r3, r1
 8001eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eae:	3301      	adds	r3, #1
 8001eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	bf0c      	ite	eq
 8001eb8:	2301      	moveq	r3, #1
 8001eba:	2300      	movne	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	e012      	b.n	8001ee6 <HAL_I2C_Init+0x18e>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1e58      	subs	r0, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6859      	ldr	r1, [r3, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	0099      	lsls	r1, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf0c      	ite	eq
 8001ee0:	2301      	moveq	r3, #1
 8001ee2:	2300      	movne	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_I2C_Init+0x196>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e022      	b.n	8001f34 <HAL_I2C_Init+0x1dc>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10e      	bne.n	8001f14 <HAL_I2C_Init+0x1bc>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	1e58      	subs	r0, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6859      	ldr	r1, [r3, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	440b      	add	r3, r1
 8001f04:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f12:	e00f      	b.n	8001f34 <HAL_I2C_Init+0x1dc>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1e58      	subs	r0, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6859      	ldr	r1, [r3, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	0099      	lsls	r1, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	6809      	ldr	r1, [r1, #0]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6911      	ldr	r1, [r2, #16]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68d2      	ldr	r2, [r2, #12]
 8001f6e:	4311      	orrs	r1, r2
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	430b      	orrs	r3, r1
 8001f76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695a      	ldr	r2, [r3, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2220      	movs	r2, #32
 8001fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	000186a0 	.word	0x000186a0
 8001fd0:	001e847f 	.word	0x001e847f
 8001fd4:	003d08ff 	.word	0x003d08ff
 8001fd8:	431bde83 	.word	0x431bde83
 8001fdc:	10624dd3 	.word	0x10624dd3

08001fe0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	461a      	mov	r2, r3
 8001fec:	460b      	mov	r3, r1
 8001fee:	817b      	strh	r3, [r7, #10]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ff4:	f7ff fbe2 	bl	80017bc <HAL_GetTick>
 8001ff8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b20      	cmp	r3, #32
 8002004:	f040 80e0 	bne.w	80021c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	2319      	movs	r3, #25
 800200e:	2201      	movs	r2, #1
 8002010:	4970      	ldr	r1, [pc, #448]	@ (80021d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 fa92 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800201e:	2302      	movs	r3, #2
 8002020:	e0d3      	b.n	80021ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_I2C_Master_Transmit+0x50>
 800202c:	2302      	movs	r3, #2
 800202e:	e0cc      	b.n	80021ca <HAL_I2C_Master_Transmit+0x1ea>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b01      	cmp	r3, #1
 8002044:	d007      	beq.n	8002056 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0201 	orr.w	r2, r2, #1
 8002054:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002064:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2221      	movs	r2, #33	@ 0x21
 800206a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2210      	movs	r2, #16
 8002072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	893a      	ldrh	r2, [r7, #8]
 8002086:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800208c:	b29a      	uxth	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4a50      	ldr	r2, [pc, #320]	@ (80021d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002096:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002098:	8979      	ldrh	r1, [r7, #10]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	6a3a      	ldr	r2, [r7, #32]
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 f9ca 	bl	8002438 <I2C_MasterRequestWrite>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e08d      	b.n	80021ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020c4:	e066      	b.n	8002194 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	6a39      	ldr	r1, [r7, #32]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fb50 	bl	8002770 <I2C_WaitOnTXEFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00d      	beq.n	80020f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d107      	bne.n	80020ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e06b      	b.n	80021ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	781a      	ldrb	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800210c:	b29b      	uxth	r3, r3
 800210e:	3b01      	subs	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b04      	cmp	r3, #4
 800212e:	d11b      	bne.n	8002168 <HAL_I2C_Master_Transmit+0x188>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002134:	2b00      	cmp	r3, #0
 8002136:	d017      	beq.n	8002168 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	6a39      	ldr	r1, [r7, #32]
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 fb47 	bl	8002800 <I2C_WaitOnBTFFlagUntilTimeout>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00d      	beq.n	8002194 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217c:	2b04      	cmp	r3, #4
 800217e:	d107      	bne.n	8002190 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800218e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e01a      	b.n	80021ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002198:	2b00      	cmp	r3, #0
 800219a:	d194      	bne.n	80020c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021c8:	2302      	movs	r3, #2
  }
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	00100002 	.word	0x00100002
 80021d8:	ffff0000 	.word	0xffff0000

080021dc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	@ 0x28
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	460b      	mov	r3, r1
 80021ea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80021ec:	f7ff fae6 	bl	80017bc <HAL_GetTick>
 80021f0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b20      	cmp	r3, #32
 8002200:	f040 8111 	bne.w	8002426 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	2319      	movs	r3, #25
 800220a:	2201      	movs	r2, #1
 800220c:	4988      	ldr	r1, [pc, #544]	@ (8002430 <HAL_I2C_IsDeviceReady+0x254>)
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 f994 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800221a:	2302      	movs	r3, #2
 800221c:	e104      	b.n	8002428 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_I2C_IsDeviceReady+0x50>
 8002228:	2302      	movs	r3, #2
 800222a:	e0fd      	b.n	8002428 <HAL_I2C_IsDeviceReady+0x24c>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b01      	cmp	r3, #1
 8002240:	d007      	beq.n	8002252 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0201 	orr.w	r2, r2, #1
 8002250:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002260:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2224      	movs	r2, #36	@ 0x24
 8002266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4a70      	ldr	r2, [pc, #448]	@ (8002434 <HAL_I2C_IsDeviceReady+0x258>)
 8002274:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002284:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2200      	movs	r2, #0
 800228e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f952 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00d      	beq.n	80022ba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022ac:	d103      	bne.n	80022b6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022b4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e0b6      	b.n	8002428 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022ba:	897b      	ldrh	r3, [r7, #10]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80022c8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80022ca:	f7ff fa77 	bl	80017bc <HAL_GetTick>
 80022ce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b02      	cmp	r3, #2
 80022dc:	bf0c      	ite	eq
 80022de:	2301      	moveq	r3, #1
 80022e0:	2300      	movne	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022f4:	bf0c      	ite	eq
 80022f6:	2301      	moveq	r3, #1
 80022f8:	2300      	movne	r3, #0
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80022fe:	e025      	b.n	800234c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002300:	f7ff fa5c 	bl	80017bc <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d302      	bcc.n	8002316 <HAL_I2C_IsDeviceReady+0x13a>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d103      	bne.n	800231e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	22a0      	movs	r2, #160	@ 0xa0
 800231a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b02      	cmp	r3, #2
 800232a:	bf0c      	ite	eq
 800232c:	2301      	moveq	r3, #1
 800232e:	2300      	movne	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002342:	bf0c      	ite	eq
 8002344:	2301      	moveq	r3, #1
 8002346:	2300      	movne	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2ba0      	cmp	r3, #160	@ 0xa0
 8002356:	d005      	beq.n	8002364 <HAL_I2C_IsDeviceReady+0x188>
 8002358:	7dfb      	ldrb	r3, [r7, #23]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d102      	bne.n	8002364 <HAL_I2C_IsDeviceReady+0x188>
 800235e:	7dbb      	ldrb	r3, [r7, #22]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0cd      	beq.n	8002300 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b02      	cmp	r3, #2
 8002378:	d129      	bne.n	80023ce <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002388:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	2319      	movs	r3, #25
 80023a6:	2201      	movs	r2, #1
 80023a8:	4921      	ldr	r1, [pc, #132]	@ (8002430 <HAL_I2C_IsDeviceReady+0x254>)
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 f8c6 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e036      	b.n	8002428 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2220      	movs	r2, #32
 80023be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e02c      	b.n	8002428 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023dc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023e6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	2319      	movs	r3, #25
 80023ee:	2201      	movs	r2, #1
 80023f0:	490f      	ldr	r1, [pc, #60]	@ (8002430 <HAL_I2C_IsDeviceReady+0x254>)
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f8a2 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e012      	b.n	8002428 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	3301      	adds	r3, #1
 8002406:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	429a      	cmp	r2, r3
 800240e:	f4ff af32 	bcc.w	8002276 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2220      	movs	r2, #32
 8002416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002426:	2302      	movs	r3, #2
  }
}
 8002428:	4618      	mov	r0, r3
 800242a:	3720      	adds	r7, #32
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	00100002 	.word	0x00100002
 8002434:	ffff0000 	.word	0xffff0000

08002438 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af02      	add	r7, sp, #8
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	460b      	mov	r3, r1
 8002446:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2b08      	cmp	r3, #8
 8002452:	d006      	beq.n	8002462 <I2C_MasterRequestWrite+0x2a>
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d003      	beq.n	8002462 <I2C_MasterRequestWrite+0x2a>
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002460:	d108      	bne.n	8002474 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e00b      	b.n	800248c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002478:	2b12      	cmp	r3, #18
 800247a:	d107      	bne.n	800248c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800248a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 f84f 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00d      	beq.n	80024c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024b2:	d103      	bne.n	80024bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e035      	b.n	800252c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024c8:	d108      	bne.n	80024dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ca:	897b      	ldrh	r3, [r7, #10]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024d8:	611a      	str	r2, [r3, #16]
 80024da:	e01b      	b.n	8002514 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024dc:	897b      	ldrh	r3, [r7, #10]
 80024de:	11db      	asrs	r3, r3, #7
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f003 0306 	and.w	r3, r3, #6
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f063 030f 	orn	r3, r3, #15
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	490e      	ldr	r1, [pc, #56]	@ (8002534 <I2C_MasterRequestWrite+0xfc>)
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f898 	bl	8002630 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e010      	b.n	800252c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800250a:	897b      	ldrh	r3, [r7, #10]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4907      	ldr	r1, [pc, #28]	@ (8002538 <I2C_MasterRequestWrite+0x100>)
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f888 	bl	8002630 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	00010008 	.word	0x00010008
 8002538:	00010002 	.word	0x00010002

0800253c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	4613      	mov	r3, r2
 800254a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800254c:	e048      	b.n	80025e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002554:	d044      	beq.n	80025e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002556:	f7ff f931 	bl	80017bc <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d302      	bcc.n	800256c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d139      	bne.n	80025e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	0c1b      	lsrs	r3, r3, #16
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b01      	cmp	r3, #1
 8002574:	d10d      	bne.n	8002592 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	43da      	mvns	r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	4013      	ands	r3, r2
 8002582:	b29b      	uxth	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf0c      	ite	eq
 8002588:	2301      	moveq	r3, #1
 800258a:	2300      	movne	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	461a      	mov	r2, r3
 8002590:	e00c      	b.n	80025ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	43da      	mvns	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	4013      	ands	r3, r2
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf0c      	ite	eq
 80025a4:	2301      	moveq	r3, #1
 80025a6:	2300      	movne	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	461a      	mov	r2, r3
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d116      	bne.n	80025e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025cc:	f043 0220 	orr.w	r2, r3, #32
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e023      	b.n	8002628 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	0c1b      	lsrs	r3, r3, #16
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d10d      	bne.n	8002606 <I2C_WaitOnFlagUntilTimeout+0xca>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	43da      	mvns	r2, r3
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	4013      	ands	r3, r2
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	bf0c      	ite	eq
 80025fc:	2301      	moveq	r3, #1
 80025fe:	2300      	movne	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	e00c      	b.n	8002620 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	43da      	mvns	r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	4013      	ands	r3, r2
 8002612:	b29b      	uxth	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	429a      	cmp	r2, r3
 8002624:	d093      	beq.n	800254e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800263e:	e071      	b.n	8002724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800264a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800264e:	d123      	bne.n	8002698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800265e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002668:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	f043 0204 	orr.w	r2, r3, #4
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e067      	b.n	8002768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269e:	d041      	beq.n	8002724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a0:	f7ff f88c 	bl	80017bc <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d302      	bcc.n	80026b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d136      	bne.n	8002724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	0c1b      	lsrs	r3, r3, #16
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d10c      	bne.n	80026da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	43da      	mvns	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4013      	ands	r3, r2
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	bf14      	ite	ne
 80026d2:	2301      	movne	r3, #1
 80026d4:	2300      	moveq	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	e00b      	b.n	80026f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	43da      	mvns	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	4013      	ands	r3, r2
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf14      	ite	ne
 80026ec:	2301      	movne	r3, #1
 80026ee:	2300      	moveq	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d016      	beq.n	8002724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	f043 0220 	orr.w	r2, r3, #32
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e021      	b.n	8002768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	0c1b      	lsrs	r3, r3, #16
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b01      	cmp	r3, #1
 800272c:	d10c      	bne.n	8002748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	43da      	mvns	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	4013      	ands	r3, r2
 800273a:	b29b      	uxth	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	bf14      	ite	ne
 8002740:	2301      	movne	r3, #1
 8002742:	2300      	moveq	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	e00b      	b.n	8002760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	43da      	mvns	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4013      	ands	r3, r2
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	bf14      	ite	ne
 800275a:	2301      	movne	r3, #1
 800275c:	2300      	moveq	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	f47f af6d 	bne.w	8002640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800277c:	e034      	b.n	80027e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f886 	bl	8002890 <I2C_IsAcknowledgeFailed>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e034      	b.n	80027f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002794:	d028      	beq.n	80027e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002796:	f7ff f811 	bl	80017bc <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d302      	bcc.n	80027ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d11d      	bne.n	80027e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027b6:	2b80      	cmp	r3, #128	@ 0x80
 80027b8:	d016      	beq.n	80027e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d4:	f043 0220 	orr.w	r2, r3, #32
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e007      	b.n	80027f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027f2:	2b80      	cmp	r3, #128	@ 0x80
 80027f4:	d1c3      	bne.n	800277e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800280c:	e034      	b.n	8002878 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f83e 	bl	8002890 <I2C_IsAcknowledgeFailed>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e034      	b.n	8002888 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d028      	beq.n	8002878 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002826:	f7fe ffc9 	bl	80017bc <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	429a      	cmp	r2, r3
 8002834:	d302      	bcc.n	800283c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d11d      	bne.n	8002878 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b04      	cmp	r3, #4
 8002848:	d016      	beq.n	8002878 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002864:	f043 0220 	orr.w	r2, r3, #32
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e007      	b.n	8002888 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b04      	cmp	r3, #4
 8002884:	d1c3      	bne.n	800280e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028a6:	d11b      	bne.n	80028e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	f043 0204 	orr.w	r2, r3, #4
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0cc      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002904:	4b68      	ldr	r3, [pc, #416]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d90c      	bls.n	800292c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b65      	ldr	r3, [pc, #404]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b63      	ldr	r3, [pc, #396]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0b8      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d020      	beq.n	800297a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002944:	4b59      	ldr	r3, [pc, #356]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a58      	ldr	r2, [pc, #352]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800294e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800295c:	4b53      	ldr	r3, [pc, #332]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	4a52      	ldr	r2, [pc, #328]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002966:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002968:	4b50      	ldr	r3, [pc, #320]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	494d      	ldr	r1, [pc, #308]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d044      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298e:	4b47      	ldr	r3, [pc, #284]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d119      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e07f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d003      	beq.n	80029ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d107      	bne.n	80029be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ae:	4b3f      	ldr	r3, [pc, #252]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e06f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029be:	4b3b      	ldr	r3, [pc, #236]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e067      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ce:	4b37      	ldr	r3, [pc, #220]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f023 0203 	bic.w	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	4934      	ldr	r1, [pc, #208]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e0:	f7fe feec 	bl	80017bc <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e8:	f7fe fee8 	bl	80017bc <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e04f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fe:	4b2b      	ldr	r3, [pc, #172]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 020c 	and.w	r2, r3, #12
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d1eb      	bne.n	80029e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a10:	4b25      	ldr	r3, [pc, #148]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d20c      	bcs.n	8002a38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b22      	ldr	r3, [pc, #136]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	4b20      	ldr	r3, [pc, #128]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e032      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a44:	4b19      	ldr	r3, [pc, #100]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4916      	ldr	r1, [pc, #88]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a62:	4b12      	ldr	r3, [pc, #72]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	490e      	ldr	r1, [pc, #56]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a76:	f000 f873 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	490a      	ldr	r1, [pc, #40]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a88:	5ccb      	ldrb	r3, [r1, r3]
 8002a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8e:	4a09      	ldr	r2, [pc, #36]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a92:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fd7c 	bl	8001594 <HAL_InitTick>

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023c00 	.word	0x40023c00
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	08007bc0 	.word	0x08007bc0
 8002ab4:	2000001c 	.word	0x2000001c
 8002ab8:	20000020 	.word	0x20000020

08002abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	@ (8002ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	2000001c 	.word	0x2000001c

08002ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ad8:	f7ff fff0 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	@ (8002af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0a9b      	lsrs	r3, r3, #10
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4903      	ldr	r1, [pc, #12]	@ (8002af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	08007bd0 	.word	0x08007bd0

08002afc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	220f      	movs	r2, #15
 8002b0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b0c:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <HAL_RCC_GetClockConfig+0x5c>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0203 	and.w	r2, r3, #3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b18:	4b0f      	ldr	r3, [pc, #60]	@ (8002b58 <HAL_RCC_GetClockConfig+0x5c>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b24:	4b0c      	ldr	r3, [pc, #48]	@ (8002b58 <HAL_RCC_GetClockConfig+0x5c>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b30:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <HAL_RCC_GetClockConfig+0x5c>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	08db      	lsrs	r3, r3, #3
 8002b36:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b3e:	4b07      	ldr	r3, [pc, #28]	@ (8002b5c <HAL_RCC_GetClockConfig+0x60>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 020f 	and.w	r2, r3, #15
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	601a      	str	r2, [r3, #0]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40023c00 	.word	0x40023c00

08002b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b64:	b0ae      	sub	sp, #184	@ 0xb8
 8002b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b86:	4bcb      	ldr	r3, [pc, #812]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b0c      	cmp	r3, #12
 8002b90:	f200 8206 	bhi.w	8002fa0 <HAL_RCC_GetSysClockFreq+0x440>
 8002b94:	a201      	add	r2, pc, #4	@ (adr r2, 8002b9c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9a:	bf00      	nop
 8002b9c:	08002bd1 	.word	0x08002bd1
 8002ba0:	08002fa1 	.word	0x08002fa1
 8002ba4:	08002fa1 	.word	0x08002fa1
 8002ba8:	08002fa1 	.word	0x08002fa1
 8002bac:	08002bd9 	.word	0x08002bd9
 8002bb0:	08002fa1 	.word	0x08002fa1
 8002bb4:	08002fa1 	.word	0x08002fa1
 8002bb8:	08002fa1 	.word	0x08002fa1
 8002bbc:	08002be1 	.word	0x08002be1
 8002bc0:	08002fa1 	.word	0x08002fa1
 8002bc4:	08002fa1 	.word	0x08002fa1
 8002bc8:	08002fa1 	.word	0x08002fa1
 8002bcc:	08002dd1 	.word	0x08002dd1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bd0:	4bb9      	ldr	r3, [pc, #740]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bd6:	e1e7      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bd8:	4bb8      	ldr	r3, [pc, #736]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002bda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bde:	e1e3      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002be0:	4bb4      	ldr	r3, [pc, #720]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002be8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bec:	4bb1      	ldr	r3, [pc, #708]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d071      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf8:	4bae      	ldr	r3, [pc, #696]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	099b      	lsrs	r3, r3, #6
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c04:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c14:	2300      	movs	r3, #0
 8002c16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c1e:	4622      	mov	r2, r4
 8002c20:	462b      	mov	r3, r5
 8002c22:	f04f 0000 	mov.w	r0, #0
 8002c26:	f04f 0100 	mov.w	r1, #0
 8002c2a:	0159      	lsls	r1, r3, #5
 8002c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c30:	0150      	lsls	r0, r2, #5
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4621      	mov	r1, r4
 8002c38:	1a51      	subs	r1, r2, r1
 8002c3a:	6439      	str	r1, [r7, #64]	@ 0x40
 8002c3c:	4629      	mov	r1, r5
 8002c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c42:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002c50:	4649      	mov	r1, r9
 8002c52:	018b      	lsls	r3, r1, #6
 8002c54:	4641      	mov	r1, r8
 8002c56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c5a:	4641      	mov	r1, r8
 8002c5c:	018a      	lsls	r2, r1, #6
 8002c5e:	4641      	mov	r1, r8
 8002c60:	1a51      	subs	r1, r2, r1
 8002c62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c64:	4649      	mov	r1, r9
 8002c66:	eb63 0301 	sbc.w	r3, r3, r1
 8002c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002c78:	4649      	mov	r1, r9
 8002c7a:	00cb      	lsls	r3, r1, #3
 8002c7c:	4641      	mov	r1, r8
 8002c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c82:	4641      	mov	r1, r8
 8002c84:	00ca      	lsls	r2, r1, #3
 8002c86:	4610      	mov	r0, r2
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	4622      	mov	r2, r4
 8002c8e:	189b      	adds	r3, r3, r2
 8002c90:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c92:	462b      	mov	r3, r5
 8002c94:	460a      	mov	r2, r1
 8002c96:	eb42 0303 	adc.w	r3, r2, r3
 8002c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ca8:	4629      	mov	r1, r5
 8002caa:	024b      	lsls	r3, r1, #9
 8002cac:	4621      	mov	r1, r4
 8002cae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	024a      	lsls	r2, r1, #9
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cc4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002cc8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002ccc:	f7fd fab2 	bl	8000234 <__aeabi_uldivmod>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cda:	e067      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cdc:	4b75      	ldr	r3, [pc, #468]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ce8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002cec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002cfa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002cfe:	4622      	mov	r2, r4
 8002d00:	462b      	mov	r3, r5
 8002d02:	f04f 0000 	mov.w	r0, #0
 8002d06:	f04f 0100 	mov.w	r1, #0
 8002d0a:	0159      	lsls	r1, r3, #5
 8002d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d10:	0150      	lsls	r0, r2, #5
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4621      	mov	r1, r4
 8002d18:	1a51      	subs	r1, r2, r1
 8002d1a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002d30:	4649      	mov	r1, r9
 8002d32:	018b      	lsls	r3, r1, #6
 8002d34:	4641      	mov	r1, r8
 8002d36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d3a:	4641      	mov	r1, r8
 8002d3c:	018a      	lsls	r2, r1, #6
 8002d3e:	4641      	mov	r1, r8
 8002d40:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d44:	4649      	mov	r1, r9
 8002d46:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d56:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d5e:	4692      	mov	sl, r2
 8002d60:	469b      	mov	fp, r3
 8002d62:	4623      	mov	r3, r4
 8002d64:	eb1a 0303 	adds.w	r3, sl, r3
 8002d68:	623b      	str	r3, [r7, #32]
 8002d6a:	462b      	mov	r3, r5
 8002d6c:	eb4b 0303 	adc.w	r3, fp, r3
 8002d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d7e:	4629      	mov	r1, r5
 8002d80:	028b      	lsls	r3, r1, #10
 8002d82:	4621      	mov	r1, r4
 8002d84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d88:	4621      	mov	r1, r4
 8002d8a:	028a      	lsls	r2, r1, #10
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d94:	2200      	movs	r2, #0
 8002d96:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d98:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d9a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002d9e:	f7fd fa49 	bl	8000234 <__aeabi_uldivmod>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4613      	mov	r3, r2
 8002da8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002dac:	4b41      	ldr	r3, [pc, #260]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	0c1b      	lsrs	r3, r3, #16
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	3301      	adds	r3, #1
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002dbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002dc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002dce:	e0eb      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd0:	4b38      	ldr	r3, [pc, #224]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ddc:	4b35      	ldr	r3, [pc, #212]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d06b      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de8:	4b32      	ldr	r3, [pc, #200]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	2200      	movs	r2, #0
 8002df0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002df2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002df4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dfa:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e00:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002e04:	4622      	mov	r2, r4
 8002e06:	462b      	mov	r3, r5
 8002e08:	f04f 0000 	mov.w	r0, #0
 8002e0c:	f04f 0100 	mov.w	r1, #0
 8002e10:	0159      	lsls	r1, r3, #5
 8002e12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e16:	0150      	lsls	r0, r2, #5
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	1a51      	subs	r1, r2, r1
 8002e20:	61b9      	str	r1, [r7, #24]
 8002e22:	4629      	mov	r1, r5
 8002e24:	eb63 0301 	sbc.w	r3, r3, r1
 8002e28:	61fb      	str	r3, [r7, #28]
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002e36:	4659      	mov	r1, fp
 8002e38:	018b      	lsls	r3, r1, #6
 8002e3a:	4651      	mov	r1, sl
 8002e3c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e40:	4651      	mov	r1, sl
 8002e42:	018a      	lsls	r2, r1, #6
 8002e44:	4651      	mov	r1, sl
 8002e46:	ebb2 0801 	subs.w	r8, r2, r1
 8002e4a:	4659      	mov	r1, fp
 8002e4c:	eb63 0901 	sbc.w	r9, r3, r1
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e64:	4690      	mov	r8, r2
 8002e66:	4699      	mov	r9, r3
 8002e68:	4623      	mov	r3, r4
 8002e6a:	eb18 0303 	adds.w	r3, r8, r3
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	462b      	mov	r3, r5
 8002e72:	eb49 0303 	adc.w	r3, r9, r3
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e84:	4629      	mov	r1, r5
 8002e86:	024b      	lsls	r3, r1, #9
 8002e88:	4621      	mov	r1, r4
 8002e8a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e8e:	4621      	mov	r1, r4
 8002e90:	024a      	lsls	r2, r1, #9
 8002e92:	4610      	mov	r0, r2
 8002e94:	4619      	mov	r1, r3
 8002e96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e9e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002ea0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ea4:	f7fd f9c6 	bl	8000234 <__aeabi_uldivmod>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4613      	mov	r3, r2
 8002eae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002eb2:	e065      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0x420>
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	4611      	mov	r1, r2
 8002ecc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ed0:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ed6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002eda:	4642      	mov	r2, r8
 8002edc:	464b      	mov	r3, r9
 8002ede:	f04f 0000 	mov.w	r0, #0
 8002ee2:	f04f 0100 	mov.w	r1, #0
 8002ee6:	0159      	lsls	r1, r3, #5
 8002ee8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eec:	0150      	lsls	r0, r2, #5
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4641      	mov	r1, r8
 8002ef4:	1a51      	subs	r1, r2, r1
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	4649      	mov	r1, r9
 8002efa:	eb63 0301 	sbc.w	r3, r3, r1
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002f0c:	4659      	mov	r1, fp
 8002f0e:	018b      	lsls	r3, r1, #6
 8002f10:	4651      	mov	r1, sl
 8002f12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f16:	4651      	mov	r1, sl
 8002f18:	018a      	lsls	r2, r1, #6
 8002f1a:	4651      	mov	r1, sl
 8002f1c:	1a54      	subs	r4, r2, r1
 8002f1e:	4659      	mov	r1, fp
 8002f20:	eb63 0501 	sbc.w	r5, r3, r1
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	00eb      	lsls	r3, r5, #3
 8002f2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f32:	00e2      	lsls	r2, r4, #3
 8002f34:	4614      	mov	r4, r2
 8002f36:	461d      	mov	r5, r3
 8002f38:	4643      	mov	r3, r8
 8002f3a:	18e3      	adds	r3, r4, r3
 8002f3c:	603b      	str	r3, [r7, #0]
 8002f3e:	464b      	mov	r3, r9
 8002f40:	eb45 0303 	adc.w	r3, r5, r3
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f52:	4629      	mov	r1, r5
 8002f54:	028b      	lsls	r3, r1, #10
 8002f56:	4621      	mov	r1, r4
 8002f58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	028a      	lsls	r2, r1, #10
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f68:	2200      	movs	r2, #0
 8002f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f6c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002f6e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f72:	f7fd f95f 	bl	8000234 <__aeabi_uldivmod>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f80:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	0f1b      	lsrs	r3, r3, #28
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002f8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f9e:	e003      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fa0:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0x45c>)
 8002fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002fa6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fa8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	37b8      	adds	r7, #184	@ 0xb8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	00f42400 	.word	0x00f42400

08002fc0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e28d      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 8083 	beq.w	80030e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002fe0:	4b94      	ldr	r3, [pc, #592]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 030c 	and.w	r3, r3, #12
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d019      	beq.n	8003020 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002fec:	4b91      	ldr	r3, [pc, #580]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d106      	bne.n	8003006 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ff8:	4b8e      	ldr	r3, [pc, #568]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003000:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003004:	d00c      	beq.n	8003020 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003006:	4b8b      	ldr	r3, [pc, #556]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800300e:	2b0c      	cmp	r3, #12
 8003010:	d112      	bne.n	8003038 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003012:	4b88      	ldr	r3, [pc, #544]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800301a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800301e:	d10b      	bne.n	8003038 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	4b84      	ldr	r3, [pc, #528]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d05b      	beq.n	80030e4 <HAL_RCC_OscConfig+0x124>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d157      	bne.n	80030e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e25a      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003040:	d106      	bne.n	8003050 <HAL_RCC_OscConfig+0x90>
 8003042:	4b7c      	ldr	r3, [pc, #496]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a7b      	ldr	r2, [pc, #492]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e01d      	b.n	800308c <HAL_RCC_OscConfig+0xcc>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0xb4>
 800305a:	4b76      	ldr	r3, [pc, #472]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a75      	ldr	r2, [pc, #468]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b73      	ldr	r3, [pc, #460]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a72      	ldr	r2, [pc, #456]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e00b      	b.n	800308c <HAL_RCC_OscConfig+0xcc>
 8003074:	4b6f      	ldr	r3, [pc, #444]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a6e      	ldr	r2, [pc, #440]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 800307a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	4b6c      	ldr	r3, [pc, #432]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a6b      	ldr	r2, [pc, #428]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003086:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800308a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d013      	beq.n	80030bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe fb92 	bl	80017bc <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800309c:	f7fe fb8e 	bl	80017bc <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	@ 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e21f      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	4b61      	ldr	r3, [pc, #388]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0xdc>
 80030ba:	e014      	b.n	80030e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7fe fb7e 	bl	80017bc <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c4:	f7fe fb7a 	bl	80017bc <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b64      	cmp	r3, #100	@ 0x64
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e20b      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d6:	4b57      	ldr	r3, [pc, #348]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x104>
 80030e2:	e000      	b.n	80030e6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d06f      	beq.n	80031d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030f2:	4b50      	ldr	r3, [pc, #320]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d017      	beq.n	800312e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
        || \
 8003106:	2b08      	cmp	r3, #8
 8003108:	d105      	bne.n	8003116 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800310a:	4b4a      	ldr	r3, [pc, #296]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003116:	4b47      	ldr	r3, [pc, #284]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800311e:	2b0c      	cmp	r3, #12
 8003120:	d11c      	bne.n	800315c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003122:	4b44      	ldr	r3, [pc, #272]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d116      	bne.n	800315c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	4b41      	ldr	r3, [pc, #260]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_RCC_OscConfig+0x186>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e1d3      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003146:	4b3b      	ldr	r3, [pc, #236]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4937      	ldr	r1, [pc, #220]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	e03a      	b.n	80031d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d020      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003164:	4b34      	ldr	r3, [pc, #208]	@ (8003238 <HAL_RCC_OscConfig+0x278>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7fe fb27 	bl	80017bc <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003172:	f7fe fb23 	bl	80017bc <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e1b4      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003184:	4b2b      	ldr	r3, [pc, #172]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003190:	4b28      	ldr	r3, [pc, #160]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4925      	ldr	r1, [pc, #148]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]
 80031a4:	e015      	b.n	80031d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a6:	4b24      	ldr	r3, [pc, #144]	@ (8003238 <HAL_RCC_OscConfig+0x278>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe fb06 	bl	80017bc <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b4:	f7fe fb02 	bl	80017bc <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e193      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d036      	beq.n	800324c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d016      	beq.n	8003214 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e6:	4b15      	ldr	r3, [pc, #84]	@ (800323c <HAL_RCC_OscConfig+0x27c>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ec:	f7fe fae6 	bl	80017bc <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f4:	f7fe fae2 	bl	80017bc <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e173      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003206:	4b0b      	ldr	r3, [pc, #44]	@ (8003234 <HAL_RCC_OscConfig+0x274>)
 8003208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x234>
 8003212:	e01b      	b.n	800324c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003214:	4b09      	ldr	r3, [pc, #36]	@ (800323c <HAL_RCC_OscConfig+0x27c>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321a:	f7fe facf 	bl	80017bc <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	e00e      	b.n	8003240 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003222:	f7fe facb 	bl	80017bc <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d907      	bls.n	8003240 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e15c      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
 8003234:	40023800 	.word	0x40023800
 8003238:	42470000 	.word	0x42470000
 800323c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003240:	4b8a      	ldr	r3, [pc, #552]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1ea      	bne.n	8003222 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 8097 	beq.w	8003388 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325a:	2300      	movs	r3, #0
 800325c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325e:	4b83      	ldr	r3, [pc, #524]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10f      	bne.n	800328a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	4b7f      	ldr	r3, [pc, #508]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003272:	4a7e      	ldr	r2, [pc, #504]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003278:	6413      	str	r3, [r2, #64]	@ 0x40
 800327a:	4b7c      	ldr	r3, [pc, #496]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003286:	2301      	movs	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328a:	4b79      	ldr	r3, [pc, #484]	@ (8003470 <HAL_RCC_OscConfig+0x4b0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d118      	bne.n	80032c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003296:	4b76      	ldr	r3, [pc, #472]	@ (8003470 <HAL_RCC_OscConfig+0x4b0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a75      	ldr	r2, [pc, #468]	@ (8003470 <HAL_RCC_OscConfig+0x4b0>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a2:	f7fe fa8b 	bl	80017bc <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032aa:	f7fe fa87 	bl	80017bc <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e118      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	4b6c      	ldr	r3, [pc, #432]	@ (8003470 <HAL_RCC_OscConfig+0x4b0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d106      	bne.n	80032de <HAL_RCC_OscConfig+0x31e>
 80032d0:	4b66      	ldr	r3, [pc, #408]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 80032d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d4:	4a65      	ldr	r2, [pc, #404]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	6713      	str	r3, [r2, #112]	@ 0x70
 80032dc:	e01c      	b.n	8003318 <HAL_RCC_OscConfig+0x358>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	d10c      	bne.n	8003300 <HAL_RCC_OscConfig+0x340>
 80032e6:	4b61      	ldr	r3, [pc, #388]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ea:	4a60      	ldr	r2, [pc, #384]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f2:	4b5e      	ldr	r3, [pc, #376]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f6:	4a5d      	ldr	r2, [pc, #372]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032fe:	e00b      	b.n	8003318 <HAL_RCC_OscConfig+0x358>
 8003300:	4b5a      	ldr	r3, [pc, #360]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003304:	4a59      	ldr	r2, [pc, #356]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003306:	f023 0301 	bic.w	r3, r3, #1
 800330a:	6713      	str	r3, [r2, #112]	@ 0x70
 800330c:	4b57      	ldr	r3, [pc, #348]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003310:	4a56      	ldr	r2, [pc, #344]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003312:	f023 0304 	bic.w	r3, r3, #4
 8003316:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d015      	beq.n	800334c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7fe fa4c 	bl	80017bc <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003326:	e00a      	b.n	800333e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003328:	f7fe fa48 	bl	80017bc <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e0d7      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333e:	4b4b      	ldr	r3, [pc, #300]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0ee      	beq.n	8003328 <HAL_RCC_OscConfig+0x368>
 800334a:	e014      	b.n	8003376 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fe fa36 	bl	80017bc <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003352:	e00a      	b.n	800336a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003354:	f7fe fa32 	bl	80017bc <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e0c1      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336a:	4b40      	ldr	r3, [pc, #256]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1ee      	bne.n	8003354 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003376:	7dfb      	ldrb	r3, [r7, #23]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d105      	bne.n	8003388 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800337c:	4b3b      	ldr	r3, [pc, #236]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003380:	4a3a      	ldr	r2, [pc, #232]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003386:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80ad 	beq.w	80034ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003392:	4b36      	ldr	r3, [pc, #216]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b08      	cmp	r3, #8
 800339c:	d060      	beq.n	8003460 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d145      	bne.n	8003432 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a6:	4b33      	ldr	r3, [pc, #204]	@ (8003474 <HAL_RCC_OscConfig+0x4b4>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fe fa06 	bl	80017bc <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b4:	f7fe fa02 	bl	80017bc <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e093      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	4b29      	ldr	r3, [pc, #164]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69da      	ldr	r2, [r3, #28]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	085b      	lsrs	r3, r3, #1
 80033ea:	3b01      	subs	r3, #1
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fc:	071b      	lsls	r3, r3, #28
 80033fe:	491b      	ldr	r1, [pc, #108]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003400:	4313      	orrs	r3, r2
 8003402:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003404:	4b1b      	ldr	r3, [pc, #108]	@ (8003474 <HAL_RCC_OscConfig+0x4b4>)
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340a:	f7fe f9d7 	bl	80017bc <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003412:	f7fe f9d3 	bl	80017bc <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e064      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003424:	4b11      	ldr	r3, [pc, #68]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x452>
 8003430:	e05c      	b.n	80034ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003432:	4b10      	ldr	r3, [pc, #64]	@ (8003474 <HAL_RCC_OscConfig+0x4b4>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fe f9c0 	bl	80017bc <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003440:	f7fe f9bc 	bl	80017bc <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e04d      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003452:	4b06      	ldr	r3, [pc, #24]	@ (800346c <HAL_RCC_OscConfig+0x4ac>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x480>
 800345e:	e045      	b.n	80034ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d107      	bne.n	8003478 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e040      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
 800346c:	40023800 	.word	0x40023800
 8003470:	40007000 	.word	0x40007000
 8003474:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003478:	4b1f      	ldr	r3, [pc, #124]	@ (80034f8 <HAL_RCC_OscConfig+0x538>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d030      	beq.n	80034e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d129      	bne.n	80034e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349e:	429a      	cmp	r2, r3
 80034a0:	d122      	bne.n	80034e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034a8:	4013      	ands	r3, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d119      	bne.n	80034e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	3b01      	subs	r3, #1
 80034c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d10f      	bne.n	80034e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d107      	bne.n	80034e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800

080034fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e041      	b.n	8003592 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f839 	bl	800359a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3304      	adds	r3, #4
 8003538:	4619      	mov	r1, r3
 800353a:	4610      	mov	r0, r2
 800353c:	f000 f9c0 	bl	80038c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d001      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e04e      	b.n	8003666 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a23      	ldr	r2, [pc, #140]	@ (8003674 <HAL_TIM_Base_Start_IT+0xc4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d022      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f2:	d01d      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003678 <HAL_TIM_Base_Start_IT+0xc8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d018      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a1e      	ldr	r2, [pc, #120]	@ (800367c <HAL_TIM_Base_Start_IT+0xcc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d013      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1c      	ldr	r2, [pc, #112]	@ (8003680 <HAL_TIM_Base_Start_IT+0xd0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00e      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1b      	ldr	r2, [pc, #108]	@ (8003684 <HAL_TIM_Base_Start_IT+0xd4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d009      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a19      	ldr	r2, [pc, #100]	@ (8003688 <HAL_TIM_Base_Start_IT+0xd8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d004      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a18      	ldr	r2, [pc, #96]	@ (800368c <HAL_TIM_Base_Start_IT+0xdc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d111      	bne.n	8003654 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b06      	cmp	r3, #6
 8003640:	d010      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0201 	orr.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003652:	e007      	b.n	8003664 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40010000 	.word	0x40010000
 8003678:	40000400 	.word	0x40000400
 800367c:	40000800 	.word	0x40000800
 8003680:	40000c00 	.word	0x40000c00
 8003684:	40010400 	.word	0x40010400
 8003688:	40014000 	.word	0x40014000
 800368c:	40001800 	.word	0x40001800

08003690 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d020      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01b      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0202 	mvn.w	r2, #2
 80036c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f8d2 	bl	8003884 <HAL_TIM_IC_CaptureCallback>
 80036e0:	e005      	b.n	80036ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f8c4 	bl	8003870 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f8d5 	bl	8003898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d020      	beq.n	8003740 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01b      	beq.n	8003740 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0204 	mvn.w	r2, #4
 8003710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2202      	movs	r2, #2
 8003716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f8ac 	bl	8003884 <HAL_TIM_IC_CaptureCallback>
 800372c:	e005      	b.n	800373a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f89e 	bl	8003870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f8af 	bl	8003898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d020      	beq.n	800378c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01b      	beq.n	800378c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0208 	mvn.w	r2, #8
 800375c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2204      	movs	r2, #4
 8003762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f886 	bl	8003884 <HAL_TIM_IC_CaptureCallback>
 8003778:	e005      	b.n	8003786 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f878 	bl	8003870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f889 	bl	8003898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f003 0310 	and.w	r3, r3, #16
 8003792:	2b00      	cmp	r3, #0
 8003794:	d020      	beq.n	80037d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01b      	beq.n	80037d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0210 	mvn.w	r2, #16
 80037a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2208      	movs	r2, #8
 80037ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f860 	bl	8003884 <HAL_TIM_IC_CaptureCallback>
 80037c4:	e005      	b.n	80037d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f852 	bl	8003870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f863 	bl	8003898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00c      	beq.n	80037fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d007      	beq.n	80037fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0201 	mvn.w	r2, #1
 80037f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fd fb82 	bl	8000f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00c      	beq.n	8003820 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f906 	bl	8003a2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00c      	beq.n	8003844 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003830:	2b00      	cmp	r3, #0
 8003832:	d007      	beq.n	8003844 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800383c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f834 	bl	80038ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00c      	beq.n	8003868 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b00      	cmp	r3, #0
 8003856:	d007      	beq.n	8003868 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0220 	mvn.w	r2, #32
 8003860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f8d8 	bl	8003a18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a46      	ldr	r2, [pc, #280]	@ (80039ec <TIM_Base_SetConfig+0x12c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d013      	beq.n	8003900 <TIM_Base_SetConfig+0x40>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038de:	d00f      	beq.n	8003900 <TIM_Base_SetConfig+0x40>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a43      	ldr	r2, [pc, #268]	@ (80039f0 <TIM_Base_SetConfig+0x130>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00b      	beq.n	8003900 <TIM_Base_SetConfig+0x40>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a42      	ldr	r2, [pc, #264]	@ (80039f4 <TIM_Base_SetConfig+0x134>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d007      	beq.n	8003900 <TIM_Base_SetConfig+0x40>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a41      	ldr	r2, [pc, #260]	@ (80039f8 <TIM_Base_SetConfig+0x138>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d003      	beq.n	8003900 <TIM_Base_SetConfig+0x40>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a40      	ldr	r2, [pc, #256]	@ (80039fc <TIM_Base_SetConfig+0x13c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d108      	bne.n	8003912 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a35      	ldr	r2, [pc, #212]	@ (80039ec <TIM_Base_SetConfig+0x12c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d02b      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003920:	d027      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a32      	ldr	r2, [pc, #200]	@ (80039f0 <TIM_Base_SetConfig+0x130>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d023      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a31      	ldr	r2, [pc, #196]	@ (80039f4 <TIM_Base_SetConfig+0x134>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d01f      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a30      	ldr	r2, [pc, #192]	@ (80039f8 <TIM_Base_SetConfig+0x138>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d01b      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a2f      	ldr	r2, [pc, #188]	@ (80039fc <TIM_Base_SetConfig+0x13c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d017      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a2e      	ldr	r2, [pc, #184]	@ (8003a00 <TIM_Base_SetConfig+0x140>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d013      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2d      	ldr	r2, [pc, #180]	@ (8003a04 <TIM_Base_SetConfig+0x144>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00f      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a2c      	ldr	r2, [pc, #176]	@ (8003a08 <TIM_Base_SetConfig+0x148>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00b      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a2b      	ldr	r2, [pc, #172]	@ (8003a0c <TIM_Base_SetConfig+0x14c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d007      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a2a      	ldr	r2, [pc, #168]	@ (8003a10 <TIM_Base_SetConfig+0x150>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d003      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a29      	ldr	r2, [pc, #164]	@ (8003a14 <TIM_Base_SetConfig+0x154>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d108      	bne.n	8003984 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a10      	ldr	r2, [pc, #64]	@ (80039ec <TIM_Base_SetConfig+0x12c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d003      	beq.n	80039b8 <TIM_Base_SetConfig+0xf8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a12      	ldr	r2, [pc, #72]	@ (80039fc <TIM_Base_SetConfig+0x13c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d103      	bne.n	80039c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d105      	bne.n	80039de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f023 0201 	bic.w	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	611a      	str	r2, [r3, #16]
  }
}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40010000 	.word	0x40010000
 80039f0:	40000400 	.word	0x40000400
 80039f4:	40000800 	.word	0x40000800
 80039f8:	40000c00 	.word	0x40000c00
 80039fc:	40010400 	.word	0x40010400
 8003a00:	40014000 	.word	0x40014000
 8003a04:	40014400 	.word	0x40014400
 8003a08:	40014800 	.word	0x40014800
 8003a0c:	40001800 	.word	0x40001800
 8003a10:	40001c00 	.word	0x40001c00
 8003a14:	40002000 	.word	0x40002000

08003a18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <__NVIC_SetPriority>:
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	6039      	str	r1, [r7, #0]
 8003a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	db0a      	blt.n	8003a6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	490c      	ldr	r1, [pc, #48]	@ (8003a8c <__NVIC_SetPriority+0x4c>)
 8003a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5e:	0112      	lsls	r2, r2, #4
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	440b      	add	r3, r1
 8003a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003a68:	e00a      	b.n	8003a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	4908      	ldr	r1, [pc, #32]	@ (8003a90 <__NVIC_SetPriority+0x50>)
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	3b04      	subs	r3, #4
 8003a78:	0112      	lsls	r2, r2, #4
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	761a      	strb	r2, [r3, #24]
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	e000e100 	.word	0xe000e100
 8003a90:	e000ed00 	.word	0xe000ed00

08003a94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003a98:	4b05      	ldr	r3, [pc, #20]	@ (8003ab0 <SysTick_Handler+0x1c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003a9c:	f001 fedc 	bl	8005858 <xTaskGetSchedulerState>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d001      	beq.n	8003aaa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003aa6:	f002 fdd7 	bl	8006658 <xPortSysTickHandler>
  }
}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	e000e010 	.word	0xe000e010

08003ab4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003ab8:	2100      	movs	r1, #0
 8003aba:	f06f 0004 	mvn.w	r0, #4
 8003abe:	f7ff ffbf 	bl	8003a40 <__NVIC_SetPriority>
#endif
}
 8003ac2:	bf00      	nop
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ace:	f3ef 8305 	mrs	r3, IPSR
 8003ad2:	603b      	str	r3, [r7, #0]
  return(result);
 8003ad4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003ada:	f06f 0305 	mvn.w	r3, #5
 8003ade:	607b      	str	r3, [r7, #4]
 8003ae0:	e00c      	b.n	8003afc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8003b0c <osKernelInitialize+0x44>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d105      	bne.n	8003af6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003aea:	4b08      	ldr	r3, [pc, #32]	@ (8003b0c <osKernelInitialize+0x44>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	607b      	str	r3, [r7, #4]
 8003af4:	e002      	b.n	8003afc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003af6:	f04f 33ff 	mov.w	r3, #4294967295
 8003afa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003afc:	687b      	ldr	r3, [r7, #4]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	20000570 	.word	0x20000570

08003b10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b16:	f3ef 8305 	mrs	r3, IPSR
 8003b1a:	603b      	str	r3, [r7, #0]
  return(result);
 8003b1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003b22:	f06f 0305 	mvn.w	r3, #5
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	e010      	b.n	8003b4c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b58 <osKernelStart+0x48>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d109      	bne.n	8003b46 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003b32:	f7ff ffbf 	bl	8003ab4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003b36:	4b08      	ldr	r3, [pc, #32]	@ (8003b58 <osKernelStart+0x48>)
 8003b38:	2202      	movs	r2, #2
 8003b3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003b3c:	f001 fa28 	bl	8004f90 <vTaskStartScheduler>
      stat = osOK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	607b      	str	r3, [r7, #4]
 8003b44:	e002      	b.n	8003b4c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003b46:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b4c:	687b      	ldr	r3, [r7, #4]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000570 	.word	0x20000570

08003b5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08e      	sub	sp, #56	@ 0x38
 8003b60:	af04      	add	r7, sp, #16
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b6c:	f3ef 8305 	mrs	r3, IPSR
 8003b70:	617b      	str	r3, [r7, #20]
  return(result);
 8003b72:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d17e      	bne.n	8003c76 <osThreadNew+0x11a>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d07b      	beq.n	8003c76 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003b7e:	2380      	movs	r3, #128	@ 0x80
 8003b80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003b82:	2318      	movs	r3, #24
 8003b84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d045      	beq.n	8003c22 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <osThreadNew+0x48>
        name = attr->name;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <osThreadNew+0x6e>
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	2b38      	cmp	r3, #56	@ 0x38
 8003bbc:	d805      	bhi.n	8003bca <osThreadNew+0x6e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <osThreadNew+0x72>
        return (NULL);
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e054      	b.n	8003c78 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	089b      	lsrs	r3, r3, #2
 8003bdc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00e      	beq.n	8003c04 <osThreadNew+0xa8>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2ba7      	cmp	r3, #167	@ 0xa7
 8003bec:	d90a      	bls.n	8003c04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d006      	beq.n	8003c04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <osThreadNew+0xa8>
        mem = 1;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	e010      	b.n	8003c26 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10c      	bne.n	8003c26 <osThreadNew+0xca>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d108      	bne.n	8003c26 <osThreadNew+0xca>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d104      	bne.n	8003c26 <osThreadNew+0xca>
          mem = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61bb      	str	r3, [r7, #24]
 8003c20:	e001      	b.n	8003c26 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d110      	bne.n	8003c4e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c34:	9202      	str	r2, [sp, #8]
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	6a3a      	ldr	r2, [r7, #32]
 8003c40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 ffb0 	bl	8004ba8 <xTaskCreateStatic>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	e013      	b.n	8003c76 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d110      	bne.n	8003c76 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	f107 0310 	add.w	r3, r7, #16
 8003c5c:	9301      	str	r3, [sp, #4]
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 fffe 	bl	8004c68 <xTaskCreate>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d001      	beq.n	8003c76 <osThreadNew+0x11a>
            hTask = NULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c76:	693b      	ldr	r3, [r7, #16]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3728      	adds	r7, #40	@ 0x28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c88:	f3ef 8305 	mrs	r3, IPSR
 8003c8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c8e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <osDelay+0x1c>
    stat = osErrorISR;
 8003c94:	f06f 0305 	mvn.w	r3, #5
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e007      	b.n	8003cac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <osDelay+0x2c>
      vTaskDelay(ticks);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f001 f93c 	bl	8004f24 <vTaskDelay>
    }
  }

  return (stat);
 8003cac:	68fb      	ldr	r3, [r7, #12]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4a07      	ldr	r2, [pc, #28]	@ (8003ce4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003cc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4a06      	ldr	r2, [pc, #24]	@ (8003ce8 <vApplicationGetIdleTaskMemory+0x30>)
 8003cce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2280      	movs	r2, #128	@ 0x80
 8003cd4:	601a      	str	r2, [r3, #0]
}
 8003cd6:	bf00      	nop
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	20000574 	.word	0x20000574
 8003ce8:	2000061c 	.word	0x2000061c

08003cec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4a07      	ldr	r2, [pc, #28]	@ (8003d18 <vApplicationGetTimerTaskMemory+0x2c>)
 8003cfc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4a06      	ldr	r2, [pc, #24]	@ (8003d1c <vApplicationGetTimerTaskMemory+0x30>)
 8003d02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d0a:	601a      	str	r2, [r3, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	2000081c 	.word	0x2000081c
 8003d1c:	200008c4 	.word	0x200008c4

08003d20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f103 0208 	add.w	r2, r3, #8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f04f 32ff 	mov.w	r2, #4294967295
 8003d38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f103 0208 	add.w	r2, r3, #8
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f103 0208 	add.w	r2, r3, #8
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	601a      	str	r2, [r3, #0]
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b085      	sub	sp, #20
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d103      	bne.n	8003de2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	e00c      	b.n	8003dfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3308      	adds	r3, #8
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	e002      	b.n	8003df0 <vListInsert+0x2e>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d2f6      	bcs.n	8003dea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	601a      	str	r2, [r3, #0]
}
 8003e28:	bf00      	nop
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6892      	ldr	r2, [r2, #8]
 8003e4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6852      	ldr	r2, [r2, #4]
 8003e54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d103      	bne.n	8003e68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	1e5a      	subs	r2, r3, #1
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10b      	bne.n	8003eb4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003eae:	bf00      	nop
 8003eb0:	bf00      	nop
 8003eb2:	e7fd      	b.n	8003eb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003eb4:	f002 fb40 	bl	8006538 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec0:	68f9      	ldr	r1, [r7, #12]
 8003ec2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ec4:	fb01 f303 	mul.w	r3, r1, r3
 8003ec8:	441a      	add	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	68f9      	ldr	r1, [r7, #12]
 8003ee8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003eea:	fb01 f303 	mul.w	r3, r1, r3
 8003eee:	441a      	add	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	22ff      	movs	r2, #255	@ 0xff
 8003ef8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	22ff      	movs	r2, #255	@ 0xff
 8003f00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d114      	bne.n	8003f34 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d01a      	beq.n	8003f48 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	3310      	adds	r3, #16
 8003f16:	4618      	mov	r0, r3
 8003f18:	f001 fad8 	bl	80054cc <xTaskRemoveFromEventList>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d012      	beq.n	8003f48 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f22:	4b0d      	ldr	r3, [pc, #52]	@ (8003f58 <xQueueGenericReset+0xd0>)
 8003f24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	e009      	b.n	8003f48 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	3310      	adds	r3, #16
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff fef1 	bl	8003d20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3324      	adds	r3, #36	@ 0x24
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff feec 	bl	8003d20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f48:	f002 fb28 	bl	800659c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f4c:	2301      	movs	r3, #1
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	e000ed04 	.word	0xe000ed04

08003f5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08e      	sub	sp, #56	@ 0x38
 8003f60:	af02      	add	r7, sp, #8
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10b      	bne.n	8003f88 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f82:	bf00      	nop
 8003f84:	bf00      	nop
 8003f86:	e7fd      	b.n	8003f84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10b      	bne.n	8003fa6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003fa0:	bf00      	nop
 8003fa2:	bf00      	nop
 8003fa4:	e7fd      	b.n	8003fa2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <xQueueGenericCreateStatic+0x56>
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <xQueueGenericCreateStatic+0x5a>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <xQueueGenericCreateStatic+0x5c>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10b      	bne.n	8003fd4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	623b      	str	r3, [r7, #32]
}
 8003fce:	bf00      	nop
 8003fd0:	bf00      	nop
 8003fd2:	e7fd      	b.n	8003fd0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d102      	bne.n	8003fe0 <xQueueGenericCreateStatic+0x84>
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <xQueueGenericCreateStatic+0x88>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <xQueueGenericCreateStatic+0x8a>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10b      	bne.n	8004002 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	61fb      	str	r3, [r7, #28]
}
 8003ffc:	bf00      	nop
 8003ffe:	bf00      	nop
 8004000:	e7fd      	b.n	8003ffe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004002:	2350      	movs	r3, #80	@ 0x50
 8004004:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2b50      	cmp	r3, #80	@ 0x50
 800400a:	d00b      	beq.n	8004024 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	61bb      	str	r3, [r7, #24]
}
 800401e:	bf00      	nop
 8004020:	bf00      	nop
 8004022:	e7fd      	b.n	8004020 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004024:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800402a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00d      	beq.n	800404c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004038:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800403c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	4613      	mov	r3, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f840 	bl	80040cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800404c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800404e:	4618      	mov	r0, r3
 8004050:	3730      	adds	r7, #48	@ 0x30
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004056:	b580      	push	{r7, lr}
 8004058:	b08a      	sub	sp, #40	@ 0x28
 800405a:	af02      	add	r7, sp, #8
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	4613      	mov	r3, r2
 8004062:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10b      	bne.n	8004082 <xQueueGenericCreate+0x2c>
	__asm volatile
 800406a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	613b      	str	r3, [r7, #16]
}
 800407c:	bf00      	nop
 800407e:	bf00      	nop
 8004080:	e7fd      	b.n	800407e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	fb02 f303 	mul.w	r3, r2, r3
 800408a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	3350      	adds	r3, #80	@ 0x50
 8004090:	4618      	mov	r0, r3
 8004092:	f002 fb73 	bl	800677c <pvPortMalloc>
 8004096:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d011      	beq.n	80040c2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	3350      	adds	r3, #80	@ 0x50
 80040a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040b0:	79fa      	ldrb	r2, [r7, #7]
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	4613      	mov	r3, r2
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f805 	bl	80040cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040c2:	69bb      	ldr	r3, [r7, #24]
	}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d103      	bne.n	80040e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	e002      	b.n	80040ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040fa:	2101      	movs	r1, #1
 80040fc:	69b8      	ldr	r0, [r7, #24]
 80040fe:	f7ff fec3 	bl	8003e88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	78fa      	ldrb	r2, [r7, #3]
 8004106:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800410a:	bf00      	nop
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004112:	b580      	push	{r7, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00e      	beq.n	800413e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004132:	2300      	movs	r3, #0
 8004134:	2200      	movs	r2, #0
 8004136:	2100      	movs	r1, #0
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f81d 	bl	8004178 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004146:	b580      	push	{r7, lr}
 8004148:	b086      	sub	sp, #24
 800414a:	af00      	add	r7, sp, #0
 800414c:	4603      	mov	r3, r0
 800414e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004150:	2301      	movs	r3, #1
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	2300      	movs	r3, #0
 8004156:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004158:	79fb      	ldrb	r3, [r7, #7]
 800415a:	461a      	mov	r2, r3
 800415c:	6939      	ldr	r1, [r7, #16]
 800415e:	6978      	ldr	r0, [r7, #20]
 8004160:	f7ff ff79 	bl	8004056 <xQueueGenericCreate>
 8004164:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f7ff ffd3 	bl	8004112 <prvInitialiseMutex>

		return xNewQueue;
 800416c:	68fb      	ldr	r3, [r7, #12]
	}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08e      	sub	sp, #56	@ 0x38
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004186:	2300      	movs	r3, #0
 8004188:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800418e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10b      	bne.n	80041ac <xQueueGenericSend+0x34>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80041a6:	bf00      	nop
 80041a8:	bf00      	nop
 80041aa:	e7fd      	b.n	80041a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d103      	bne.n	80041ba <xQueueGenericSend+0x42>
 80041b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <xQueueGenericSend+0x46>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <xQueueGenericSend+0x48>
 80041be:	2300      	movs	r3, #0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10b      	bne.n	80041dc <xQueueGenericSend+0x64>
	__asm volatile
 80041c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80041d6:	bf00      	nop
 80041d8:	bf00      	nop
 80041da:	e7fd      	b.n	80041d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d103      	bne.n	80041ea <xQueueGenericSend+0x72>
 80041e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d101      	bne.n	80041ee <xQueueGenericSend+0x76>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <xQueueGenericSend+0x78>
 80041ee:	2300      	movs	r3, #0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10b      	bne.n	800420c <xQueueGenericSend+0x94>
	__asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	623b      	str	r3, [r7, #32]
}
 8004206:	bf00      	nop
 8004208:	bf00      	nop
 800420a:	e7fd      	b.n	8004208 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800420c:	f001 fb24 	bl	8005858 <xTaskGetSchedulerState>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d102      	bne.n	800421c <xQueueGenericSend+0xa4>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <xQueueGenericSend+0xa8>
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <xQueueGenericSend+0xaa>
 8004220:	2300      	movs	r3, #0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10b      	bne.n	800423e <xQueueGenericSend+0xc6>
	__asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	61fb      	str	r3, [r7, #28]
}
 8004238:	bf00      	nop
 800423a:	bf00      	nop
 800423c:	e7fd      	b.n	800423a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800423e:	f002 f97b 	bl	8006538 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800424a:	429a      	cmp	r2, r3
 800424c:	d302      	bcc.n	8004254 <xQueueGenericSend+0xdc>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d129      	bne.n	80042a8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	68b9      	ldr	r1, [r7, #8]
 8004258:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800425a:	f000 fb37 	bl	80048cc <prvCopyDataToQueue>
 800425e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004264:	2b00      	cmp	r3, #0
 8004266:	d010      	beq.n	800428a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426a:	3324      	adds	r3, #36	@ 0x24
 800426c:	4618      	mov	r0, r3
 800426e:	f001 f92d 	bl	80054cc <xTaskRemoveFromEventList>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d013      	beq.n	80042a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004278:	4b3f      	ldr	r3, [pc, #252]	@ (8004378 <xQueueGenericSend+0x200>)
 800427a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	e00a      	b.n	80042a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800428a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800428c:	2b00      	cmp	r3, #0
 800428e:	d007      	beq.n	80042a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004290:	4b39      	ldr	r3, [pc, #228]	@ (8004378 <xQueueGenericSend+0x200>)
 8004292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042a0:	f002 f97c 	bl	800659c <vPortExitCritical>
				return pdPASS;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e063      	b.n	8004370 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d103      	bne.n	80042b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042ae:	f002 f975 	bl	800659c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	e05c      	b.n	8004370 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d106      	bne.n	80042ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042bc:	f107 0314 	add.w	r3, r7, #20
 80042c0:	4618      	mov	r0, r3
 80042c2:	f001 f967 	bl	8005594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042c6:	2301      	movs	r3, #1
 80042c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042ca:	f002 f967 	bl	800659c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042ce:	f000 fecf 	bl	8005070 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042d2:	f002 f931 	bl	8006538 <vPortEnterCritical>
 80042d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042dc:	b25b      	sxtb	r3, r3
 80042de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e2:	d103      	bne.n	80042ec <xQueueGenericSend+0x174>
 80042e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042f2:	b25b      	sxtb	r3, r3
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f8:	d103      	bne.n	8004302 <xQueueGenericSend+0x18a>
 80042fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004302:	f002 f94b 	bl	800659c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004306:	1d3a      	adds	r2, r7, #4
 8004308:	f107 0314 	add.w	r3, r7, #20
 800430c:	4611      	mov	r1, r2
 800430e:	4618      	mov	r0, r3
 8004310:	f001 f956 	bl	80055c0 <xTaskCheckForTimeOut>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d124      	bne.n	8004364 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800431a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800431c:	f000 fbce 	bl	8004abc <prvIsQueueFull>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d018      	beq.n	8004358 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004328:	3310      	adds	r3, #16
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	4611      	mov	r1, r2
 800432e:	4618      	mov	r0, r3
 8004330:	f001 f87a 	bl	8005428 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004334:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004336:	f000 fb59 	bl	80049ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800433a:	f000 fea7 	bl	800508c <xTaskResumeAll>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	f47f af7c 	bne.w	800423e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004346:	4b0c      	ldr	r3, [pc, #48]	@ (8004378 <xQueueGenericSend+0x200>)
 8004348:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	e772      	b.n	800423e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004358:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800435a:	f000 fb47 	bl	80049ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800435e:	f000 fe95 	bl	800508c <xTaskResumeAll>
 8004362:	e76c      	b.n	800423e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004364:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004366:	f000 fb41 	bl	80049ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800436a:	f000 fe8f 	bl	800508c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800436e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004370:	4618      	mov	r0, r3
 8004372:	3738      	adds	r7, #56	@ 0x38
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	e000ed04 	.word	0xe000ed04

0800437c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b090      	sub	sp, #64	@ 0x40
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800438e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10b      	bne.n	80043ac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80043a6:	bf00      	nop
 80043a8:	bf00      	nop
 80043aa:	e7fd      	b.n	80043a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d103      	bne.n	80043ba <xQueueGenericSendFromISR+0x3e>
 80043b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <xQueueGenericSendFromISR+0x42>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <xQueueGenericSendFromISR+0x44>
 80043be:	2300      	movs	r3, #0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10b      	bne.n	80043dc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80043c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80043d6:	bf00      	nop
 80043d8:	bf00      	nop
 80043da:	e7fd      	b.n	80043d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d103      	bne.n	80043ea <xQueueGenericSendFromISR+0x6e>
 80043e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d101      	bne.n	80043ee <xQueueGenericSendFromISR+0x72>
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <xQueueGenericSendFromISR+0x74>
 80043ee:	2300      	movs	r3, #0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10b      	bne.n	800440c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	623b      	str	r3, [r7, #32]
}
 8004406:	bf00      	nop
 8004408:	bf00      	nop
 800440a:	e7fd      	b.n	8004408 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800440c:	f002 f974 	bl	80066f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004410:	f3ef 8211 	mrs	r2, BASEPRI
 8004414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	61fa      	str	r2, [r7, #28]
 8004426:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004428:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800442a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800442c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004434:	429a      	cmp	r2, r3
 8004436:	d302      	bcc.n	800443e <xQueueGenericSendFromISR+0xc2>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d12f      	bne.n	800449e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800443e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004440:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004444:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800444a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	68b9      	ldr	r1, [r7, #8]
 8004452:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004454:	f000 fa3a 	bl	80048cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004458:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d112      	bne.n	8004488 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	2b00      	cmp	r3, #0
 8004468:	d016      	beq.n	8004498 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800446a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800446c:	3324      	adds	r3, #36	@ 0x24
 800446e:	4618      	mov	r0, r3
 8004470:	f001 f82c 	bl	80054cc <xTaskRemoveFromEventList>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00e      	beq.n	8004498 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00b      	beq.n	8004498 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	e007      	b.n	8004498 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004488:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800448c:	3301      	adds	r3, #1
 800448e:	b2db      	uxtb	r3, r3
 8004490:	b25a      	sxtb	r2, r3
 8004492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004498:	2301      	movs	r3, #1
 800449a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800449c:	e001      	b.n	80044a2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3740      	adds	r7, #64	@ 0x40
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08c      	sub	sp, #48	@ 0x30
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044c4:	2300      	movs	r3, #0
 80044c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10b      	bne.n	80044ea <xQueueReceive+0x32>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	623b      	str	r3, [r7, #32]
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop
 80044e8:	e7fd      	b.n	80044e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d103      	bne.n	80044f8 <xQueueReceive+0x40>
 80044f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <xQueueReceive+0x44>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <xQueueReceive+0x46>
 80044fc:	2300      	movs	r3, #0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10b      	bne.n	800451a <xQueueReceive+0x62>
	__asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	61fb      	str	r3, [r7, #28]
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	e7fd      	b.n	8004516 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800451a:	f001 f99d 	bl	8005858 <xTaskGetSchedulerState>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d102      	bne.n	800452a <xQueueReceive+0x72>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <xQueueReceive+0x76>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <xQueueReceive+0x78>
 800452e:	2300      	movs	r3, #0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10b      	bne.n	800454c <xQueueReceive+0x94>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	61bb      	str	r3, [r7, #24]
}
 8004546:	bf00      	nop
 8004548:	bf00      	nop
 800454a:	e7fd      	b.n	8004548 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800454c:	f001 fff4 	bl	8006538 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004554:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01f      	beq.n	800459c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004560:	f000 fa1e 	bl	80049a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004566:	1e5a      	subs	r2, r3, #1
 8004568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800456c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00f      	beq.n	8004594 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004576:	3310      	adds	r3, #16
 8004578:	4618      	mov	r0, r3
 800457a:	f000 ffa7 	bl	80054cc <xTaskRemoveFromEventList>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d007      	beq.n	8004594 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004584:	4b3c      	ldr	r3, [pc, #240]	@ (8004678 <xQueueReceive+0x1c0>)
 8004586:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004594:	f002 f802 	bl	800659c <vPortExitCritical>
				return pdPASS;
 8004598:	2301      	movs	r3, #1
 800459a:	e069      	b.n	8004670 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d103      	bne.n	80045aa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045a2:	f001 fffb 	bl	800659c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045a6:	2300      	movs	r3, #0
 80045a8:	e062      	b.n	8004670 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d106      	bne.n	80045be <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045b0:	f107 0310 	add.w	r3, r7, #16
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 ffed 	bl	8005594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045ba:	2301      	movs	r3, #1
 80045bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045be:	f001 ffed 	bl	800659c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045c2:	f000 fd55 	bl	8005070 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045c6:	f001 ffb7 	bl	8006538 <vPortEnterCritical>
 80045ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045d0:	b25b      	sxtb	r3, r3
 80045d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d6:	d103      	bne.n	80045e0 <xQueueReceive+0x128>
 80045d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045e6:	b25b      	sxtb	r3, r3
 80045e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ec:	d103      	bne.n	80045f6 <xQueueReceive+0x13e>
 80045ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045f6:	f001 ffd1 	bl	800659c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045fa:	1d3a      	adds	r2, r7, #4
 80045fc:	f107 0310 	add.w	r3, r7, #16
 8004600:	4611      	mov	r1, r2
 8004602:	4618      	mov	r0, r3
 8004604:	f000 ffdc 	bl	80055c0 <xTaskCheckForTimeOut>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d123      	bne.n	8004656 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800460e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004610:	f000 fa3e 	bl	8004a90 <prvIsQueueEmpty>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d017      	beq.n	800464a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800461a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461c:	3324      	adds	r3, #36	@ 0x24
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	4611      	mov	r1, r2
 8004622:	4618      	mov	r0, r3
 8004624:	f000 ff00 	bl	8005428 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004628:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800462a:	f000 f9df 	bl	80049ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800462e:	f000 fd2d 	bl	800508c <xTaskResumeAll>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d189      	bne.n	800454c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004638:	4b0f      	ldr	r3, [pc, #60]	@ (8004678 <xQueueReceive+0x1c0>)
 800463a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	e780      	b.n	800454c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800464a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800464c:	f000 f9ce 	bl	80049ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004650:	f000 fd1c 	bl	800508c <xTaskResumeAll>
 8004654:	e77a      	b.n	800454c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004656:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004658:	f000 f9c8 	bl	80049ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800465c:	f000 fd16 	bl	800508c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004660:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004662:	f000 fa15 	bl	8004a90 <prvIsQueueEmpty>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	f43f af6f 	beq.w	800454c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800466e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004670:	4618      	mov	r0, r3
 8004672:	3730      	adds	r7, #48	@ 0x30
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	e000ed04 	.word	0xe000ed04

0800467c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08e      	sub	sp, #56	@ 0x38
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004686:	2300      	movs	r3, #0
 8004688:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800468e:	2300      	movs	r3, #0
 8004690:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10b      	bne.n	80046b0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	623b      	str	r3, [r7, #32]
}
 80046aa:	bf00      	nop
 80046ac:	bf00      	nop
 80046ae:	e7fd      	b.n	80046ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80046b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00b      	beq.n	80046d0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	61fb      	str	r3, [r7, #28]
}
 80046ca:	bf00      	nop
 80046cc:	bf00      	nop
 80046ce:	e7fd      	b.n	80046cc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046d0:	f001 f8c2 	bl	8005858 <xTaskGetSchedulerState>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d102      	bne.n	80046e0 <xQueueSemaphoreTake+0x64>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <xQueueSemaphoreTake+0x68>
 80046e0:	2301      	movs	r3, #1
 80046e2:	e000      	b.n	80046e6 <xQueueSemaphoreTake+0x6a>
 80046e4:	2300      	movs	r3, #0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10b      	bne.n	8004702 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	61bb      	str	r3, [r7, #24]
}
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	e7fd      	b.n	80046fe <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004702:	f001 ff19 	bl	8006538 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800470c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470e:	2b00      	cmp	r3, #0
 8004710:	d024      	beq.n	800475c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004714:	1e5a      	subs	r2, r3, #1
 8004716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004718:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800471a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d104      	bne.n	800472c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004722:	f001 fa13 	bl	8005b4c <pvTaskIncrementMutexHeldCount>
 8004726:	4602      	mov	r2, r0
 8004728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800472a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800472c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00f      	beq.n	8004754 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004736:	3310      	adds	r3, #16
 8004738:	4618      	mov	r0, r3
 800473a:	f000 fec7 	bl	80054cc <xTaskRemoveFromEventList>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d007      	beq.n	8004754 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004744:	4b54      	ldr	r3, [pc, #336]	@ (8004898 <xQueueSemaphoreTake+0x21c>)
 8004746:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004754:	f001 ff22 	bl	800659c <vPortExitCritical>
				return pdPASS;
 8004758:	2301      	movs	r3, #1
 800475a:	e098      	b.n	800488e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d112      	bne.n	8004788 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00b      	beq.n	8004780 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	617b      	str	r3, [r7, #20]
}
 800477a:	bf00      	nop
 800477c:	bf00      	nop
 800477e:	e7fd      	b.n	800477c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004780:	f001 ff0c 	bl	800659c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004784:	2300      	movs	r3, #0
 8004786:	e082      	b.n	800488e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800478e:	f107 030c 	add.w	r3, r7, #12
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fefe 	bl	8005594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004798:	2301      	movs	r3, #1
 800479a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800479c:	f001 fefe 	bl	800659c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047a0:	f000 fc66 	bl	8005070 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047a4:	f001 fec8 	bl	8006538 <vPortEnterCritical>
 80047a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047ae:	b25b      	sxtb	r3, r3
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b4:	d103      	bne.n	80047be <xQueueSemaphoreTake+0x142>
 80047b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047c4:	b25b      	sxtb	r3, r3
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ca:	d103      	bne.n	80047d4 <xQueueSemaphoreTake+0x158>
 80047cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047d4:	f001 fee2 	bl	800659c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047d8:	463a      	mov	r2, r7
 80047da:	f107 030c 	add.w	r3, r7, #12
 80047de:	4611      	mov	r1, r2
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 feed 	bl	80055c0 <xTaskCheckForTimeOut>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d132      	bne.n	8004852 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80047ee:	f000 f94f 	bl	8004a90 <prvIsQueueEmpty>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d026      	beq.n	8004846 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d109      	bne.n	8004814 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004800:	f001 fe9a 	bl	8006538 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4618      	mov	r0, r3
 800480a:	f001 f843 	bl	8005894 <xTaskPriorityInherit>
 800480e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004810:	f001 fec4 	bl	800659c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004816:	3324      	adds	r3, #36	@ 0x24
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	4611      	mov	r1, r2
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fe03 	bl	8005428 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004822:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004824:	f000 f8e2 	bl	80049ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004828:	f000 fc30 	bl	800508c <xTaskResumeAll>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	f47f af67 	bne.w	8004702 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004834:	4b18      	ldr	r3, [pc, #96]	@ (8004898 <xQueueSemaphoreTake+0x21c>)
 8004836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	e75d      	b.n	8004702 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004846:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004848:	f000 f8d0 	bl	80049ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800484c:	f000 fc1e 	bl	800508c <xTaskResumeAll>
 8004850:	e757      	b.n	8004702 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004852:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004854:	f000 f8ca 	bl	80049ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004858:	f000 fc18 	bl	800508c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800485c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800485e:	f000 f917 	bl	8004a90 <prvIsQueueEmpty>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	f43f af4c 	beq.w	8004702 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800486a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00d      	beq.n	800488c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004870:	f001 fe62 	bl	8006538 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004874:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004876:	f000 f811 	bl	800489c <prvGetDisinheritPriorityAfterTimeout>
 800487a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800487c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004882:	4618      	mov	r0, r3
 8004884:	f001 f8de 	bl	8005a44 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004888:	f001 fe88 	bl	800659c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800488c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800488e:	4618      	mov	r0, r3
 8004890:	3738      	adds	r7, #56	@ 0x38
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	e000ed04 	.word	0xe000ed04

0800489c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d006      	beq.n	80048ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	e001      	b.n	80048be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80048be:	68fb      	ldr	r3, [r7, #12]
	}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10d      	bne.n	8004906 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d14d      	bne.n	800498e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f001 f834 	bl	8005964 <xTaskPriorityDisinherit>
 80048fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	609a      	str	r2, [r3, #8]
 8004904:	e043      	b.n	800498e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d119      	bne.n	8004940 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6858      	ldr	r0, [r3, #4]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004914:	461a      	mov	r2, r3
 8004916:	68b9      	ldr	r1, [r7, #8]
 8004918:	f002 f9aa 	bl	8006c70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004924:	441a      	add	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	429a      	cmp	r2, r3
 8004934:	d32b      	bcc.n	800498e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	e026      	b.n	800498e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	68d8      	ldr	r0, [r3, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004948:	461a      	mov	r2, r3
 800494a:	68b9      	ldr	r1, [r7, #8]
 800494c:	f002 f990 	bl	8006c70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004958:	425b      	negs	r3, r3
 800495a:	441a      	add	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d207      	bcs.n	800497c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004974:	425b      	negs	r3, r3
 8004976:	441a      	add	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b02      	cmp	r3, #2
 8004980:	d105      	bne.n	800498e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	3b01      	subs	r3, #1
 800498c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004996:	697b      	ldr	r3, [r7, #20]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d018      	beq.n	80049e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ba:	441a      	add	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d303      	bcc.n	80049d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68d9      	ldr	r1, [r3, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049dc:	461a      	mov	r2, r3
 80049de:	6838      	ldr	r0, [r7, #0]
 80049e0:	f002 f946 	bl	8006c70 <memcpy>
	}
}
 80049e4:	bf00      	nop
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80049f4:	f001 fda0 	bl	8006538 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a00:	e011      	b.n	8004a26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d012      	beq.n	8004a30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	3324      	adds	r3, #36	@ 0x24
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fd5c 	bl	80054cc <xTaskRemoveFromEventList>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a1a:	f000 fe35 	bl	8005688 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	dce9      	bgt.n	8004a02 <prvUnlockQueue+0x16>
 8004a2e:	e000      	b.n	8004a32 <prvUnlockQueue+0x46>
					break;
 8004a30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	22ff      	movs	r2, #255	@ 0xff
 8004a36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004a3a:	f001 fdaf 	bl	800659c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a3e:	f001 fd7b 	bl	8006538 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a4a:	e011      	b.n	8004a70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d012      	beq.n	8004a7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3310      	adds	r3, #16
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fd37 	bl	80054cc <xTaskRemoveFromEventList>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a64:	f000 fe10 	bl	8005688 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a68:	7bbb      	ldrb	r3, [r7, #14]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	dce9      	bgt.n	8004a4c <prvUnlockQueue+0x60>
 8004a78:	e000      	b.n	8004a7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	22ff      	movs	r2, #255	@ 0xff
 8004a80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004a84:	f001 fd8a 	bl	800659c <vPortExitCritical>
}
 8004a88:	bf00      	nop
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a98:	f001 fd4e 	bl	8006538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d102      	bne.n	8004aaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	e001      	b.n	8004aae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004aae:	f001 fd75 	bl	800659c <vPortExitCritical>

	return xReturn;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ac4:	f001 fd38 	bl	8006538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d102      	bne.n	8004ada <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	e001      	b.n	8004ade <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ade:	f001 fd5d 	bl	800659c <vPortExitCritical>

	return xReturn;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	e014      	b.n	8004b26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004afc:	4a0f      	ldr	r2, [pc, #60]	@ (8004b3c <vQueueAddToRegistry+0x50>)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10b      	bne.n	8004b20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b08:	490c      	ldr	r1, [pc, #48]	@ (8004b3c <vQueueAddToRegistry+0x50>)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b12:	4a0a      	ldr	r2, [pc, #40]	@ (8004b3c <vQueueAddToRegistry+0x50>)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	4413      	add	r3, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b1e:	e006      	b.n	8004b2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3301      	adds	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b07      	cmp	r3, #7
 8004b2a:	d9e7      	bls.n	8004afc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b2c:	bf00      	nop
 8004b2e:	bf00      	nop
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	20000cc4 	.word	0x20000cc4

08004b40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b50:	f001 fcf2 	bl	8006538 <vPortEnterCritical>
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b5a:	b25b      	sxtb	r3, r3
 8004b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b60:	d103      	bne.n	8004b6a <vQueueWaitForMessageRestricted+0x2a>
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b70:	b25b      	sxtb	r3, r3
 8004b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b76:	d103      	bne.n	8004b80 <vQueueWaitForMessageRestricted+0x40>
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b80:	f001 fd0c 	bl	800659c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d106      	bne.n	8004b9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	3324      	adds	r3, #36	@ 0x24
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	68b9      	ldr	r1, [r7, #8]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 fc6d 	bl	8005474 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b9a:	6978      	ldr	r0, [r7, #20]
 8004b9c:	f7ff ff26 	bl	80049ec <prvUnlockQueue>
	}
 8004ba0:	bf00      	nop
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08e      	sub	sp, #56	@ 0x38
 8004bac:	af04      	add	r7, sp, #16
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10b      	bne.n	8004bd4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	623b      	str	r3, [r7, #32]
}
 8004bce:	bf00      	nop
 8004bd0:	bf00      	nop
 8004bd2:	e7fd      	b.n	8004bd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10b      	bne.n	8004bf2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	61fb      	str	r3, [r7, #28]
}
 8004bec:	bf00      	nop
 8004bee:	bf00      	nop
 8004bf0:	e7fd      	b.n	8004bee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004bf2:	23a8      	movs	r3, #168	@ 0xa8
 8004bf4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	2ba8      	cmp	r3, #168	@ 0xa8
 8004bfa:	d00b      	beq.n	8004c14 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	61bb      	str	r3, [r7, #24]
}
 8004c0e:	bf00      	nop
 8004c10:	bf00      	nop
 8004c12:	e7fd      	b.n	8004c10 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01e      	beq.n	8004c5a <xTaskCreateStatic+0xb2>
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d01b      	beq.n	8004c5a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c24:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c2a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c34:	2300      	movs	r3, #0
 8004c36:	9303      	str	r3, [sp, #12]
 8004c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3a:	9302      	str	r3, [sp, #8]
 8004c3c:	f107 0314 	add.w	r3, r7, #20
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f851 	bl	8004cf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c54:	f000 f8f6 	bl	8004e44 <prvAddNewTaskToReadyList>
 8004c58:	e001      	b.n	8004c5e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c5e:	697b      	ldr	r3, [r7, #20]
	}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3728      	adds	r7, #40	@ 0x28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08c      	sub	sp, #48	@ 0x30
 8004c6c:	af04      	add	r7, sp, #16
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	603b      	str	r3, [r7, #0]
 8004c74:	4613      	mov	r3, r2
 8004c76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c78:	88fb      	ldrh	r3, [r7, #6]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f001 fd7d 	bl	800677c <pvPortMalloc>
 8004c82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00e      	beq.n	8004ca8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c8a:	20a8      	movs	r0, #168	@ 0xa8
 8004c8c:	f001 fd76 	bl	800677c <pvPortMalloc>
 8004c90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c9e:	e005      	b.n	8004cac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ca0:	6978      	ldr	r0, [r7, #20]
 8004ca2:	f001 fe39 	bl	8006918 <vPortFree>
 8004ca6:	e001      	b.n	8004cac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d017      	beq.n	8004ce2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004cba:	88fa      	ldrh	r2, [r7, #6]
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	9303      	str	r3, [sp, #12]
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	9302      	str	r3, [sp, #8]
 8004cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc6:	9301      	str	r3, [sp, #4]
 8004cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 f80f 	bl	8004cf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cd6:	69f8      	ldr	r0, [r7, #28]
 8004cd8:	f000 f8b4 	bl	8004e44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	61bb      	str	r3, [r7, #24]
 8004ce0:	e002      	b.n	8004ce8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ce8:	69bb      	ldr	r3, [r7, #24]
	}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3720      	adds	r7, #32
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d04:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	21a5      	movs	r1, #165	@ 0xa5
 8004d0e:	f001 ff23 	bl	8006b58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	f023 0307 	bic.w	r3, r3, #7
 8004d2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00b      	beq.n	8004d4e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	617b      	str	r3, [r7, #20]
}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop
 8004d4c:	e7fd      	b.n	8004d4a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01f      	beq.n	8004d94 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d54:	2300      	movs	r3, #0
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	e012      	b.n	8004d80 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	4413      	add	r3, r2
 8004d60:	7819      	ldrb	r1, [r3, #0]
 8004d62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	4413      	add	r3, r2
 8004d68:	3334      	adds	r3, #52	@ 0x34
 8004d6a:	460a      	mov	r2, r1
 8004d6c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	4413      	add	r3, r2
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d006      	beq.n	8004d88 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	61fb      	str	r3, [r7, #28]
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	2b0f      	cmp	r3, #15
 8004d84:	d9e9      	bls.n	8004d5a <prvInitialiseNewTask+0x66>
 8004d86:	e000      	b.n	8004d8a <prvInitialiseNewTask+0x96>
			{
				break;
 8004d88:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d92:	e003      	b.n	8004d9c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9e:	2b37      	cmp	r3, #55	@ 0x37
 8004da0:	d901      	bls.n	8004da6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004da2:	2337      	movs	r3, #55	@ 0x37
 8004da4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004daa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004db0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db4:	2200      	movs	r2, #0
 8004db6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fe ffcf 	bl	8003d60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	3318      	adds	r3, #24
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fe ffca 	bl	8003d60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dd0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dda:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004de0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de4:	2200      	movs	r2, #0
 8004de6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df4:	3354      	adds	r3, #84	@ 0x54
 8004df6:	224c      	movs	r2, #76	@ 0x4c
 8004df8:	2100      	movs	r1, #0
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f001 feac 	bl	8006b58 <memset>
 8004e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e02:	4a0d      	ldr	r2, [pc, #52]	@ (8004e38 <prvInitialiseNewTask+0x144>)
 8004e04:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e08:	4a0c      	ldr	r2, [pc, #48]	@ (8004e3c <prvInitialiseNewTask+0x148>)
 8004e0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8004e40 <prvInitialiseNewTask+0x14c>)
 8004e10:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	68f9      	ldr	r1, [r7, #12]
 8004e16:	69b8      	ldr	r0, [r7, #24]
 8004e18:	f001 fa5a 	bl	80062d0 <pxPortInitialiseStack>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e2e:	bf00      	nop
 8004e30:	3720      	adds	r7, #32
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20004f58 	.word	0x20004f58
 8004e3c:	20004fc0 	.word	0x20004fc0
 8004e40:	20005028 	.word	0x20005028

08004e44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e4c:	f001 fb74 	bl	8006538 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e50:	4b2d      	ldr	r3, [pc, #180]	@ (8004f08 <prvAddNewTaskToReadyList+0xc4>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3301      	adds	r3, #1
 8004e56:	4a2c      	ldr	r2, [pc, #176]	@ (8004f08 <prvAddNewTaskToReadyList+0xc4>)
 8004e58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8004f0c <prvAddNewTaskToReadyList+0xc8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d109      	bne.n	8004e76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e62:	4a2a      	ldr	r2, [pc, #168]	@ (8004f0c <prvAddNewTaskToReadyList+0xc8>)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e68:	4b27      	ldr	r3, [pc, #156]	@ (8004f08 <prvAddNewTaskToReadyList+0xc4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d110      	bne.n	8004e92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e70:	f000 fc2e 	bl	80056d0 <prvInitialiseTaskLists>
 8004e74:	e00d      	b.n	8004e92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e76:	4b26      	ldr	r3, [pc, #152]	@ (8004f10 <prvAddNewTaskToReadyList+0xcc>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d109      	bne.n	8004e92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e7e:	4b23      	ldr	r3, [pc, #140]	@ (8004f0c <prvAddNewTaskToReadyList+0xc8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d802      	bhi.n	8004e92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8004f0c <prvAddNewTaskToReadyList+0xc8>)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e92:	4b20      	ldr	r3, [pc, #128]	@ (8004f14 <prvAddNewTaskToReadyList+0xd0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3301      	adds	r3, #1
 8004e98:	4a1e      	ldr	r2, [pc, #120]	@ (8004f14 <prvAddNewTaskToReadyList+0xd0>)
 8004e9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004f14 <prvAddNewTaskToReadyList+0xd0>)
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f18 <prvAddNewTaskToReadyList+0xd4>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d903      	bls.n	8004eb8 <prvAddNewTaskToReadyList+0x74>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb4:	4a18      	ldr	r2, [pc, #96]	@ (8004f18 <prvAddNewTaskToReadyList+0xd4>)
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4a15      	ldr	r2, [pc, #84]	@ (8004f1c <prvAddNewTaskToReadyList+0xd8>)
 8004ec6:	441a      	add	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	f7fe ff53 	bl	8003d7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ed4:	f001 fb62 	bl	800659c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8004f10 <prvAddNewTaskToReadyList+0xcc>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00e      	beq.n	8004efe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8004f0c <prvAddNewTaskToReadyList+0xc8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d207      	bcs.n	8004efe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004eee:	4b0c      	ldr	r3, [pc, #48]	@ (8004f20 <prvAddNewTaskToReadyList+0xdc>)
 8004ef0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004efe:	bf00      	nop
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	200011d8 	.word	0x200011d8
 8004f0c:	20000d04 	.word	0x20000d04
 8004f10:	200011e4 	.word	0x200011e4
 8004f14:	200011f4 	.word	0x200011f4
 8004f18:	200011e0 	.word	0x200011e0
 8004f1c:	20000d08 	.word	0x20000d08
 8004f20:	e000ed04 	.word	0xe000ed04

08004f24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d018      	beq.n	8004f68 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f36:	4b14      	ldr	r3, [pc, #80]	@ (8004f88 <vTaskDelay+0x64>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00b      	beq.n	8004f56 <vTaskDelay+0x32>
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	60bb      	str	r3, [r7, #8]
}
 8004f50:	bf00      	nop
 8004f52:	bf00      	nop
 8004f54:	e7fd      	b.n	8004f52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f56:	f000 f88b 	bl	8005070 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fe09 	bl	8005b74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f62:	f000 f893 	bl	800508c <xTaskResumeAll>
 8004f66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d107      	bne.n	8004f7e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004f6e:	4b07      	ldr	r3, [pc, #28]	@ (8004f8c <vTaskDelay+0x68>)
 8004f70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f7e:	bf00      	nop
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20001200 	.word	0x20001200
 8004f8c:	e000ed04 	.word	0xe000ed04

08004f90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08a      	sub	sp, #40	@ 0x28
 8004f94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f9e:	463a      	mov	r2, r7
 8004fa0:	1d39      	adds	r1, r7, #4
 8004fa2:	f107 0308 	add.w	r3, r7, #8
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fe fe86 	bl	8003cb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004fac:	6839      	ldr	r1, [r7, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	9202      	str	r2, [sp, #8]
 8004fb4:	9301      	str	r3, [sp, #4]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	460a      	mov	r2, r1
 8004fbe:	4924      	ldr	r1, [pc, #144]	@ (8005050 <vTaskStartScheduler+0xc0>)
 8004fc0:	4824      	ldr	r0, [pc, #144]	@ (8005054 <vTaskStartScheduler+0xc4>)
 8004fc2:	f7ff fdf1 	bl	8004ba8 <xTaskCreateStatic>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	4a23      	ldr	r2, [pc, #140]	@ (8005058 <vTaskStartScheduler+0xc8>)
 8004fca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fcc:	4b22      	ldr	r3, [pc, #136]	@ (8005058 <vTaskStartScheduler+0xc8>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	e001      	b.n	8004fde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d102      	bne.n	8004fea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004fe4:	f000 fe1a 	bl	8005c1c <xTimerCreateTimerTask>
 8004fe8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d11b      	bne.n	8005028 <vTaskStartScheduler+0x98>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	613b      	str	r3, [r7, #16]
}
 8005002:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005004:	4b15      	ldr	r3, [pc, #84]	@ (800505c <vTaskStartScheduler+0xcc>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3354      	adds	r3, #84	@ 0x54
 800500a:	4a15      	ldr	r2, [pc, #84]	@ (8005060 <vTaskStartScheduler+0xd0>)
 800500c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800500e:	4b15      	ldr	r3, [pc, #84]	@ (8005064 <vTaskStartScheduler+0xd4>)
 8005010:	f04f 32ff 	mov.w	r2, #4294967295
 8005014:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005016:	4b14      	ldr	r3, [pc, #80]	@ (8005068 <vTaskStartScheduler+0xd8>)
 8005018:	2201      	movs	r2, #1
 800501a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800501c:	4b13      	ldr	r3, [pc, #76]	@ (800506c <vTaskStartScheduler+0xdc>)
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005022:	f001 f9e5 	bl	80063f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005026:	e00f      	b.n	8005048 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502e:	d10b      	bne.n	8005048 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	60fb      	str	r3, [r7, #12]
}
 8005042:	bf00      	nop
 8005044:	bf00      	nop
 8005046:	e7fd      	b.n	8005044 <vTaskStartScheduler+0xb4>
}
 8005048:	bf00      	nop
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	08006d98 	.word	0x08006d98
 8005054:	080056a1 	.word	0x080056a1
 8005058:	200011fc 	.word	0x200011fc
 800505c:	20000d04 	.word	0x20000d04
 8005060:	2000002c 	.word	0x2000002c
 8005064:	200011f8 	.word	0x200011f8
 8005068:	200011e4 	.word	0x200011e4
 800506c:	200011dc 	.word	0x200011dc

08005070 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005074:	4b04      	ldr	r3, [pc, #16]	@ (8005088 <vTaskSuspendAll+0x18>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3301      	adds	r3, #1
 800507a:	4a03      	ldr	r2, [pc, #12]	@ (8005088 <vTaskSuspendAll+0x18>)
 800507c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800507e:	bf00      	nop
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	20001200 	.word	0x20001200

0800508c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005096:	2300      	movs	r3, #0
 8005098:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800509a:	4b42      	ldr	r3, [pc, #264]	@ (80051a4 <xTaskResumeAll+0x118>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <xTaskResumeAll+0x2e>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	603b      	str	r3, [r7, #0]
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop
 80050b8:	e7fd      	b.n	80050b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050ba:	f001 fa3d 	bl	8006538 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80050be:	4b39      	ldr	r3, [pc, #228]	@ (80051a4 <xTaskResumeAll+0x118>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	4a37      	ldr	r2, [pc, #220]	@ (80051a4 <xTaskResumeAll+0x118>)
 80050c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050c8:	4b36      	ldr	r3, [pc, #216]	@ (80051a4 <xTaskResumeAll+0x118>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d162      	bne.n	8005196 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050d0:	4b35      	ldr	r3, [pc, #212]	@ (80051a8 <xTaskResumeAll+0x11c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d05e      	beq.n	8005196 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050d8:	e02f      	b.n	800513a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050da:	4b34      	ldr	r3, [pc, #208]	@ (80051ac <xTaskResumeAll+0x120>)
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	3318      	adds	r3, #24
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fe fea4 	bl	8003e34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3304      	adds	r3, #4
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fe fe9f 	bl	8003e34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050fa:	4b2d      	ldr	r3, [pc, #180]	@ (80051b0 <xTaskResumeAll+0x124>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d903      	bls.n	800510a <xTaskResumeAll+0x7e>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005106:	4a2a      	ldr	r2, [pc, #168]	@ (80051b0 <xTaskResumeAll+0x124>)
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4a27      	ldr	r2, [pc, #156]	@ (80051b4 <xTaskResumeAll+0x128>)
 8005118:	441a      	add	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3304      	adds	r3, #4
 800511e:	4619      	mov	r1, r3
 8005120:	4610      	mov	r0, r2
 8005122:	f7fe fe2a 	bl	8003d7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800512a:	4b23      	ldr	r3, [pc, #140]	@ (80051b8 <xTaskResumeAll+0x12c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005130:	429a      	cmp	r2, r3
 8005132:	d302      	bcc.n	800513a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005134:	4b21      	ldr	r3, [pc, #132]	@ (80051bc <xTaskResumeAll+0x130>)
 8005136:	2201      	movs	r2, #1
 8005138:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800513a:	4b1c      	ldr	r3, [pc, #112]	@ (80051ac <xTaskResumeAll+0x120>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1cb      	bne.n	80050da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005148:	f000 fb66 	bl	8005818 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800514c:	4b1c      	ldr	r3, [pc, #112]	@ (80051c0 <xTaskResumeAll+0x134>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d010      	beq.n	800517a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005158:	f000 f846 	bl	80051e8 <xTaskIncrementTick>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005162:	4b16      	ldr	r3, [pc, #88]	@ (80051bc <xTaskResumeAll+0x130>)
 8005164:	2201      	movs	r2, #1
 8005166:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3b01      	subs	r3, #1
 800516c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f1      	bne.n	8005158 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005174:	4b12      	ldr	r3, [pc, #72]	@ (80051c0 <xTaskResumeAll+0x134>)
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800517a:	4b10      	ldr	r3, [pc, #64]	@ (80051bc <xTaskResumeAll+0x130>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d009      	beq.n	8005196 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005182:	2301      	movs	r3, #1
 8005184:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005186:	4b0f      	ldr	r3, [pc, #60]	@ (80051c4 <xTaskResumeAll+0x138>)
 8005188:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005196:	f001 fa01 	bl	800659c <vPortExitCritical>

	return xAlreadyYielded;
 800519a:	68bb      	ldr	r3, [r7, #8]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	20001200 	.word	0x20001200
 80051a8:	200011d8 	.word	0x200011d8
 80051ac:	20001198 	.word	0x20001198
 80051b0:	200011e0 	.word	0x200011e0
 80051b4:	20000d08 	.word	0x20000d08
 80051b8:	20000d04 	.word	0x20000d04
 80051bc:	200011ec 	.word	0x200011ec
 80051c0:	200011e8 	.word	0x200011e8
 80051c4:	e000ed04 	.word	0xe000ed04

080051c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80051ce:	4b05      	ldr	r3, [pc, #20]	@ (80051e4 <xTaskGetTickCount+0x1c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80051d4:	687b      	ldr	r3, [r7, #4]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	200011dc 	.word	0x200011dc

080051e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051f2:	4b4f      	ldr	r3, [pc, #316]	@ (8005330 <xTaskIncrementTick+0x148>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f040 8090 	bne.w	800531c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051fc:	4b4d      	ldr	r3, [pc, #308]	@ (8005334 <xTaskIncrementTick+0x14c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3301      	adds	r3, #1
 8005202:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005204:	4a4b      	ldr	r2, [pc, #300]	@ (8005334 <xTaskIncrementTick+0x14c>)
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d121      	bne.n	8005254 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005210:	4b49      	ldr	r3, [pc, #292]	@ (8005338 <xTaskIncrementTick+0x150>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00b      	beq.n	8005232 <xTaskIncrementTick+0x4a>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	603b      	str	r3, [r7, #0]
}
 800522c:	bf00      	nop
 800522e:	bf00      	nop
 8005230:	e7fd      	b.n	800522e <xTaskIncrementTick+0x46>
 8005232:	4b41      	ldr	r3, [pc, #260]	@ (8005338 <xTaskIncrementTick+0x150>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	4b40      	ldr	r3, [pc, #256]	@ (800533c <xTaskIncrementTick+0x154>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a3e      	ldr	r2, [pc, #248]	@ (8005338 <xTaskIncrementTick+0x150>)
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	4a3e      	ldr	r2, [pc, #248]	@ (800533c <xTaskIncrementTick+0x154>)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	4b3e      	ldr	r3, [pc, #248]	@ (8005340 <xTaskIncrementTick+0x158>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3301      	adds	r3, #1
 800524c:	4a3c      	ldr	r2, [pc, #240]	@ (8005340 <xTaskIncrementTick+0x158>)
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	f000 fae2 	bl	8005818 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005254:	4b3b      	ldr	r3, [pc, #236]	@ (8005344 <xTaskIncrementTick+0x15c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	429a      	cmp	r2, r3
 800525c:	d349      	bcc.n	80052f2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800525e:	4b36      	ldr	r3, [pc, #216]	@ (8005338 <xTaskIncrementTick+0x150>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d104      	bne.n	8005272 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005268:	4b36      	ldr	r3, [pc, #216]	@ (8005344 <xTaskIncrementTick+0x15c>)
 800526a:	f04f 32ff 	mov.w	r2, #4294967295
 800526e:	601a      	str	r2, [r3, #0]
					break;
 8005270:	e03f      	b.n	80052f2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005272:	4b31      	ldr	r3, [pc, #196]	@ (8005338 <xTaskIncrementTick+0x150>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	429a      	cmp	r2, r3
 8005288:	d203      	bcs.n	8005292 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800528a:	4a2e      	ldr	r2, [pc, #184]	@ (8005344 <xTaskIncrementTick+0x15c>)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005290:	e02f      	b.n	80052f2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	3304      	adds	r3, #4
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe fdcc 	bl	8003e34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d004      	beq.n	80052ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	3318      	adds	r3, #24
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fe fdc3 	bl	8003e34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052b2:	4b25      	ldr	r3, [pc, #148]	@ (8005348 <xTaskIncrementTick+0x160>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d903      	bls.n	80052c2 <xTaskIncrementTick+0xda>
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052be:	4a22      	ldr	r2, [pc, #136]	@ (8005348 <xTaskIncrementTick+0x160>)
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c6:	4613      	mov	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4a1f      	ldr	r2, [pc, #124]	@ (800534c <xTaskIncrementTick+0x164>)
 80052d0:	441a      	add	r2, r3
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	3304      	adds	r3, #4
 80052d6:	4619      	mov	r1, r3
 80052d8:	4610      	mov	r0, r2
 80052da:	f7fe fd4e 	bl	8003d7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005350 <xTaskIncrementTick+0x168>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d3b8      	bcc.n	800525e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80052ec:	2301      	movs	r3, #1
 80052ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052f0:	e7b5      	b.n	800525e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052f2:	4b17      	ldr	r3, [pc, #92]	@ (8005350 <xTaskIncrementTick+0x168>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f8:	4914      	ldr	r1, [pc, #80]	@ (800534c <xTaskIncrementTick+0x164>)
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d901      	bls.n	800530e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800530a:	2301      	movs	r3, #1
 800530c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800530e:	4b11      	ldr	r3, [pc, #68]	@ (8005354 <xTaskIncrementTick+0x16c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d007      	beq.n	8005326 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005316:	2301      	movs	r3, #1
 8005318:	617b      	str	r3, [r7, #20]
 800531a:	e004      	b.n	8005326 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800531c:	4b0e      	ldr	r3, [pc, #56]	@ (8005358 <xTaskIncrementTick+0x170>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3301      	adds	r3, #1
 8005322:	4a0d      	ldr	r2, [pc, #52]	@ (8005358 <xTaskIncrementTick+0x170>)
 8005324:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005326:	697b      	ldr	r3, [r7, #20]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	20001200 	.word	0x20001200
 8005334:	200011dc 	.word	0x200011dc
 8005338:	20001190 	.word	0x20001190
 800533c:	20001194 	.word	0x20001194
 8005340:	200011f0 	.word	0x200011f0
 8005344:	200011f8 	.word	0x200011f8
 8005348:	200011e0 	.word	0x200011e0
 800534c:	20000d08 	.word	0x20000d08
 8005350:	20000d04 	.word	0x20000d04
 8005354:	200011ec 	.word	0x200011ec
 8005358:	200011e8 	.word	0x200011e8

0800535c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005362:	4b2b      	ldr	r3, [pc, #172]	@ (8005410 <vTaskSwitchContext+0xb4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800536a:	4b2a      	ldr	r3, [pc, #168]	@ (8005414 <vTaskSwitchContext+0xb8>)
 800536c:	2201      	movs	r2, #1
 800536e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005370:	e047      	b.n	8005402 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005372:	4b28      	ldr	r3, [pc, #160]	@ (8005414 <vTaskSwitchContext+0xb8>)
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005378:	4b27      	ldr	r3, [pc, #156]	@ (8005418 <vTaskSwitchContext+0xbc>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	e011      	b.n	80053a4 <vTaskSwitchContext+0x48>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10b      	bne.n	800539e <vTaskSwitchContext+0x42>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	607b      	str	r3, [r7, #4]
}
 8005398:	bf00      	nop
 800539a:	bf00      	nop
 800539c:	e7fd      	b.n	800539a <vTaskSwitchContext+0x3e>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	491d      	ldr	r1, [pc, #116]	@ (800541c <vTaskSwitchContext+0xc0>)
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	440b      	add	r3, r1
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0e3      	beq.n	8005380 <vTaskSwitchContext+0x24>
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4a16      	ldr	r2, [pc, #88]	@ (800541c <vTaskSwitchContext+0xc0>)
 80053c4:	4413      	add	r3, r2
 80053c6:	60bb      	str	r3, [r7, #8]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	605a      	str	r2, [r3, #4]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	3308      	adds	r3, #8
 80053da:	429a      	cmp	r2, r3
 80053dc:	d104      	bne.n	80053e8 <vTaskSwitchContext+0x8c>
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	605a      	str	r2, [r3, #4]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	4a0c      	ldr	r2, [pc, #48]	@ (8005420 <vTaskSwitchContext+0xc4>)
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	4a09      	ldr	r2, [pc, #36]	@ (8005418 <vTaskSwitchContext+0xbc>)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053f8:	4b09      	ldr	r3, [pc, #36]	@ (8005420 <vTaskSwitchContext+0xc4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3354      	adds	r3, #84	@ 0x54
 80053fe:	4a09      	ldr	r2, [pc, #36]	@ (8005424 <vTaskSwitchContext+0xc8>)
 8005400:	6013      	str	r3, [r2, #0]
}
 8005402:	bf00      	nop
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	20001200 	.word	0x20001200
 8005414:	200011ec 	.word	0x200011ec
 8005418:	200011e0 	.word	0x200011e0
 800541c:	20000d08 	.word	0x20000d08
 8005420:	20000d04 	.word	0x20000d04
 8005424:	2000002c 	.word	0x2000002c

08005428 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10b      	bne.n	8005450 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	60fb      	str	r3, [r7, #12]
}
 800544a:	bf00      	nop
 800544c:	bf00      	nop
 800544e:	e7fd      	b.n	800544c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005450:	4b07      	ldr	r3, [pc, #28]	@ (8005470 <vTaskPlaceOnEventList+0x48>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3318      	adds	r3, #24
 8005456:	4619      	mov	r1, r3
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7fe fcb2 	bl	8003dc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800545e:	2101      	movs	r1, #1
 8005460:	6838      	ldr	r0, [r7, #0]
 8005462:	f000 fb87 	bl	8005b74 <prvAddCurrentTaskToDelayedList>
}
 8005466:	bf00      	nop
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20000d04 	.word	0x20000d04

08005474 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10b      	bne.n	800549e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	617b      	str	r3, [r7, #20]
}
 8005498:	bf00      	nop
 800549a:	bf00      	nop
 800549c:	e7fd      	b.n	800549a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800549e:	4b0a      	ldr	r3, [pc, #40]	@ (80054c8 <vTaskPlaceOnEventListRestricted+0x54>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3318      	adds	r3, #24
 80054a4:	4619      	mov	r1, r3
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f7fe fc67 	bl	8003d7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80054b2:	f04f 33ff 	mov.w	r3, #4294967295
 80054b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	68b8      	ldr	r0, [r7, #8]
 80054bc:	f000 fb5a 	bl	8005b74 <prvAddCurrentTaskToDelayedList>
	}
 80054c0:	bf00      	nop
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	20000d04 	.word	0x20000d04

080054cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10b      	bne.n	80054fa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	60fb      	str	r3, [r7, #12]
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop
 80054f8:	e7fd      	b.n	80054f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	3318      	adds	r3, #24
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fe fc98 	bl	8003e34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005504:	4b1d      	ldr	r3, [pc, #116]	@ (800557c <xTaskRemoveFromEventList+0xb0>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d11d      	bne.n	8005548 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	3304      	adds	r3, #4
 8005510:	4618      	mov	r0, r3
 8005512:	f7fe fc8f 	bl	8003e34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800551a:	4b19      	ldr	r3, [pc, #100]	@ (8005580 <xTaskRemoveFromEventList+0xb4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d903      	bls.n	800552a <xTaskRemoveFromEventList+0x5e>
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005526:	4a16      	ldr	r2, [pc, #88]	@ (8005580 <xTaskRemoveFromEventList+0xb4>)
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800552e:	4613      	mov	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4a13      	ldr	r2, [pc, #76]	@ (8005584 <xTaskRemoveFromEventList+0xb8>)
 8005538:	441a      	add	r2, r3
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	3304      	adds	r3, #4
 800553e:	4619      	mov	r1, r3
 8005540:	4610      	mov	r0, r2
 8005542:	f7fe fc1a 	bl	8003d7a <vListInsertEnd>
 8005546:	e005      	b.n	8005554 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	3318      	adds	r3, #24
 800554c:	4619      	mov	r1, r3
 800554e:	480e      	ldr	r0, [pc, #56]	@ (8005588 <xTaskRemoveFromEventList+0xbc>)
 8005550:	f7fe fc13 	bl	8003d7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005558:	4b0c      	ldr	r3, [pc, #48]	@ (800558c <xTaskRemoveFromEventList+0xc0>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555e:	429a      	cmp	r2, r3
 8005560:	d905      	bls.n	800556e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005562:	2301      	movs	r3, #1
 8005564:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005566:	4b0a      	ldr	r3, [pc, #40]	@ (8005590 <xTaskRemoveFromEventList+0xc4>)
 8005568:	2201      	movs	r2, #1
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	e001      	b.n	8005572 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005572:	697b      	ldr	r3, [r7, #20]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	20001200 	.word	0x20001200
 8005580:	200011e0 	.word	0x200011e0
 8005584:	20000d08 	.word	0x20000d08
 8005588:	20001198 	.word	0x20001198
 800558c:	20000d04 	.word	0x20000d04
 8005590:	200011ec 	.word	0x200011ec

08005594 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800559c:	4b06      	ldr	r3, [pc, #24]	@ (80055b8 <vTaskInternalSetTimeOutState+0x24>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055a4:	4b05      	ldr	r3, [pc, #20]	@ (80055bc <vTaskInternalSetTimeOutState+0x28>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	605a      	str	r2, [r3, #4]
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	200011f0 	.word	0x200011f0
 80055bc:	200011dc 	.word	0x200011dc

080055c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b088      	sub	sp, #32
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10b      	bne.n	80055e8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	613b      	str	r3, [r7, #16]
}
 80055e2:	bf00      	nop
 80055e4:	bf00      	nop
 80055e6:	e7fd      	b.n	80055e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10b      	bne.n	8005606 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	60fb      	str	r3, [r7, #12]
}
 8005600:	bf00      	nop
 8005602:	bf00      	nop
 8005604:	e7fd      	b.n	8005602 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005606:	f000 ff97 	bl	8006538 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800560a:	4b1d      	ldr	r3, [pc, #116]	@ (8005680 <xTaskCheckForTimeOut+0xc0>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005622:	d102      	bne.n	800562a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005624:	2300      	movs	r3, #0
 8005626:	61fb      	str	r3, [r7, #28]
 8005628:	e023      	b.n	8005672 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	4b15      	ldr	r3, [pc, #84]	@ (8005684 <xTaskCheckForTimeOut+0xc4>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d007      	beq.n	8005646 <xTaskCheckForTimeOut+0x86>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	429a      	cmp	r2, r3
 800563e:	d302      	bcc.n	8005646 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005640:	2301      	movs	r3, #1
 8005642:	61fb      	str	r3, [r7, #28]
 8005644:	e015      	b.n	8005672 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	429a      	cmp	r2, r3
 800564e:	d20b      	bcs.n	8005668 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	1ad2      	subs	r2, r2, r3
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff ff99 	bl	8005594 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005662:	2300      	movs	r3, #0
 8005664:	61fb      	str	r3, [r7, #28]
 8005666:	e004      	b.n	8005672 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800566e:	2301      	movs	r3, #1
 8005670:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005672:	f000 ff93 	bl	800659c <vPortExitCritical>

	return xReturn;
 8005676:	69fb      	ldr	r3, [r7, #28]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3720      	adds	r7, #32
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	200011dc 	.word	0x200011dc
 8005684:	200011f0 	.word	0x200011f0

08005688 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800568c:	4b03      	ldr	r3, [pc, #12]	@ (800569c <vTaskMissedYield+0x14>)
 800568e:	2201      	movs	r2, #1
 8005690:	601a      	str	r2, [r3, #0]
}
 8005692:	bf00      	nop
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	200011ec 	.word	0x200011ec

080056a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056a8:	f000 f852 	bl	8005750 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056ac:	4b06      	ldr	r3, [pc, #24]	@ (80056c8 <prvIdleTask+0x28>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d9f9      	bls.n	80056a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80056b4:	4b05      	ldr	r3, [pc, #20]	@ (80056cc <prvIdleTask+0x2c>)
 80056b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056c4:	e7f0      	b.n	80056a8 <prvIdleTask+0x8>
 80056c6:	bf00      	nop
 80056c8:	20000d08 	.word	0x20000d08
 80056cc:	e000ed04 	.word	0xe000ed04

080056d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056d6:	2300      	movs	r3, #0
 80056d8:	607b      	str	r3, [r7, #4]
 80056da:	e00c      	b.n	80056f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	4613      	mov	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4a12      	ldr	r2, [pc, #72]	@ (8005730 <prvInitialiseTaskLists+0x60>)
 80056e8:	4413      	add	r3, r2
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fe fb18 	bl	8003d20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3301      	adds	r3, #1
 80056f4:	607b      	str	r3, [r7, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b37      	cmp	r3, #55	@ 0x37
 80056fa:	d9ef      	bls.n	80056dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056fc:	480d      	ldr	r0, [pc, #52]	@ (8005734 <prvInitialiseTaskLists+0x64>)
 80056fe:	f7fe fb0f 	bl	8003d20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005702:	480d      	ldr	r0, [pc, #52]	@ (8005738 <prvInitialiseTaskLists+0x68>)
 8005704:	f7fe fb0c 	bl	8003d20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005708:	480c      	ldr	r0, [pc, #48]	@ (800573c <prvInitialiseTaskLists+0x6c>)
 800570a:	f7fe fb09 	bl	8003d20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800570e:	480c      	ldr	r0, [pc, #48]	@ (8005740 <prvInitialiseTaskLists+0x70>)
 8005710:	f7fe fb06 	bl	8003d20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005714:	480b      	ldr	r0, [pc, #44]	@ (8005744 <prvInitialiseTaskLists+0x74>)
 8005716:	f7fe fb03 	bl	8003d20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800571a:	4b0b      	ldr	r3, [pc, #44]	@ (8005748 <prvInitialiseTaskLists+0x78>)
 800571c:	4a05      	ldr	r2, [pc, #20]	@ (8005734 <prvInitialiseTaskLists+0x64>)
 800571e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005720:	4b0a      	ldr	r3, [pc, #40]	@ (800574c <prvInitialiseTaskLists+0x7c>)
 8005722:	4a05      	ldr	r2, [pc, #20]	@ (8005738 <prvInitialiseTaskLists+0x68>)
 8005724:	601a      	str	r2, [r3, #0]
}
 8005726:	bf00      	nop
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	20000d08 	.word	0x20000d08
 8005734:	20001168 	.word	0x20001168
 8005738:	2000117c 	.word	0x2000117c
 800573c:	20001198 	.word	0x20001198
 8005740:	200011ac 	.word	0x200011ac
 8005744:	200011c4 	.word	0x200011c4
 8005748:	20001190 	.word	0x20001190
 800574c:	20001194 	.word	0x20001194

08005750 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005756:	e019      	b.n	800578c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005758:	f000 feee 	bl	8006538 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800575c:	4b10      	ldr	r3, [pc, #64]	@ (80057a0 <prvCheckTasksWaitingTermination+0x50>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3304      	adds	r3, #4
 8005768:	4618      	mov	r0, r3
 800576a:	f7fe fb63 	bl	8003e34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800576e:	4b0d      	ldr	r3, [pc, #52]	@ (80057a4 <prvCheckTasksWaitingTermination+0x54>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3b01      	subs	r3, #1
 8005774:	4a0b      	ldr	r2, [pc, #44]	@ (80057a4 <prvCheckTasksWaitingTermination+0x54>)
 8005776:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005778:	4b0b      	ldr	r3, [pc, #44]	@ (80057a8 <prvCheckTasksWaitingTermination+0x58>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3b01      	subs	r3, #1
 800577e:	4a0a      	ldr	r2, [pc, #40]	@ (80057a8 <prvCheckTasksWaitingTermination+0x58>)
 8005780:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005782:	f000 ff0b 	bl	800659c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f810 	bl	80057ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800578c:	4b06      	ldr	r3, [pc, #24]	@ (80057a8 <prvCheckTasksWaitingTermination+0x58>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1e1      	bne.n	8005758 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005794:	bf00      	nop
 8005796:	bf00      	nop
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	200011ac 	.word	0x200011ac
 80057a4:	200011d8 	.word	0x200011d8
 80057a8:	200011c0 	.word	0x200011c0

080057ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3354      	adds	r3, #84	@ 0x54
 80057b8:	4618      	mov	r0, r3
 80057ba:	f001 f9d5 	bl	8006b68 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d108      	bne.n	80057da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057cc:	4618      	mov	r0, r3
 80057ce:	f001 f8a3 	bl	8006918 <vPortFree>
				vPortFree( pxTCB );
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f001 f8a0 	bl	8006918 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057d8:	e019      	b.n	800580e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d103      	bne.n	80057ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f001 f897 	bl	8006918 <vPortFree>
	}
 80057ea:	e010      	b.n	800580e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d00b      	beq.n	800580e <prvDeleteTCB+0x62>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	60fb      	str	r3, [r7, #12]
}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	e7fd      	b.n	800580a <prvDeleteTCB+0x5e>
	}
 800580e:	bf00      	nop
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800581e:	4b0c      	ldr	r3, [pc, #48]	@ (8005850 <prvResetNextTaskUnblockTime+0x38>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d104      	bne.n	8005832 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005828:	4b0a      	ldr	r3, [pc, #40]	@ (8005854 <prvResetNextTaskUnblockTime+0x3c>)
 800582a:	f04f 32ff 	mov.w	r2, #4294967295
 800582e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005830:	e008      	b.n	8005844 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005832:	4b07      	ldr	r3, [pc, #28]	@ (8005850 <prvResetNextTaskUnblockTime+0x38>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	4a04      	ldr	r2, [pc, #16]	@ (8005854 <prvResetNextTaskUnblockTime+0x3c>)
 8005842:	6013      	str	r3, [r2, #0]
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	20001190 	.word	0x20001190
 8005854:	200011f8 	.word	0x200011f8

08005858 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800585e:	4b0b      	ldr	r3, [pc, #44]	@ (800588c <xTaskGetSchedulerState+0x34>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d102      	bne.n	800586c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005866:	2301      	movs	r3, #1
 8005868:	607b      	str	r3, [r7, #4]
 800586a:	e008      	b.n	800587e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800586c:	4b08      	ldr	r3, [pc, #32]	@ (8005890 <xTaskGetSchedulerState+0x38>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d102      	bne.n	800587a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005874:	2302      	movs	r3, #2
 8005876:	607b      	str	r3, [r7, #4]
 8005878:	e001      	b.n	800587e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800587a:	2300      	movs	r3, #0
 800587c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800587e:	687b      	ldr	r3, [r7, #4]
	}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	200011e4 	.word	0x200011e4
 8005890:	20001200 	.word	0x20001200

08005894 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d051      	beq.n	800594e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ae:	4b2a      	ldr	r3, [pc, #168]	@ (8005958 <xTaskPriorityInherit+0xc4>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d241      	bcs.n	800593c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	db06      	blt.n	80058ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058c0:	4b25      	ldr	r3, [pc, #148]	@ (8005958 <xTaskPriorityInherit+0xc4>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6959      	ldr	r1, [r3, #20]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d6:	4613      	mov	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4a1f      	ldr	r2, [pc, #124]	@ (800595c <xTaskPriorityInherit+0xc8>)
 80058e0:	4413      	add	r3, r2
 80058e2:	4299      	cmp	r1, r3
 80058e4:	d122      	bne.n	800592c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	3304      	adds	r3, #4
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe faa2 	bl	8003e34 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80058f0:	4b19      	ldr	r3, [pc, #100]	@ (8005958 <xTaskPriorityInherit+0xc4>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058fe:	4b18      	ldr	r3, [pc, #96]	@ (8005960 <xTaskPriorityInherit+0xcc>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d903      	bls.n	800590e <xTaskPriorityInherit+0x7a>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590a:	4a15      	ldr	r2, [pc, #84]	@ (8005960 <xTaskPriorityInherit+0xcc>)
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005912:	4613      	mov	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4a10      	ldr	r2, [pc, #64]	@ (800595c <xTaskPriorityInherit+0xc8>)
 800591c:	441a      	add	r2, r3
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	3304      	adds	r3, #4
 8005922:	4619      	mov	r1, r3
 8005924:	4610      	mov	r0, r2
 8005926:	f7fe fa28 	bl	8003d7a <vListInsertEnd>
 800592a:	e004      	b.n	8005936 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800592c:	4b0a      	ldr	r3, [pc, #40]	@ (8005958 <xTaskPriorityInherit+0xc4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005936:	2301      	movs	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	e008      	b.n	800594e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005940:	4b05      	ldr	r3, [pc, #20]	@ (8005958 <xTaskPriorityInherit+0xc4>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005946:	429a      	cmp	r2, r3
 8005948:	d201      	bcs.n	800594e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800594a:	2301      	movs	r3, #1
 800594c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800594e:	68fb      	ldr	r3, [r7, #12]
	}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	20000d04 	.word	0x20000d04
 800595c:	20000d08 	.word	0x20000d08
 8005960:	200011e0 	.word	0x200011e0

08005964 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005970:	2300      	movs	r3, #0
 8005972:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d058      	beq.n	8005a2c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800597a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a38 <xTaskPriorityDisinherit+0xd4>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	429a      	cmp	r2, r3
 8005982:	d00b      	beq.n	800599c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	60fb      	str	r3, [r7, #12]
}
 8005996:	bf00      	nop
 8005998:	bf00      	nop
 800599a:	e7fd      	b.n	8005998 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10b      	bne.n	80059bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	60bb      	str	r3, [r7, #8]
}
 80059b6:	bf00      	nop
 80059b8:	bf00      	nop
 80059ba:	e7fd      	b.n	80059b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059c0:	1e5a      	subs	r2, r3, #1
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d02c      	beq.n	8005a2c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d128      	bne.n	8005a2c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	3304      	adds	r3, #4
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fe fa28 	bl	8003e34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059fc:	4b0f      	ldr	r3, [pc, #60]	@ (8005a3c <xTaskPriorityDisinherit+0xd8>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d903      	bls.n	8005a0c <xTaskPriorityDisinherit+0xa8>
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a08:	4a0c      	ldr	r2, [pc, #48]	@ (8005a3c <xTaskPriorityDisinherit+0xd8>)
 8005a0a:	6013      	str	r3, [r2, #0]
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4a09      	ldr	r2, [pc, #36]	@ (8005a40 <xTaskPriorityDisinherit+0xdc>)
 8005a1a:	441a      	add	r2, r3
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4619      	mov	r1, r3
 8005a22:	4610      	mov	r0, r2
 8005a24:	f7fe f9a9 	bl	8003d7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a2c:	697b      	ldr	r3, [r7, #20]
	}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20000d04 	.word	0x20000d04
 8005a3c:	200011e0 	.word	0x200011e0
 8005a40:	20000d08 	.word	0x20000d08

08005a44 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b088      	sub	sp, #32
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005a52:	2301      	movs	r3, #1
 8005a54:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d06c      	beq.n	8005b36 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10b      	bne.n	8005a7c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	60fb      	str	r3, [r7, #12]
}
 8005a76:	bf00      	nop
 8005a78:	bf00      	nop
 8005a7a:	e7fd      	b.n	8005a78 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d902      	bls.n	8005a8c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	61fb      	str	r3, [r7, #28]
 8005a8a:	e002      	b.n	8005a92 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a90:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a96:	69fa      	ldr	r2, [r7, #28]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d04c      	beq.n	8005b36 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d147      	bne.n	8005b36 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005aa6:	4b26      	ldr	r3, [pc, #152]	@ (8005b40 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d10b      	bne.n	8005ac8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	60bb      	str	r3, [r7, #8]
}
 8005ac2:	bf00      	nop
 8005ac4:	bf00      	nop
 8005ac6:	e7fd      	b.n	8005ac4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005acc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	db04      	blt.n	8005ae6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	6959      	ldr	r1, [r3, #20]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4a13      	ldr	r2, [pc, #76]	@ (8005b44 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005af6:	4413      	add	r3, r2
 8005af8:	4299      	cmp	r1, r3
 8005afa:	d11c      	bne.n	8005b36 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	3304      	adds	r3, #4
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fe f997 	bl	8003e34 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8005b48 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d903      	bls.n	8005b1a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b16:	4a0c      	ldr	r2, [pc, #48]	@ (8005b48 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b1e:	4613      	mov	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4a07      	ldr	r2, [pc, #28]	@ (8005b44 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005b28:	441a      	add	r2, r3
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4610      	mov	r0, r2
 8005b32:	f7fe f922 	bl	8003d7a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b36:	bf00      	nop
 8005b38:	3720      	adds	r7, #32
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000d04 	.word	0x20000d04
 8005b44:	20000d08 	.word	0x20000d08
 8005b48:	200011e0 	.word	0x200011e0

08005b4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005b50:	4b07      	ldr	r3, [pc, #28]	@ (8005b70 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d004      	beq.n	8005b62 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005b58:	4b05      	ldr	r3, [pc, #20]	@ (8005b70 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b5e:	3201      	adds	r2, #1
 8005b60:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005b62:	4b03      	ldr	r3, [pc, #12]	@ (8005b70 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b64:	681b      	ldr	r3, [r3, #0]
	}
 8005b66:	4618      	mov	r0, r3
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	20000d04 	.word	0x20000d04

08005b74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b7e:	4b21      	ldr	r3, [pc, #132]	@ (8005c04 <prvAddCurrentTaskToDelayedList+0x90>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b84:	4b20      	ldr	r3, [pc, #128]	@ (8005c08 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fe f952 	bl	8003e34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b96:	d10a      	bne.n	8005bae <prvAddCurrentTaskToDelayedList+0x3a>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d007      	beq.n	8005bae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005c08 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4819      	ldr	r0, [pc, #100]	@ (8005c0c <prvAddCurrentTaskToDelayedList+0x98>)
 8005ba8:	f7fe f8e7 	bl	8003d7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005bac:	e026      	b.n	8005bfc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005bb6:	4b14      	ldr	r3, [pc, #80]	@ (8005c08 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d209      	bcs.n	8005bda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bc6:	4b12      	ldr	r3, [pc, #72]	@ (8005c10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	4b0f      	ldr	r3, [pc, #60]	@ (8005c08 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	f7fe f8f5 	bl	8003dc2 <vListInsert>
}
 8005bd8:	e010      	b.n	8005bfc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bda:	4b0e      	ldr	r3, [pc, #56]	@ (8005c14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b0a      	ldr	r3, [pc, #40]	@ (8005c08 <prvAddCurrentTaskToDelayedList+0x94>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3304      	adds	r3, #4
 8005be4:	4619      	mov	r1, r3
 8005be6:	4610      	mov	r0, r2
 8005be8:	f7fe f8eb 	bl	8003dc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bec:	4b0a      	ldr	r3, [pc, #40]	@ (8005c18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d202      	bcs.n	8005bfc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005bf6:	4a08      	ldr	r2, [pc, #32]	@ (8005c18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	6013      	str	r3, [r2, #0]
}
 8005bfc:	bf00      	nop
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	200011dc 	.word	0x200011dc
 8005c08:	20000d04 	.word	0x20000d04
 8005c0c:	200011c4 	.word	0x200011c4
 8005c10:	20001194 	.word	0x20001194
 8005c14:	20001190 	.word	0x20001190
 8005c18:	200011f8 	.word	0x200011f8

08005c1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08a      	sub	sp, #40	@ 0x28
 8005c20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c26:	f000 fb13 	bl	8006250 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca0 <xTimerCreateTimerTask+0x84>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d021      	beq.n	8005c76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c3a:	1d3a      	adds	r2, r7, #4
 8005c3c:	f107 0108 	add.w	r1, r7, #8
 8005c40:	f107 030c 	add.w	r3, r7, #12
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fe f851 	bl	8003cec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	9202      	str	r2, [sp, #8]
 8005c52:	9301      	str	r3, [sp, #4]
 8005c54:	2302      	movs	r3, #2
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	2300      	movs	r3, #0
 8005c5a:	460a      	mov	r2, r1
 8005c5c:	4911      	ldr	r1, [pc, #68]	@ (8005ca4 <xTimerCreateTimerTask+0x88>)
 8005c5e:	4812      	ldr	r0, [pc, #72]	@ (8005ca8 <xTimerCreateTimerTask+0x8c>)
 8005c60:	f7fe ffa2 	bl	8004ba8 <xTaskCreateStatic>
 8005c64:	4603      	mov	r3, r0
 8005c66:	4a11      	ldr	r2, [pc, #68]	@ (8005cac <xTimerCreateTimerTask+0x90>)
 8005c68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c6a:	4b10      	ldr	r3, [pc, #64]	@ (8005cac <xTimerCreateTimerTask+0x90>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c72:	2301      	movs	r3, #1
 8005c74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10b      	bne.n	8005c94 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	613b      	str	r3, [r7, #16]
}
 8005c8e:	bf00      	nop
 8005c90:	bf00      	nop
 8005c92:	e7fd      	b.n	8005c90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c94:	697b      	ldr	r3, [r7, #20]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20001234 	.word	0x20001234
 8005ca4:	08006da0 	.word	0x08006da0
 8005ca8:	08005de9 	.word	0x08005de9
 8005cac:	20001238 	.word	0x20001238

08005cb0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08a      	sub	sp, #40	@ 0x28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
 8005cbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10b      	bne.n	8005ce0 <xTimerGenericCommand+0x30>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	623b      	str	r3, [r7, #32]
}
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
 8005cde:	e7fd      	b.n	8005cdc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ce0:	4b19      	ldr	r3, [pc, #100]	@ (8005d48 <xTimerGenericCommand+0x98>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d02a      	beq.n	8005d3e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b05      	cmp	r3, #5
 8005cf8:	dc18      	bgt.n	8005d2c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005cfa:	f7ff fdad 	bl	8005858 <xTaskGetSchedulerState>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d109      	bne.n	8005d18 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d04:	4b10      	ldr	r3, [pc, #64]	@ (8005d48 <xTimerGenericCommand+0x98>)
 8005d06:	6818      	ldr	r0, [r3, #0]
 8005d08:	f107 0110 	add.w	r1, r7, #16
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d10:	f7fe fa32 	bl	8004178 <xQueueGenericSend>
 8005d14:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d16:	e012      	b.n	8005d3e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d18:	4b0b      	ldr	r3, [pc, #44]	@ (8005d48 <xTimerGenericCommand+0x98>)
 8005d1a:	6818      	ldr	r0, [r3, #0]
 8005d1c:	f107 0110 	add.w	r1, r7, #16
 8005d20:	2300      	movs	r3, #0
 8005d22:	2200      	movs	r2, #0
 8005d24:	f7fe fa28 	bl	8004178 <xQueueGenericSend>
 8005d28:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d2a:	e008      	b.n	8005d3e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d2c:	4b06      	ldr	r3, [pc, #24]	@ (8005d48 <xTimerGenericCommand+0x98>)
 8005d2e:	6818      	ldr	r0, [r3, #0]
 8005d30:	f107 0110 	add.w	r1, r7, #16
 8005d34:	2300      	movs	r3, #0
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	f7fe fb20 	bl	800437c <xQueueGenericSendFromISR>
 8005d3c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3728      	adds	r7, #40	@ 0x28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	20001234 	.word	0x20001234

08005d4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af02      	add	r7, sp, #8
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d56:	4b23      	ldr	r3, [pc, #140]	@ (8005de4 <prvProcessExpiredTimer+0x98>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	3304      	adds	r3, #4
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fe f865 	bl	8003e34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d023      	beq.n	8005dc0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	699a      	ldr	r2, [r3, #24]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	18d1      	adds	r1, r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	6978      	ldr	r0, [r7, #20]
 8005d86:	f000 f8d5 	bl	8005f34 <prvInsertTimerInActiveList>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d020      	beq.n	8005dd2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d90:	2300      	movs	r3, #0
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	2300      	movs	r3, #0
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	2100      	movs	r1, #0
 8005d9a:	6978      	ldr	r0, [r7, #20]
 8005d9c:	f7ff ff88 	bl	8005cb0 <xTimerGenericCommand>
 8005da0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d114      	bne.n	8005dd2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	60fb      	str	r3, [r7, #12]
}
 8005dba:	bf00      	nop
 8005dbc:	bf00      	nop
 8005dbe:	e7fd      	b.n	8005dbc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005dc6:	f023 0301 	bic.w	r3, r3, #1
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	6978      	ldr	r0, [r7, #20]
 8005dd8:	4798      	blx	r3
}
 8005dda:	bf00      	nop
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	2000122c 	.word	0x2000122c

08005de8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005df0:	f107 0308 	add.w	r3, r7, #8
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 f859 	bl	8005eac <prvGetNextExpireTime>
 8005dfa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	4619      	mov	r1, r3
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 f805 	bl	8005e10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e06:	f000 f8d7 	bl	8005fb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e0a:	bf00      	nop
 8005e0c:	e7f0      	b.n	8005df0 <prvTimerTask+0x8>
	...

08005e10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e1a:	f7ff f929 	bl	8005070 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e1e:	f107 0308 	add.w	r3, r7, #8
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 f866 	bl	8005ef4 <prvSampleTimeNow>
 8005e28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d130      	bne.n	8005e92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <prvProcessTimerOrBlockTask+0x3c>
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d806      	bhi.n	8005e4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e3e:	f7ff f925 	bl	800508c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e42:	68f9      	ldr	r1, [r7, #12]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7ff ff81 	bl	8005d4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e4a:	e024      	b.n	8005e96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d008      	beq.n	8005e64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e52:	4b13      	ldr	r3, [pc, #76]	@ (8005ea0 <prvProcessTimerOrBlockTask+0x90>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <prvProcessTimerOrBlockTask+0x50>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e000      	b.n	8005e62 <prvProcessTimerOrBlockTask+0x52>
 8005e60:	2300      	movs	r3, #0
 8005e62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e64:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea4 <prvProcessTimerOrBlockTask+0x94>)
 8005e66:	6818      	ldr	r0, [r3, #0]
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	4619      	mov	r1, r3
 8005e72:	f7fe fe65 	bl	8004b40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e76:	f7ff f909 	bl	800508c <xTaskResumeAll>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10a      	bne.n	8005e96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e80:	4b09      	ldr	r3, [pc, #36]	@ (8005ea8 <prvProcessTimerOrBlockTask+0x98>)
 8005e82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	f3bf 8f6f 	isb	sy
}
 8005e90:	e001      	b.n	8005e96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e92:	f7ff f8fb 	bl	800508c <xTaskResumeAll>
}
 8005e96:	bf00      	nop
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20001230 	.word	0x20001230
 8005ea4:	20001234 	.word	0x20001234
 8005ea8:	e000ed04 	.word	0xe000ed04

08005eac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef0 <prvGetNextExpireTime+0x44>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <prvGetNextExpireTime+0x16>
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	e000      	b.n	8005ec4 <prvGetNextExpireTime+0x18>
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d105      	bne.n	8005edc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ed0:	4b07      	ldr	r3, [pc, #28]	@ (8005ef0 <prvGetNextExpireTime+0x44>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	e001      	b.n	8005ee0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	2000122c 	.word	0x2000122c

08005ef4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005efc:	f7ff f964 	bl	80051c8 <xTaskGetTickCount>
 8005f00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f02:	4b0b      	ldr	r3, [pc, #44]	@ (8005f30 <prvSampleTimeNow+0x3c>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d205      	bcs.n	8005f18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f0c:	f000 f93a 	bl	8006184 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	e002      	b.n	8005f1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f1e:	4a04      	ldr	r2, [pc, #16]	@ (8005f30 <prvSampleTimeNow+0x3c>)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f24:	68fb      	ldr	r3, [r7, #12]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	2000123c 	.word	0x2000123c

08005f34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f42:	2300      	movs	r3, #0
 8005f44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d812      	bhi.n	8005f80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	1ad2      	subs	r2, r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d302      	bcc.n	8005f6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	e01b      	b.n	8005fa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f6e:	4b10      	ldr	r3, [pc, #64]	@ (8005fb0 <prvInsertTimerInActiveList+0x7c>)
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3304      	adds	r3, #4
 8005f76:	4619      	mov	r1, r3
 8005f78:	4610      	mov	r0, r2
 8005f7a:	f7fd ff22 	bl	8003dc2 <vListInsert>
 8005f7e:	e012      	b.n	8005fa6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d206      	bcs.n	8005f96 <prvInsertTimerInActiveList+0x62>
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d302      	bcc.n	8005f96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f90:	2301      	movs	r3, #1
 8005f92:	617b      	str	r3, [r7, #20]
 8005f94:	e007      	b.n	8005fa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f96:	4b07      	ldr	r3, [pc, #28]	@ (8005fb4 <prvInsertTimerInActiveList+0x80>)
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	f7fd ff0e 	bl	8003dc2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005fa6:	697b      	ldr	r3, [r7, #20]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	20001230 	.word	0x20001230
 8005fb4:	2000122c 	.word	0x2000122c

08005fb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08e      	sub	sp, #56	@ 0x38
 8005fbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fbe:	e0ce      	b.n	800615e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	da19      	bge.n	8005ffa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005fc6:	1d3b      	adds	r3, r7, #4
 8005fc8:	3304      	adds	r3, #4
 8005fca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10b      	bne.n	8005fea <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	61fb      	str	r3, [r7, #28]
}
 8005fe4:	bf00      	nop
 8005fe6:	bf00      	nop
 8005fe8:	e7fd      	b.n	8005fe6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ff0:	6850      	ldr	r0, [r2, #4]
 8005ff2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ff4:	6892      	ldr	r2, [r2, #8]
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f2c0 80ae 	blt.w	800615e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d004      	beq.n	8006018 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800600e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006010:	3304      	adds	r3, #4
 8006012:	4618      	mov	r0, r3
 8006014:	f7fd ff0e 	bl	8003e34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006018:	463b      	mov	r3, r7
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff ff6a 	bl	8005ef4 <prvSampleTimeNow>
 8006020:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b09      	cmp	r3, #9
 8006026:	f200 8097 	bhi.w	8006158 <prvProcessReceivedCommands+0x1a0>
 800602a:	a201      	add	r2, pc, #4	@ (adr r2, 8006030 <prvProcessReceivedCommands+0x78>)
 800602c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006030:	08006059 	.word	0x08006059
 8006034:	08006059 	.word	0x08006059
 8006038:	08006059 	.word	0x08006059
 800603c:	080060cf 	.word	0x080060cf
 8006040:	080060e3 	.word	0x080060e3
 8006044:	0800612f 	.word	0x0800612f
 8006048:	08006059 	.word	0x08006059
 800604c:	08006059 	.word	0x08006059
 8006050:	080060cf 	.word	0x080060cf
 8006054:	080060e3 	.word	0x080060e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800605e:	f043 0301 	orr.w	r3, r3, #1
 8006062:	b2da      	uxtb	r2, r3
 8006064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006066:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	18d1      	adds	r1, r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006078:	f7ff ff5c 	bl	8005f34 <prvInsertTimerInActiveList>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d06c      	beq.n	800615c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006088:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800608a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	d061      	beq.n	800615c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	441a      	add	r2, r3
 80060a0:	2300      	movs	r3, #0
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	2300      	movs	r3, #0
 80060a6:	2100      	movs	r1, #0
 80060a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060aa:	f7ff fe01 	bl	8005cb0 <xTimerGenericCommand>
 80060ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d152      	bne.n	800615c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	61bb      	str	r3, [r7, #24]
}
 80060c8:	bf00      	nop
 80060ca:	bf00      	nop
 80060cc:	e7fd      	b.n	80060ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060d4:	f023 0301 	bic.w	r3, r3, #1
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80060e0:	e03d      	b.n	800615e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060e8:	f043 0301 	orr.w	r3, r3, #1
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80060fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10b      	bne.n	800611a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	617b      	str	r3, [r7, #20]
}
 8006114:	bf00      	nop
 8006116:	bf00      	nop
 8006118:	e7fd      	b.n	8006116 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800611a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	18d1      	adds	r1, r2, r3
 8006122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006126:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006128:	f7ff ff04 	bl	8005f34 <prvInsertTimerInActiveList>
					break;
 800612c:	e017      	b.n	800615e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800612e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006130:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d103      	bne.n	8006144 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800613c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800613e:	f000 fbeb 	bl	8006918 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006142:	e00c      	b.n	800615e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006146:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800614a:	f023 0301 	bic.w	r3, r3, #1
 800614e:	b2da      	uxtb	r2, r3
 8006150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006152:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006156:	e002      	b.n	800615e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006158:	bf00      	nop
 800615a:	e000      	b.n	800615e <prvProcessReceivedCommands+0x1a6>
					break;
 800615c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800615e:	4b08      	ldr	r3, [pc, #32]	@ (8006180 <prvProcessReceivedCommands+0x1c8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	1d39      	adds	r1, r7, #4
 8006164:	2200      	movs	r2, #0
 8006166:	4618      	mov	r0, r3
 8006168:	f7fe f9a6 	bl	80044b8 <xQueueReceive>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	f47f af26 	bne.w	8005fc0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	3730      	adds	r7, #48	@ 0x30
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	20001234 	.word	0x20001234

08006184 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b088      	sub	sp, #32
 8006188:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800618a:	e049      	b.n	8006220 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800618c:	4b2e      	ldr	r3, [pc, #184]	@ (8006248 <prvSwitchTimerLists+0xc4>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006196:	4b2c      	ldr	r3, [pc, #176]	@ (8006248 <prvSwitchTimerLists+0xc4>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fd fe45 	bl	8003e34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d02f      	beq.n	8006220 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4413      	add	r3, r2
 80061c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d90e      	bls.n	80061f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061de:	4b1a      	ldr	r3, [pc, #104]	@ (8006248 <prvSwitchTimerLists+0xc4>)
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3304      	adds	r3, #4
 80061e6:	4619      	mov	r1, r3
 80061e8:	4610      	mov	r0, r2
 80061ea:	f7fd fdea 	bl	8003dc2 <vListInsert>
 80061ee:	e017      	b.n	8006220 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061f0:	2300      	movs	r3, #0
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	2300      	movs	r3, #0
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	2100      	movs	r1, #0
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f7ff fd58 	bl	8005cb0 <xTimerGenericCommand>
 8006200:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10b      	bne.n	8006220 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	603b      	str	r3, [r7, #0]
}
 800621a:	bf00      	nop
 800621c:	bf00      	nop
 800621e:	e7fd      	b.n	800621c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006220:	4b09      	ldr	r3, [pc, #36]	@ (8006248 <prvSwitchTimerLists+0xc4>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1b0      	bne.n	800618c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800622a:	4b07      	ldr	r3, [pc, #28]	@ (8006248 <prvSwitchTimerLists+0xc4>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006230:	4b06      	ldr	r3, [pc, #24]	@ (800624c <prvSwitchTimerLists+0xc8>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a04      	ldr	r2, [pc, #16]	@ (8006248 <prvSwitchTimerLists+0xc4>)
 8006236:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006238:	4a04      	ldr	r2, [pc, #16]	@ (800624c <prvSwitchTimerLists+0xc8>)
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	6013      	str	r3, [r2, #0]
}
 800623e:	bf00      	nop
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	2000122c 	.word	0x2000122c
 800624c:	20001230 	.word	0x20001230

08006250 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006256:	f000 f96f 	bl	8006538 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800625a:	4b15      	ldr	r3, [pc, #84]	@ (80062b0 <prvCheckForValidListAndQueue+0x60>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d120      	bne.n	80062a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006262:	4814      	ldr	r0, [pc, #80]	@ (80062b4 <prvCheckForValidListAndQueue+0x64>)
 8006264:	f7fd fd5c 	bl	8003d20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006268:	4813      	ldr	r0, [pc, #76]	@ (80062b8 <prvCheckForValidListAndQueue+0x68>)
 800626a:	f7fd fd59 	bl	8003d20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800626e:	4b13      	ldr	r3, [pc, #76]	@ (80062bc <prvCheckForValidListAndQueue+0x6c>)
 8006270:	4a10      	ldr	r2, [pc, #64]	@ (80062b4 <prvCheckForValidListAndQueue+0x64>)
 8006272:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006274:	4b12      	ldr	r3, [pc, #72]	@ (80062c0 <prvCheckForValidListAndQueue+0x70>)
 8006276:	4a10      	ldr	r2, [pc, #64]	@ (80062b8 <prvCheckForValidListAndQueue+0x68>)
 8006278:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800627a:	2300      	movs	r3, #0
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	4b11      	ldr	r3, [pc, #68]	@ (80062c4 <prvCheckForValidListAndQueue+0x74>)
 8006280:	4a11      	ldr	r2, [pc, #68]	@ (80062c8 <prvCheckForValidListAndQueue+0x78>)
 8006282:	2110      	movs	r1, #16
 8006284:	200a      	movs	r0, #10
 8006286:	f7fd fe69 	bl	8003f5c <xQueueGenericCreateStatic>
 800628a:	4603      	mov	r3, r0
 800628c:	4a08      	ldr	r2, [pc, #32]	@ (80062b0 <prvCheckForValidListAndQueue+0x60>)
 800628e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006290:	4b07      	ldr	r3, [pc, #28]	@ (80062b0 <prvCheckForValidListAndQueue+0x60>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d005      	beq.n	80062a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006298:	4b05      	ldr	r3, [pc, #20]	@ (80062b0 <prvCheckForValidListAndQueue+0x60>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	490b      	ldr	r1, [pc, #44]	@ (80062cc <prvCheckForValidListAndQueue+0x7c>)
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fe fc24 	bl	8004aec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062a4:	f000 f97a 	bl	800659c <vPortExitCritical>
}
 80062a8:	bf00      	nop
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20001234 	.word	0x20001234
 80062b4:	20001204 	.word	0x20001204
 80062b8:	20001218 	.word	0x20001218
 80062bc:	2000122c 	.word	0x2000122c
 80062c0:	20001230 	.word	0x20001230
 80062c4:	200012e0 	.word	0x200012e0
 80062c8:	20001240 	.word	0x20001240
 80062cc:	08006da8 	.word	0x08006da8

080062d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3b04      	subs	r3, #4
 80062e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80062e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3b04      	subs	r3, #4
 80062ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f023 0201 	bic.w	r2, r3, #1
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3b04      	subs	r3, #4
 80062fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006300:	4a0c      	ldr	r2, [pc, #48]	@ (8006334 <pxPortInitialiseStack+0x64>)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3b14      	subs	r3, #20
 800630a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3b04      	subs	r3, #4
 8006316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f06f 0202 	mvn.w	r2, #2
 800631e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3b20      	subs	r3, #32
 8006324:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006326:	68fb      	ldr	r3, [r7, #12]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	08006339 	.word	0x08006339

08006338 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006342:	4b13      	ldr	r3, [pc, #76]	@ (8006390 <prvTaskExitError+0x58>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634a:	d00b      	beq.n	8006364 <prvTaskExitError+0x2c>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	60fb      	str	r3, [r7, #12]
}
 800635e:	bf00      	nop
 8006360:	bf00      	nop
 8006362:	e7fd      	b.n	8006360 <prvTaskExitError+0x28>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	60bb      	str	r3, [r7, #8]
}
 8006376:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006378:	bf00      	nop
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0fc      	beq.n	800637a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	20000028 	.word	0x20000028
	...

080063a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063a0:	4b07      	ldr	r3, [pc, #28]	@ (80063c0 <pxCurrentTCBConst2>)
 80063a2:	6819      	ldr	r1, [r3, #0]
 80063a4:	6808      	ldr	r0, [r1, #0]
 80063a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063aa:	f380 8809 	msr	PSP, r0
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f04f 0000 	mov.w	r0, #0
 80063b6:	f380 8811 	msr	BASEPRI, r0
 80063ba:	4770      	bx	lr
 80063bc:	f3af 8000 	nop.w

080063c0 <pxCurrentTCBConst2>:
 80063c0:	20000d04 	.word	0x20000d04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80063c4:	bf00      	nop
 80063c6:	bf00      	nop

080063c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80063c8:	4808      	ldr	r0, [pc, #32]	@ (80063ec <prvPortStartFirstTask+0x24>)
 80063ca:	6800      	ldr	r0, [r0, #0]
 80063cc:	6800      	ldr	r0, [r0, #0]
 80063ce:	f380 8808 	msr	MSP, r0
 80063d2:	f04f 0000 	mov.w	r0, #0
 80063d6:	f380 8814 	msr	CONTROL, r0
 80063da:	b662      	cpsie	i
 80063dc:	b661      	cpsie	f
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	df00      	svc	0
 80063e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063ea:	bf00      	nop
 80063ec:	e000ed08 	.word	0xe000ed08

080063f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80063f6:	4b47      	ldr	r3, [pc, #284]	@ (8006514 <xPortStartScheduler+0x124>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a47      	ldr	r2, [pc, #284]	@ (8006518 <xPortStartScheduler+0x128>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d10b      	bne.n	8006418 <xPortStartScheduler+0x28>
	__asm volatile
 8006400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	613b      	str	r3, [r7, #16]
}
 8006412:	bf00      	nop
 8006414:	bf00      	nop
 8006416:	e7fd      	b.n	8006414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006418:	4b3e      	ldr	r3, [pc, #248]	@ (8006514 <xPortStartScheduler+0x124>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a3f      	ldr	r2, [pc, #252]	@ (800651c <xPortStartScheduler+0x12c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d10b      	bne.n	800643a <xPortStartScheduler+0x4a>
	__asm volatile
 8006422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	60fb      	str	r3, [r7, #12]
}
 8006434:	bf00      	nop
 8006436:	bf00      	nop
 8006438:	e7fd      	b.n	8006436 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800643a:	4b39      	ldr	r3, [pc, #228]	@ (8006520 <xPortStartScheduler+0x130>)
 800643c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	b2db      	uxtb	r3, r3
 8006444:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	22ff      	movs	r2, #255	@ 0xff
 800644a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006454:	78fb      	ldrb	r3, [r7, #3]
 8006456:	b2db      	uxtb	r3, r3
 8006458:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800645c:	b2da      	uxtb	r2, r3
 800645e:	4b31      	ldr	r3, [pc, #196]	@ (8006524 <xPortStartScheduler+0x134>)
 8006460:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006462:	4b31      	ldr	r3, [pc, #196]	@ (8006528 <xPortStartScheduler+0x138>)
 8006464:	2207      	movs	r2, #7
 8006466:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006468:	e009      	b.n	800647e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800646a:	4b2f      	ldr	r3, [pc, #188]	@ (8006528 <xPortStartScheduler+0x138>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3b01      	subs	r3, #1
 8006470:	4a2d      	ldr	r2, [pc, #180]	@ (8006528 <xPortStartScheduler+0x138>)
 8006472:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006474:	78fb      	ldrb	r3, [r7, #3]
 8006476:	b2db      	uxtb	r3, r3
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	b2db      	uxtb	r3, r3
 800647c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800647e:	78fb      	ldrb	r3, [r7, #3]
 8006480:	b2db      	uxtb	r3, r3
 8006482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006486:	2b80      	cmp	r3, #128	@ 0x80
 8006488:	d0ef      	beq.n	800646a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800648a:	4b27      	ldr	r3, [pc, #156]	@ (8006528 <xPortStartScheduler+0x138>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f1c3 0307 	rsb	r3, r3, #7
 8006492:	2b04      	cmp	r3, #4
 8006494:	d00b      	beq.n	80064ae <xPortStartScheduler+0xbe>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	60bb      	str	r3, [r7, #8]
}
 80064a8:	bf00      	nop
 80064aa:	bf00      	nop
 80064ac:	e7fd      	b.n	80064aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006528 <xPortStartScheduler+0x138>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	021b      	lsls	r3, r3, #8
 80064b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006528 <xPortStartScheduler+0x138>)
 80064b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006528 <xPortStartScheduler+0x138>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80064c0:	4a19      	ldr	r2, [pc, #100]	@ (8006528 <xPortStartScheduler+0x138>)
 80064c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80064cc:	4b17      	ldr	r3, [pc, #92]	@ (800652c <xPortStartScheduler+0x13c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a16      	ldr	r2, [pc, #88]	@ (800652c <xPortStartScheduler+0x13c>)
 80064d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80064d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80064d8:	4b14      	ldr	r3, [pc, #80]	@ (800652c <xPortStartScheduler+0x13c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a13      	ldr	r2, [pc, #76]	@ (800652c <xPortStartScheduler+0x13c>)
 80064de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80064e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80064e4:	f000 f8da 	bl	800669c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80064e8:	4b11      	ldr	r3, [pc, #68]	@ (8006530 <xPortStartScheduler+0x140>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80064ee:	f000 f8f9 	bl	80066e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80064f2:	4b10      	ldr	r3, [pc, #64]	@ (8006534 <xPortStartScheduler+0x144>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a0f      	ldr	r2, [pc, #60]	@ (8006534 <xPortStartScheduler+0x144>)
 80064f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80064fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80064fe:	f7ff ff63 	bl	80063c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006502:	f7fe ff2b 	bl	800535c <vTaskSwitchContext>
	prvTaskExitError();
 8006506:	f7ff ff17 	bl	8006338 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3718      	adds	r7, #24
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	e000ed00 	.word	0xe000ed00
 8006518:	410fc271 	.word	0x410fc271
 800651c:	410fc270 	.word	0x410fc270
 8006520:	e000e400 	.word	0xe000e400
 8006524:	20001330 	.word	0x20001330
 8006528:	20001334 	.word	0x20001334
 800652c:	e000ed20 	.word	0xe000ed20
 8006530:	20000028 	.word	0x20000028
 8006534:	e000ef34 	.word	0xe000ef34

08006538 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	607b      	str	r3, [r7, #4]
}
 8006550:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006552:	4b10      	ldr	r3, [pc, #64]	@ (8006594 <vPortEnterCritical+0x5c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3301      	adds	r3, #1
 8006558:	4a0e      	ldr	r2, [pc, #56]	@ (8006594 <vPortEnterCritical+0x5c>)
 800655a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800655c:	4b0d      	ldr	r3, [pc, #52]	@ (8006594 <vPortEnterCritical+0x5c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d110      	bne.n	8006586 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006564:	4b0c      	ldr	r3, [pc, #48]	@ (8006598 <vPortEnterCritical+0x60>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00b      	beq.n	8006586 <vPortEnterCritical+0x4e>
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	603b      	str	r3, [r7, #0]
}
 8006580:	bf00      	nop
 8006582:	bf00      	nop
 8006584:	e7fd      	b.n	8006582 <vPortEnterCritical+0x4a>
	}
}
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	20000028 	.word	0x20000028
 8006598:	e000ed04 	.word	0xe000ed04

0800659c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065a2:	4b12      	ldr	r3, [pc, #72]	@ (80065ec <vPortExitCritical+0x50>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10b      	bne.n	80065c2 <vPortExitCritical+0x26>
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	607b      	str	r3, [r7, #4]
}
 80065bc:	bf00      	nop
 80065be:	bf00      	nop
 80065c0:	e7fd      	b.n	80065be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80065c2:	4b0a      	ldr	r3, [pc, #40]	@ (80065ec <vPortExitCritical+0x50>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	4a08      	ldr	r2, [pc, #32]	@ (80065ec <vPortExitCritical+0x50>)
 80065ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80065cc:	4b07      	ldr	r3, [pc, #28]	@ (80065ec <vPortExitCritical+0x50>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d105      	bne.n	80065e0 <vPortExitCritical+0x44>
 80065d4:	2300      	movs	r3, #0
 80065d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	f383 8811 	msr	BASEPRI, r3
}
 80065de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	20000028 	.word	0x20000028

080065f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065f0:	f3ef 8009 	mrs	r0, PSP
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	4b15      	ldr	r3, [pc, #84]	@ (8006650 <pxCurrentTCBConst>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	f01e 0f10 	tst.w	lr, #16
 8006600:	bf08      	it	eq
 8006602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660a:	6010      	str	r0, [r2, #0]
 800660c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006610:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006614:	f380 8811 	msr	BASEPRI, r0
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f7fe fe9c 	bl	800535c <vTaskSwitchContext>
 8006624:	f04f 0000 	mov.w	r0, #0
 8006628:	f380 8811 	msr	BASEPRI, r0
 800662c:	bc09      	pop	{r0, r3}
 800662e:	6819      	ldr	r1, [r3, #0]
 8006630:	6808      	ldr	r0, [r1, #0]
 8006632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006636:	f01e 0f10 	tst.w	lr, #16
 800663a:	bf08      	it	eq
 800663c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006640:	f380 8809 	msr	PSP, r0
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	f3af 8000 	nop.w

08006650 <pxCurrentTCBConst>:
 8006650:	20000d04 	.word	0x20000d04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006654:	bf00      	nop
 8006656:	bf00      	nop

08006658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	607b      	str	r3, [r7, #4]
}
 8006670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006672:	f7fe fdb9 	bl	80051e8 <xTaskIncrementTick>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d003      	beq.n	8006684 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800667c:	4b06      	ldr	r3, [pc, #24]	@ (8006698 <xPortSysTickHandler+0x40>)
 800667e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	2300      	movs	r3, #0
 8006686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	f383 8811 	msr	BASEPRI, r3
}
 800668e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006690:	bf00      	nop
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	e000ed04 	.word	0xe000ed04

0800669c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066a0:	4b0b      	ldr	r3, [pc, #44]	@ (80066d0 <vPortSetupTimerInterrupt+0x34>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066a6:	4b0b      	ldr	r3, [pc, #44]	@ (80066d4 <vPortSetupTimerInterrupt+0x38>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066ac:	4b0a      	ldr	r3, [pc, #40]	@ (80066d8 <vPortSetupTimerInterrupt+0x3c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a0a      	ldr	r2, [pc, #40]	@ (80066dc <vPortSetupTimerInterrupt+0x40>)
 80066b2:	fba2 2303 	umull	r2, r3, r2, r3
 80066b6:	099b      	lsrs	r3, r3, #6
 80066b8:	4a09      	ldr	r2, [pc, #36]	@ (80066e0 <vPortSetupTimerInterrupt+0x44>)
 80066ba:	3b01      	subs	r3, #1
 80066bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80066be:	4b04      	ldr	r3, [pc, #16]	@ (80066d0 <vPortSetupTimerInterrupt+0x34>)
 80066c0:	2207      	movs	r2, #7
 80066c2:	601a      	str	r2, [r3, #0]
}
 80066c4:	bf00      	nop
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	e000e010 	.word	0xe000e010
 80066d4:	e000e018 	.word	0xe000e018
 80066d8:	2000001c 	.word	0x2000001c
 80066dc:	10624dd3 	.word	0x10624dd3
 80066e0:	e000e014 	.word	0xe000e014

080066e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80066e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80066f4 <vPortEnableVFP+0x10>
 80066e8:	6801      	ldr	r1, [r0, #0]
 80066ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80066ee:	6001      	str	r1, [r0, #0]
 80066f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80066f2:	bf00      	nop
 80066f4:	e000ed88 	.word	0xe000ed88

080066f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80066fe:	f3ef 8305 	mrs	r3, IPSR
 8006702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b0f      	cmp	r3, #15
 8006708:	d915      	bls.n	8006736 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800670a:	4a18      	ldr	r2, [pc, #96]	@ (800676c <vPortValidateInterruptPriority+0x74>)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4413      	add	r3, r2
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006714:	4b16      	ldr	r3, [pc, #88]	@ (8006770 <vPortValidateInterruptPriority+0x78>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	7afa      	ldrb	r2, [r7, #11]
 800671a:	429a      	cmp	r2, r3
 800671c:	d20b      	bcs.n	8006736 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	607b      	str	r3, [r7, #4]
}
 8006730:	bf00      	nop
 8006732:	bf00      	nop
 8006734:	e7fd      	b.n	8006732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006736:	4b0f      	ldr	r3, [pc, #60]	@ (8006774 <vPortValidateInterruptPriority+0x7c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800673e:	4b0e      	ldr	r3, [pc, #56]	@ (8006778 <vPortValidateInterruptPriority+0x80>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	429a      	cmp	r2, r3
 8006744:	d90b      	bls.n	800675e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	603b      	str	r3, [r7, #0]
}
 8006758:	bf00      	nop
 800675a:	bf00      	nop
 800675c:	e7fd      	b.n	800675a <vPortValidateInterruptPriority+0x62>
	}
 800675e:	bf00      	nop
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	e000e3f0 	.word	0xe000e3f0
 8006770:	20001330 	.word	0x20001330
 8006774:	e000ed0c 	.word	0xe000ed0c
 8006778:	20001334 	.word	0x20001334

0800677c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08a      	sub	sp, #40	@ 0x28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006784:	2300      	movs	r3, #0
 8006786:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006788:	f7fe fc72 	bl	8005070 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800678c:	4b5c      	ldr	r3, [pc, #368]	@ (8006900 <pvPortMalloc+0x184>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006794:	f000 f924 	bl	80069e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006798:	4b5a      	ldr	r3, [pc, #360]	@ (8006904 <pvPortMalloc+0x188>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4013      	ands	r3, r2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f040 8095 	bne.w	80068d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d01e      	beq.n	80067ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80067ac:	2208      	movs	r2, #8
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4413      	add	r3, r2
 80067b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d015      	beq.n	80067ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f023 0307 	bic.w	r3, r3, #7
 80067c4:	3308      	adds	r3, #8
 80067c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00b      	beq.n	80067ea <pvPortMalloc+0x6e>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	617b      	str	r3, [r7, #20]
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop
 80067e8:	e7fd      	b.n	80067e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d06f      	beq.n	80068d0 <pvPortMalloc+0x154>
 80067f0:	4b45      	ldr	r3, [pc, #276]	@ (8006908 <pvPortMalloc+0x18c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d86a      	bhi.n	80068d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80067fa:	4b44      	ldr	r3, [pc, #272]	@ (800690c <pvPortMalloc+0x190>)
 80067fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80067fe:	4b43      	ldr	r3, [pc, #268]	@ (800690c <pvPortMalloc+0x190>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006804:	e004      	b.n	8006810 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006808:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800680a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	429a      	cmp	r2, r3
 8006818:	d903      	bls.n	8006822 <pvPortMalloc+0xa6>
 800681a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1f1      	bne.n	8006806 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006822:	4b37      	ldr	r3, [pc, #220]	@ (8006900 <pvPortMalloc+0x184>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006828:	429a      	cmp	r2, r3
 800682a:	d051      	beq.n	80068d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2208      	movs	r2, #8
 8006832:	4413      	add	r3, r2
 8006834:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800683e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	1ad2      	subs	r2, r2, r3
 8006846:	2308      	movs	r3, #8
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	429a      	cmp	r2, r3
 800684c:	d920      	bls.n	8006890 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800684e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4413      	add	r3, r2
 8006854:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00b      	beq.n	8006878 <pvPortMalloc+0xfc>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	613b      	str	r3, [r7, #16]
}
 8006872:	bf00      	nop
 8006874:	bf00      	nop
 8006876:	e7fd      	b.n	8006874 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	1ad2      	subs	r2, r2, r3
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800688a:	69b8      	ldr	r0, [r7, #24]
 800688c:	f000 f90a 	bl	8006aa4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006890:	4b1d      	ldr	r3, [pc, #116]	@ (8006908 <pvPortMalloc+0x18c>)
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	4a1b      	ldr	r2, [pc, #108]	@ (8006908 <pvPortMalloc+0x18c>)
 800689c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800689e:	4b1a      	ldr	r3, [pc, #104]	@ (8006908 <pvPortMalloc+0x18c>)
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006910 <pvPortMalloc+0x194>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d203      	bcs.n	80068b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068aa:	4b17      	ldr	r3, [pc, #92]	@ (8006908 <pvPortMalloc+0x18c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a18      	ldr	r2, [pc, #96]	@ (8006910 <pvPortMalloc+0x194>)
 80068b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	4b13      	ldr	r3, [pc, #76]	@ (8006904 <pvPortMalloc+0x188>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	431a      	orrs	r2, r3
 80068bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c2:	2200      	movs	r2, #0
 80068c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80068c6:	4b13      	ldr	r3, [pc, #76]	@ (8006914 <pvPortMalloc+0x198>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3301      	adds	r3, #1
 80068cc:	4a11      	ldr	r2, [pc, #68]	@ (8006914 <pvPortMalloc+0x198>)
 80068ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80068d0:	f7fe fbdc 	bl	800508c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00b      	beq.n	80068f6 <pvPortMalloc+0x17a>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	60fb      	str	r3, [r7, #12]
}
 80068f0:	bf00      	nop
 80068f2:	bf00      	nop
 80068f4:	e7fd      	b.n	80068f2 <pvPortMalloc+0x176>
	return pvReturn;
 80068f6:	69fb      	ldr	r3, [r7, #28]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3728      	adds	r7, #40	@ 0x28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	20004f40 	.word	0x20004f40
 8006904:	20004f54 	.word	0x20004f54
 8006908:	20004f44 	.word	0x20004f44
 800690c:	20004f38 	.word	0x20004f38
 8006910:	20004f48 	.word	0x20004f48
 8006914:	20004f4c 	.word	0x20004f4c

08006918 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d04f      	beq.n	80069ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800692a:	2308      	movs	r3, #8
 800692c:	425b      	negs	r3, r3
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	4413      	add	r3, r2
 8006932:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	4b25      	ldr	r3, [pc, #148]	@ (80069d4 <vPortFree+0xbc>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4013      	ands	r3, r2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10b      	bne.n	800695e <vPortFree+0x46>
	__asm volatile
 8006946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	60fb      	str	r3, [r7, #12]
}
 8006958:	bf00      	nop
 800695a:	bf00      	nop
 800695c:	e7fd      	b.n	800695a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00b      	beq.n	800697e <vPortFree+0x66>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	60bb      	str	r3, [r7, #8]
}
 8006978:	bf00      	nop
 800697a:	bf00      	nop
 800697c:	e7fd      	b.n	800697a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	4b14      	ldr	r3, [pc, #80]	@ (80069d4 <vPortFree+0xbc>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4013      	ands	r3, r2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01e      	beq.n	80069ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d11a      	bne.n	80069ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	4b0e      	ldr	r3, [pc, #56]	@ (80069d4 <vPortFree+0xbc>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	43db      	mvns	r3, r3
 800699e:	401a      	ands	r2, r3
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069a4:	f7fe fb64 	bl	8005070 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	4b0a      	ldr	r3, [pc, #40]	@ (80069d8 <vPortFree+0xc0>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4413      	add	r3, r2
 80069b2:	4a09      	ldr	r2, [pc, #36]	@ (80069d8 <vPortFree+0xc0>)
 80069b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069b6:	6938      	ldr	r0, [r7, #16]
 80069b8:	f000 f874 	bl	8006aa4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80069bc:	4b07      	ldr	r3, [pc, #28]	@ (80069dc <vPortFree+0xc4>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3301      	adds	r3, #1
 80069c2:	4a06      	ldr	r2, [pc, #24]	@ (80069dc <vPortFree+0xc4>)
 80069c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80069c6:	f7fe fb61 	bl	800508c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069ca:	bf00      	nop
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	20004f54 	.word	0x20004f54
 80069d8:	20004f44 	.word	0x20004f44
 80069dc:	20004f50 	.word	0x20004f50

080069e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80069ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80069ec:	4b27      	ldr	r3, [pc, #156]	@ (8006a8c <prvHeapInit+0xac>)
 80069ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f003 0307 	and.w	r3, r3, #7
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00c      	beq.n	8006a14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3307      	adds	r3, #7
 80069fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f023 0307 	bic.w	r3, r3, #7
 8006a06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8006a8c <prvHeapInit+0xac>)
 8006a10:	4413      	add	r3, r2
 8006a12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a18:	4a1d      	ldr	r2, [pc, #116]	@ (8006a90 <prvHeapInit+0xb0>)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8006a90 <prvHeapInit+0xb0>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	4413      	add	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a2c:	2208      	movs	r2, #8
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	1a9b      	subs	r3, r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0307 	bic.w	r3, r3, #7
 8006a3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4a15      	ldr	r2, [pc, #84]	@ (8006a94 <prvHeapInit+0xb4>)
 8006a40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a42:	4b14      	ldr	r3, [pc, #80]	@ (8006a94 <prvHeapInit+0xb4>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2200      	movs	r2, #0
 8006a48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a4a:	4b12      	ldr	r3, [pc, #72]	@ (8006a94 <prvHeapInit+0xb4>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	1ad2      	subs	r2, r2, r3
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a60:	4b0c      	ldr	r3, [pc, #48]	@ (8006a94 <prvHeapInit+0xb4>)
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8006a98 <prvHeapInit+0xb8>)
 8006a6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	4a09      	ldr	r2, [pc, #36]	@ (8006a9c <prvHeapInit+0xbc>)
 8006a76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a78:	4b09      	ldr	r3, [pc, #36]	@ (8006aa0 <prvHeapInit+0xc0>)
 8006a7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006a7e:	601a      	str	r2, [r3, #0]
}
 8006a80:	bf00      	nop
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	20001338 	.word	0x20001338
 8006a90:	20004f38 	.word	0x20004f38
 8006a94:	20004f40 	.word	0x20004f40
 8006a98:	20004f48 	.word	0x20004f48
 8006a9c:	20004f44 	.word	0x20004f44
 8006aa0:	20004f54 	.word	0x20004f54

08006aa4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006aac:	4b28      	ldr	r3, [pc, #160]	@ (8006b50 <prvInsertBlockIntoFreeList+0xac>)
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	e002      	b.n	8006ab8 <prvInsertBlockIntoFreeList+0x14>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d8f7      	bhi.n	8006ab2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	4413      	add	r3, r2
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d108      	bne.n	8006ae6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	441a      	add	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	441a      	add	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d118      	bne.n	8006b2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	4b15      	ldr	r3, [pc, #84]	@ (8006b54 <prvInsertBlockIntoFreeList+0xb0>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d00d      	beq.n	8006b22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	441a      	add	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	e008      	b.n	8006b34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b22:	4b0c      	ldr	r3, [pc, #48]	@ (8006b54 <prvInsertBlockIntoFreeList+0xb0>)
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	e003      	b.n	8006b34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d002      	beq.n	8006b42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b42:	bf00      	nop
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	20004f38 	.word	0x20004f38
 8006b54:	20004f40 	.word	0x20004f40

08006b58 <memset>:
 8006b58:	4402      	add	r2, r0
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d100      	bne.n	8006b62 <memset+0xa>
 8006b60:	4770      	bx	lr
 8006b62:	f803 1b01 	strb.w	r1, [r3], #1
 8006b66:	e7f9      	b.n	8006b5c <memset+0x4>

08006b68 <_reclaim_reent>:
 8006b68:	4b29      	ldr	r3, [pc, #164]	@ (8006c10 <_reclaim_reent+0xa8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4283      	cmp	r3, r0
 8006b6e:	b570      	push	{r4, r5, r6, lr}
 8006b70:	4604      	mov	r4, r0
 8006b72:	d04b      	beq.n	8006c0c <_reclaim_reent+0xa4>
 8006b74:	69c3      	ldr	r3, [r0, #28]
 8006b76:	b1ab      	cbz	r3, 8006ba4 <_reclaim_reent+0x3c>
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	b16b      	cbz	r3, 8006b98 <_reclaim_reent+0x30>
 8006b7c:	2500      	movs	r5, #0
 8006b7e:	69e3      	ldr	r3, [r4, #28]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	5959      	ldr	r1, [r3, r5]
 8006b84:	2900      	cmp	r1, #0
 8006b86:	d13b      	bne.n	8006c00 <_reclaim_reent+0x98>
 8006b88:	3504      	adds	r5, #4
 8006b8a:	2d80      	cmp	r5, #128	@ 0x80
 8006b8c:	d1f7      	bne.n	8006b7e <_reclaim_reent+0x16>
 8006b8e:	69e3      	ldr	r3, [r4, #28]
 8006b90:	4620      	mov	r0, r4
 8006b92:	68d9      	ldr	r1, [r3, #12]
 8006b94:	f000 f87a 	bl	8006c8c <_free_r>
 8006b98:	69e3      	ldr	r3, [r4, #28]
 8006b9a:	6819      	ldr	r1, [r3, #0]
 8006b9c:	b111      	cbz	r1, 8006ba4 <_reclaim_reent+0x3c>
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f000 f874 	bl	8006c8c <_free_r>
 8006ba4:	6961      	ldr	r1, [r4, #20]
 8006ba6:	b111      	cbz	r1, 8006bae <_reclaim_reent+0x46>
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f000 f86f 	bl	8006c8c <_free_r>
 8006bae:	69e1      	ldr	r1, [r4, #28]
 8006bb0:	b111      	cbz	r1, 8006bb8 <_reclaim_reent+0x50>
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f000 f86a 	bl	8006c8c <_free_r>
 8006bb8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006bba:	b111      	cbz	r1, 8006bc2 <_reclaim_reent+0x5a>
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f000 f865 	bl	8006c8c <_free_r>
 8006bc2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bc4:	b111      	cbz	r1, 8006bcc <_reclaim_reent+0x64>
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f000 f860 	bl	8006c8c <_free_r>
 8006bcc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006bce:	b111      	cbz	r1, 8006bd6 <_reclaim_reent+0x6e>
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f000 f85b 	bl	8006c8c <_free_r>
 8006bd6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006bd8:	b111      	cbz	r1, 8006be0 <_reclaim_reent+0x78>
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f000 f856 	bl	8006c8c <_free_r>
 8006be0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006be2:	b111      	cbz	r1, 8006bea <_reclaim_reent+0x82>
 8006be4:	4620      	mov	r0, r4
 8006be6:	f000 f851 	bl	8006c8c <_free_r>
 8006bea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006bec:	b111      	cbz	r1, 8006bf4 <_reclaim_reent+0x8c>
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f000 f84c 	bl	8006c8c <_free_r>
 8006bf4:	6a23      	ldr	r3, [r4, #32]
 8006bf6:	b14b      	cbz	r3, 8006c0c <_reclaim_reent+0xa4>
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006bfe:	4718      	bx	r3
 8006c00:	680e      	ldr	r6, [r1, #0]
 8006c02:	4620      	mov	r0, r4
 8006c04:	f000 f842 	bl	8006c8c <_free_r>
 8006c08:	4631      	mov	r1, r6
 8006c0a:	e7bb      	b.n	8006b84 <_reclaim_reent+0x1c>
 8006c0c:	bd70      	pop	{r4, r5, r6, pc}
 8006c0e:	bf00      	nop
 8006c10:	2000002c 	.word	0x2000002c

08006c14 <__libc_init_array>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	4d0d      	ldr	r5, [pc, #52]	@ (8006c4c <__libc_init_array+0x38>)
 8006c18:	4c0d      	ldr	r4, [pc, #52]	@ (8006c50 <__libc_init_array+0x3c>)
 8006c1a:	1b64      	subs	r4, r4, r5
 8006c1c:	10a4      	asrs	r4, r4, #2
 8006c1e:	2600      	movs	r6, #0
 8006c20:	42a6      	cmp	r6, r4
 8006c22:	d109      	bne.n	8006c38 <__libc_init_array+0x24>
 8006c24:	4d0b      	ldr	r5, [pc, #44]	@ (8006c54 <__libc_init_array+0x40>)
 8006c26:	4c0c      	ldr	r4, [pc, #48]	@ (8006c58 <__libc_init_array+0x44>)
 8006c28:	f000 f886 	bl	8006d38 <_init>
 8006c2c:	1b64      	subs	r4, r4, r5
 8006c2e:	10a4      	asrs	r4, r4, #2
 8006c30:	2600      	movs	r6, #0
 8006c32:	42a6      	cmp	r6, r4
 8006c34:	d105      	bne.n	8006c42 <__libc_init_array+0x2e>
 8006c36:	bd70      	pop	{r4, r5, r6, pc}
 8006c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c3c:	4798      	blx	r3
 8006c3e:	3601      	adds	r6, #1
 8006c40:	e7ee      	b.n	8006c20 <__libc_init_array+0xc>
 8006c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c46:	4798      	blx	r3
 8006c48:	3601      	adds	r6, #1
 8006c4a:	e7f2      	b.n	8006c32 <__libc_init_array+0x1e>
 8006c4c:	08007be0 	.word	0x08007be0
 8006c50:	08007be0 	.word	0x08007be0
 8006c54:	08007be0 	.word	0x08007be0
 8006c58:	08007be4 	.word	0x08007be4

08006c5c <__retarget_lock_acquire_recursive>:
 8006c5c:	4770      	bx	lr

08006c5e <__retarget_lock_release_recursive>:
 8006c5e:	4770      	bx	lr

08006c60 <strcpy>:
 8006c60:	4603      	mov	r3, r0
 8006c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c66:	f803 2b01 	strb.w	r2, [r3], #1
 8006c6a:	2a00      	cmp	r2, #0
 8006c6c:	d1f9      	bne.n	8006c62 <strcpy+0x2>
 8006c6e:	4770      	bx	lr

08006c70 <memcpy>:
 8006c70:	440a      	add	r2, r1
 8006c72:	4291      	cmp	r1, r2
 8006c74:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c78:	d100      	bne.n	8006c7c <memcpy+0xc>
 8006c7a:	4770      	bx	lr
 8006c7c:	b510      	push	{r4, lr}
 8006c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c86:	4291      	cmp	r1, r2
 8006c88:	d1f9      	bne.n	8006c7e <memcpy+0xe>
 8006c8a:	bd10      	pop	{r4, pc}

08006c8c <_free_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	4605      	mov	r5, r0
 8006c90:	2900      	cmp	r1, #0
 8006c92:	d041      	beq.n	8006d18 <_free_r+0x8c>
 8006c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c98:	1f0c      	subs	r4, r1, #4
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	bfb8      	it	lt
 8006c9e:	18e4      	addlt	r4, r4, r3
 8006ca0:	f000 f83e 	bl	8006d20 <__malloc_lock>
 8006ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8006d1c <_free_r+0x90>)
 8006ca6:	6813      	ldr	r3, [r2, #0]
 8006ca8:	b933      	cbnz	r3, 8006cb8 <_free_r+0x2c>
 8006caa:	6063      	str	r3, [r4, #4]
 8006cac:	6014      	str	r4, [r2, #0]
 8006cae:	4628      	mov	r0, r5
 8006cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cb4:	f000 b83a 	b.w	8006d2c <__malloc_unlock>
 8006cb8:	42a3      	cmp	r3, r4
 8006cba:	d908      	bls.n	8006cce <_free_r+0x42>
 8006cbc:	6820      	ldr	r0, [r4, #0]
 8006cbe:	1821      	adds	r1, r4, r0
 8006cc0:	428b      	cmp	r3, r1
 8006cc2:	bf01      	itttt	eq
 8006cc4:	6819      	ldreq	r1, [r3, #0]
 8006cc6:	685b      	ldreq	r3, [r3, #4]
 8006cc8:	1809      	addeq	r1, r1, r0
 8006cca:	6021      	streq	r1, [r4, #0]
 8006ccc:	e7ed      	b.n	8006caa <_free_r+0x1e>
 8006cce:	461a      	mov	r2, r3
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	b10b      	cbz	r3, 8006cd8 <_free_r+0x4c>
 8006cd4:	42a3      	cmp	r3, r4
 8006cd6:	d9fa      	bls.n	8006cce <_free_r+0x42>
 8006cd8:	6811      	ldr	r1, [r2, #0]
 8006cda:	1850      	adds	r0, r2, r1
 8006cdc:	42a0      	cmp	r0, r4
 8006cde:	d10b      	bne.n	8006cf8 <_free_r+0x6c>
 8006ce0:	6820      	ldr	r0, [r4, #0]
 8006ce2:	4401      	add	r1, r0
 8006ce4:	1850      	adds	r0, r2, r1
 8006ce6:	4283      	cmp	r3, r0
 8006ce8:	6011      	str	r1, [r2, #0]
 8006cea:	d1e0      	bne.n	8006cae <_free_r+0x22>
 8006cec:	6818      	ldr	r0, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	6053      	str	r3, [r2, #4]
 8006cf2:	4408      	add	r0, r1
 8006cf4:	6010      	str	r0, [r2, #0]
 8006cf6:	e7da      	b.n	8006cae <_free_r+0x22>
 8006cf8:	d902      	bls.n	8006d00 <_free_r+0x74>
 8006cfa:	230c      	movs	r3, #12
 8006cfc:	602b      	str	r3, [r5, #0]
 8006cfe:	e7d6      	b.n	8006cae <_free_r+0x22>
 8006d00:	6820      	ldr	r0, [r4, #0]
 8006d02:	1821      	adds	r1, r4, r0
 8006d04:	428b      	cmp	r3, r1
 8006d06:	bf04      	itt	eq
 8006d08:	6819      	ldreq	r1, [r3, #0]
 8006d0a:	685b      	ldreq	r3, [r3, #4]
 8006d0c:	6063      	str	r3, [r4, #4]
 8006d0e:	bf04      	itt	eq
 8006d10:	1809      	addeq	r1, r1, r0
 8006d12:	6021      	streq	r1, [r4, #0]
 8006d14:	6054      	str	r4, [r2, #4]
 8006d16:	e7ca      	b.n	8006cae <_free_r+0x22>
 8006d18:	bd38      	pop	{r3, r4, r5, pc}
 8006d1a:	bf00      	nop
 8006d1c:	20005094 	.word	0x20005094

08006d20 <__malloc_lock>:
 8006d20:	4801      	ldr	r0, [pc, #4]	@ (8006d28 <__malloc_lock+0x8>)
 8006d22:	f7ff bf9b 	b.w	8006c5c <__retarget_lock_acquire_recursive>
 8006d26:	bf00      	nop
 8006d28:	20005090 	.word	0x20005090

08006d2c <__malloc_unlock>:
 8006d2c:	4801      	ldr	r0, [pc, #4]	@ (8006d34 <__malloc_unlock+0x8>)
 8006d2e:	f7ff bf96 	b.w	8006c5e <__retarget_lock_release_recursive>
 8006d32:	bf00      	nop
 8006d34:	20005090 	.word	0x20005090

08006d38 <_init>:
 8006d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3a:	bf00      	nop
 8006d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d3e:	bc08      	pop	{r3}
 8006d40:	469e      	mov	lr, r3
 8006d42:	4770      	bx	lr

08006d44 <_fini>:
 8006d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d46:	bf00      	nop
 8006d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4a:	bc08      	pop	{r3}
 8006d4c:	469e      	mov	lr, r3
 8006d4e:	4770      	bx	lr
