
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a50  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e2c  08006c20  08006c20  00007c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a4c  08007a4c  0000907c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a4c  08007a4c  00008a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a54  08007a54  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a54  08007a54  00008a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a58  08007a58  00008a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007a5c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005050  2000007c  08007ad8  0000907c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050cc  08007ad8  000090cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c388  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b5f  00000000  00000000  00025434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001828  00000000  00000000  00028f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f3  00000000  00000000  0002a7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002444f  00000000  00000000  0002bab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d1ab  00000000  00000000  0004ff02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de366  00000000  00000000  0006d0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b413  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069fc  00000000  00000000  0014b458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00151e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c08 	.word	0x08006c08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08006c08 	.word	0x08006c08

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b96a 	b.w	8000520 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9d08      	ldr	r5, [sp, #32]
 800026a:	460c      	mov	r4, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14e      	bne.n	800030e <__udivmoddi4+0xaa>
 8000270:	4694      	mov	ip, r2
 8000272:	458c      	cmp	ip, r1
 8000274:	4686      	mov	lr, r0
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	d962      	bls.n	8000342 <__udivmoddi4+0xde>
 800027c:	b14a      	cbz	r2, 8000292 <__udivmoddi4+0x2e>
 800027e:	f1c2 0320 	rsb	r3, r2, #32
 8000282:	4091      	lsls	r1, r2
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	4319      	orrs	r1, r3
 800028e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000292:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000296:	fa1f f68c 	uxth.w	r6, ip
 800029a:	fbb1 f4f7 	udiv	r4, r1, r7
 800029e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a2:	fb07 1114 	mls	r1, r7, r4, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb04 f106 	mul.w	r1, r4, r6
 80002ae:	4299      	cmp	r1, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x64>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ba:	f080 8112 	bcs.w	80004e2 <__udivmoddi4+0x27e>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 810f 	bls.w	80004e2 <__udivmoddi4+0x27e>
 80002c4:	3c02      	subs	r4, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a59      	subs	r1, r3, r1
 80002ca:	fa1f f38e 	uxth.w	r3, lr
 80002ce:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d2:	fb07 1110 	mls	r1, r7, r0, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb00 f606 	mul.w	r6, r0, r6
 80002de:	429e      	cmp	r6, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x94>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ea:	f080 80fc 	bcs.w	80004e6 <__udivmoddi4+0x282>
 80002ee:	429e      	cmp	r6, r3
 80002f0:	f240 80f9 	bls.w	80004e6 <__udivmoddi4+0x282>
 80002f4:	4463      	add	r3, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	1b9b      	subs	r3, r3, r6
 80002fa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa6>
 8000302:	40d3      	lsrs	r3, r2
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xba>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb4>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa6>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x150>
 8000326:	42a3      	cmp	r3, r4
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xcc>
 800032a:	4290      	cmp	r0, r2
 800032c:	f0c0 80f0 	bcc.w	8000510 <__udivmoddi4+0x2ac>
 8000330:	1a86      	subs	r6, r0, r2
 8000332:	eb64 0303 	sbc.w	r3, r4, r3
 8000336:	2001      	movs	r0, #1
 8000338:	2d00      	cmp	r5, #0
 800033a:	d0e6      	beq.n	800030a <__udivmoddi4+0xa6>
 800033c:	e9c5 6300 	strd	r6, r3, [r5]
 8000340:	e7e3      	b.n	800030a <__udivmoddi4+0xa6>
 8000342:	2a00      	cmp	r2, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x204>
 8000348:	eba1 040c 	sub.w	r4, r1, ip
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	fa1f f78c 	uxth.w	r7, ip
 8000354:	2101      	movs	r1, #1
 8000356:	fbb4 f6f8 	udiv	r6, r4, r8
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb08 4416 	mls	r4, r8, r6, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb07 f006 	mul.w	r0, r7, r6
 800036a:	4298      	cmp	r0, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x11c>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 34ff 	add.w	r4, r6, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x11a>
 8000378:	4298      	cmp	r0, r3
 800037a:	f200 80cd 	bhi.w	8000518 <__udivmoddi4+0x2b4>
 800037e:	4626      	mov	r6, r4
 8000380:	1a1c      	subs	r4, r3, r0
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb4 f0f8 	udiv	r0, r4, r8
 800038a:	fb08 4410 	mls	r4, r8, r0, r4
 800038e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000392:	fb00 f707 	mul.w	r7, r0, r7
 8000396:	429f      	cmp	r7, r3
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x148>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x146>
 80003a4:	429f      	cmp	r7, r3
 80003a6:	f200 80b0 	bhi.w	800050a <__udivmoddi4+0x2a6>
 80003aa:	4620      	mov	r0, r4
 80003ac:	1bdb      	subs	r3, r3, r7
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x9c>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c4:	fa04 f301 	lsl.w	r3, r4, r1
 80003c8:	ea43 030c 	orr.w	r3, r3, ip
 80003cc:	40f4      	lsrs	r4, r6
 80003ce:	fa00 f801 	lsl.w	r8, r0, r1
 80003d2:	0c38      	lsrs	r0, r7, #16
 80003d4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d8:	fbb4 fef0 	udiv	lr, r4, r0
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	fb00 441e 	mls	r4, r0, lr, r4
 80003e4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e8:	fb0e f90c 	mul.w	r9, lr, ip
 80003ec:	45a1      	cmp	r9, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90a      	bls.n	800040a <__udivmoddi4+0x1a6>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fa:	f080 8084 	bcs.w	8000506 <__udivmoddi4+0x2a2>
 80003fe:	45a1      	cmp	r9, r4
 8000400:	f240 8081 	bls.w	8000506 <__udivmoddi4+0x2a2>
 8000404:	f1ae 0e02 	sub.w	lr, lr, #2
 8000408:	443c      	add	r4, r7
 800040a:	eba4 0409 	sub.w	r4, r4, r9
 800040e:	fa1f f983 	uxth.w	r9, r3
 8000412:	fbb4 f3f0 	udiv	r3, r4, r0
 8000416:	fb00 4413 	mls	r4, r0, r3, r4
 800041a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000422:	45a4      	cmp	ip, r4
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x1d2>
 8000426:	193c      	adds	r4, r7, r4
 8000428:	f103 30ff 	add.w	r0, r3, #4294967295
 800042c:	d267      	bcs.n	80004fe <__udivmoddi4+0x29a>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d965      	bls.n	80004fe <__udivmoddi4+0x29a>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043a:	fba0 9302 	umull	r9, r3, r0, r2
 800043e:	eba4 040c 	sub.w	r4, r4, ip
 8000442:	429c      	cmp	r4, r3
 8000444:	46ce      	mov	lr, r9
 8000446:	469c      	mov	ip, r3
 8000448:	d351      	bcc.n	80004ee <__udivmoddi4+0x28a>
 800044a:	d04e      	beq.n	80004ea <__udivmoddi4+0x286>
 800044c:	b155      	cbz	r5, 8000464 <__udivmoddi4+0x200>
 800044e:	ebb8 030e 	subs.w	r3, r8, lr
 8000452:	eb64 040c 	sbc.w	r4, r4, ip
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	40cb      	lsrs	r3, r1
 800045c:	431e      	orrs	r6, r3
 800045e:	40cc      	lsrs	r4, r1
 8000460:	e9c5 6400 	strd	r6, r4, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	e750      	b.n	800030a <__udivmoddi4+0xa6>
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa24 f303 	lsr.w	r3, r4, r3
 8000478:	4094      	lsls	r4, r2
 800047a:	430c      	orrs	r4, r1
 800047c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000480:	fa00 fe02 	lsl.w	lr, r0, r2
 8000484:	fa1f f78c 	uxth.w	r7, ip
 8000488:	fbb3 f0f8 	udiv	r0, r3, r8
 800048c:	fb08 3110 	mls	r1, r8, r0, r3
 8000490:	0c23      	lsrs	r3, r4, #16
 8000492:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000496:	fb00 f107 	mul.w	r1, r0, r7
 800049a:	4299      	cmp	r1, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x24c>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a6:	d22c      	bcs.n	8000502 <__udivmoddi4+0x29e>
 80004a8:	4299      	cmp	r1, r3
 80004aa:	d92a      	bls.n	8000502 <__udivmoddi4+0x29e>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a5b      	subs	r3, r3, r1
 80004b2:	b2a4      	uxth	r4, r4
 80004b4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b8:	fb08 3311 	mls	r3, r8, r1, r3
 80004bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c0:	fb01 f307 	mul.w	r3, r1, r7
 80004c4:	42a3      	cmp	r3, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x276>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d0:	d213      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004d2:	42a3      	cmp	r3, r4
 80004d4:	d911      	bls.n	80004fa <__udivmoddi4+0x296>
 80004d6:	3902      	subs	r1, #2
 80004d8:	4464      	add	r4, ip
 80004da:	1ae4      	subs	r4, r4, r3
 80004dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e0:	e739      	b.n	8000356 <__udivmoddi4+0xf2>
 80004e2:	4604      	mov	r4, r0
 80004e4:	e6f0      	b.n	80002c8 <__udivmoddi4+0x64>
 80004e6:	4608      	mov	r0, r1
 80004e8:	e706      	b.n	80002f8 <__udivmoddi4+0x94>
 80004ea:	45c8      	cmp	r8, r9
 80004ec:	d2ae      	bcs.n	800044c <__udivmoddi4+0x1e8>
 80004ee:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7a8      	b.n	800044c <__udivmoddi4+0x1e8>
 80004fa:	4631      	mov	r1, r6
 80004fc:	e7ed      	b.n	80004da <__udivmoddi4+0x276>
 80004fe:	4603      	mov	r3, r0
 8000500:	e799      	b.n	8000436 <__udivmoddi4+0x1d2>
 8000502:	4630      	mov	r0, r6
 8000504:	e7d4      	b.n	80004b0 <__udivmoddi4+0x24c>
 8000506:	46d6      	mov	lr, sl
 8000508:	e77f      	b.n	800040a <__udivmoddi4+0x1a6>
 800050a:	4463      	add	r3, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e74d      	b.n	80003ac <__udivmoddi4+0x148>
 8000510:	4606      	mov	r6, r0
 8000512:	4623      	mov	r3, r4
 8000514:	4608      	mov	r0, r1
 8000516:	e70f      	b.n	8000338 <__udivmoddi4+0xd4>
 8000518:	3e02      	subs	r6, #2
 800051a:	4463      	add	r3, ip
 800051c:	e730      	b.n	8000380 <__udivmoddi4+0x11c>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
	int done=1;
 800052a:	2301      	movs	r3, #1
 800052c:	607b      	str	r3, [r7, #4]
	while(done)
 800052e:	e19b      	b.n	8000868 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000536:	48b3      	ldr	r0, [pc, #716]	@ (8000804 <Get_Key+0x2e0>)
 8000538:	f001 fb54 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 800053c:	2200      	movs	r2, #0
 800053e:	2110      	movs	r1, #16
 8000540:	48b0      	ldr	r0, [pc, #704]	@ (8000804 <Get_Key+0x2e0>)
 8000542:	f001 fb4f 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000546:	2200      	movs	r2, #0
 8000548:	2120      	movs	r1, #32
 800054a:	48ae      	ldr	r0, [pc, #696]	@ (8000804 <Get_Key+0x2e0>)
 800054c:	f001 fb4a 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000550:	2200      	movs	r2, #0
 8000552:	2108      	movs	r1, #8
 8000554:	48ab      	ldr	r0, [pc, #684]	@ (8000804 <Get_Key+0x2e0>)
 8000556:	f001 fb45 	bl	8001be4 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 800055a:	2140      	movs	r1, #64	@ 0x40
 800055c:	48a9      	ldr	r0, [pc, #676]	@ (8000804 <Get_Key+0x2e0>)
 800055e:	f001 fb29 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d00b      	beq.n	8000580 <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000568:	bf00      	nop
 800056a:	2140      	movs	r1, #64	@ 0x40
 800056c:	48a5      	ldr	r0, [pc, #660]	@ (8000804 <Get_Key+0x2e0>)
 800056e:	f001 fb21 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d1f8      	bne.n	800056a <Get_Key+0x46>
		key='1';
 8000578:	4ba3      	ldr	r3, [pc, #652]	@ (8000808 <Get_Key+0x2e4>)
 800057a:	2231      	movs	r2, #49	@ 0x31
 800057c:	701a      	strb	r2, [r3, #0]
		break;
 800057e:	e177      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000580:	2180      	movs	r1, #128	@ 0x80
 8000582:	48a2      	ldr	r0, [pc, #648]	@ (800080c <Get_Key+0x2e8>)
 8000584:	f001 fb16 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d00b      	beq.n	80005a6 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800058e:	bf00      	nop
 8000590:	2180      	movs	r1, #128	@ 0x80
 8000592:	489e      	ldr	r0, [pc, #632]	@ (800080c <Get_Key+0x2e8>)
 8000594:	f001 fb0e 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d1f8      	bne.n	8000590 <Get_Key+0x6c>
		key='4';
 800059e:	4b9a      	ldr	r3, [pc, #616]	@ (8000808 <Get_Key+0x2e4>)
 80005a0:	2234      	movs	r2, #52	@ 0x34
 80005a2:	701a      	strb	r2, [r3, #0]
		break;
 80005a4:	e164      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80005a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005aa:	4899      	ldr	r0, [pc, #612]	@ (8000810 <Get_Key+0x2ec>)
 80005ac:	f001 fb02 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00c      	beq.n	80005d0 <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80005b6:	bf00      	nop
 80005b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005bc:	4894      	ldr	r0, [pc, #592]	@ (8000810 <Get_Key+0x2ec>)
 80005be:	f001 faf9 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1f7      	bne.n	80005b8 <Get_Key+0x94>
		key='7';
 80005c8:	4b8f      	ldr	r3, [pc, #572]	@ (8000808 <Get_Key+0x2e4>)
 80005ca:	2237      	movs	r2, #55	@ 0x37
 80005cc:	701a      	strb	r2, [r3, #0]
		break;
 80005ce:	e14f      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80005d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d4:	488e      	ldr	r0, [pc, #568]	@ (8000810 <Get_Key+0x2ec>)
 80005d6:	f001 faed 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00c      	beq.n	80005fa <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80005e0:	bf00      	nop
 80005e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005e6:	488a      	ldr	r0, [pc, #552]	@ (8000810 <Get_Key+0x2ec>)
 80005e8:	f001 fae4 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1f7      	bne.n	80005e2 <Get_Key+0xbe>
		key='*';
 80005f2:	4b85      	ldr	r3, [pc, #532]	@ (8000808 <Get_Key+0x2e4>)
 80005f4:	222a      	movs	r2, #42	@ 0x2a
 80005f6:	701a      	strb	r2, [r3, #0]
		break;
 80005f8:	e13a      	b.n	8000870 <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000600:	4880      	ldr	r0, [pc, #512]	@ (8000804 <Get_Key+0x2e0>)
 8000602:	f001 faef 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 8000606:	2201      	movs	r2, #1
 8000608:	2110      	movs	r1, #16
 800060a:	487e      	ldr	r0, [pc, #504]	@ (8000804 <Get_Key+0x2e0>)
 800060c:	f001 faea 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000610:	2200      	movs	r2, #0
 8000612:	2120      	movs	r1, #32
 8000614:	487b      	ldr	r0, [pc, #492]	@ (8000804 <Get_Key+0x2e0>)
 8000616:	f001 fae5 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 800061a:	2200      	movs	r2, #0
 800061c:	2108      	movs	r1, #8
 800061e:	4879      	ldr	r0, [pc, #484]	@ (8000804 <Get_Key+0x2e0>)
 8000620:	f001 fae0 	bl	8001be4 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000624:	2140      	movs	r1, #64	@ 0x40
 8000626:	4877      	ldr	r0, [pc, #476]	@ (8000804 <Get_Key+0x2e0>)
 8000628:	f001 fac4 	bl	8001bb4 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d00b      	beq.n	800064a <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000632:	bf00      	nop
 8000634:	2140      	movs	r1, #64	@ 0x40
 8000636:	4873      	ldr	r0, [pc, #460]	@ (8000804 <Get_Key+0x2e0>)
 8000638:	f001 fabc 	bl	8001bb4 <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1f8      	bne.n	8000634 <Get_Key+0x110>
		key='2';
 8000642:	4b71      	ldr	r3, [pc, #452]	@ (8000808 <Get_Key+0x2e4>)
 8000644:	2232      	movs	r2, #50	@ 0x32
 8000646:	701a      	strb	r2, [r3, #0]
		break;
 8000648:	e112      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800064a:	2180      	movs	r1, #128	@ 0x80
 800064c:	486f      	ldr	r0, [pc, #444]	@ (800080c <Get_Key+0x2e8>)
 800064e:	f001 fab1 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d00b      	beq.n	8000670 <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000658:	bf00      	nop
 800065a:	2180      	movs	r1, #128	@ 0x80
 800065c:	486b      	ldr	r0, [pc, #428]	@ (800080c <Get_Key+0x2e8>)
 800065e:	f001 faa9 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f8      	bne.n	800065a <Get_Key+0x136>
		key='5';
 8000668:	4b67      	ldr	r3, [pc, #412]	@ (8000808 <Get_Key+0x2e4>)
 800066a:	2235      	movs	r2, #53	@ 0x35
 800066c:	701a      	strb	r2, [r3, #0]
		break;
 800066e:	e0ff      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000670:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000674:	4866      	ldr	r0, [pc, #408]	@ (8000810 <Get_Key+0x2ec>)
 8000676:	f001 fa9d 	bl	8001bb4 <HAL_GPIO_ReadPin>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00c      	beq.n	800069a <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000680:	bf00      	nop
 8000682:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000686:	4862      	ldr	r0, [pc, #392]	@ (8000810 <Get_Key+0x2ec>)
 8000688:	f001 fa94 	bl	8001bb4 <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f7      	bne.n	8000682 <Get_Key+0x15e>
		key='8';
 8000692:	4b5d      	ldr	r3, [pc, #372]	@ (8000808 <Get_Key+0x2e4>)
 8000694:	2238      	movs	r2, #56	@ 0x38
 8000696:	701a      	strb	r2, [r3, #0]
		break;
 8000698:	e0ea      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800069a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800069e:	485c      	ldr	r0, [pc, #368]	@ (8000810 <Get_Key+0x2ec>)
 80006a0:	f001 fa88 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d00c      	beq.n	80006c4 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80006aa:	bf00      	nop
 80006ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006b0:	4857      	ldr	r0, [pc, #348]	@ (8000810 <Get_Key+0x2ec>)
 80006b2:	f001 fa7f 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1f7      	bne.n	80006ac <Get_Key+0x188>
		key='0';
 80006bc:	4b52      	ldr	r3, [pc, #328]	@ (8000808 <Get_Key+0x2e4>)
 80006be:	2230      	movs	r2, #48	@ 0x30
 80006c0:	701a      	strb	r2, [r3, #0]
		break;
 80006c2:	e0d5      	b.n	8000870 <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ca:	484e      	ldr	r0, [pc, #312]	@ (8000804 <Get_Key+0x2e0>)
 80006cc:	f001 fa8a 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 80006d0:	2200      	movs	r2, #0
 80006d2:	2110      	movs	r1, #16
 80006d4:	484b      	ldr	r0, [pc, #300]	@ (8000804 <Get_Key+0x2e0>)
 80006d6:	f001 fa85 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 80006da:	2201      	movs	r2, #1
 80006dc:	2120      	movs	r1, #32
 80006de:	4849      	ldr	r0, [pc, #292]	@ (8000804 <Get_Key+0x2e0>)
 80006e0:	f001 fa80 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 80006e4:	2200      	movs	r2, #0
 80006e6:	2108      	movs	r1, #8
 80006e8:	4846      	ldr	r0, [pc, #280]	@ (8000804 <Get_Key+0x2e0>)
 80006ea:	f001 fa7b 	bl	8001be4 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006ee:	2140      	movs	r1, #64	@ 0x40
 80006f0:	4844      	ldr	r0, [pc, #272]	@ (8000804 <Get_Key+0x2e0>)
 80006f2:	f001 fa5f 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00b      	beq.n	8000714 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006fc:	bf00      	nop
 80006fe:	2140      	movs	r1, #64	@ 0x40
 8000700:	4840      	ldr	r0, [pc, #256]	@ (8000804 <Get_Key+0x2e0>)
 8000702:	f001 fa57 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d1f8      	bne.n	80006fe <Get_Key+0x1da>
		key='3';
 800070c:	4b3e      	ldr	r3, [pc, #248]	@ (8000808 <Get_Key+0x2e4>)
 800070e:	2233      	movs	r2, #51	@ 0x33
 8000710:	701a      	strb	r2, [r3, #0]
		break;
 8000712:	e0ad      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000714:	2180      	movs	r1, #128	@ 0x80
 8000716:	483d      	ldr	r0, [pc, #244]	@ (800080c <Get_Key+0x2e8>)
 8000718:	f001 fa4c 	bl	8001bb4 <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d00b      	beq.n	800073a <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000722:	bf00      	nop
 8000724:	2180      	movs	r1, #128	@ 0x80
 8000726:	4839      	ldr	r0, [pc, #228]	@ (800080c <Get_Key+0x2e8>)
 8000728:	f001 fa44 	bl	8001bb4 <HAL_GPIO_ReadPin>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1f8      	bne.n	8000724 <Get_Key+0x200>
		key='6';
 8000732:	4b35      	ldr	r3, [pc, #212]	@ (8000808 <Get_Key+0x2e4>)
 8000734:	2236      	movs	r2, #54	@ 0x36
 8000736:	701a      	strb	r2, [r3, #0]
		break;
 8000738:	e09a      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800073a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800073e:	4834      	ldr	r0, [pc, #208]	@ (8000810 <Get_Key+0x2ec>)
 8000740:	f001 fa38 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00c      	beq.n	8000764 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800074a:	bf00      	nop
 800074c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000750:	482f      	ldr	r0, [pc, #188]	@ (8000810 <Get_Key+0x2ec>)
 8000752:	f001 fa2f 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1f7      	bne.n	800074c <Get_Key+0x228>
		key='9';
 800075c:	4b2a      	ldr	r3, [pc, #168]	@ (8000808 <Get_Key+0x2e4>)
 800075e:	2239      	movs	r2, #57	@ 0x39
 8000760:	701a      	strb	r2, [r3, #0]
		break;
 8000762:	e085      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000764:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000768:	4829      	ldr	r0, [pc, #164]	@ (8000810 <Get_Key+0x2ec>)
 800076a:	f001 fa23 	bl	8001bb4 <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d00c      	beq.n	800078e <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000774:	bf00      	nop
 8000776:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800077a:	4825      	ldr	r0, [pc, #148]	@ (8000810 <Get_Key+0x2ec>)
 800077c:	f001 fa1a 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1f7      	bne.n	8000776 <Get_Key+0x252>
		key='#';
 8000786:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <Get_Key+0x2e4>)
 8000788:	2223      	movs	r2, #35	@ 0x23
 800078a:	701a      	strb	r2, [r3, #0]
		break;
 800078c:	e070      	b.n	8000870 <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000794:	481b      	ldr	r0, [pc, #108]	@ (8000804 <Get_Key+0x2e0>)
 8000796:	f001 fa25 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 800079a:	2200      	movs	r2, #0
 800079c:	2110      	movs	r1, #16
 800079e:	4819      	ldr	r0, [pc, #100]	@ (8000804 <Get_Key+0x2e0>)
 80007a0:	f001 fa20 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80007a4:	2200      	movs	r2, #0
 80007a6:	2120      	movs	r1, #32
 80007a8:	4816      	ldr	r0, [pc, #88]	@ (8000804 <Get_Key+0x2e0>)
 80007aa:	f001 fa1b 	bl	8001be4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 80007ae:	2201      	movs	r2, #1
 80007b0:	2108      	movs	r1, #8
 80007b2:	4814      	ldr	r0, [pc, #80]	@ (8000804 <Get_Key+0x2e0>)
 80007b4:	f001 fa16 	bl	8001be4 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80007b8:	2140      	movs	r1, #64	@ 0x40
 80007ba:	4812      	ldr	r0, [pc, #72]	@ (8000804 <Get_Key+0x2e0>)
 80007bc:	f001 f9fa 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00b      	beq.n	80007de <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80007c6:	bf00      	nop
 80007c8:	2140      	movs	r1, #64	@ 0x40
 80007ca:	480e      	ldr	r0, [pc, #56]	@ (8000804 <Get_Key+0x2e0>)
 80007cc:	f001 f9f2 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f8      	bne.n	80007c8 <Get_Key+0x2a4>
		key='A';
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <Get_Key+0x2e4>)
 80007d8:	2241      	movs	r2, #65	@ 0x41
 80007da:	701a      	strb	r2, [r3, #0]
		break;
 80007dc:	e048      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007de:	2180      	movs	r1, #128	@ 0x80
 80007e0:	480a      	ldr	r0, [pc, #40]	@ (800080c <Get_Key+0x2e8>)
 80007e2:	f001 f9e7 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d013      	beq.n	8000814 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007ec:	bf00      	nop
 80007ee:	2180      	movs	r1, #128	@ 0x80
 80007f0:	4806      	ldr	r0, [pc, #24]	@ (800080c <Get_Key+0x2e8>)
 80007f2:	f001 f9df 	bl	8001bb4 <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f8      	bne.n	80007ee <Get_Key+0x2ca>
		key='B';
 80007fc:	4b02      	ldr	r3, [pc, #8]	@ (8000808 <Get_Key+0x2e4>)
 80007fe:	2242      	movs	r2, #66	@ 0x42
 8000800:	701a      	strb	r2, [r3, #0]
		break;
 8000802:	e035      	b.n	8000870 <Get_Key+0x34c>
 8000804:	40020400 	.word	0x40020400
 8000808:	20000098 	.word	0x20000098
 800080c:	40020800 	.word	0x40020800
 8000810:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000814:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000818:	481a      	ldr	r0, [pc, #104]	@ (8000884 <Get_Key+0x360>)
 800081a:	f001 f9cb 	bl	8001bb4 <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00c      	beq.n	800083e <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000824:	bf00      	nop
 8000826:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800082a:	4816      	ldr	r0, [pc, #88]	@ (8000884 <Get_Key+0x360>)
 800082c:	f001 f9c2 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1f7      	bne.n	8000826 <Get_Key+0x302>
		key='C';
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <Get_Key+0x364>)
 8000838:	2243      	movs	r2, #67	@ 0x43
 800083a:	701a      	strb	r2, [r3, #0]
		break;
 800083c:	e018      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800083e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000842:	4810      	ldr	r0, [pc, #64]	@ (8000884 <Get_Key+0x360>)
 8000844:	f001 f9b6 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00c      	beq.n	8000868 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800084e:	bf00      	nop
 8000850:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000854:	480b      	ldr	r0, [pc, #44]	@ (8000884 <Get_Key+0x360>)
 8000856:	f001 f9ad 	bl	8001bb4 <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1f7      	bne.n	8000850 <Get_Key+0x32c>
		key='D';
 8000860:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <Get_Key+0x364>)
 8000862:	2244      	movs	r2, #68	@ 0x44
 8000864:	701a      	strb	r2, [r3, #0]
		break;
 8000866:	e003      	b.n	8000870 <Get_Key+0x34c>
	while(done)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	f47f ae60 	bne.w	8000530 <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000870:	2120      	movs	r1, #32
 8000872:	4804      	ldr	r0, [pc, #16]	@ (8000884 <Get_Key+0x360>)
 8000874:	f001 f9cf 	bl	8001c16 <HAL_GPIO_TogglePin>
	return(key);
 8000878:	4b03      	ldr	r3, [pc, #12]	@ (8000888 <Get_Key+0x364>)
 800087a:	781b      	ldrb	r3, [r3, #0]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40020000 	.word	0x40020000
 8000888:	20000098 	.word	0x20000098

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000890:	f000 fed8 	bl	8001644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000894:	f000 f836 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000898:	f000 f8fa 	bl	8000a90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800089c:	f000 f8ce 	bl	8000a3c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008a0:	f000 f89e 	bl	80009e0 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008a4:	f003 fb62 	bl	8003f6c <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of KeypadTask */
  KeypadTaskHandle = osThreadNew(StartKeypadTask, NULL, &KeypadTask_attributes);
 80008a8:	4a0d      	ldr	r2, [pc, #52]	@ (80008e0 <main+0x54>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <main+0x58>)
 80008ae:	f003 fba7 	bl	8004000 <osThreadNew>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a0c      	ldr	r2, [pc, #48]	@ (80008e8 <main+0x5c>)
 80008b6:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(StartLCDTask, NULL, &LCDTask_attributes);
 80008b8:	4a0c      	ldr	r2, [pc, #48]	@ (80008ec <main+0x60>)
 80008ba:	2100      	movs	r1, #0
 80008bc:	480c      	ldr	r0, [pc, #48]	@ (80008f0 <main+0x64>)
 80008be:	f003 fb9f 	bl	8004000 <osThreadNew>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a0b      	ldr	r2, [pc, #44]	@ (80008f4 <main+0x68>)
 80008c6:	6013      	str	r3, [r2, #0]

  /* creation of LEDsTask */
  LEDsTaskHandle = osThreadNew(StartLEDsTask, NULL, &LEDsTask_attributes);
 80008c8:	4a0b      	ldr	r2, [pc, #44]	@ (80008f8 <main+0x6c>)
 80008ca:	2100      	movs	r1, #0
 80008cc:	480b      	ldr	r0, [pc, #44]	@ (80008fc <main+0x70>)
 80008ce:	f003 fb97 	bl	8004000 <osThreadNew>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000900 <main+0x74>)
 80008d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008d8:	f003 fb6c 	bl	8003fb4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <main+0x50>
 80008e0:	080079c8 	.word	0x080079c8
 80008e4:	08000bcd 	.word	0x08000bcd
 80008e8:	20000138 	.word	0x20000138
 80008ec:	080079ec 	.word	0x080079ec
 80008f0:	08000c81 	.word	0x08000c81
 80008f4:	2000013c 	.word	0x2000013c
 80008f8:	08007a10 	.word	0x08007a10
 80008fc:	08000d11 	.word	0x08000d11
 8000900:	20000140 	.word	0x20000140

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b094      	sub	sp, #80	@ 0x50
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	2234      	movs	r2, #52	@ 0x34
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f006 f888 	bl	8006a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	4b2a      	ldr	r3, [pc, #168]	@ (80009d8 <SystemClock_Config+0xd4>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000930:	4a29      	ldr	r2, [pc, #164]	@ (80009d8 <SystemClock_Config+0xd4>)
 8000932:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000936:	6413      	str	r3, [r2, #64]	@ 0x40
 8000938:	4b27      	ldr	r3, [pc, #156]	@ (80009d8 <SystemClock_Config+0xd4>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000944:	2300      	movs	r3, #0
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	4b24      	ldr	r3, [pc, #144]	@ (80009dc <SystemClock_Config+0xd8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000950:	4a22      	ldr	r2, [pc, #136]	@ (80009dc <SystemClock_Config+0xd8>)
 8000952:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	4b20      	ldr	r3, [pc, #128]	@ (80009dc <SystemClock_Config+0xd8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000964:	2302      	movs	r3, #2
 8000966:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000968:	2301      	movs	r3, #1
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096c:	2310      	movs	r3, #16
 800096e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000970:	2302      	movs	r3, #2
 8000972:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000974:	2300      	movs	r3, #0
 8000976:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000978:	2310      	movs	r3, #16
 800097a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800097c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000980:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000982:	2304      	movs	r3, #4
 8000984:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000986:	2302      	movs	r3, #2
 8000988:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800098a:	2302      	movs	r3, #2
 800098c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4618      	mov	r0, r3
 8000994:	f002 faa2 	bl	8002edc <HAL_RCC_OscConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800099e:	f000 f9f3 	bl	8000d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a2:	230f      	movs	r3, #15
 80009a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a6:	2302      	movs	r3, #2
 80009a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b8:	f107 0308 	add.w	r3, r7, #8
 80009bc:	2102      	movs	r1, #2
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 ff10 	bl	80027e4 <HAL_RCC_ClockConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80009ca:	f000 f9dd 	bl	8000d88 <Error_Handler>
  }
}
 80009ce:	bf00      	nop
 80009d0:	3750      	adds	r7, #80	@ 0x50
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40007000 	.word	0x40007000

080009e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <MX_I2C1_Init+0x50>)
 80009e6:	4a13      	ldr	r2, [pc, #76]	@ (8000a34 <MX_I2C1_Init+0x54>)
 80009e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <MX_I2C1_Init+0x50>)
 80009ec:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <MX_I2C1_Init+0x58>)
 80009ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <MX_I2C1_Init+0x50>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <MX_I2C1_Init+0x50>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <MX_I2C1_Init+0x50>)
 80009fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <MX_I2C1_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <MX_I2C1_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a10:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <MX_I2C1_Init+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <MX_I2C1_Init+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	@ (8000a30 <MX_I2C1_Init+0x50>)
 8000a1e:	f001 f915 	bl	8001c4c <HAL_I2C_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a28:	f000 f9ae 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	2000009c 	.word	0x2000009c
 8000a34:	40005400 	.word	0x40005400
 8000a38:	00061a80 	.word	0x00061a80

08000a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a40:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	@ (8000a8c <MX_USART2_UART_Init+0x50>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a48:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a74:	f002 ff72 	bl	800395c <HAL_UART_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a7e:	f000 f983 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000f0 	.word	0x200000f0
 8000a8c:	40004400 	.word	0x40004400

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	@ 0x28
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b44      	ldr	r3, [pc, #272]	@ (8000bbc <MX_GPIO_Init+0x12c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a43      	ldr	r2, [pc, #268]	@ (8000bbc <MX_GPIO_Init+0x12c>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b41      	ldr	r3, [pc, #260]	@ (8000bbc <MX_GPIO_Init+0x12c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8000bbc <MX_GPIO_Init+0x12c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a3c      	ldr	r2, [pc, #240]	@ (8000bbc <MX_GPIO_Init+0x12c>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b3a      	ldr	r3, [pc, #232]	@ (8000bbc <MX_GPIO_Init+0x12c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	4b36      	ldr	r3, [pc, #216]	@ (8000bbc <MX_GPIO_Init+0x12c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a35      	ldr	r2, [pc, #212]	@ (8000bbc <MX_GPIO_Init+0x12c>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b33      	ldr	r3, [pc, #204]	@ (8000bbc <MX_GPIO_Init+0x12c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b2f      	ldr	r3, [pc, #188]	@ (8000bbc <MX_GPIO_Init+0x12c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a2e      	ldr	r2, [pc, #184]	@ (8000bbc <MX_GPIO_Init+0x12c>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000bbc <MX_GPIO_Init+0x12c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_10, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8000b1c:	4828      	ldr	r0, [pc, #160]	@ (8000bc0 <MX_GPIO_Init+0x130>)
 8000b1e:	f001 f861 	bl	8001be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 8000b28:	4826      	ldr	r0, [pc, #152]	@ (8000bc4 <MX_GPIO_Init+0x134>)
 8000b2a:	f001 f85b 	bl	8001be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8000b2e:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	481e      	ldr	r0, [pc, #120]	@ (8000bc0 <MX_GPIO_Init+0x130>)
 8000b48:	f000 fea0 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin;
 8000b4c:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8000b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	4817      	ldr	r0, [pc, #92]	@ (8000bc4 <MX_GPIO_Init+0x134>)
 8000b66:	f000 fe91 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000b6a:	2380      	movs	r3, #128	@ 0x80
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4812      	ldr	r0, [pc, #72]	@ (8000bc8 <MX_GPIO_Init+0x138>)
 8000b7e:	f000 fe85 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000b82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	480a      	ldr	r0, [pc, #40]	@ (8000bc0 <MX_GPIO_Init+0x130>)
 8000b98:	f000 fe78 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000b9c:	2340      	movs	r3, #64	@ 0x40
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_GPIO_Init+0x134>)
 8000bb0:	f000 fe6c 	bl	800188c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb4:	bf00      	nop
 8000bb6:	3728      	adds	r7, #40	@ 0x28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	40020400 	.word	0x40020400
 8000bc8:	40020800 	.word	0x40020800

08000bcc <StartKeypadTask>:
 * @brief  Function implementing the KeypadTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartKeypadTask */
void StartKeypadTask(void *argument) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */

	char code[5];
	int numInputs = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]

	for (;;) {
		key = Get_Key();
 8000bd8:	f7ff fca4 	bl	8000524 <Get_Key>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b24      	ldr	r3, [pc, #144]	@ (8000c74 <StartKeypadTask+0xa8>)
 8000be2:	701a      	strb	r2, [r3, #0]
		hold[numInputs] = key;
 8000be4:	4b23      	ldr	r3, [pc, #140]	@ (8000c74 <StartKeypadTask+0xa8>)
 8000be6:	7819      	ldrb	r1, [r3, #0]
 8000be8:	4a23      	ldr	r2, [pc, #140]	@ (8000c78 <StartKeypadTask+0xac>)
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	4413      	add	r3, r2
 8000bee:	460a      	mov	r2, r1
 8000bf0:	701a      	strb	r2, [r3, #0]
		numInputs++;
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	61fb      	str	r3, [r7, #28]

		if(numInputs == 4) {
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	d1ec      	bne.n	8000bd8 <StartKeypadTask+0xc>
			if(armed == 0) {
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <StartKeypadTask+0xb0>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d109      	bne.n	8000c1a <StartKeypadTask+0x4e>
				strcpy(code, hold);
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	491b      	ldr	r1, [pc, #108]	@ (8000c78 <StartKeypadTask+0xac>)
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f005 ff8f 	bl	8006b30 <strcpy>
				armed = 1;
 8000c12:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <StartKeypadTask+0xb0>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	e01a      	b.n	8000c50 <StartKeypadTask+0x84>

			} else {
				if(strcmp(code, hold) == 0) {
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	4916      	ldr	r1, [pc, #88]	@ (8000c78 <StartKeypadTask+0xac>)
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff faf5 	bl	8000210 <strcmp>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d111      	bne.n	8000c50 <StartKeypadTask+0x84>
					armed = 0;
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <StartKeypadTask+0xb0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
					for(int i = 0; i < 4; i++) {
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
 8000c36:	e008      	b.n	8000c4a <StartKeypadTask+0x7e>
						code[i] = '\0';
 8000c38:	f107 020c 	add.w	r2, r7, #12
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	4413      	add	r3, r2
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < 4; i++) {
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	3301      	adds	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	ddf3      	ble.n	8000c38 <StartKeypadTask+0x6c>
					}
				}
			}

			for(int i = 0; i < 4; i++) {
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	e007      	b.n	8000c66 <StartKeypadTask+0x9a>
				hold[i] = '\0';
 8000c56:	4a08      	ldr	r2, [pc, #32]	@ (8000c78 <StartKeypadTask+0xac>)
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	3301      	adds	r3, #1
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	ddf4      	ble.n	8000c56 <StartKeypadTask+0x8a>
			}
			numInputs = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
		key = Get_Key();
 8000c70:	e7b2      	b.n	8000bd8 <StartKeypadTask+0xc>
 8000c72:	bf00      	nop
 8000c74:	20000098 	.word	0x20000098
 8000c78:	20000144 	.word	0x20000144
 8000c7c:	2000014c 	.word	0x2000014c

08000c80 <StartLCDTask>:
 * @brief Function implementing the LCDTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLCDTask */
void StartLCDTask(void *argument) {
 8000c80:	b5b0      	push	{r4, r5, r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartLCDTask */
	SSD1306_Init();
 8000c88:	f000 f884 	bl	8000d94 <SSD1306_Init>
	/* Infinite loop */
	for (;;) {
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f000 f973 	bl	8000f78 <SSD1306_Fill>
		SSD1306_GotoXY(0, 0);
 8000c92:	2100      	movs	r1, #0
 8000c94:	2000      	movs	r0, #0
 8000c96:	f000 f9e7 	bl	8001068 <SSD1306_GotoXY>
		SSD1306_Puts(armed_messages[armed], &Font_11x18, 1);
 8000c9a:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <StartLCDTask+0x7c>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	4a16      	ldr	r2, [pc, #88]	@ (8000d00 <StartLCDTask+0x80>)
 8000ca8:	4413      	add	r3, r2
 8000caa:	2201      	movs	r2, #1
 8000cac:	4915      	ldr	r1, [pc, #84]	@ (8000d04 <StartLCDTask+0x84>)
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fa6e 	bl	8001190 <SSD1306_Puts>

		if(strlen(hold) > 0) {
 8000cb4:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <StartLCDTask+0x88>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d01b      	beq.n	8000cf4 <StartLCDTask+0x74>

			char stars[4][5] = {"*", "**", "***", "****"};
 8000cbc:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <StartLCDTask+0x8c>)
 8000cbe:	f107 040c 	add.w	r4, r7, #12
 8000cc2:	461d      	mov	r5, r3
 8000cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc8:	682b      	ldr	r3, [r5, #0]
 8000cca:	6023      	str	r3, [r4, #0]

			SSD1306_GotoXY(0, 30);
 8000ccc:	211e      	movs	r1, #30
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f9ca 	bl	8001068 <SSD1306_GotoXY>
			SSD1306_Puts(stars[strlen(hold) - 1], &Font_11x18, 1);
 8000cd4:	480c      	ldr	r0, [pc, #48]	@ (8000d08 <StartLCDTask+0x88>)
 8000cd6:	f7ff faa5 	bl	8000224 <strlen>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	1e5a      	subs	r2, r3, #1
 8000cde:	f107 010c 	add.w	r1, r7, #12
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	4413      	add	r3, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	2201      	movs	r2, #1
 8000cec:	4905      	ldr	r1, [pc, #20]	@ (8000d04 <StartLCDTask+0x84>)
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 fa4e 	bl	8001190 <SSD1306_Puts>
		}

		SSD1306_UpdateScreen();
 8000cf4:	f000 f912 	bl	8000f1c <SSD1306_UpdateScreen>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000cf8:	e7c8      	b.n	8000c8c <StartLCDTask+0xc>
 8000cfa:	bf00      	nop
 8000cfc:	2000014c 	.word	0x2000014c
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20000144 	.word	0x20000144
 8000d0c:	08006c40 	.word	0x08006c40

08000d10 <StartLEDsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLEDsTask */
void StartLEDsTask(void *argument)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDsTask */

	/* Infinite loop */
	for (;;) {
		// Not armed
		while (armed) {
 8000d18:	e00a      	b.n	8000d30 <StartLEDsTask+0x20>
			// Turn on Green LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2140      	movs	r1, #64	@ 0x40
 8000d1e:	480f      	ldr	r0, [pc, #60]	@ (8000d5c <StartLEDsTask+0x4c>)
 8000d20:	f000 ff60 	bl	8001be4 <HAL_GPIO_WritePin>

			// Turn off Red LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d2a:	480c      	ldr	r0, [pc, #48]	@ (8000d5c <StartLEDsTask+0x4c>)
 8000d2c:	f000 ff5a 	bl	8001be4 <HAL_GPIO_WritePin>
		while (armed) {
 8000d30:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <StartLEDsTask+0x50>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1f0      	bne.n	8000d1a <StartLEDsTask+0xa>
		}

		// Armed
		while (!armed) {
 8000d38:	e00a      	b.n	8000d50 <StartLEDsTask+0x40>
			// Turn off Green LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2140      	movs	r1, #64	@ 0x40
 8000d3e:	4807      	ldr	r0, [pc, #28]	@ (8000d5c <StartLEDsTask+0x4c>)
 8000d40:	f000 ff50 	bl	8001be4 <HAL_GPIO_WritePin>

			// Turn on Red LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d4a:	4804      	ldr	r0, [pc, #16]	@ (8000d5c <StartLEDsTask+0x4c>)
 8000d4c:	f000 ff4a 	bl	8001be4 <HAL_GPIO_WritePin>
		while (!armed) {
 8000d50:	4b03      	ldr	r3, [pc, #12]	@ (8000d60 <StartLEDsTask+0x50>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d0f0      	beq.n	8000d3a <StartLEDsTask+0x2a>
		while (armed) {
 8000d58:	e7ea      	b.n	8000d30 <StartLEDsTask+0x20>
 8000d5a:	bf00      	nop
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	2000014c 	.word	0x2000014c

08000d64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d101      	bne.n	8000d7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d76:	f000 fc87 	bl	8001688 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40001000 	.word	0x40001000

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <Error_Handler+0x8>

08000d94 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000d9a:	f000 fa1f 	bl	80011dc <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000d9e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000da2:	2201      	movs	r2, #1
 8000da4:	2178      	movs	r1, #120	@ 0x78
 8000da6:	485b      	ldr	r0, [pc, #364]	@ (8000f14 <SSD1306_Init+0x180>)
 8000da8:	f001 f992 	bl	80020d0 <HAL_I2C_IsDeviceReady>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e0a9      	b.n	8000f0a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000db6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000dba:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000dbc:	e002      	b.n	8000dc4 <SSD1306_Init+0x30>
		p--;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f9      	bne.n	8000dbe <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000dca:	22ae      	movs	r2, #174	@ 0xae
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2078      	movs	r0, #120	@ 0x78
 8000dd0:	f000 fa80 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000dd4:	2220      	movs	r2, #32
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2078      	movs	r0, #120	@ 0x78
 8000dda:	f000 fa7b 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000dde:	2210      	movs	r2, #16
 8000de0:	2100      	movs	r1, #0
 8000de2:	2078      	movs	r0, #120	@ 0x78
 8000de4:	f000 fa76 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000de8:	22b0      	movs	r2, #176	@ 0xb0
 8000dea:	2100      	movs	r1, #0
 8000dec:	2078      	movs	r0, #120	@ 0x78
 8000dee:	f000 fa71 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000df2:	22c8      	movs	r2, #200	@ 0xc8
 8000df4:	2100      	movs	r1, #0
 8000df6:	2078      	movs	r0, #120	@ 0x78
 8000df8:	f000 fa6c 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2078      	movs	r0, #120	@ 0x78
 8000e02:	f000 fa67 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000e06:	2210      	movs	r2, #16
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2078      	movs	r0, #120	@ 0x78
 8000e0c:	f000 fa62 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000e10:	2240      	movs	r2, #64	@ 0x40
 8000e12:	2100      	movs	r1, #0
 8000e14:	2078      	movs	r0, #120	@ 0x78
 8000e16:	f000 fa5d 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000e1a:	2281      	movs	r2, #129	@ 0x81
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2078      	movs	r0, #120	@ 0x78
 8000e20:	f000 fa58 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000e24:	22ff      	movs	r2, #255	@ 0xff
 8000e26:	2100      	movs	r1, #0
 8000e28:	2078      	movs	r0, #120	@ 0x78
 8000e2a:	f000 fa53 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000e2e:	22a1      	movs	r2, #161	@ 0xa1
 8000e30:	2100      	movs	r1, #0
 8000e32:	2078      	movs	r0, #120	@ 0x78
 8000e34:	f000 fa4e 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000e38:	22a6      	movs	r2, #166	@ 0xa6
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2078      	movs	r0, #120	@ 0x78
 8000e3e:	f000 fa49 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000e42:	22a8      	movs	r2, #168	@ 0xa8
 8000e44:	2100      	movs	r1, #0
 8000e46:	2078      	movs	r0, #120	@ 0x78
 8000e48:	f000 fa44 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000e4c:	223f      	movs	r2, #63	@ 0x3f
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2078      	movs	r0, #120	@ 0x78
 8000e52:	f000 fa3f 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000e56:	22a4      	movs	r2, #164	@ 0xa4
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2078      	movs	r0, #120	@ 0x78
 8000e5c:	f000 fa3a 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000e60:	22d3      	movs	r2, #211	@ 0xd3
 8000e62:	2100      	movs	r1, #0
 8000e64:	2078      	movs	r0, #120	@ 0x78
 8000e66:	f000 fa35 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2078      	movs	r0, #120	@ 0x78
 8000e70:	f000 fa30 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000e74:	22d5      	movs	r2, #213	@ 0xd5
 8000e76:	2100      	movs	r1, #0
 8000e78:	2078      	movs	r0, #120	@ 0x78
 8000e7a:	f000 fa2b 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000e7e:	22f0      	movs	r2, #240	@ 0xf0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2078      	movs	r0, #120	@ 0x78
 8000e84:	f000 fa26 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000e88:	22d9      	movs	r2, #217	@ 0xd9
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2078      	movs	r0, #120	@ 0x78
 8000e8e:	f000 fa21 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000e92:	2222      	movs	r2, #34	@ 0x22
 8000e94:	2100      	movs	r1, #0
 8000e96:	2078      	movs	r0, #120	@ 0x78
 8000e98:	f000 fa1c 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000e9c:	22da      	movs	r2, #218	@ 0xda
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2078      	movs	r0, #120	@ 0x78
 8000ea2:	f000 fa17 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000ea6:	2212      	movs	r2, #18
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2078      	movs	r0, #120	@ 0x78
 8000eac:	f000 fa12 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000eb0:	22db      	movs	r2, #219	@ 0xdb
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2078      	movs	r0, #120	@ 0x78
 8000eb6:	f000 fa0d 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000eba:	2220      	movs	r2, #32
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2078      	movs	r0, #120	@ 0x78
 8000ec0:	f000 fa08 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000ec4:	228d      	movs	r2, #141	@ 0x8d
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2078      	movs	r0, #120	@ 0x78
 8000eca:	f000 fa03 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000ece:	2214      	movs	r2, #20
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2078      	movs	r0, #120	@ 0x78
 8000ed4:	f000 f9fe 	bl	80012d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000ed8:	22af      	movs	r2, #175	@ 0xaf
 8000eda:	2100      	movs	r1, #0
 8000edc:	2078      	movs	r0, #120	@ 0x78
 8000ede:	f000 f9f9 	bl	80012d4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000ee2:	222e      	movs	r2, #46	@ 0x2e
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2078      	movs	r0, #120	@ 0x78
 8000ee8:	f000 f9f4 	bl	80012d4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000eec:	2000      	movs	r0, #0
 8000eee:	f000 f843 	bl	8000f78 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000ef2:	f000 f813 	bl	8000f1c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <SSD1306_Init+0x184>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <SSD1306_Init+0x184>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000f02:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <SSD1306_Init+0x184>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000f08:	2301      	movs	r3, #1
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000009c 	.word	0x2000009c
 8000f18:	20000550 	.word	0x20000550

08000f1c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000f22:	2300      	movs	r3, #0
 8000f24:	71fb      	strb	r3, [r7, #7]
 8000f26:	e01d      	b.n	8000f64 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	3b50      	subs	r3, #80	@ 0x50
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	461a      	mov	r2, r3
 8000f30:	2100      	movs	r1, #0
 8000f32:	2078      	movs	r0, #120	@ 0x78
 8000f34:	f000 f9ce 	bl	80012d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2078      	movs	r0, #120	@ 0x78
 8000f3e:	f000 f9c9 	bl	80012d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000f42:	2210      	movs	r2, #16
 8000f44:	2100      	movs	r1, #0
 8000f46:	2078      	movs	r0, #120	@ 0x78
 8000f48:	f000 f9c4 	bl	80012d4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	01db      	lsls	r3, r3, #7
 8000f50:	4a08      	ldr	r2, [pc, #32]	@ (8000f74 <SSD1306_UpdateScreen+0x58>)
 8000f52:	441a      	add	r2, r3
 8000f54:	2380      	movs	r3, #128	@ 0x80
 8000f56:	2140      	movs	r1, #64	@ 0x40
 8000f58:	2078      	movs	r0, #120	@ 0x78
 8000f5a:	f000 f955 	bl	8001208 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	3301      	adds	r3, #1
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b07      	cmp	r3, #7
 8000f68:	d9de      	bls.n	8000f28 <SSD1306_UpdateScreen+0xc>
	}
}
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000150 	.word	0x20000150

08000f78 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <SSD1306_Fill+0x14>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	e000      	b.n	8000f8e <SSD1306_Fill+0x16>
 8000f8c:	23ff      	movs	r3, #255	@ 0xff
 8000f8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f92:	4619      	mov	r1, r3
 8000f94:	4803      	ldr	r0, [pc, #12]	@ (8000fa4 <SSD1306_Fill+0x2c>)
 8000f96:	f005 fd47 	bl	8006a28 <memset>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000150 	.word	0x20000150

08000fa8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	80fb      	strh	r3, [r7, #6]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	80bb      	strh	r3, [r7, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	70fb      	strb	r3, [r7, #3]
	if (
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fbe:	d848      	bhi.n	8001052 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000fc0:	88bb      	ldrh	r3, [r7, #4]
 8000fc2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fc4:	d845      	bhi.n	8001052 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000fc6:	4b26      	ldr	r3, [pc, #152]	@ (8001060 <SSD1306_DrawPixel+0xb8>)
 8000fc8:	791b      	ldrb	r3, [r3, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d006      	beq.n	8000fdc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	bf0c      	ite	eq
 8000fd4:	2301      	moveq	r3, #1
 8000fd6:	2300      	movne	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d11a      	bne.n	8001018 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000fe2:	88fa      	ldrh	r2, [r7, #6]
 8000fe4:	88bb      	ldrh	r3, [r7, #4]
 8000fe6:	08db      	lsrs	r3, r3, #3
 8000fe8:	b298      	uxth	r0, r3
 8000fea:	4603      	mov	r3, r0
 8000fec:	01db      	lsls	r3, r3, #7
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8001064 <SSD1306_DrawPixel+0xbc>)
 8000ff2:	5cd3      	ldrb	r3, [r2, r3]
 8000ff4:	b25a      	sxtb	r2, r3
 8000ff6:	88bb      	ldrh	r3, [r7, #4]
 8000ff8:	f003 0307 	and.w	r3, r3, #7
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	b25b      	sxtb	r3, r3
 8001004:	4313      	orrs	r3, r2
 8001006:	b259      	sxtb	r1, r3
 8001008:	88fa      	ldrh	r2, [r7, #6]
 800100a:	4603      	mov	r3, r0
 800100c:	01db      	lsls	r3, r3, #7
 800100e:	4413      	add	r3, r2
 8001010:	b2c9      	uxtb	r1, r1
 8001012:	4a14      	ldr	r2, [pc, #80]	@ (8001064 <SSD1306_DrawPixel+0xbc>)
 8001014:	54d1      	strb	r1, [r2, r3]
 8001016:	e01d      	b.n	8001054 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001018:	88fa      	ldrh	r2, [r7, #6]
 800101a:	88bb      	ldrh	r3, [r7, #4]
 800101c:	08db      	lsrs	r3, r3, #3
 800101e:	b298      	uxth	r0, r3
 8001020:	4603      	mov	r3, r0
 8001022:	01db      	lsls	r3, r3, #7
 8001024:	4413      	add	r3, r2
 8001026:	4a0f      	ldr	r2, [pc, #60]	@ (8001064 <SSD1306_DrawPixel+0xbc>)
 8001028:	5cd3      	ldrb	r3, [r2, r3]
 800102a:	b25a      	sxtb	r2, r3
 800102c:	88bb      	ldrh	r3, [r7, #4]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	2101      	movs	r1, #1
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	b25b      	sxtb	r3, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	b25b      	sxtb	r3, r3
 800103e:	4013      	ands	r3, r2
 8001040:	b259      	sxtb	r1, r3
 8001042:	88fa      	ldrh	r2, [r7, #6]
 8001044:	4603      	mov	r3, r0
 8001046:	01db      	lsls	r3, r3, #7
 8001048:	4413      	add	r3, r2
 800104a:	b2c9      	uxtb	r1, r1
 800104c:	4a05      	ldr	r2, [pc, #20]	@ (8001064 <SSD1306_DrawPixel+0xbc>)
 800104e:	54d1      	strb	r1, [r2, r3]
 8001050:	e000      	b.n	8001054 <SSD1306_DrawPixel+0xac>
		return;
 8001052:	bf00      	nop
	}
}
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000550 	.word	0x20000550
 8001064:	20000150 	.word	0x20000150

08001068 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	460a      	mov	r2, r1
 8001072:	80fb      	strh	r3, [r7, #6]
 8001074:	4613      	mov	r3, r2
 8001076:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001078:	4a05      	ldr	r2, [pc, #20]	@ (8001090 <SSD1306_GotoXY+0x28>)
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800107e:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <SSD1306_GotoXY+0x28>)
 8001080:	88bb      	ldrh	r3, [r7, #4]
 8001082:	8053      	strh	r3, [r2, #2]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	20000550 	.word	0x20000550

08001094 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
 80010a0:	4613      	mov	r3, r2
 80010a2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80010a4:	4b39      	ldr	r3, [pc, #228]	@ (800118c <SSD1306_Putc+0xf8>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4413      	add	r3, r2
	if (
 80010b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80010b2:	dc07      	bgt.n	80010c4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80010b4:	4b35      	ldr	r3, [pc, #212]	@ (800118c <SSD1306_Putc+0xf8>)
 80010b6:	885b      	ldrh	r3, [r3, #2]
 80010b8:	461a      	mov	r2, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	785b      	ldrb	r3, [r3, #1]
 80010be:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80010c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80010c2:	dd01      	ble.n	80010c8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e05d      	b.n	8001184 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	e04b      	b.n	8001166 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	3b20      	subs	r3, #32
 80010d6:	6839      	ldr	r1, [r7, #0]
 80010d8:	7849      	ldrb	r1, [r1, #1]
 80010da:	fb01 f303 	mul.w	r3, r1, r3
 80010de:	4619      	mov	r1, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	440b      	add	r3, r1
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	e030      	b.n	8001154 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d010      	beq.n	8001124 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001102:	4b22      	ldr	r3, [pc, #136]	@ (800118c <SSD1306_Putc+0xf8>)
 8001104:	881a      	ldrh	r2, [r3, #0]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	b29b      	uxth	r3, r3
 800110a:	4413      	add	r3, r2
 800110c:	b298      	uxth	r0, r3
 800110e:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <SSD1306_Putc+0xf8>)
 8001110:	885a      	ldrh	r2, [r3, #2]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	b29b      	uxth	r3, r3
 8001116:	4413      	add	r3, r2
 8001118:	b29b      	uxth	r3, r3
 800111a:	79ba      	ldrb	r2, [r7, #6]
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff ff43 	bl	8000fa8 <SSD1306_DrawPixel>
 8001122:	e014      	b.n	800114e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001124:	4b19      	ldr	r3, [pc, #100]	@ (800118c <SSD1306_Putc+0xf8>)
 8001126:	881a      	ldrh	r2, [r3, #0]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	b29b      	uxth	r3, r3
 800112c:	4413      	add	r3, r2
 800112e:	b298      	uxth	r0, r3
 8001130:	4b16      	ldr	r3, [pc, #88]	@ (800118c <SSD1306_Putc+0xf8>)
 8001132:	885a      	ldrh	r2, [r3, #2]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	b29b      	uxth	r3, r3
 8001138:	4413      	add	r3, r2
 800113a:	b299      	uxth	r1, r3
 800113c:	79bb      	ldrb	r3, [r7, #6]
 800113e:	2b00      	cmp	r3, #0
 8001140:	bf0c      	ite	eq
 8001142:	2301      	moveq	r3, #1
 8001144:	2300      	movne	r3, #0
 8001146:	b2db      	uxtb	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	f7ff ff2d 	bl	8000fa8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	3301      	adds	r3, #1
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4293      	cmp	r3, r2
 800115e:	d3c8      	bcc.n	80010f2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	3301      	adds	r3, #1
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	785b      	ldrb	r3, [r3, #1]
 800116a:	461a      	mov	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	4293      	cmp	r3, r2
 8001170:	d3ad      	bcc.n	80010ce <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <SSD1306_Putc+0xf8>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	7812      	ldrb	r2, [r2, #0]
 800117a:	4413      	add	r3, r2
 800117c:	b29a      	uxth	r2, r3
 800117e:	4b03      	ldr	r3, [pc, #12]	@ (800118c <SSD1306_Putc+0xf8>)
 8001180:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001182:	79fb      	ldrb	r3, [r7, #7]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000550 	.word	0x20000550

08001190 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	4613      	mov	r3, r2
 800119c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800119e:	e012      	b.n	80011c6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	79fa      	ldrb	r2, [r7, #7]
 80011a6:	68b9      	ldr	r1, [r7, #8]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff73 	bl	8001094 <SSD1306_Putc>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d002      	beq.n	80011c0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	e008      	b.n	80011d2 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3301      	adds	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1e8      	bne.n	80011a0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	781b      	ldrb	r3, [r3, #0]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80011e2:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <ssd1306_I2C_Init+0x28>)
 80011e4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011e6:	e002      	b.n	80011ee <ssd1306_I2C_Init+0x12>
		p--;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1f9      	bne.n	80011e8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	0003d090 	.word	0x0003d090

08001208 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b0c7      	sub	sp, #284	@ 0x11c
 800120c:	af02      	add	r7, sp, #8
 800120e:	4604      	mov	r4, r0
 8001210:	4608      	mov	r0, r1
 8001212:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001216:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800121a:	600a      	str	r2, [r1, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001222:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001226:	4622      	mov	r2, r4
 8001228:	701a      	strb	r2, [r3, #0]
 800122a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800122e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001232:	4602      	mov	r2, r0
 8001234:	701a      	strb	r2, [r3, #0]
 8001236:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800123a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800123e:	460a      	mov	r2, r1
 8001240:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001242:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001246:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800124a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800124e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001252:	7812      	ldrb	r2, [r2, #0]
 8001254:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001256:	2300      	movs	r3, #0
 8001258:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800125c:	e015      	b.n	800128a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800125e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001262:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001266:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	441a      	add	r2, r3
 800126e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001272:	3301      	adds	r3, #1
 8001274:	7811      	ldrb	r1, [r2, #0]
 8001276:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800127a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800127e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001280:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001284:	3301      	adds	r3, #1
 8001286:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800128a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800128e:	b29b      	uxth	r3, r3
 8001290:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001294:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001298:	8812      	ldrh	r2, [r2, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	d8df      	bhi.n	800125e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800129e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012a2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b299      	uxth	r1, r3
 80012aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	f107 020c 	add.w	r2, r7, #12
 80012bc:	200a      	movs	r0, #10
 80012be:	9000      	str	r0, [sp, #0]
 80012c0:	4803      	ldr	r0, [pc, #12]	@ (80012d0 <ssd1306_I2C_WriteMulti+0xc8>)
 80012c2:	f000 fe07 	bl	8001ed4 <HAL_I2C_Master_Transmit>
}
 80012c6:	bf00      	nop
 80012c8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd90      	pop	{r4, r7, pc}
 80012d0:	2000009c 	.word	0x2000009c

080012d4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af02      	add	r7, sp, #8
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
 80012de:	460b      	mov	r3, r1
 80012e0:	71bb      	strb	r3, [r7, #6]
 80012e2:	4613      	mov	r3, r2
 80012e4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80012e6:	79bb      	ldrb	r3, [r7, #6]
 80012e8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80012ea:	797b      	ldrb	r3, [r7, #5]
 80012ec:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	b299      	uxth	r1, r3
 80012f2:	f107 020c 	add.w	r2, r7, #12
 80012f6:	230a      	movs	r3, #10
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2302      	movs	r3, #2
 80012fc:	4803      	ldr	r0, [pc, #12]	@ (800130c <ssd1306_I2C_Write+0x38>)
 80012fe:	f000 fde9 	bl	8001ed4 <HAL_I2C_Master_Transmit>
}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000009c 	.word	0x2000009c

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <HAL_MspInit+0x54>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	4a11      	ldr	r2, [pc, #68]	@ (8001364 <HAL_MspInit+0x54>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001324:	6453      	str	r3, [r2, #68]	@ 0x44
 8001326:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <HAL_MspInit+0x54>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4b0b      	ldr	r3, [pc, #44]	@ (8001364 <HAL_MspInit+0x54>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133a:	4a0a      	ldr	r2, [pc, #40]	@ (8001364 <HAL_MspInit+0x54>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001340:	6413      	str	r3, [r2, #64]	@ 0x40
 8001342:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <HAL_MspInit+0x54>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	210f      	movs	r1, #15
 8001352:	f06f 0001 	mvn.w	r0, #1
 8001356:	f000 fa6f 	bl	8001838 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800

08001368 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	@ 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a19      	ldr	r2, [pc, #100]	@ (80013ec <HAL_I2C_MspInit+0x84>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d12c      	bne.n	80013e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <HAL_I2C_MspInit+0x88>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a17      	ldr	r2, [pc, #92]	@ (80013f0 <HAL_I2C_MspInit+0x88>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <HAL_I2C_MspInit+0x88>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ac:	2312      	movs	r3, #18
 80013ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013b8:	2304      	movs	r3, #4
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	480c      	ldr	r0, [pc, #48]	@ (80013f4 <HAL_I2C_MspInit+0x8c>)
 80013c4:	f000 fa62 	bl	800188c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <HAL_I2C_MspInit+0x88>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d0:	4a07      	ldr	r2, [pc, #28]	@ (80013f0 <HAL_I2C_MspInit+0x88>)
 80013d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d8:	4b05      	ldr	r3, [pc, #20]	@ (80013f0 <HAL_I2C_MspInit+0x88>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80013e4:	bf00      	nop
 80013e6:	3728      	adds	r7, #40	@ 0x28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40005400 	.word	0x40005400
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020400 	.word	0x40020400

080013f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	@ 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a19      	ldr	r2, [pc, #100]	@ (800147c <HAL_UART_MspInit+0x84>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d12b      	bne.n	8001472 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <HAL_UART_MspInit+0x88>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	4a17      	ldr	r2, [pc, #92]	@ (8001480 <HAL_UART_MspInit+0x88>)
 8001424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001428:	6413      	str	r3, [r2, #64]	@ 0x40
 800142a:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <HAL_UART_MspInit+0x88>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <HAL_UART_MspInit+0x88>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a10      	ldr	r2, [pc, #64]	@ (8001480 <HAL_UART_MspInit+0x88>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <HAL_UART_MspInit+0x88>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001452:	230c      	movs	r3, #12
 8001454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001462:	2307      	movs	r3, #7
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	4805      	ldr	r0, [pc, #20]	@ (8001484 <HAL_UART_MspInit+0x8c>)
 800146e:	f000 fa0d 	bl	800188c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	@ 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40004400 	.word	0x40004400
 8001480:	40023800 	.word	0x40023800
 8001484:	40020000 	.word	0x40020000

08001488 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08e      	sub	sp, #56	@ 0x38
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	4b33      	ldr	r3, [pc, #204]	@ (800156c <HAL_InitTick+0xe4>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	4a32      	ldr	r2, [pc, #200]	@ (800156c <HAL_InitTick+0xe4>)
 80014a2:	f043 0310 	orr.w	r3, r3, #16
 80014a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a8:	4b30      	ldr	r3, [pc, #192]	@ (800156c <HAL_InitTick+0xe4>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ac:	f003 0310 	and.w	r3, r3, #16
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014b4:	f107 0210 	add.w	r2, r7, #16
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4611      	mov	r1, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f001 faaa 	bl	8002a18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014c4:	6a3b      	ldr	r3, [r7, #32]
 80014c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d103      	bne.n	80014d6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014ce:	f001 fa7b 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 80014d2:	6378      	str	r0, [r7, #52]	@ 0x34
 80014d4:	e004      	b.n	80014e0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014d6:	f001 fa77 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 80014da:	4603      	mov	r3, r0
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014e2:	4a23      	ldr	r2, [pc, #140]	@ (8001570 <HAL_InitTick+0xe8>)
 80014e4:	fba2 2303 	umull	r2, r3, r2, r3
 80014e8:	0c9b      	lsrs	r3, r3, #18
 80014ea:	3b01      	subs	r3, #1
 80014ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014ee:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <HAL_InitTick+0xec>)
 80014f0:	4a21      	ldr	r2, [pc, #132]	@ (8001578 <HAL_InitTick+0xf0>)
 80014f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001574 <HAL_InitTick+0xec>)
 80014f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014fa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001574 <HAL_InitTick+0xec>)
 80014fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001500:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001502:	4b1c      	ldr	r3, [pc, #112]	@ (8001574 <HAL_InitTick+0xec>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001508:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <HAL_InitTick+0xec>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150e:	4b19      	ldr	r3, [pc, #100]	@ (8001574 <HAL_InitTick+0xec>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001514:	4817      	ldr	r0, [pc, #92]	@ (8001574 <HAL_InitTick+0xec>)
 8001516:	f001 ff7f 	bl	8003418 <HAL_TIM_Base_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001520:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001524:	2b00      	cmp	r3, #0
 8001526:	d11b      	bne.n	8001560 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001528:	4812      	ldr	r0, [pc, #72]	@ (8001574 <HAL_InitTick+0xec>)
 800152a:	f001 ffcf 	bl	80034cc <HAL_TIM_Base_Start_IT>
 800152e:	4603      	mov	r3, r0
 8001530:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001534:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001538:	2b00      	cmp	r3, #0
 800153a:	d111      	bne.n	8001560 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800153c:	2036      	movs	r0, #54	@ 0x36
 800153e:	f000 f997 	bl	8001870 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b0f      	cmp	r3, #15
 8001546:	d808      	bhi.n	800155a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001548:	2200      	movs	r2, #0
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	2036      	movs	r0, #54	@ 0x36
 800154e:	f000 f973 	bl	8001838 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001552:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <HAL_InitTick+0xf4>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	e002      	b.n	8001560 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001560:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001564:	4618      	mov	r0, r3
 8001566:	3738      	adds	r7, #56	@ 0x38
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	431bde83 	.word	0x431bde83
 8001574:	20000558 	.word	0x20000558
 8001578:	40001000 	.word	0x40001000
 800157c:	20000020 	.word	0x20000020

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <NMI_Handler+0x4>

08001588 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <HardFault_Handler+0x4>

08001590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <MemManage_Handler+0x4>

08001598 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015bc:	4802      	ldr	r0, [pc, #8]	@ (80015c8 <TIM6_DAC_IRQHandler+0x10>)
 80015be:	f001 fff5 	bl	80035ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000558 	.word	0x20000558

080015cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <SystemInit+0x20>)
 80015d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015d6:	4a05      	ldr	r2, [pc, #20]	@ (80015ec <SystemInit+0x20>)
 80015d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001628 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015f4:	f7ff ffea 	bl	80015cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015fa:	490d      	ldr	r1, [pc, #52]	@ (8001630 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001634 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001600:	e002      	b.n	8001608 <LoopCopyDataInit>

08001602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001606:	3304      	adds	r3, #4

08001608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800160c:	d3f9      	bcc.n	8001602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160e:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001610:	4c0a      	ldr	r4, [pc, #40]	@ (800163c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001614:	e001      	b.n	800161a <LoopFillZerobss>

08001616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001618:	3204      	adds	r2, #4

0800161a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800161c:	d3fb      	bcc.n	8001616 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800161e:	f005 fa61 	bl	8006ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001622:	f7ff f933 	bl	800088c <main>
  bx  lr    
 8001626:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001630:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001634:	08007a5c 	.word	0x08007a5c
  ldr r2, =_sbss
 8001638:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800163c:	200050cc 	.word	0x200050cc

08001640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC_IRQHandler>
	...

08001644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001648:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <HAL_Init+0x40>)
 800164e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001652:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001654:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <HAL_Init+0x40>)
 800165a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800165e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	@ (8001684 <HAL_Init+0x40>)
 8001666:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800166a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f8d8 	bl	8001822 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	200f      	movs	r0, #15
 8001674:	f7ff ff08 	bl	8001488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff fe4a 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023c00 	.word	0x40023c00

08001688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <HAL_IncTick+0x20>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <HAL_IncTick+0x24>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a04      	ldr	r2, [pc, #16]	@ (80016ac <HAL_IncTick+0x24>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000024 	.word	0x20000024
 80016ac:	200005a0 	.word	0x200005a0

080016b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b03      	ldr	r3, [pc, #12]	@ (80016c4 <HAL_GetTick+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200005a0 	.word	0x200005a0

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fa:	4a04      	ldr	r2, [pc, #16]	@ (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	@ (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	db0b      	blt.n	8001756 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	f003 021f 	and.w	r2, r3, #31
 8001744:	4907      	ldr	r1, [pc, #28]	@ (8001764 <__NVIC_EnableIRQ+0x38>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2001      	movs	r0, #1
 800174e:	fa00 f202 	lsl.w	r2, r0, r2
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100

08001768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	2b00      	cmp	r3, #0
 800177a:	db0a      	blt.n	8001792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	490c      	ldr	r1, [pc, #48]	@ (80017b4 <__NVIC_SetPriority+0x4c>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	0112      	lsls	r2, r2, #4
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	440b      	add	r3, r1
 800178c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001790:	e00a      	b.n	80017a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4908      	ldr	r1, [pc, #32]	@ (80017b8 <__NVIC_SetPriority+0x50>)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	3b04      	subs	r3, #4
 80017a0:	0112      	lsls	r2, r2, #4
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	440b      	add	r3, r1
 80017a6:	761a      	strb	r2, [r3, #24]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000e100 	.word	0xe000e100
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	@ 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f1c3 0307 	rsb	r3, r3, #7
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	bf28      	it	cs
 80017da:	2304      	movcs	r3, #4
 80017dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3304      	adds	r3, #4
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	d902      	bls.n	80017ec <NVIC_EncodePriority+0x30>
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3b03      	subs	r3, #3
 80017ea:	e000      	b.n	80017ee <NVIC_EncodePriority+0x32>
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43da      	mvns	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	401a      	ands	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001804:	f04f 31ff 	mov.w	r1, #4294967295
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43d9      	mvns	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	4313      	orrs	r3, r2
         );
}
 8001816:	4618      	mov	r0, r3
 8001818:	3724      	adds	r7, #36	@ 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ff4c 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800184a:	f7ff ff61 	bl	8001710 <__NVIC_GetPriorityGrouping>
 800184e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	68b9      	ldr	r1, [r7, #8]
 8001854:	6978      	ldr	r0, [r7, #20]
 8001856:	f7ff ffb1 	bl	80017bc <NVIC_EncodePriority>
 800185a:	4602      	mov	r2, r0
 800185c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff80 	bl	8001768 <__NVIC_SetPriority>
}
 8001868:	bf00      	nop
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff54 	bl	800172c <__NVIC_EnableIRQ>
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	@ 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	e165      	b.n	8001b74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a8:	2201      	movs	r2, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 8154 	bne.w	8001b6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d005      	beq.n	80018de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d130      	bne.n	8001940 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	2203      	movs	r2, #3
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001914:	2201      	movs	r2, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 0201 	and.w	r2, r3, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b03      	cmp	r3, #3
 800194a:	d017      	beq.n	800197c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d123      	bne.n	80019d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	08da      	lsrs	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3208      	adds	r2, #8
 8001990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	08da      	lsrs	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3208      	adds	r2, #8
 80019ca:	69b9      	ldr	r1, [r7, #24]
 80019cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0203 	and.w	r2, r3, #3
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80ae 	beq.w	8001b6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b5d      	ldr	r3, [pc, #372]	@ (8001b8c <HAL_GPIO_Init+0x300>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1a:	4a5c      	ldr	r2, [pc, #368]	@ (8001b8c <HAL_GPIO_Init+0x300>)
 8001a1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a22:	4b5a      	ldr	r3, [pc, #360]	@ (8001b8c <HAL_GPIO_Init+0x300>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a2e:	4a58      	ldr	r2, [pc, #352]	@ (8001b90 <HAL_GPIO_Init+0x304>)
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	3302      	adds	r3, #2
 8001a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	220f      	movs	r2, #15
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4f      	ldr	r2, [pc, #316]	@ (8001b94 <HAL_GPIO_Init+0x308>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d025      	beq.n	8001aa6 <HAL_GPIO_Init+0x21a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4e      	ldr	r2, [pc, #312]	@ (8001b98 <HAL_GPIO_Init+0x30c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d01f      	beq.n	8001aa2 <HAL_GPIO_Init+0x216>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4d      	ldr	r2, [pc, #308]	@ (8001b9c <HAL_GPIO_Init+0x310>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d019      	beq.n	8001a9e <HAL_GPIO_Init+0x212>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ba0 <HAL_GPIO_Init+0x314>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d013      	beq.n	8001a9a <HAL_GPIO_Init+0x20e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4b      	ldr	r2, [pc, #300]	@ (8001ba4 <HAL_GPIO_Init+0x318>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00d      	beq.n	8001a96 <HAL_GPIO_Init+0x20a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a4a      	ldr	r2, [pc, #296]	@ (8001ba8 <HAL_GPIO_Init+0x31c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d007      	beq.n	8001a92 <HAL_GPIO_Init+0x206>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a49      	ldr	r2, [pc, #292]	@ (8001bac <HAL_GPIO_Init+0x320>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d101      	bne.n	8001a8e <HAL_GPIO_Init+0x202>
 8001a8a:	2306      	movs	r3, #6
 8001a8c:	e00c      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001a8e:	2307      	movs	r3, #7
 8001a90:	e00a      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001a92:	2305      	movs	r3, #5
 8001a94:	e008      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001a96:	2304      	movs	r3, #4
 8001a98:	e006      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e004      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e002      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <HAL_GPIO_Init+0x21c>
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	69fa      	ldr	r2, [r7, #28]
 8001aaa:	f002 0203 	and.w	r2, r2, #3
 8001aae:	0092      	lsls	r2, r2, #2
 8001ab0:	4093      	lsls	r3, r2
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab8:	4935      	ldr	r1, [pc, #212]	@ (8001b90 <HAL_GPIO_Init+0x304>)
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	3302      	adds	r3, #2
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ac6:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb0 <HAL_GPIO_Init+0x324>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aea:	4a31      	ldr	r2, [pc, #196]	@ (8001bb0 <HAL_GPIO_Init+0x324>)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af0:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb0 <HAL_GPIO_Init+0x324>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b14:	4a26      	ldr	r2, [pc, #152]	@ (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b1a:	4b25      	ldr	r3, [pc, #148]	@ (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b44:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b68:	4a11      	ldr	r2, [pc, #68]	@ (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3301      	adds	r3, #1
 8001b72:	61fb      	str	r3, [r7, #28]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	2b0f      	cmp	r3, #15
 8001b78:	f67f ae96 	bls.w	80018a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	3724      	adds	r7, #36	@ 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40013800 	.word	0x40013800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	40020800 	.word	0x40020800
 8001ba0:	40020c00 	.word	0x40020c00
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40021400 	.word	0x40021400
 8001bac:	40021800 	.word	0x40021800
 8001bb0:	40013c00 	.word	0x40013c00

08001bb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d002      	beq.n	8001bd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	73fb      	strb	r3, [r7, #15]
 8001bd0:	e001      	b.n	8001bd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf4:	787b      	ldrb	r3, [r7, #1]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfa:	887a      	ldrh	r2, [r7, #2]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c00:	e003      	b.n	8001c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c02:	887b      	ldrh	r3, [r7, #2]
 8001c04:	041a      	lsls	r2, r3, #16
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	619a      	str	r2, [r3, #24]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b085      	sub	sp, #20
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c28:	887a      	ldrh	r2, [r7, #2]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	041a      	lsls	r2, r3, #16
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	887b      	ldrh	r3, [r7, #2]
 8001c36:	400b      	ands	r3, r1
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	619a      	str	r2, [r3, #24]
}
 8001c3e:	bf00      	nop
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e12b      	b.n	8001eb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d106      	bne.n	8001c78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff fb78 	bl	8001368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2224      	movs	r2, #36	@ 0x24
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0201 	bic.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cb0:	f000 fe8a 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8001cb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	4a81      	ldr	r2, [pc, #516]	@ (8001ec0 <HAL_I2C_Init+0x274>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d807      	bhi.n	8001cd0 <HAL_I2C_Init+0x84>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4a80      	ldr	r2, [pc, #512]	@ (8001ec4 <HAL_I2C_Init+0x278>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	bf94      	ite	ls
 8001cc8:	2301      	movls	r3, #1
 8001cca:	2300      	movhi	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	e006      	b.n	8001cde <HAL_I2C_Init+0x92>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4a7d      	ldr	r2, [pc, #500]	@ (8001ec8 <HAL_I2C_Init+0x27c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	bf94      	ite	ls
 8001cd8:	2301      	movls	r3, #1
 8001cda:	2300      	movhi	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e0e7      	b.n	8001eb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4a78      	ldr	r2, [pc, #480]	@ (8001ecc <HAL_I2C_Init+0x280>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	0c9b      	lsrs	r3, r3, #18
 8001cf0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	4a6a      	ldr	r2, [pc, #424]	@ (8001ec0 <HAL_I2C_Init+0x274>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d802      	bhi.n	8001d20 <HAL_I2C_Init+0xd4>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	e009      	b.n	8001d34 <HAL_I2C_Init+0xe8>
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	4a69      	ldr	r2, [pc, #420]	@ (8001ed0 <HAL_I2C_Init+0x284>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	099b      	lsrs	r3, r3, #6
 8001d32:	3301      	adds	r3, #1
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	495c      	ldr	r1, [pc, #368]	@ (8001ec0 <HAL_I2C_Init+0x274>)
 8001d50:	428b      	cmp	r3, r1
 8001d52:	d819      	bhi.n	8001d88 <HAL_I2C_Init+0x13c>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1e59      	subs	r1, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d62:	1c59      	adds	r1, r3, #1
 8001d64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d68:	400b      	ands	r3, r1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00a      	beq.n	8001d84 <HAL_I2C_Init+0x138>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1e59      	subs	r1, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d82:	e051      	b.n	8001e28 <HAL_I2C_Init+0x1dc>
 8001d84:	2304      	movs	r3, #4
 8001d86:	e04f      	b.n	8001e28 <HAL_I2C_Init+0x1dc>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d111      	bne.n	8001db4 <HAL_I2C_Init+0x168>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1e58      	subs	r0, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6859      	ldr	r1, [r3, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	440b      	add	r3, r1
 8001d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da2:	3301      	adds	r3, #1
 8001da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	bf0c      	ite	eq
 8001dac:	2301      	moveq	r3, #1
 8001dae:	2300      	movne	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	e012      	b.n	8001dda <HAL_I2C_Init+0x18e>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1e58      	subs	r0, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6859      	ldr	r1, [r3, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	0099      	lsls	r1, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf0c      	ite	eq
 8001dd4:	2301      	moveq	r3, #1
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_I2C_Init+0x196>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e022      	b.n	8001e28 <HAL_I2C_Init+0x1dc>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10e      	bne.n	8001e08 <HAL_I2C_Init+0x1bc>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	1e58      	subs	r0, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6859      	ldr	r1, [r3, #4]
 8001df2:	460b      	mov	r3, r1
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	440b      	add	r3, r1
 8001df8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e06:	e00f      	b.n	8001e28 <HAL_I2C_Init+0x1dc>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1e58      	subs	r0, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6859      	ldr	r1, [r3, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	0099      	lsls	r1, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e1e:	3301      	adds	r3, #1
 8001e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	6809      	ldr	r1, [r1, #0]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69da      	ldr	r2, [r3, #28]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6911      	ldr	r1, [r2, #16]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68d2      	ldr	r2, [r2, #12]
 8001e62:	4311      	orrs	r1, r2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	430b      	orrs	r3, r1
 8001e6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	000186a0 	.word	0x000186a0
 8001ec4:	001e847f 	.word	0x001e847f
 8001ec8:	003d08ff 	.word	0x003d08ff
 8001ecc:	431bde83 	.word	0x431bde83
 8001ed0:	10624dd3 	.word	0x10624dd3

08001ed4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	817b      	strh	r3, [r7, #10]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ee8:	f7ff fbe2 	bl	80016b0 <HAL_GetTick>
 8001eec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	f040 80e0 	bne.w	80020bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	2319      	movs	r3, #25
 8001f02:	2201      	movs	r2, #1
 8001f04:	4970      	ldr	r1, [pc, #448]	@ (80020c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 fa92 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f12:	2302      	movs	r3, #2
 8001f14:	e0d3      	b.n	80020be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_I2C_Master_Transmit+0x50>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e0cc      	b.n	80020be <HAL_I2C_Master_Transmit+0x1ea>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d007      	beq.n	8001f4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2221      	movs	r2, #33	@ 0x21
 8001f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2210      	movs	r2, #16
 8001f66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	893a      	ldrh	r2, [r7, #8]
 8001f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4a50      	ldr	r2, [pc, #320]	@ (80020cc <HAL_I2C_Master_Transmit+0x1f8>)
 8001f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f8c:	8979      	ldrh	r1, [r7, #10]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	6a3a      	ldr	r2, [r7, #32]
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f9ca 	bl	800232c <I2C_MasterRequestWrite>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e08d      	b.n	80020be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fb8:	e066      	b.n	8002088 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	6a39      	ldr	r1, [r7, #32]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 fb50 	bl	8002664 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00d      	beq.n	8001fe6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d107      	bne.n	8001fe2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fe0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e06b      	b.n	80020be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fea:	781a      	ldrb	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002000:	b29b      	uxth	r3, r3
 8002002:	3b01      	subs	r3, #1
 8002004:	b29a      	uxth	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800200e:	3b01      	subs	r3, #1
 8002010:	b29a      	uxth	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b04      	cmp	r3, #4
 8002022:	d11b      	bne.n	800205c <HAL_I2C_Master_Transmit+0x188>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002028:	2b00      	cmp	r3, #0
 800202a:	d017      	beq.n	800205c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002030:	781a      	ldrb	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002046:	b29b      	uxth	r3, r3
 8002048:	3b01      	subs	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	6a39      	ldr	r1, [r7, #32]
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 fb47 	bl	80026f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00d      	beq.n	8002088 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	2b04      	cmp	r3, #4
 8002072:	d107      	bne.n	8002084 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002082:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e01a      	b.n	80020be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800208c:	2b00      	cmp	r3, #0
 800208e:	d194      	bne.n	8001fba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800209e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	e000      	b.n	80020be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020bc:	2302      	movs	r3, #2
  }
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	00100002 	.word	0x00100002
 80020cc:	ffff0000 	.word	0xffff0000

080020d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	@ 0x28
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	460b      	mov	r3, r1
 80020de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80020e0:	f7ff fae6 	bl	80016b0 <HAL_GetTick>
 80020e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b20      	cmp	r3, #32
 80020f4:	f040 8111 	bne.w	800231a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2319      	movs	r3, #25
 80020fe:	2201      	movs	r2, #1
 8002100:	4988      	ldr	r1, [pc, #544]	@ (8002324 <HAL_I2C_IsDeviceReady+0x254>)
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f994 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800210e:	2302      	movs	r3, #2
 8002110:	e104      	b.n	800231c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_I2C_IsDeviceReady+0x50>
 800211c:	2302      	movs	r3, #2
 800211e:	e0fd      	b.n	800231c <HAL_I2C_IsDeviceReady+0x24c>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b01      	cmp	r3, #1
 8002134:	d007      	beq.n	8002146 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0201 	orr.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002154:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2224      	movs	r2, #36	@ 0x24
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4a70      	ldr	r2, [pc, #448]	@ (8002328 <HAL_I2C_IsDeviceReady+0x258>)
 8002168:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002178:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2200      	movs	r2, #0
 8002182:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 f952 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00d      	beq.n	80021ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021a0:	d103      	bne.n	80021aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021a8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e0b6      	b.n	800231c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021ae:	897b      	ldrh	r3, [r7, #10]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	461a      	mov	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80021bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80021be:	f7ff fa77 	bl	80016b0 <HAL_GetTick>
 80021c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	bf0c      	ite	eq
 80021d2:	2301      	moveq	r3, #1
 80021d4:	2300      	movne	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80021f2:	e025      	b.n	8002240 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021f4:	f7ff fa5c 	bl	80016b0 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d302      	bcc.n	800220a <HAL_I2C_IsDeviceReady+0x13a>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d103      	bne.n	8002212 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	22a0      	movs	r2, #160	@ 0xa0
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b02      	cmp	r3, #2
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2ba0      	cmp	r3, #160	@ 0xa0
 800224a:	d005      	beq.n	8002258 <HAL_I2C_IsDeviceReady+0x188>
 800224c:	7dfb      	ldrb	r3, [r7, #23]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d102      	bne.n	8002258 <HAL_I2C_IsDeviceReady+0x188>
 8002252:	7dbb      	ldrb	r3, [r7, #22]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0cd      	beq.n	80021f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b02      	cmp	r3, #2
 800226c:	d129      	bne.n	80022c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800227c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2319      	movs	r3, #25
 800229a:	2201      	movs	r2, #1
 800229c:	4921      	ldr	r1, [pc, #132]	@ (8002324 <HAL_I2C_IsDeviceReady+0x254>)
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 f8c6 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e036      	b.n	800231c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2220      	movs	r2, #32
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e02c      	b.n	800231c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	2319      	movs	r3, #25
 80022e2:	2201      	movs	r2, #1
 80022e4:	490f      	ldr	r1, [pc, #60]	@ (8002324 <HAL_I2C_IsDeviceReady+0x254>)
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f8a2 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e012      	b.n	800231c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	3301      	adds	r3, #1
 80022fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	f4ff af32 	bcc.w	800216a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800231a:	2302      	movs	r3, #2
  }
}
 800231c:	4618      	mov	r0, r3
 800231e:	3720      	adds	r7, #32
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	00100002 	.word	0x00100002
 8002328:	ffff0000 	.word	0xffff0000

0800232c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	460b      	mov	r3, r1
 800233a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002340:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b08      	cmp	r3, #8
 8002346:	d006      	beq.n	8002356 <I2C_MasterRequestWrite+0x2a>
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d003      	beq.n	8002356 <I2C_MasterRequestWrite+0x2a>
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002354:	d108      	bne.n	8002368 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	e00b      	b.n	8002380 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236c:	2b12      	cmp	r3, #18
 800236e:	d107      	bne.n	8002380 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800237e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f84f 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00d      	beq.n	80023b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023a6:	d103      	bne.n	80023b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e035      	b.n	8002420 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023bc:	d108      	bne.n	80023d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023be:	897b      	ldrh	r3, [r7, #10]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80023cc:	611a      	str	r2, [r3, #16]
 80023ce:	e01b      	b.n	8002408 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023d0:	897b      	ldrh	r3, [r7, #10]
 80023d2:	11db      	asrs	r3, r3, #7
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	f003 0306 	and.w	r3, r3, #6
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f063 030f 	orn	r3, r3, #15
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	490e      	ldr	r1, [pc, #56]	@ (8002428 <I2C_MasterRequestWrite+0xfc>)
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f898 	bl	8002524 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e010      	b.n	8002420 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023fe:	897b      	ldrh	r3, [r7, #10]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	4907      	ldr	r1, [pc, #28]	@ (800242c <I2C_MasterRequestWrite+0x100>)
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f888 	bl	8002524 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	00010008 	.word	0x00010008
 800242c:	00010002 	.word	0x00010002

08002430 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	4613      	mov	r3, r2
 800243e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002440:	e048      	b.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d044      	beq.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244a:	f7ff f931 	bl	80016b0 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <I2C_WaitOnFlagUntilTimeout+0x30>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d139      	bne.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	0c1b      	lsrs	r3, r3, #16
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d10d      	bne.n	8002486 <I2C_WaitOnFlagUntilTimeout+0x56>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	43da      	mvns	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	4013      	ands	r3, r2
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	e00c      	b.n	80024a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	43da      	mvns	r2, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	4013      	ands	r3, r2
 8002492:	b29b      	uxth	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	bf0c      	ite	eq
 8002498:	2301      	moveq	r3, #1
 800249a:	2300      	movne	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	461a      	mov	r2, r3
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d116      	bne.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c0:	f043 0220 	orr.w	r2, r3, #32
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e023      	b.n	800251c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	0c1b      	lsrs	r3, r3, #16
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d10d      	bne.n	80024fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	43da      	mvns	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	4013      	ands	r3, r2
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bf0c      	ite	eq
 80024f0:	2301      	moveq	r3, #1
 80024f2:	2300      	movne	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	e00c      	b.n	8002514 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	43da      	mvns	r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	4013      	ands	r3, r2
 8002506:	b29b      	uxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	429a      	cmp	r2, r3
 8002518:	d093      	beq.n	8002442 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002532:	e071      	b.n	8002618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800253e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002542:	d123      	bne.n	800258c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002552:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800255c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002578:	f043 0204 	orr.w	r2, r3, #4
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e067      	b.n	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002592:	d041      	beq.n	8002618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002594:	f7ff f88c 	bl	80016b0 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d302      	bcc.n	80025aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d136      	bne.n	8002618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	0c1b      	lsrs	r3, r3, #16
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d10c      	bne.n	80025ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	43da      	mvns	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4013      	ands	r3, r2
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	bf14      	ite	ne
 80025c6:	2301      	movne	r3, #1
 80025c8:	2300      	moveq	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	e00b      	b.n	80025e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	43da      	mvns	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	4013      	ands	r3, r2
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf14      	ite	ne
 80025e0:	2301      	movne	r3, #1
 80025e2:	2300      	moveq	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d016      	beq.n	8002618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002604:	f043 0220 	orr.w	r2, r3, #32
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e021      	b.n	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	0c1b      	lsrs	r3, r3, #16
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b01      	cmp	r3, #1
 8002620:	d10c      	bne.n	800263c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	43da      	mvns	r2, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	4013      	ands	r3, r2
 800262e:	b29b      	uxth	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf14      	ite	ne
 8002634:	2301      	movne	r3, #1
 8002636:	2300      	moveq	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	e00b      	b.n	8002654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	43da      	mvns	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4013      	ands	r3, r2
 8002648:	b29b      	uxth	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	bf14      	ite	ne
 800264e:	2301      	movne	r3, #1
 8002650:	2300      	moveq	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	f47f af6d 	bne.w	8002534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002670:	e034      	b.n	80026dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f886 	bl	8002784 <I2C_IsAcknowledgeFailed>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e034      	b.n	80026ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002688:	d028      	beq.n	80026dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268a:	f7ff f811 	bl	80016b0 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	429a      	cmp	r2, r3
 8002698:	d302      	bcc.n	80026a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d11d      	bne.n	80026dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026aa:	2b80      	cmp	r3, #128	@ 0x80
 80026ac:	d016      	beq.n	80026dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c8:	f043 0220 	orr.w	r2, r3, #32
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e007      	b.n	80026ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026e6:	2b80      	cmp	r3, #128	@ 0x80
 80026e8:	d1c3      	bne.n	8002672 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002700:	e034      	b.n	800276c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 f83e 	bl	8002784 <I2C_IsAcknowledgeFailed>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e034      	b.n	800277c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002718:	d028      	beq.n	800276c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271a:	f7fe ffc9 	bl	80016b0 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	429a      	cmp	r2, r3
 8002728:	d302      	bcc.n	8002730 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d11d      	bne.n	800276c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b04      	cmp	r3, #4
 800273c:	d016      	beq.n	800276c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	f043 0220 	orr.w	r2, r3, #32
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e007      	b.n	800277c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b04      	cmp	r3, #4
 8002778:	d1c3      	bne.n	8002702 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800279a:	d11b      	bne.n	80027d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c0:	f043 0204 	orr.w	r2, r3, #4
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0cc      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b68      	ldr	r3, [pc, #416]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d90c      	bls.n	8002820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b65      	ldr	r3, [pc, #404]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b63      	ldr	r3, [pc, #396]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0b8      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d020      	beq.n	800286e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002838:	4b59      	ldr	r3, [pc, #356]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4a58      	ldr	r2, [pc, #352]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002842:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002850:	4b53      	ldr	r3, [pc, #332]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4a52      	ldr	r2, [pc, #328]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800285a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800285c:	4b50      	ldr	r3, [pc, #320]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	494d      	ldr	r1, [pc, #308]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	4313      	orrs	r3, r2
 800286c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d044      	beq.n	8002904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	4b47      	ldr	r3, [pc, #284]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d119      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e07f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d003      	beq.n	80028a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d107      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a2:	4b3f      	ldr	r3, [pc, #252]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e06f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b2:	4b3b      	ldr	r3, [pc, #236]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e067      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c2:	4b37      	ldr	r3, [pc, #220]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f023 0203 	bic.w	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4934      	ldr	r1, [pc, #208]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d4:	f7fe feec 	bl	80016b0 <HAL_GetTick>
 80028d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028dc:	f7fe fee8 	bl	80016b0 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e04f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	4b2b      	ldr	r3, [pc, #172]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 020c 	and.w	r2, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	429a      	cmp	r2, r3
 8002902:	d1eb      	bne.n	80028dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002904:	4b25      	ldr	r3, [pc, #148]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d20c      	bcs.n	800292c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b22      	ldr	r3, [pc, #136]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b20      	ldr	r3, [pc, #128]	@ (800299c <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e032      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002938:	4b19      	ldr	r3, [pc, #100]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4916      	ldr	r1, [pc, #88]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002956:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	490e      	ldr	r1, [pc, #56]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800296a:	f000 f887 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 800296e:	4602      	mov	r2, r0
 8002970:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	490a      	ldr	r1, [pc, #40]	@ (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	5ccb      	ldrb	r3, [r1, r3]
 800297e:	fa22 f303 	lsr.w	r3, r2, r3
 8002982:	4a09      	ldr	r2, [pc, #36]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002986:	4b09      	ldr	r3, [pc, #36]	@ (80029ac <HAL_RCC_ClockConfig+0x1c8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe fd7c 	bl	8001488 <HAL_InitTick>

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023c00 	.word	0x40023c00
 80029a0:	40023800 	.word	0x40023800
 80029a4:	08007a34 	.word	0x08007a34
 80029a8:	2000001c 	.word	0x2000001c
 80029ac:	20000020 	.word	0x20000020

080029b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b4:	4b03      	ldr	r3, [pc, #12]	@ (80029c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	2000001c 	.word	0x2000001c

080029c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029cc:	f7ff fff0 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b05      	ldr	r3, [pc, #20]	@ (80029e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	0a9b      	lsrs	r3, r3, #10
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	4903      	ldr	r1, [pc, #12]	@ (80029ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40023800 	.word	0x40023800
 80029ec:	08007a44 	.word	0x08007a44

080029f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029f4:	f7ff ffdc 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029f8:	4602      	mov	r2, r0
 80029fa:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	0b5b      	lsrs	r3, r3, #13
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	4903      	ldr	r1, [pc, #12]	@ (8002a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a06:	5ccb      	ldrb	r3, [r1, r3]
 8002a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40023800 	.word	0x40023800
 8002a14:	08007a44 	.word	0x08007a44

08002a18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	220f      	movs	r2, #15
 8002a26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a28:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <HAL_RCC_GetClockConfig+0x5c>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 0203 	and.w	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a34:	4b0f      	ldr	r3, [pc, #60]	@ (8002a74 <HAL_RCC_GetClockConfig+0x5c>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a40:	4b0c      	ldr	r3, [pc, #48]	@ (8002a74 <HAL_RCC_GetClockConfig+0x5c>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a4c:	4b09      	ldr	r3, [pc, #36]	@ (8002a74 <HAL_RCC_GetClockConfig+0x5c>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	08db      	lsrs	r3, r3, #3
 8002a52:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a5a:	4b07      	ldr	r3, [pc, #28]	@ (8002a78 <HAL_RCC_GetClockConfig+0x60>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 020f 	and.w	r2, r3, #15
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	601a      	str	r2, [r3, #0]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40023c00 	.word	0x40023c00

08002a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a80:	b0ae      	sub	sp, #184	@ 0xb8
 8002a82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa2:	4bcb      	ldr	r3, [pc, #812]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b0c      	cmp	r3, #12
 8002aac:	f200 8206 	bhi.w	8002ebc <HAL_RCC_GetSysClockFreq+0x440>
 8002ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab6:	bf00      	nop
 8002ab8:	08002aed 	.word	0x08002aed
 8002abc:	08002ebd 	.word	0x08002ebd
 8002ac0:	08002ebd 	.word	0x08002ebd
 8002ac4:	08002ebd 	.word	0x08002ebd
 8002ac8:	08002af5 	.word	0x08002af5
 8002acc:	08002ebd 	.word	0x08002ebd
 8002ad0:	08002ebd 	.word	0x08002ebd
 8002ad4:	08002ebd 	.word	0x08002ebd
 8002ad8:	08002afd 	.word	0x08002afd
 8002adc:	08002ebd 	.word	0x08002ebd
 8002ae0:	08002ebd 	.word	0x08002ebd
 8002ae4:	08002ebd 	.word	0x08002ebd
 8002ae8:	08002ced 	.word	0x08002ced
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aec:	4bb9      	ldr	r3, [pc, #740]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002aee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002af2:	e1e7      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002af4:	4bb8      	ldr	r3, [pc, #736]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002af6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002afa:	e1e3      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002afc:	4bb4      	ldr	r3, [pc, #720]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b08:	4bb1      	ldr	r3, [pc, #708]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d071      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b14:	4bae      	ldr	r3, [pc, #696]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	099b      	lsrs	r3, r3, #6
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b20:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b3a:	4622      	mov	r2, r4
 8002b3c:	462b      	mov	r3, r5
 8002b3e:	f04f 0000 	mov.w	r0, #0
 8002b42:	f04f 0100 	mov.w	r1, #0
 8002b46:	0159      	lsls	r1, r3, #5
 8002b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b4c:	0150      	lsls	r0, r2, #5
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4621      	mov	r1, r4
 8002b54:	1a51      	subs	r1, r2, r1
 8002b56:	6439      	str	r1, [r7, #64]	@ 0x40
 8002b58:	4629      	mov	r1, r5
 8002b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002b6c:	4649      	mov	r1, r9
 8002b6e:	018b      	lsls	r3, r1, #6
 8002b70:	4641      	mov	r1, r8
 8002b72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b76:	4641      	mov	r1, r8
 8002b78:	018a      	lsls	r2, r1, #6
 8002b7a:	4641      	mov	r1, r8
 8002b7c:	1a51      	subs	r1, r2, r1
 8002b7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b80:	4649      	mov	r1, r9
 8002b82:	eb63 0301 	sbc.w	r3, r3, r1
 8002b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002b94:	4649      	mov	r1, r9
 8002b96:	00cb      	lsls	r3, r1, #3
 8002b98:	4641      	mov	r1, r8
 8002b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b9e:	4641      	mov	r1, r8
 8002ba0:	00ca      	lsls	r2, r1, #3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4622      	mov	r2, r4
 8002baa:	189b      	adds	r3, r3, r2
 8002bac:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bae:	462b      	mov	r3, r5
 8002bb0:	460a      	mov	r2, r1
 8002bb2:	eb42 0303 	adc.w	r3, r2, r3
 8002bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bc4:	4629      	mov	r1, r5
 8002bc6:	024b      	lsls	r3, r1, #9
 8002bc8:	4621      	mov	r1, r4
 8002bca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bce:	4621      	mov	r1, r4
 8002bd0:	024a      	lsls	r2, r1, #9
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002be0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002be4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002be8:	f7fd fb24 	bl	8000234 <__aeabi_uldivmod>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bf6:	e067      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf8:	4b75      	ldr	r3, [pc, #468]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	099b      	lsrs	r3, r3, #6
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c04:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002c08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c12:	2300      	movs	r3, #0
 8002c14:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c16:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002c1a:	4622      	mov	r2, r4
 8002c1c:	462b      	mov	r3, r5
 8002c1e:	f04f 0000 	mov.w	r0, #0
 8002c22:	f04f 0100 	mov.w	r1, #0
 8002c26:	0159      	lsls	r1, r3, #5
 8002c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c2c:	0150      	lsls	r0, r2, #5
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4621      	mov	r1, r4
 8002c34:	1a51      	subs	r1, r2, r1
 8002c36:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002c38:	4629      	mov	r1, r5
 8002c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002c4c:	4649      	mov	r1, r9
 8002c4e:	018b      	lsls	r3, r1, #6
 8002c50:	4641      	mov	r1, r8
 8002c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c56:	4641      	mov	r1, r8
 8002c58:	018a      	lsls	r2, r1, #6
 8002c5a:	4641      	mov	r1, r8
 8002c5c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c60:	4649      	mov	r1, r9
 8002c62:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c72:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c7a:	4692      	mov	sl, r2
 8002c7c:	469b      	mov	fp, r3
 8002c7e:	4623      	mov	r3, r4
 8002c80:	eb1a 0303 	adds.w	r3, sl, r3
 8002c84:	623b      	str	r3, [r7, #32]
 8002c86:	462b      	mov	r3, r5
 8002c88:	eb4b 0303 	adc.w	r3, fp, r3
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	028b      	lsls	r3, r1, #10
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	028a      	lsls	r2, r1, #10
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cb4:	677a      	str	r2, [r7, #116]	@ 0x74
 8002cb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002cba:	f7fd fabb 	bl	8000234 <__aeabi_uldivmod>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cc8:	4b41      	ldr	r3, [pc, #260]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	0c1b      	lsrs	r3, r3, #16
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002cda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002cea:	e0eb      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cec:	4b38      	ldr	r3, [pc, #224]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cf8:	4b35      	ldr	r3, [pc, #212]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d06b      	beq.n	8002ddc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d04:	4b32      	ldr	r3, [pc, #200]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	099b      	lsrs	r3, r3, #6
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d16:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d18:	2300      	movs	r3, #0
 8002d1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d1c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002d20:	4622      	mov	r2, r4
 8002d22:	462b      	mov	r3, r5
 8002d24:	f04f 0000 	mov.w	r0, #0
 8002d28:	f04f 0100 	mov.w	r1, #0
 8002d2c:	0159      	lsls	r1, r3, #5
 8002d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d32:	0150      	lsls	r0, r2, #5
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4621      	mov	r1, r4
 8002d3a:	1a51      	subs	r1, r2, r1
 8002d3c:	61b9      	str	r1, [r7, #24]
 8002d3e:	4629      	mov	r1, r5
 8002d40:	eb63 0301 	sbc.w	r3, r3, r1
 8002d44:	61fb      	str	r3, [r7, #28]
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d52:	4659      	mov	r1, fp
 8002d54:	018b      	lsls	r3, r1, #6
 8002d56:	4651      	mov	r1, sl
 8002d58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d5c:	4651      	mov	r1, sl
 8002d5e:	018a      	lsls	r2, r1, #6
 8002d60:	4651      	mov	r1, sl
 8002d62:	ebb2 0801 	subs.w	r8, r2, r1
 8002d66:	4659      	mov	r1, fp
 8002d68:	eb63 0901 	sbc.w	r9, r3, r1
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d80:	4690      	mov	r8, r2
 8002d82:	4699      	mov	r9, r3
 8002d84:	4623      	mov	r3, r4
 8002d86:	eb18 0303 	adds.w	r3, r8, r3
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	462b      	mov	r3, r5
 8002d8e:	eb49 0303 	adc.w	r3, r9, r3
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002da0:	4629      	mov	r1, r5
 8002da2:	024b      	lsls	r3, r1, #9
 8002da4:	4621      	mov	r1, r4
 8002da6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002daa:	4621      	mov	r1, r4
 8002dac:	024a      	lsls	r2, r1, #9
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002db6:	2200      	movs	r2, #0
 8002db8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002dba:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002dbc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002dc0:	f7fd fa38 	bl	8000234 <__aeabi_uldivmod>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4613      	mov	r3, r2
 8002dca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dce:	e065      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x420>
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	00f42400 	.word	0x00f42400
 8002dd8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ddc:	4b3d      	ldr	r3, [pc, #244]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	099b      	lsrs	r3, r3, #6
 8002de2:	2200      	movs	r2, #0
 8002de4:	4618      	mov	r0, r3
 8002de6:	4611      	mov	r1, r2
 8002de8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dec:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dee:	2300      	movs	r3, #0
 8002df0:	657b      	str	r3, [r7, #84]	@ 0x54
 8002df2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002df6:	4642      	mov	r2, r8
 8002df8:	464b      	mov	r3, r9
 8002dfa:	f04f 0000 	mov.w	r0, #0
 8002dfe:	f04f 0100 	mov.w	r1, #0
 8002e02:	0159      	lsls	r1, r3, #5
 8002e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e08:	0150      	lsls	r0, r2, #5
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4641      	mov	r1, r8
 8002e10:	1a51      	subs	r1, r2, r1
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	4649      	mov	r1, r9
 8002e16:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e28:	4659      	mov	r1, fp
 8002e2a:	018b      	lsls	r3, r1, #6
 8002e2c:	4651      	mov	r1, sl
 8002e2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e32:	4651      	mov	r1, sl
 8002e34:	018a      	lsls	r2, r1, #6
 8002e36:	4651      	mov	r1, sl
 8002e38:	1a54      	subs	r4, r2, r1
 8002e3a:	4659      	mov	r1, fp
 8002e3c:	eb63 0501 	sbc.w	r5, r3, r1
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	00eb      	lsls	r3, r5, #3
 8002e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e4e:	00e2      	lsls	r2, r4, #3
 8002e50:	4614      	mov	r4, r2
 8002e52:	461d      	mov	r5, r3
 8002e54:	4643      	mov	r3, r8
 8002e56:	18e3      	adds	r3, r4, r3
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	464b      	mov	r3, r9
 8002e5c:	eb45 0303 	adc.w	r3, r5, r3
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e6e:	4629      	mov	r1, r5
 8002e70:	028b      	lsls	r3, r1, #10
 8002e72:	4621      	mov	r1, r4
 8002e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e78:	4621      	mov	r1, r4
 8002e7a:	028a      	lsls	r2, r1, #10
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e84:	2200      	movs	r2, #0
 8002e86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e88:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002e8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e8e:	f7fd f9d1 	bl	8000234 <__aeabi_uldivmod>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4613      	mov	r3, r2
 8002e98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	0f1b      	lsrs	r3, r3, #28
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002eaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002eae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002eba:	e003      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ebc:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ec2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	37b8      	adds	r7, #184	@ 0xb8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	00f42400 	.word	0x00f42400

08002edc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e28d      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 8083 	beq.w	8003002 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002efc:	4b94      	ldr	r3, [pc, #592]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 030c 	and.w	r3, r3, #12
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d019      	beq.n	8002f3c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f08:	4b91      	ldr	r3, [pc, #580]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f14:	4b8e      	ldr	r3, [pc, #568]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f20:	d00c      	beq.n	8002f3c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f22:	4b8b      	ldr	r3, [pc, #556]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f2a:	2b0c      	cmp	r3, #12
 8002f2c:	d112      	bne.n	8002f54 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2e:	4b88      	ldr	r3, [pc, #544]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f3a:	d10b      	bne.n	8002f54 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	4b84      	ldr	r3, [pc, #528]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d05b      	beq.n	8003000 <HAL_RCC_OscConfig+0x124>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d157      	bne.n	8003000 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e25a      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f5c:	d106      	bne.n	8002f6c <HAL_RCC_OscConfig+0x90>
 8002f5e:	4b7c      	ldr	r3, [pc, #496]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a7b      	ldr	r2, [pc, #492]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e01d      	b.n	8002fa8 <HAL_RCC_OscConfig+0xcc>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCC_OscConfig+0xb4>
 8002f76:	4b76      	ldr	r3, [pc, #472]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a75      	ldr	r2, [pc, #468]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	4b73      	ldr	r3, [pc, #460]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a72      	ldr	r2, [pc, #456]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e00b      	b.n	8002fa8 <HAL_RCC_OscConfig+0xcc>
 8002f90:	4b6f      	ldr	r3, [pc, #444]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a6e      	ldr	r2, [pc, #440]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	4b6c      	ldr	r3, [pc, #432]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a6b      	ldr	r2, [pc, #428]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002fa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d013      	beq.n	8002fd8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fb7e 	bl	80016b0 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7fe fb7a 	bl	80016b0 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	@ 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e21f      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	4b61      	ldr	r3, [pc, #388]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0xdc>
 8002fd6:	e014      	b.n	8003002 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fe fb6a 	bl	80016b0 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fe fb66 	bl	80016b0 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	@ 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e20b      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff2:	4b57      	ldr	r3, [pc, #348]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x104>
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d06f      	beq.n	80030ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800300e:	4b50      	ldr	r3, [pc, #320]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b00      	cmp	r3, #0
 8003018:	d017      	beq.n	800304a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800301a:	4b4d      	ldr	r3, [pc, #308]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003022:	2b08      	cmp	r3, #8
 8003024:	d105      	bne.n	8003032 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003026:	4b4a      	ldr	r3, [pc, #296]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003032:	4b47      	ldr	r3, [pc, #284]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800303a:	2b0c      	cmp	r3, #12
 800303c:	d11c      	bne.n	8003078 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303e:	4b44      	ldr	r3, [pc, #272]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d116      	bne.n	8003078 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304a:	4b41      	ldr	r3, [pc, #260]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <HAL_RCC_OscConfig+0x186>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d001      	beq.n	8003062 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e1d3      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003062:	4b3b      	ldr	r3, [pc, #236]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4937      	ldr	r1, [pc, #220]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003076:	e03a      	b.n	80030ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d020      	beq.n	80030c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003080:	4b34      	ldr	r3, [pc, #208]	@ (8003154 <HAL_RCC_OscConfig+0x278>)
 8003082:	2201      	movs	r2, #1
 8003084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7fe fb13 	bl	80016b0 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308e:	f7fe fb0f 	bl	80016b0 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e1b4      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0f0      	beq.n	800308e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ac:	4b28      	ldr	r3, [pc, #160]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4925      	ldr	r1, [pc, #148]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]
 80030c0:	e015      	b.n	80030ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c2:	4b24      	ldr	r3, [pc, #144]	@ (8003154 <HAL_RCC_OscConfig+0x278>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7fe faf2 	bl	80016b0 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d0:	f7fe faee 	bl	80016b0 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e193      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d036      	beq.n	8003168 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d016      	beq.n	8003130 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003102:	4b15      	ldr	r3, [pc, #84]	@ (8003158 <HAL_RCC_OscConfig+0x27c>)
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003108:	f7fe fad2 	bl	80016b0 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003110:	f7fe face 	bl	80016b0 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e173      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003122:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <HAL_RCC_OscConfig+0x274>)
 8003124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x234>
 800312e:	e01b      	b.n	8003168 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003130:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <HAL_RCC_OscConfig+0x27c>)
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003136:	f7fe fabb 	bl	80016b0 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313c:	e00e      	b.n	800315c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800313e:	f7fe fab7 	bl	80016b0 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d907      	bls.n	800315c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e15c      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
 8003150:	40023800 	.word	0x40023800
 8003154:	42470000 	.word	0x42470000
 8003158:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800315c:	4b8a      	ldr	r3, [pc, #552]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800315e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1ea      	bne.n	800313e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 8097 	beq.w	80032a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003176:	2300      	movs	r3, #0
 8003178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317a:	4b83      	ldr	r3, [pc, #524]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10f      	bne.n	80031a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	4b7f      	ldr	r3, [pc, #508]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	4a7e      	ldr	r2, [pc, #504]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003194:	6413      	str	r3, [r2, #64]	@ 0x40
 8003196:	4b7c      	ldr	r3, [pc, #496]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a2:	2301      	movs	r3, #1
 80031a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a6:	4b79      	ldr	r3, [pc, #484]	@ (800338c <HAL_RCC_OscConfig+0x4b0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d118      	bne.n	80031e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b2:	4b76      	ldr	r3, [pc, #472]	@ (800338c <HAL_RCC_OscConfig+0x4b0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a75      	ldr	r2, [pc, #468]	@ (800338c <HAL_RCC_OscConfig+0x4b0>)
 80031b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031be:	f7fe fa77 	bl	80016b0 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c6:	f7fe fa73 	bl	80016b0 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e118      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d8:	4b6c      	ldr	r3, [pc, #432]	@ (800338c <HAL_RCC_OscConfig+0x4b0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d106      	bne.n	80031fa <HAL_RCC_OscConfig+0x31e>
 80031ec:	4b66      	ldr	r3, [pc, #408]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 80031ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f0:	4a65      	ldr	r2, [pc, #404]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f8:	e01c      	b.n	8003234 <HAL_RCC_OscConfig+0x358>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b05      	cmp	r3, #5
 8003200:	d10c      	bne.n	800321c <HAL_RCC_OscConfig+0x340>
 8003202:	4b61      	ldr	r3, [pc, #388]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003206:	4a60      	ldr	r2, [pc, #384]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003208:	f043 0304 	orr.w	r3, r3, #4
 800320c:	6713      	str	r3, [r2, #112]	@ 0x70
 800320e:	4b5e      	ldr	r3, [pc, #376]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003212:	4a5d      	ldr	r2, [pc, #372]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	6713      	str	r3, [r2, #112]	@ 0x70
 800321a:	e00b      	b.n	8003234 <HAL_RCC_OscConfig+0x358>
 800321c:	4b5a      	ldr	r3, [pc, #360]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003220:	4a59      	ldr	r2, [pc, #356]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003222:	f023 0301 	bic.w	r3, r3, #1
 8003226:	6713      	str	r3, [r2, #112]	@ 0x70
 8003228:	4b57      	ldr	r3, [pc, #348]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800322a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322c:	4a56      	ldr	r2, [pc, #344]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800322e:	f023 0304 	bic.w	r3, r3, #4
 8003232:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d015      	beq.n	8003268 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323c:	f7fe fa38 	bl	80016b0 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003242:	e00a      	b.n	800325a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003244:	f7fe fa34 	bl	80016b0 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e0d7      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325a:	4b4b      	ldr	r3, [pc, #300]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0ee      	beq.n	8003244 <HAL_RCC_OscConfig+0x368>
 8003266:	e014      	b.n	8003292 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fe fa22 	bl	80016b0 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326e:	e00a      	b.n	8003286 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003270:	f7fe fa1e 	bl	80016b0 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e0c1      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003286:	4b40      	ldr	r3, [pc, #256]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1ee      	bne.n	8003270 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003292:	7dfb      	ldrb	r3, [r7, #23]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d105      	bne.n	80032a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003298:	4b3b      	ldr	r3, [pc, #236]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800329a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329c:	4a3a      	ldr	r2, [pc, #232]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800329e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 80ad 	beq.w	8003408 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032ae:	4b36      	ldr	r3, [pc, #216]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d060      	beq.n	800337c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d145      	bne.n	800334e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c2:	4b33      	ldr	r3, [pc, #204]	@ (8003390 <HAL_RCC_OscConfig+0x4b4>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c8:	f7fe f9f2 	bl	80016b0 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fe f9ee 	bl	80016b0 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e093      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e2:	4b29      	ldr	r3, [pc, #164]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69da      	ldr	r2, [r3, #28]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	019b      	lsls	r3, r3, #6
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003304:	085b      	lsrs	r3, r3, #1
 8003306:	3b01      	subs	r3, #1
 8003308:	041b      	lsls	r3, r3, #16
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003310:	061b      	lsls	r3, r3, #24
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003318:	071b      	lsls	r3, r3, #28
 800331a:	491b      	ldr	r1, [pc, #108]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 800331c:	4313      	orrs	r3, r2
 800331e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003320:	4b1b      	ldr	r3, [pc, #108]	@ (8003390 <HAL_RCC_OscConfig+0x4b4>)
 8003322:	2201      	movs	r2, #1
 8003324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003326:	f7fe f9c3 	bl	80016b0 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332e:	f7fe f9bf 	bl	80016b0 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e064      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003340:	4b11      	ldr	r3, [pc, #68]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x452>
 800334c:	e05c      	b.n	8003408 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334e:	4b10      	ldr	r3, [pc, #64]	@ (8003390 <HAL_RCC_OscConfig+0x4b4>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fe f9ac 	bl	80016b0 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335c:	f7fe f9a8 	bl	80016b0 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e04d      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336e:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_RCC_OscConfig+0x4ac>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x480>
 800337a:	e045      	b.n	8003408 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d107      	bne.n	8003394 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e040      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
 8003388:	40023800 	.word	0x40023800
 800338c:	40007000 	.word	0x40007000
 8003390:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003394:	4b1f      	ldr	r3, [pc, #124]	@ (8003414 <HAL_RCC_OscConfig+0x538>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d030      	beq.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d129      	bne.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d122      	bne.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033c4:	4013      	ands	r3, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d119      	bne.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033da:	085b      	lsrs	r3, r3, #1
 80033dc:	3b01      	subs	r3, #1
 80033de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d10f      	bne.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d107      	bne.n	8003404 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800

08003418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e041      	b.n	80034ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f839 	bl	80034b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	4619      	mov	r1, r3
 8003456:	4610      	mov	r0, r2
 8003458:	f000 f9c0 	bl	80037dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d001      	beq.n	80034e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e04e      	b.n	8003582 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a23      	ldr	r2, [pc, #140]	@ (8003590 <HAL_TIM_Base_Start_IT+0xc4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d022      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800350e:	d01d      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1f      	ldr	r2, [pc, #124]	@ (8003594 <HAL_TIM_Base_Start_IT+0xc8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d018      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1e      	ldr	r2, [pc, #120]	@ (8003598 <HAL_TIM_Base_Start_IT+0xcc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d013      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1c      	ldr	r2, [pc, #112]	@ (800359c <HAL_TIM_Base_Start_IT+0xd0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00e      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1b      	ldr	r2, [pc, #108]	@ (80035a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d009      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a19      	ldr	r2, [pc, #100]	@ (80035a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d004      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x80>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a18      	ldr	r2, [pc, #96]	@ (80035a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d111      	bne.n	8003570 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b06      	cmp	r3, #6
 800355c:	d010      	beq.n	8003580 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0201 	orr.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356e:	e007      	b.n	8003580 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40010000 	.word	0x40010000
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800
 800359c:	40000c00 	.word	0x40000c00
 80035a0:	40010400 	.word	0x40010400
 80035a4:	40014000 	.word	0x40014000
 80035a8:	40001800 	.word	0x40001800

080035ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d020      	beq.n	8003610 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01b      	beq.n	8003610 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0202 	mvn.w	r2, #2
 80035e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f8d2 	bl	80037a0 <HAL_TIM_IC_CaptureCallback>
 80035fc:	e005      	b.n	800360a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f8c4 	bl	800378c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f8d5 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	d020      	beq.n	800365c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01b      	beq.n	800365c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0204 	mvn.w	r2, #4
 800362c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f8ac 	bl	80037a0 <HAL_TIM_IC_CaptureCallback>
 8003648:	e005      	b.n	8003656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f89e 	bl	800378c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f8af 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d020      	beq.n	80036a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d01b      	beq.n	80036a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0208 	mvn.w	r2, #8
 8003678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2204      	movs	r2, #4
 800367e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f886 	bl	80037a0 <HAL_TIM_IC_CaptureCallback>
 8003694:	e005      	b.n	80036a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f878 	bl	800378c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f889 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d020      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01b      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0210 	mvn.w	r2, #16
 80036c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2208      	movs	r2, #8
 80036ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f860 	bl	80037a0 <HAL_TIM_IC_CaptureCallback>
 80036e0:	e005      	b.n	80036ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f852 	bl	800378c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f863 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00c      	beq.n	8003718 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d007      	beq.n	8003718 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0201 	mvn.w	r2, #1
 8003710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fd fb26 	bl	8000d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00c      	beq.n	800373c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f906 	bl	8003948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00c      	beq.n	8003760 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	d007      	beq.n	8003760 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f834 	bl	80037c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00c      	beq.n	8003784 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0220 	mvn.w	r2, #32
 800377c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f8d8 	bl	8003934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003784:	bf00      	nop
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a46      	ldr	r2, [pc, #280]	@ (8003908 <TIM_Base_SetConfig+0x12c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d013      	beq.n	800381c <TIM_Base_SetConfig+0x40>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037fa:	d00f      	beq.n	800381c <TIM_Base_SetConfig+0x40>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a43      	ldr	r2, [pc, #268]	@ (800390c <TIM_Base_SetConfig+0x130>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d00b      	beq.n	800381c <TIM_Base_SetConfig+0x40>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a42      	ldr	r2, [pc, #264]	@ (8003910 <TIM_Base_SetConfig+0x134>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d007      	beq.n	800381c <TIM_Base_SetConfig+0x40>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a41      	ldr	r2, [pc, #260]	@ (8003914 <TIM_Base_SetConfig+0x138>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d003      	beq.n	800381c <TIM_Base_SetConfig+0x40>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a40      	ldr	r2, [pc, #256]	@ (8003918 <TIM_Base_SetConfig+0x13c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d108      	bne.n	800382e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a35      	ldr	r2, [pc, #212]	@ (8003908 <TIM_Base_SetConfig+0x12c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d02b      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800383c:	d027      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a32      	ldr	r2, [pc, #200]	@ (800390c <TIM_Base_SetConfig+0x130>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d023      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a31      	ldr	r2, [pc, #196]	@ (8003910 <TIM_Base_SetConfig+0x134>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d01f      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a30      	ldr	r2, [pc, #192]	@ (8003914 <TIM_Base_SetConfig+0x138>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d01b      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a2f      	ldr	r2, [pc, #188]	@ (8003918 <TIM_Base_SetConfig+0x13c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d017      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a2e      	ldr	r2, [pc, #184]	@ (800391c <TIM_Base_SetConfig+0x140>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d013      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a2d      	ldr	r2, [pc, #180]	@ (8003920 <TIM_Base_SetConfig+0x144>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00f      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a2c      	ldr	r2, [pc, #176]	@ (8003924 <TIM_Base_SetConfig+0x148>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00b      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a2b      	ldr	r2, [pc, #172]	@ (8003928 <TIM_Base_SetConfig+0x14c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d007      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a2a      	ldr	r2, [pc, #168]	@ (800392c <TIM_Base_SetConfig+0x150>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d003      	beq.n	800388e <TIM_Base_SetConfig+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a29      	ldr	r2, [pc, #164]	@ (8003930 <TIM_Base_SetConfig+0x154>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d108      	bne.n	80038a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a10      	ldr	r2, [pc, #64]	@ (8003908 <TIM_Base_SetConfig+0x12c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d003      	beq.n	80038d4 <TIM_Base_SetConfig+0xf8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a12      	ldr	r2, [pc, #72]	@ (8003918 <TIM_Base_SetConfig+0x13c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d103      	bne.n	80038dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d105      	bne.n	80038fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f023 0201 	bic.w	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	611a      	str	r2, [r3, #16]
  }
}
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40010000 	.word	0x40010000
 800390c:	40000400 	.word	0x40000400
 8003910:	40000800 	.word	0x40000800
 8003914:	40000c00 	.word	0x40000c00
 8003918:	40010400 	.word	0x40010400
 800391c:	40014000 	.word	0x40014000
 8003920:	40014400 	.word	0x40014400
 8003924:	40014800 	.word	0x40014800
 8003928:	40001800 	.word	0x40001800
 800392c:	40001c00 	.word	0x40001c00
 8003930:	40002000 	.word	0x40002000

08003934 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e042      	b.n	80039f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fd fd38 	bl	80013f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2224      	movs	r2, #36	@ 0x24
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800399e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f82b 	bl	80039fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a00:	b0c0      	sub	sp, #256	@ 0x100
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a18:	68d9      	ldr	r1, [r3, #12]
 8003a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	ea40 0301 	orr.w	r3, r0, r1
 8003a24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a54:	f021 010c 	bic.w	r1, r1, #12
 8003a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a62:	430b      	orrs	r3, r1
 8003a64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a76:	6999      	ldr	r1, [r3, #24]
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	ea40 0301 	orr.w	r3, r0, r1
 8003a82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	4b8f      	ldr	r3, [pc, #572]	@ (8003cc8 <UART_SetConfig+0x2cc>)
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d005      	beq.n	8003a9c <UART_SetConfig+0xa0>
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4b8d      	ldr	r3, [pc, #564]	@ (8003ccc <UART_SetConfig+0x2d0>)
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d104      	bne.n	8003aa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a9c:	f7fe ffa8 	bl	80029f0 <HAL_RCC_GetPCLK2Freq>
 8003aa0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003aa4:	e003      	b.n	8003aae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aa6:	f7fe ff8f 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8003aaa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab8:	f040 810c 	bne.w	8003cd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ac6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003aca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ace:	4622      	mov	r2, r4
 8003ad0:	462b      	mov	r3, r5
 8003ad2:	1891      	adds	r1, r2, r2
 8003ad4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ad6:	415b      	adcs	r3, r3
 8003ad8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ada:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ade:	4621      	mov	r1, r4
 8003ae0:	eb12 0801 	adds.w	r8, r2, r1
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	eb43 0901 	adc.w	r9, r3, r1
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003afe:	4690      	mov	r8, r2
 8003b00:	4699      	mov	r9, r3
 8003b02:	4623      	mov	r3, r4
 8003b04:	eb18 0303 	adds.w	r3, r8, r3
 8003b08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b0c:	462b      	mov	r3, r5
 8003b0e:	eb49 0303 	adc.w	r3, r9, r3
 8003b12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	18db      	adds	r3, r3, r3
 8003b2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b30:	4613      	mov	r3, r2
 8003b32:	eb42 0303 	adc.w	r3, r2, r3
 8003b36:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b40:	f7fc fb78 	bl	8000234 <__aeabi_uldivmod>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4b61      	ldr	r3, [pc, #388]	@ (8003cd0 <UART_SetConfig+0x2d4>)
 8003b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	011c      	lsls	r4, r3, #4
 8003b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b56:	2200      	movs	r2, #0
 8003b58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b64:	4642      	mov	r2, r8
 8003b66:	464b      	mov	r3, r9
 8003b68:	1891      	adds	r1, r2, r2
 8003b6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b6c:	415b      	adcs	r3, r3
 8003b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b74:	4641      	mov	r1, r8
 8003b76:	eb12 0a01 	adds.w	sl, r2, r1
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	eb43 0b01 	adc.w	fp, r3, r1
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b94:	4692      	mov	sl, r2
 8003b96:	469b      	mov	fp, r3
 8003b98:	4643      	mov	r3, r8
 8003b9a:	eb1a 0303 	adds.w	r3, sl, r3
 8003b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ba8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bb8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003bbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	18db      	adds	r3, r3, r3
 8003bc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	eb42 0303 	adc.w	r3, r2, r3
 8003bcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003bd6:	f7fc fb2d 	bl	8000234 <__aeabi_uldivmod>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd0 <UART_SetConfig+0x2d4>)
 8003be2:	fba3 2301 	umull	r2, r3, r3, r1
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	2264      	movs	r2, #100	@ 0x64
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	1acb      	subs	r3, r1, r3
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003bf6:	4b36      	ldr	r3, [pc, #216]	@ (8003cd0 <UART_SetConfig+0x2d4>)
 8003bf8:	fba3 2302 	umull	r2, r3, r3, r2
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c04:	441c      	add	r4, r3
 8003c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c18:	4642      	mov	r2, r8
 8003c1a:	464b      	mov	r3, r9
 8003c1c:	1891      	adds	r1, r2, r2
 8003c1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c20:	415b      	adcs	r3, r3
 8003c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c28:	4641      	mov	r1, r8
 8003c2a:	1851      	adds	r1, r2, r1
 8003c2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c2e:	4649      	mov	r1, r9
 8003c30:	414b      	adcs	r3, r1
 8003c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c40:	4659      	mov	r1, fp
 8003c42:	00cb      	lsls	r3, r1, #3
 8003c44:	4651      	mov	r1, sl
 8003c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c4a:	4651      	mov	r1, sl
 8003c4c:	00ca      	lsls	r2, r1, #3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	4619      	mov	r1, r3
 8003c52:	4603      	mov	r3, r0
 8003c54:	4642      	mov	r2, r8
 8003c56:	189b      	adds	r3, r3, r2
 8003c58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c5c:	464b      	mov	r3, r9
 8003c5e:	460a      	mov	r2, r1
 8003c60:	eb42 0303 	adc.w	r3, r2, r3
 8003c64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	18db      	adds	r3, r3, r3
 8003c80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c82:	4613      	mov	r3, r2
 8003c84:	eb42 0303 	adc.w	r3, r2, r3
 8003c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c92:	f7fc facf 	bl	8000234 <__aeabi_uldivmod>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd0 <UART_SetConfig+0x2d4>)
 8003c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	2164      	movs	r1, #100	@ 0x64
 8003ca4:	fb01 f303 	mul.w	r3, r1, r3
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	3332      	adds	r3, #50	@ 0x32
 8003cae:	4a08      	ldr	r2, [pc, #32]	@ (8003cd0 <UART_SetConfig+0x2d4>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	095b      	lsrs	r3, r3, #5
 8003cb6:	f003 0207 	and.w	r2, r3, #7
 8003cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4422      	add	r2, r4
 8003cc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cc4:	e106      	b.n	8003ed4 <UART_SetConfig+0x4d8>
 8003cc6:	bf00      	nop
 8003cc8:	40011000 	.word	0x40011000
 8003ccc:	40011400 	.word	0x40011400
 8003cd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003cde:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ce2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ce6:	4642      	mov	r2, r8
 8003ce8:	464b      	mov	r3, r9
 8003cea:	1891      	adds	r1, r2, r2
 8003cec:	6239      	str	r1, [r7, #32]
 8003cee:	415b      	adcs	r3, r3
 8003cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cf6:	4641      	mov	r1, r8
 8003cf8:	1854      	adds	r4, r2, r1
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	eb43 0501 	adc.w	r5, r3, r1
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	00eb      	lsls	r3, r5, #3
 8003d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d0e:	00e2      	lsls	r2, r4, #3
 8003d10:	4614      	mov	r4, r2
 8003d12:	461d      	mov	r5, r3
 8003d14:	4643      	mov	r3, r8
 8003d16:	18e3      	adds	r3, r4, r3
 8003d18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d1c:	464b      	mov	r3, r9
 8003d1e:	eb45 0303 	adc.w	r3, r5, r3
 8003d22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d42:	4629      	mov	r1, r5
 8003d44:	008b      	lsls	r3, r1, #2
 8003d46:	4621      	mov	r1, r4
 8003d48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	008a      	lsls	r2, r1, #2
 8003d50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d54:	f7fc fa6e 	bl	8000234 <__aeabi_uldivmod>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4b60      	ldr	r3, [pc, #384]	@ (8003ee0 <UART_SetConfig+0x4e4>)
 8003d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	011c      	lsls	r4, r3, #4
 8003d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d78:	4642      	mov	r2, r8
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	1891      	adds	r1, r2, r2
 8003d7e:	61b9      	str	r1, [r7, #24]
 8003d80:	415b      	adcs	r3, r3
 8003d82:	61fb      	str	r3, [r7, #28]
 8003d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d88:	4641      	mov	r1, r8
 8003d8a:	1851      	adds	r1, r2, r1
 8003d8c:	6139      	str	r1, [r7, #16]
 8003d8e:	4649      	mov	r1, r9
 8003d90:	414b      	adcs	r3, r1
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003da0:	4659      	mov	r1, fp
 8003da2:	00cb      	lsls	r3, r1, #3
 8003da4:	4651      	mov	r1, sl
 8003da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003daa:	4651      	mov	r1, sl
 8003dac:	00ca      	lsls	r2, r1, #3
 8003dae:	4610      	mov	r0, r2
 8003db0:	4619      	mov	r1, r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	4642      	mov	r2, r8
 8003db6:	189b      	adds	r3, r3, r2
 8003db8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003dbc:	464b      	mov	r3, r9
 8003dbe:	460a      	mov	r2, r1
 8003dc0:	eb42 0303 	adc.w	r3, r2, r3
 8003dc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003de0:	4649      	mov	r1, r9
 8003de2:	008b      	lsls	r3, r1, #2
 8003de4:	4641      	mov	r1, r8
 8003de6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dea:	4641      	mov	r1, r8
 8003dec:	008a      	lsls	r2, r1, #2
 8003dee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003df2:	f7fc fa1f 	bl	8000234 <__aeabi_uldivmod>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4b38      	ldr	r3, [pc, #224]	@ (8003ee0 <UART_SetConfig+0x4e4>)
 8003dfe:	fba3 2301 	umull	r2, r3, r3, r1
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	2264      	movs	r2, #100	@ 0x64
 8003e06:	fb02 f303 	mul.w	r3, r2, r3
 8003e0a:	1acb      	subs	r3, r1, r3
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	3332      	adds	r3, #50	@ 0x32
 8003e10:	4a33      	ldr	r2, [pc, #204]	@ (8003ee0 <UART_SetConfig+0x4e4>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e1c:	441c      	add	r4, r3
 8003e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e22:	2200      	movs	r2, #0
 8003e24:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e26:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	464b      	mov	r3, r9
 8003e30:	1891      	adds	r1, r2, r2
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	415b      	adcs	r3, r3
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e3c:	4641      	mov	r1, r8
 8003e3e:	1851      	adds	r1, r2, r1
 8003e40:	6039      	str	r1, [r7, #0]
 8003e42:	4649      	mov	r1, r9
 8003e44:	414b      	adcs	r3, r1
 8003e46:	607b      	str	r3, [r7, #4]
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e54:	4659      	mov	r1, fp
 8003e56:	00cb      	lsls	r3, r1, #3
 8003e58:	4651      	mov	r1, sl
 8003e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e5e:	4651      	mov	r1, sl
 8003e60:	00ca      	lsls	r2, r1, #3
 8003e62:	4610      	mov	r0, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	4603      	mov	r3, r0
 8003e68:	4642      	mov	r2, r8
 8003e6a:	189b      	adds	r3, r3, r2
 8003e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e6e:	464b      	mov	r3, r9
 8003e70:	460a      	mov	r2, r1
 8003e72:	eb42 0303 	adc.w	r3, r2, r3
 8003e76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e82:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e90:	4649      	mov	r1, r9
 8003e92:	008b      	lsls	r3, r1, #2
 8003e94:	4641      	mov	r1, r8
 8003e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e9a:	4641      	mov	r1, r8
 8003e9c:	008a      	lsls	r2, r1, #2
 8003e9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ea2:	f7fc f9c7 	bl	8000234 <__aeabi_uldivmod>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <UART_SetConfig+0x4e4>)
 8003eac:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb0:	095b      	lsrs	r3, r3, #5
 8003eb2:	2164      	movs	r1, #100	@ 0x64
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	3332      	adds	r3, #50	@ 0x32
 8003ebe:	4a08      	ldr	r2, [pc, #32]	@ (8003ee0 <UART_SetConfig+0x4e4>)
 8003ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec4:	095b      	lsrs	r3, r3, #5
 8003ec6:	f003 020f 	and.w	r2, r3, #15
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4422      	add	r2, r4
 8003ed2:	609a      	str	r2, [r3, #8]
}
 8003ed4:	bf00      	nop
 8003ed6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003eda:	46bd      	mov	sp, r7
 8003edc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ee0:	51eb851f 	.word	0x51eb851f

08003ee4 <__NVIC_SetPriority>:
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	6039      	str	r1, [r7, #0]
 8003eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	db0a      	blt.n	8003f0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	490c      	ldr	r1, [pc, #48]	@ (8003f30 <__NVIC_SetPriority+0x4c>)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	0112      	lsls	r2, r2, #4
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	440b      	add	r3, r1
 8003f08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003f0c:	e00a      	b.n	8003f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	4908      	ldr	r1, [pc, #32]	@ (8003f34 <__NVIC_SetPriority+0x50>)
 8003f14:	79fb      	ldrb	r3, [r7, #7]
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	3b04      	subs	r3, #4
 8003f1c:	0112      	lsls	r2, r2, #4
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	440b      	add	r3, r1
 8003f22:	761a      	strb	r2, [r3, #24]
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	e000e100 	.word	0xe000e100
 8003f34:	e000ed00 	.word	0xe000ed00

08003f38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003f3c:	4b05      	ldr	r3, [pc, #20]	@ (8003f54 <SysTick_Handler+0x1c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003f40:	f001 fcf4 	bl	800592c <xTaskGetSchedulerState>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d001      	beq.n	8003f4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003f4a:	f002 faed 	bl	8006528 <xPortSysTickHandler>
  }
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	e000e010 	.word	0xe000e010

08003f58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	f06f 0004 	mvn.w	r0, #4
 8003f62:	f7ff ffbf 	bl	8003ee4 <__NVIC_SetPriority>
#endif
}
 8003f66:	bf00      	nop
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f72:	f3ef 8305 	mrs	r3, IPSR
 8003f76:	603b      	str	r3, [r7, #0]
  return(result);
 8003f78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003f7e:	f06f 0305 	mvn.w	r3, #5
 8003f82:	607b      	str	r3, [r7, #4]
 8003f84:	e00c      	b.n	8003fa0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f86:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb0 <osKernelInitialize+0x44>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d105      	bne.n	8003f9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f8e:	4b08      	ldr	r3, [pc, #32]	@ (8003fb0 <osKernelInitialize+0x44>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	607b      	str	r3, [r7, #4]
 8003f98:	e002      	b.n	8003fa0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003fa0:	687b      	ldr	r3, [r7, #4]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	200005a4 	.word	0x200005a4

08003fb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fba:	f3ef 8305 	mrs	r3, IPSR
 8003fbe:	603b      	str	r3, [r7, #0]
  return(result);
 8003fc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <osKernelStart+0x1a>
    stat = osErrorISR;
 8003fc6:	f06f 0305 	mvn.w	r3, #5
 8003fca:	607b      	str	r3, [r7, #4]
 8003fcc:	e010      	b.n	8003ff0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003fce:	4b0b      	ldr	r3, [pc, #44]	@ (8003ffc <osKernelStart+0x48>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d109      	bne.n	8003fea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003fd6:	f7ff ffbf 	bl	8003f58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003fda:	4b08      	ldr	r3, [pc, #32]	@ (8003ffc <osKernelStart+0x48>)
 8003fdc:	2202      	movs	r2, #2
 8003fde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003fe0:	f001 f840 	bl	8005064 <vTaskStartScheduler>
      stat = osOK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	607b      	str	r3, [r7, #4]
 8003fe8:	e002      	b.n	8003ff0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003fea:	f04f 33ff 	mov.w	r3, #4294967295
 8003fee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ff0:	687b      	ldr	r3, [r7, #4]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	200005a4 	.word	0x200005a4

08004000 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004000:	b580      	push	{r7, lr}
 8004002:	b08e      	sub	sp, #56	@ 0x38
 8004004:	af04      	add	r7, sp, #16
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800400c:	2300      	movs	r3, #0
 800400e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004010:	f3ef 8305 	mrs	r3, IPSR
 8004014:	617b      	str	r3, [r7, #20]
  return(result);
 8004016:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004018:	2b00      	cmp	r3, #0
 800401a:	d17e      	bne.n	800411a <osThreadNew+0x11a>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d07b      	beq.n	800411a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004022:	2380      	movs	r3, #128	@ 0x80
 8004024:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004026:	2318      	movs	r3, #24
 8004028:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800402a:	2300      	movs	r3, #0
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800402e:	f04f 33ff 	mov.w	r3, #4294967295
 8004032:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d045      	beq.n	80040c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <osThreadNew+0x48>
        name = attr->name;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <osThreadNew+0x6e>
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	2b38      	cmp	r3, #56	@ 0x38
 8004060:	d805      	bhi.n	800406e <osThreadNew+0x6e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <osThreadNew+0x72>
        return (NULL);
 800406e:	2300      	movs	r3, #0
 8004070:	e054      	b.n	800411c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	089b      	lsrs	r3, r3, #2
 8004080:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00e      	beq.n	80040a8 <osThreadNew+0xa8>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	2ba7      	cmp	r3, #167	@ 0xa7
 8004090:	d90a      	bls.n	80040a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004096:	2b00      	cmp	r3, #0
 8004098:	d006      	beq.n	80040a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <osThreadNew+0xa8>
        mem = 1;
 80040a2:	2301      	movs	r3, #1
 80040a4:	61bb      	str	r3, [r7, #24]
 80040a6:	e010      	b.n	80040ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10c      	bne.n	80040ca <osThreadNew+0xca>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d108      	bne.n	80040ca <osThreadNew+0xca>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d104      	bne.n	80040ca <osThreadNew+0xca>
          mem = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	e001      	b.n	80040ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d110      	bne.n	80040f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040d8:	9202      	str	r2, [sp, #8]
 80040da:	9301      	str	r3, [sp, #4]
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	6a3a      	ldr	r2, [r7, #32]
 80040e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fdfe 	bl	8004ce8 <xTaskCreateStatic>
 80040ec:	4603      	mov	r3, r0
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	e013      	b.n	800411a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d110      	bne.n	800411a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	f107 0310 	add.w	r3, r7, #16
 8004100:	9301      	str	r3, [sp, #4]
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 fe4c 	bl	8004da8 <xTaskCreate>
 8004110:	4603      	mov	r3, r0
 8004112:	2b01      	cmp	r3, #1
 8004114:	d001      	beq.n	800411a <osThreadNew+0x11a>
            hTask = NULL;
 8004116:	2300      	movs	r3, #0
 8004118:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800411a:	693b      	ldr	r3, [r7, #16]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3728      	adds	r7, #40	@ 0x28
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4a07      	ldr	r2, [pc, #28]	@ (8004150 <vApplicationGetIdleTaskMemory+0x2c>)
 8004134:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4a06      	ldr	r2, [pc, #24]	@ (8004154 <vApplicationGetIdleTaskMemory+0x30>)
 800413a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2280      	movs	r2, #128	@ 0x80
 8004140:	601a      	str	r2, [r3, #0]
}
 8004142:	bf00      	nop
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	200005a8 	.word	0x200005a8
 8004154:	20000650 	.word	0x20000650

08004158 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4a07      	ldr	r2, [pc, #28]	@ (8004184 <vApplicationGetTimerTaskMemory+0x2c>)
 8004168:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4a06      	ldr	r2, [pc, #24]	@ (8004188 <vApplicationGetTimerTaskMemory+0x30>)
 800416e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004176:	601a      	str	r2, [r3, #0]
}
 8004178:	bf00      	nop
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	20000850 	.word	0x20000850
 8004188:	200008f8 	.word	0x200008f8

0800418c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f103 0208 	add.w	r2, r3, #8
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f04f 32ff 	mov.w	r2, #4294967295
 80041a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f103 0208 	add.w	r2, r3, #8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f103 0208 	add.w	r2, r3, #8
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041e6:	b480      	push	{r7}
 80041e8:	b085      	sub	sp, #20
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	601a      	str	r2, [r3, #0]
}
 8004222:	bf00      	nop
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800422e:	b480      	push	{r7}
 8004230:	b085      	sub	sp, #20
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004244:	d103      	bne.n	800424e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e00c      	b.n	8004268 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3308      	adds	r3, #8
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	e002      	b.n	800425c <vListInsert+0x2e>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	429a      	cmp	r2, r3
 8004266:	d2f6      	bcs.n	8004256 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	601a      	str	r2, [r3, #0]
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6892      	ldr	r2, [r2, #8]
 80042b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6852      	ldr	r2, [r2, #4]
 80042c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d103      	bne.n	80042d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	1e5a      	subs	r2, r3, #1
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10b      	bne.n	8004320 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800431a:	bf00      	nop
 800431c:	bf00      	nop
 800431e:	e7fd      	b.n	800431c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004320:	f002 f872 	bl	8006408 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800432c:	68f9      	ldr	r1, [r7, #12]
 800432e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004330:	fb01 f303 	mul.w	r3, r1, r3
 8004334:	441a      	add	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004350:	3b01      	subs	r3, #1
 8004352:	68f9      	ldr	r1, [r7, #12]
 8004354:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004356:	fb01 f303 	mul.w	r3, r1, r3
 800435a:	441a      	add	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	22ff      	movs	r2, #255	@ 0xff
 8004364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	22ff      	movs	r2, #255	@ 0xff
 800436c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d114      	bne.n	80043a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d01a      	beq.n	80043b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3310      	adds	r3, #16
 8004382:	4618      	mov	r0, r3
 8004384:	f001 f90c 	bl	80055a0 <xTaskRemoveFromEventList>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d012      	beq.n	80043b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800438e:	4b0d      	ldr	r3, [pc, #52]	@ (80043c4 <xQueueGenericReset+0xd0>)
 8004390:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	e009      	b.n	80043b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3310      	adds	r3, #16
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff fef1 	bl	800418c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3324      	adds	r3, #36	@ 0x24
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff feec 	bl	800418c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043b4:	f002 f85a 	bl	800646c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043b8:	2301      	movs	r3, #1
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	e000ed04 	.word	0xe000ed04

080043c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08e      	sub	sp, #56	@ 0x38
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10b      	bne.n	80043f4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80043ee:	bf00      	nop
 80043f0:	bf00      	nop
 80043f2:	e7fd      	b.n	80043f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10b      	bne.n	8004412 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800440c:	bf00      	nop
 800440e:	bf00      	nop
 8004410:	e7fd      	b.n	800440e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <xQueueGenericCreateStatic+0x56>
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <xQueueGenericCreateStatic+0x5a>
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <xQueueGenericCreateStatic+0x5c>
 8004422:	2300      	movs	r3, #0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10b      	bne.n	8004440 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	623b      	str	r3, [r7, #32]
}
 800443a:	bf00      	nop
 800443c:	bf00      	nop
 800443e:	e7fd      	b.n	800443c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d102      	bne.n	800444c <xQueueGenericCreateStatic+0x84>
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <xQueueGenericCreateStatic+0x88>
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <xQueueGenericCreateStatic+0x8a>
 8004450:	2300      	movs	r3, #0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10b      	bne.n	800446e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	61fb      	str	r3, [r7, #28]
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	e7fd      	b.n	800446a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800446e:	2350      	movs	r3, #80	@ 0x50
 8004470:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b50      	cmp	r3, #80	@ 0x50
 8004476:	d00b      	beq.n	8004490 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	61bb      	str	r3, [r7, #24]
}
 800448a:	bf00      	nop
 800448c:	bf00      	nop
 800448e:	e7fd      	b.n	800448c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004490:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00d      	beq.n	80044b8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800449c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80044a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	4613      	mov	r3, r2
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 f805 	bl	80044c2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3730      	adds	r7, #48	@ 0x30
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
 80044ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d103      	bne.n	80044de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	e002      	b.n	80044e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044f0:	2101      	movs	r1, #1
 80044f2:	69b8      	ldr	r0, [r7, #24]
 80044f4:	f7ff fefe 	bl	80042f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	78fa      	ldrb	r2, [r7, #3]
 80044fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004500:	bf00      	nop
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08e      	sub	sp, #56	@ 0x38
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004516:	2300      	movs	r3, #0
 8004518:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800451e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10b      	bne.n	800453c <xQueueGenericSend+0x34>
	__asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004536:	bf00      	nop
 8004538:	bf00      	nop
 800453a:	e7fd      	b.n	8004538 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d103      	bne.n	800454a <xQueueGenericSend+0x42>
 8004542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <xQueueGenericSend+0x46>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <xQueueGenericSend+0x48>
 800454e:	2300      	movs	r3, #0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10b      	bne.n	800456c <xQueueGenericSend+0x64>
	__asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004566:	bf00      	nop
 8004568:	bf00      	nop
 800456a:	e7fd      	b.n	8004568 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d103      	bne.n	800457a <xQueueGenericSend+0x72>
 8004572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004576:	2b01      	cmp	r3, #1
 8004578:	d101      	bne.n	800457e <xQueueGenericSend+0x76>
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <xQueueGenericSend+0x78>
 800457e:	2300      	movs	r3, #0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10b      	bne.n	800459c <xQueueGenericSend+0x94>
	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	623b      	str	r3, [r7, #32]
}
 8004596:	bf00      	nop
 8004598:	bf00      	nop
 800459a:	e7fd      	b.n	8004598 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800459c:	f001 f9c6 	bl	800592c <xTaskGetSchedulerState>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d102      	bne.n	80045ac <xQueueGenericSend+0xa4>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <xQueueGenericSend+0xa8>
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <xQueueGenericSend+0xaa>
 80045b0:	2300      	movs	r3, #0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10b      	bne.n	80045ce <xQueueGenericSend+0xc6>
	__asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	61fb      	str	r3, [r7, #28]
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	e7fd      	b.n	80045ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045ce:	f001 ff1b 	bl	8006408 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045da:	429a      	cmp	r2, r3
 80045dc:	d302      	bcc.n	80045e4 <xQueueGenericSend+0xdc>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d129      	bne.n	8004638 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045ea:	f000 fa0f 	bl	8004a0c <prvCopyDataToQueue>
 80045ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d010      	beq.n	800461a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fa:	3324      	adds	r3, #36	@ 0x24
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 ffcf 	bl	80055a0 <xTaskRemoveFromEventList>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d013      	beq.n	8004630 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004608:	4b3f      	ldr	r3, [pc, #252]	@ (8004708 <xQueueGenericSend+0x200>)
 800460a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	e00a      	b.n	8004630 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800461a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800461c:	2b00      	cmp	r3, #0
 800461e:	d007      	beq.n	8004630 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004620:	4b39      	ldr	r3, [pc, #228]	@ (8004708 <xQueueGenericSend+0x200>)
 8004622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004630:	f001 ff1c 	bl	800646c <vPortExitCritical>
				return pdPASS;
 8004634:	2301      	movs	r3, #1
 8004636:	e063      	b.n	8004700 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d103      	bne.n	8004646 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800463e:	f001 ff15 	bl	800646c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004642:	2300      	movs	r3, #0
 8004644:	e05c      	b.n	8004700 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004648:	2b00      	cmp	r3, #0
 800464a:	d106      	bne.n	800465a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800464c:	f107 0314 	add.w	r3, r7, #20
 8004650:	4618      	mov	r0, r3
 8004652:	f001 f809 	bl	8005668 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004656:	2301      	movs	r3, #1
 8004658:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800465a:	f001 ff07 	bl	800646c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800465e:	f000 fd71 	bl	8005144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004662:	f001 fed1 	bl	8006408 <vPortEnterCritical>
 8004666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004668:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800466c:	b25b      	sxtb	r3, r3
 800466e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004672:	d103      	bne.n	800467c <xQueueGenericSend+0x174>
 8004674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800467c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004682:	b25b      	sxtb	r3, r3
 8004684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004688:	d103      	bne.n	8004692 <xQueueGenericSend+0x18a>
 800468a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004692:	f001 feeb 	bl	800646c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004696:	1d3a      	adds	r2, r7, #4
 8004698:	f107 0314 	add.w	r3, r7, #20
 800469c:	4611      	mov	r1, r2
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fff8 	bl	8005694 <xTaskCheckForTimeOut>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d124      	bne.n	80046f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046ac:	f000 faa6 	bl	8004bfc <prvIsQueueFull>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d018      	beq.n	80046e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b8:	3310      	adds	r3, #16
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	4611      	mov	r1, r2
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 ff1c 	bl	80054fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046c6:	f000 fa31 	bl	8004b2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046ca:	f000 fd49 	bl	8005160 <xTaskResumeAll>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f47f af7c 	bne.w	80045ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80046d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004708 <xQueueGenericSend+0x200>)
 80046d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	e772      	b.n	80045ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046ea:	f000 fa1f 	bl	8004b2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046ee:	f000 fd37 	bl	8005160 <xTaskResumeAll>
 80046f2:	e76c      	b.n	80045ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80046f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046f6:	f000 fa19 	bl	8004b2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046fa:	f000 fd31 	bl	8005160 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80046fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004700:	4618      	mov	r0, r3
 8004702:	3738      	adds	r7, #56	@ 0x38
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	e000ed04 	.word	0xe000ed04

0800470c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b090      	sub	sp, #64	@ 0x40
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800471e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10b      	bne.n	800473c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004736:	bf00      	nop
 8004738:	bf00      	nop
 800473a:	e7fd      	b.n	8004738 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d103      	bne.n	800474a <xQueueGenericSendFromISR+0x3e>
 8004742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <xQueueGenericSendFromISR+0x42>
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <xQueueGenericSendFromISR+0x44>
 800474e:	2300      	movs	r3, #0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10b      	bne.n	800476c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004766:	bf00      	nop
 8004768:	bf00      	nop
 800476a:	e7fd      	b.n	8004768 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d103      	bne.n	800477a <xQueueGenericSendFromISR+0x6e>
 8004772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <xQueueGenericSendFromISR+0x72>
 800477a:	2301      	movs	r3, #1
 800477c:	e000      	b.n	8004780 <xQueueGenericSendFromISR+0x74>
 800477e:	2300      	movs	r3, #0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10b      	bne.n	800479c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	623b      	str	r3, [r7, #32]
}
 8004796:	bf00      	nop
 8004798:	bf00      	nop
 800479a:	e7fd      	b.n	8004798 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800479c:	f001 ff14 	bl	80065c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047a0:	f3ef 8211 	mrs	r2, BASEPRI
 80047a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	61fa      	str	r2, [r7, #28]
 80047b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d302      	bcc.n	80047ce <xQueueGenericSendFromISR+0xc2>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d12f      	bne.n	800482e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80047e4:	f000 f912 	bl	8004a0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f0:	d112      	bne.n	8004818 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d016      	beq.n	8004828 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047fc:	3324      	adds	r3, #36	@ 0x24
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fece 	bl	80055a0 <xTaskRemoveFromEventList>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00e      	beq.n	8004828 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00b      	beq.n	8004828 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	e007      	b.n	8004828 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004818:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800481c:	3301      	adds	r3, #1
 800481e:	b2db      	uxtb	r3, r3
 8004820:	b25a      	sxtb	r2, r3
 8004822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004828:	2301      	movs	r3, #1
 800482a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800482c:	e001      	b.n	8004832 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800482e:	2300      	movs	r3, #0
 8004830:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004834:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800483c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800483e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004840:	4618      	mov	r0, r3
 8004842:	3740      	adds	r7, #64	@ 0x40
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08c      	sub	sp, #48	@ 0x30
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004854:	2300      	movs	r3, #0
 8004856:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800485c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10b      	bne.n	800487a <xQueueReceive+0x32>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	623b      	str	r3, [r7, #32]
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop
 8004878:	e7fd      	b.n	8004876 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d103      	bne.n	8004888 <xQueueReceive+0x40>
 8004880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <xQueueReceive+0x44>
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <xQueueReceive+0x46>
 800488c:	2300      	movs	r3, #0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10b      	bne.n	80048aa <xQueueReceive+0x62>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	61fb      	str	r3, [r7, #28]
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop
 80048a8:	e7fd      	b.n	80048a6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048aa:	f001 f83f 	bl	800592c <xTaskGetSchedulerState>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d102      	bne.n	80048ba <xQueueReceive+0x72>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <xQueueReceive+0x76>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <xQueueReceive+0x78>
 80048be:	2300      	movs	r3, #0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10b      	bne.n	80048dc <xQueueReceive+0x94>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	61bb      	str	r3, [r7, #24]
}
 80048d6:	bf00      	nop
 80048d8:	bf00      	nop
 80048da:	e7fd      	b.n	80048d8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048dc:	f001 fd94 	bl	8006408 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01f      	beq.n	800492c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048f0:	f000 f8f6 	bl	8004ae0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f6:	1e5a      	subs	r2, r3, #1
 80048f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00f      	beq.n	8004924 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004906:	3310      	adds	r3, #16
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fe49 	bl	80055a0 <xTaskRemoveFromEventList>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004914:	4b3c      	ldr	r3, [pc, #240]	@ (8004a08 <xQueueReceive+0x1c0>)
 8004916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004924:	f001 fda2 	bl	800646c <vPortExitCritical>
				return pdPASS;
 8004928:	2301      	movs	r3, #1
 800492a:	e069      	b.n	8004a00 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d103      	bne.n	800493a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004932:	f001 fd9b 	bl	800646c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004936:	2300      	movs	r3, #0
 8004938:	e062      	b.n	8004a00 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800493a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d106      	bne.n	800494e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004940:	f107 0310 	add.w	r3, r7, #16
 8004944:	4618      	mov	r0, r3
 8004946:	f000 fe8f 	bl	8005668 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800494a:	2301      	movs	r3, #1
 800494c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800494e:	f001 fd8d 	bl	800646c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004952:	f000 fbf7 	bl	8005144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004956:	f001 fd57 	bl	8006408 <vPortEnterCritical>
 800495a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004960:	b25b      	sxtb	r3, r3
 8004962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004966:	d103      	bne.n	8004970 <xQueueReceive+0x128>
 8004968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004972:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004976:	b25b      	sxtb	r3, r3
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d103      	bne.n	8004986 <xQueueReceive+0x13e>
 800497e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004986:	f001 fd71 	bl	800646c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800498a:	1d3a      	adds	r2, r7, #4
 800498c:	f107 0310 	add.w	r3, r7, #16
 8004990:	4611      	mov	r1, r2
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fe7e 	bl	8005694 <xTaskCheckForTimeOut>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d123      	bne.n	80049e6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800499e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049a0:	f000 f916 	bl	8004bd0 <prvIsQueueEmpty>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d017      	beq.n	80049da <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ac:	3324      	adds	r3, #36	@ 0x24
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	4611      	mov	r1, r2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fda2 	bl	80054fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049ba:	f000 f8b7 	bl	8004b2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049be:	f000 fbcf 	bl	8005160 <xTaskResumeAll>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d189      	bne.n	80048dc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80049c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004a08 <xQueueReceive+0x1c0>)
 80049ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	e780      	b.n	80048dc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80049da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049dc:	f000 f8a6 	bl	8004b2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049e0:	f000 fbbe 	bl	8005160 <xTaskResumeAll>
 80049e4:	e77a      	b.n	80048dc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049e8:	f000 f8a0 	bl	8004b2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049ec:	f000 fbb8 	bl	8005160 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049f2:	f000 f8ed 	bl	8004bd0 <prvIsQueueEmpty>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f43f af6f 	beq.w	80048dc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3730      	adds	r7, #48	@ 0x30
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	e000ed04 	.word	0xe000ed04

08004a0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10d      	bne.n	8004a46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d14d      	bne.n	8004ace <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 ff96 	bl	8005968 <xTaskPriorityDisinherit>
 8004a3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	609a      	str	r2, [r3, #8]
 8004a44:	e043      	b.n	8004ace <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d119      	bne.n	8004a80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6858      	ldr	r0, [r3, #4]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a54:	461a      	mov	r2, r3
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	f002 f872 	bl	8006b40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a64:	441a      	add	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d32b      	bcc.n	8004ace <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	605a      	str	r2, [r3, #4]
 8004a7e:	e026      	b.n	8004ace <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	68d8      	ldr	r0, [r3, #12]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a88:	461a      	mov	r2, r3
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	f002 f858 	bl	8006b40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a98:	425b      	negs	r3, r3
 8004a9a:	441a      	add	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d207      	bcs.n	8004abc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab4:	425b      	negs	r3, r3
 8004ab6:	441a      	add	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d105      	bne.n	8004ace <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004ad6:	697b      	ldr	r3, [r7, #20]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d018      	beq.n	8004b24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	441a      	add	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d303      	bcc.n	8004b14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68d9      	ldr	r1, [r3, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6838      	ldr	r0, [r7, #0]
 8004b20:	f002 f80e 	bl	8006b40 <memcpy>
	}
}
 8004b24:	bf00      	nop
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b34:	f001 fc68 	bl	8006408 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b40:	e011      	b.n	8004b66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d012      	beq.n	8004b70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3324      	adds	r3, #36	@ 0x24
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fd26 	bl	80055a0 <xTaskRemoveFromEventList>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b5a:	f000 fdff 	bl	800575c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	dce9      	bgt.n	8004b42 <prvUnlockQueue+0x16>
 8004b6e:	e000      	b.n	8004b72 <prvUnlockQueue+0x46>
					break;
 8004b70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	22ff      	movs	r2, #255	@ 0xff
 8004b76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004b7a:	f001 fc77 	bl	800646c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b7e:	f001 fc43 	bl	8006408 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b8a:	e011      	b.n	8004bb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d012      	beq.n	8004bba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3310      	adds	r3, #16
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 fd01 	bl	80055a0 <xTaskRemoveFromEventList>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ba4:	f000 fdda 	bl	800575c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ba8:	7bbb      	ldrb	r3, [r7, #14]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	dce9      	bgt.n	8004b8c <prvUnlockQueue+0x60>
 8004bb8:	e000      	b.n	8004bbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004bba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	22ff      	movs	r2, #255	@ 0xff
 8004bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004bc4:	f001 fc52 	bl	800646c <vPortExitCritical>
}
 8004bc8:	bf00      	nop
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bd8:	f001 fc16 	bl	8006408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004be4:	2301      	movs	r3, #1
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	e001      	b.n	8004bee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bee:	f001 fc3d 	bl	800646c <vPortExitCritical>

	return xReturn;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c04:	f001 fc00 	bl	8006408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d102      	bne.n	8004c1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c14:	2301      	movs	r3, #1
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	e001      	b.n	8004c1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c1e:	f001 fc25 	bl	800646c <vPortExitCritical>

	return xReturn;
 8004c22:	68fb      	ldr	r3, [r7, #12]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	e014      	b.n	8004c66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c3c:	4a0f      	ldr	r2, [pc, #60]	@ (8004c7c <vQueueAddToRegistry+0x50>)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10b      	bne.n	8004c60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c48:	490c      	ldr	r1, [pc, #48]	@ (8004c7c <vQueueAddToRegistry+0x50>)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c52:	4a0a      	ldr	r2, [pc, #40]	@ (8004c7c <vQueueAddToRegistry+0x50>)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	4413      	add	r3, r2
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c5e:	e006      	b.n	8004c6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3301      	adds	r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b07      	cmp	r3, #7
 8004c6a:	d9e7      	bls.n	8004c3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c6c:	bf00      	nop
 8004c6e:	bf00      	nop
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	20000cf8 	.word	0x20000cf8

08004c80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c90:	f001 fbba 	bl	8006408 <vPortEnterCritical>
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c9a:	b25b      	sxtb	r3, r3
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca0:	d103      	bne.n	8004caa <vQueueWaitForMessageRestricted+0x2a>
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cb0:	b25b      	sxtb	r3, r3
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb6:	d103      	bne.n	8004cc0 <vQueueWaitForMessageRestricted+0x40>
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cc0:	f001 fbd4 	bl	800646c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	3324      	adds	r3, #36	@ 0x24
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	68b9      	ldr	r1, [r7, #8]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fc37 	bl	8005548 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004cda:	6978      	ldr	r0, [r7, #20]
 8004cdc:	f7ff ff26 	bl	8004b2c <prvUnlockQueue>
	}
 8004ce0:	bf00      	nop
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08e      	sub	sp, #56	@ 0x38
 8004cec:	af04      	add	r7, sp, #16
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10b      	bne.n	8004d14 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	623b      	str	r3, [r7, #32]
}
 8004d0e:	bf00      	nop
 8004d10:	bf00      	nop
 8004d12:	e7fd      	b.n	8004d10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10b      	bne.n	8004d32 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	61fb      	str	r3, [r7, #28]
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	e7fd      	b.n	8004d2e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d32:	23a8      	movs	r3, #168	@ 0xa8
 8004d34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2ba8      	cmp	r3, #168	@ 0xa8
 8004d3a:	d00b      	beq.n	8004d54 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	61bb      	str	r3, [r7, #24]
}
 8004d4e:	bf00      	nop
 8004d50:	bf00      	nop
 8004d52:	e7fd      	b.n	8004d50 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01e      	beq.n	8004d9a <xTaskCreateStatic+0xb2>
 8004d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d01b      	beq.n	8004d9a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d64:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d6a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d74:	2300      	movs	r3, #0
 8004d76:	9303      	str	r3, [sp, #12]
 8004d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7a:	9302      	str	r3, [sp, #8]
 8004d7c:	f107 0314 	add.w	r3, r7, #20
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f851 	bl	8004e34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d94:	f000 f8f6 	bl	8004f84 <prvAddNewTaskToReadyList>
 8004d98:	e001      	b.n	8004d9e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d9e:	697b      	ldr	r3, [r7, #20]
	}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3728      	adds	r7, #40	@ 0x28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08c      	sub	sp, #48	@ 0x30
 8004dac:	af04      	add	r7, sp, #16
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	4613      	mov	r3, r2
 8004db6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004db8:	88fb      	ldrh	r3, [r7, #6]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f001 fc45 	bl	800664c <pvPortMalloc>
 8004dc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00e      	beq.n	8004de8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004dca:	20a8      	movs	r0, #168	@ 0xa8
 8004dcc:	f001 fc3e 	bl	800664c <pvPortMalloc>
 8004dd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	631a      	str	r2, [r3, #48]	@ 0x30
 8004dde:	e005      	b.n	8004dec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004de0:	6978      	ldr	r0, [r7, #20]
 8004de2:	f001 fd01 	bl	80067e8 <vPortFree>
 8004de6:	e001      	b.n	8004dec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d017      	beq.n	8004e22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004dfa:	88fa      	ldrh	r2, [r7, #6]
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	9303      	str	r3, [sp, #12]
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	9302      	str	r3, [sp, #8]
 8004e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e06:	9301      	str	r3, [sp, #4]
 8004e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68b9      	ldr	r1, [r7, #8]
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f80f 	bl	8004e34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e16:	69f8      	ldr	r0, [r7, #28]
 8004e18:	f000 f8b4 	bl	8004f84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	e002      	b.n	8004e28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e22:	f04f 33ff 	mov.w	r3, #4294967295
 8004e26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e28:	69bb      	ldr	r3, [r7, #24]
	}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3720      	adds	r7, #32
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e44:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	21a5      	movs	r1, #165	@ 0xa5
 8004e4e:	f001 fdeb 	bl	8006a28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	f023 0307 	bic.w	r3, r3, #7
 8004e6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00b      	beq.n	8004e8e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	617b      	str	r3, [r7, #20]
}
 8004e88:	bf00      	nop
 8004e8a:	bf00      	nop
 8004e8c:	e7fd      	b.n	8004e8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d01f      	beq.n	8004ed4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e94:	2300      	movs	r3, #0
 8004e96:	61fb      	str	r3, [r7, #28]
 8004e98:	e012      	b.n	8004ec0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	7819      	ldrb	r1, [r3, #0]
 8004ea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	3334      	adds	r3, #52	@ 0x34
 8004eaa:	460a      	mov	r2, r1
 8004eac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d006      	beq.n	8004ec8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	61fb      	str	r3, [r7, #28]
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	2b0f      	cmp	r3, #15
 8004ec4:	d9e9      	bls.n	8004e9a <prvInitialiseNewTask+0x66>
 8004ec6:	e000      	b.n	8004eca <prvInitialiseNewTask+0x96>
			{
				break;
 8004ec8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ed2:	e003      	b.n	8004edc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ede:	2b37      	cmp	r3, #55	@ 0x37
 8004ee0:	d901      	bls.n	8004ee6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ee2:	2337      	movs	r3, #55	@ 0x37
 8004ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ef0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efa:	3304      	adds	r3, #4
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff f965 	bl	80041cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f04:	3318      	adds	r3, #24
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff f960 	bl	80041cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f20:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f24:	2200      	movs	r2, #0
 8004f26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f34:	3354      	adds	r3, #84	@ 0x54
 8004f36:	224c      	movs	r2, #76	@ 0x4c
 8004f38:	2100      	movs	r1, #0
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f001 fd74 	bl	8006a28 <memset>
 8004f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f42:	4a0d      	ldr	r2, [pc, #52]	@ (8004f78 <prvInitialiseNewTask+0x144>)
 8004f44:	659a      	str	r2, [r3, #88]	@ 0x58
 8004f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f48:	4a0c      	ldr	r2, [pc, #48]	@ (8004f7c <prvInitialiseNewTask+0x148>)
 8004f4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8004f80 <prvInitialiseNewTask+0x14c>)
 8004f50:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	68f9      	ldr	r1, [r7, #12]
 8004f56:	69b8      	ldr	r0, [r7, #24]
 8004f58:	f001 f924 	bl	80061a4 <pxPortInitialiseStack>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f6e:	bf00      	nop
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20004f8c 	.word	0x20004f8c
 8004f7c:	20004ff4 	.word	0x20004ff4
 8004f80:	2000505c 	.word	0x2000505c

08004f84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f8c:	f001 fa3c 	bl	8006408 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f90:	4b2d      	ldr	r3, [pc, #180]	@ (8005048 <prvAddNewTaskToReadyList+0xc4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3301      	adds	r3, #1
 8004f96:	4a2c      	ldr	r2, [pc, #176]	@ (8005048 <prvAddNewTaskToReadyList+0xc4>)
 8004f98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f9a:	4b2c      	ldr	r3, [pc, #176]	@ (800504c <prvAddNewTaskToReadyList+0xc8>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d109      	bne.n	8004fb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004fa2:	4a2a      	ldr	r2, [pc, #168]	@ (800504c <prvAddNewTaskToReadyList+0xc8>)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fa8:	4b27      	ldr	r3, [pc, #156]	@ (8005048 <prvAddNewTaskToReadyList+0xc4>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d110      	bne.n	8004fd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fb0:	f000 fbf8 	bl	80057a4 <prvInitialiseTaskLists>
 8004fb4:	e00d      	b.n	8004fd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fb6:	4b26      	ldr	r3, [pc, #152]	@ (8005050 <prvAddNewTaskToReadyList+0xcc>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fbe:	4b23      	ldr	r3, [pc, #140]	@ (800504c <prvAddNewTaskToReadyList+0xc8>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d802      	bhi.n	8004fd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800504c <prvAddNewTaskToReadyList+0xc8>)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004fd2:	4b20      	ldr	r3, [pc, #128]	@ (8005054 <prvAddNewTaskToReadyList+0xd0>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	4a1e      	ldr	r2, [pc, #120]	@ (8005054 <prvAddNewTaskToReadyList+0xd0>)
 8004fda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8005054 <prvAddNewTaskToReadyList+0xd0>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8005058 <prvAddNewTaskToReadyList+0xd4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d903      	bls.n	8004ff8 <prvAddNewTaskToReadyList+0x74>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff4:	4a18      	ldr	r2, [pc, #96]	@ (8005058 <prvAddNewTaskToReadyList+0xd4>)
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4a15      	ldr	r2, [pc, #84]	@ (800505c <prvAddNewTaskToReadyList+0xd8>)
 8005006:	441a      	add	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3304      	adds	r3, #4
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f7ff f8e9 	bl	80041e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005014:	f001 fa2a 	bl	800646c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005018:	4b0d      	ldr	r3, [pc, #52]	@ (8005050 <prvAddNewTaskToReadyList+0xcc>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00e      	beq.n	800503e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005020:	4b0a      	ldr	r3, [pc, #40]	@ (800504c <prvAddNewTaskToReadyList+0xc8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502a:	429a      	cmp	r2, r3
 800502c:	d207      	bcs.n	800503e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800502e:	4b0c      	ldr	r3, [pc, #48]	@ (8005060 <prvAddNewTaskToReadyList+0xdc>)
 8005030:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	2000120c 	.word	0x2000120c
 800504c:	20000d38 	.word	0x20000d38
 8005050:	20001218 	.word	0x20001218
 8005054:	20001228 	.word	0x20001228
 8005058:	20001214 	.word	0x20001214
 800505c:	20000d3c 	.word	0x20000d3c
 8005060:	e000ed04 	.word	0xe000ed04

08005064 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	@ 0x28
 8005068:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800506a:	2300      	movs	r3, #0
 800506c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800506e:	2300      	movs	r3, #0
 8005070:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005072:	463a      	mov	r2, r7
 8005074:	1d39      	adds	r1, r7, #4
 8005076:	f107 0308 	add.w	r3, r7, #8
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff f852 	bl	8004124 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005080:	6839      	ldr	r1, [r7, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	9202      	str	r2, [sp, #8]
 8005088:	9301      	str	r3, [sp, #4]
 800508a:	2300      	movs	r3, #0
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	2300      	movs	r3, #0
 8005090:	460a      	mov	r2, r1
 8005092:	4924      	ldr	r1, [pc, #144]	@ (8005124 <vTaskStartScheduler+0xc0>)
 8005094:	4824      	ldr	r0, [pc, #144]	@ (8005128 <vTaskStartScheduler+0xc4>)
 8005096:	f7ff fe27 	bl	8004ce8 <xTaskCreateStatic>
 800509a:	4603      	mov	r3, r0
 800509c:	4a23      	ldr	r2, [pc, #140]	@ (800512c <vTaskStartScheduler+0xc8>)
 800509e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80050a0:	4b22      	ldr	r3, [pc, #136]	@ (800512c <vTaskStartScheduler+0xc8>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80050a8:	2301      	movs	r3, #1
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	e001      	b.n	80050b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d102      	bne.n	80050be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80050b8:	f000 fd1a 	bl	8005af0 <xTimerCreateTimerTask>
 80050bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d11b      	bne.n	80050fc <vTaskStartScheduler+0x98>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	613b      	str	r3, [r7, #16]
}
 80050d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050d8:	4b15      	ldr	r3, [pc, #84]	@ (8005130 <vTaskStartScheduler+0xcc>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3354      	adds	r3, #84	@ 0x54
 80050de:	4a15      	ldr	r2, [pc, #84]	@ (8005134 <vTaskStartScheduler+0xd0>)
 80050e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050e2:	4b15      	ldr	r3, [pc, #84]	@ (8005138 <vTaskStartScheduler+0xd4>)
 80050e4:	f04f 32ff 	mov.w	r2, #4294967295
 80050e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050ea:	4b14      	ldr	r3, [pc, #80]	@ (800513c <vTaskStartScheduler+0xd8>)
 80050ec:	2201      	movs	r2, #1
 80050ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80050f0:	4b13      	ldr	r3, [pc, #76]	@ (8005140 <vTaskStartScheduler+0xdc>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050f6:	f001 f8e3 	bl	80062c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050fa:	e00f      	b.n	800511c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005102:	d10b      	bne.n	800511c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	60fb      	str	r3, [r7, #12]
}
 8005116:	bf00      	nop
 8005118:	bf00      	nop
 800511a:	e7fd      	b.n	8005118 <vTaskStartScheduler+0xb4>
}
 800511c:	bf00      	nop
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	08006c54 	.word	0x08006c54
 8005128:	08005775 	.word	0x08005775
 800512c:	20001230 	.word	0x20001230
 8005130:	20000d38 	.word	0x20000d38
 8005134:	2000002c 	.word	0x2000002c
 8005138:	2000122c 	.word	0x2000122c
 800513c:	20001218 	.word	0x20001218
 8005140:	20001210 	.word	0x20001210

08005144 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005148:	4b04      	ldr	r3, [pc, #16]	@ (800515c <vTaskSuspendAll+0x18>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3301      	adds	r3, #1
 800514e:	4a03      	ldr	r2, [pc, #12]	@ (800515c <vTaskSuspendAll+0x18>)
 8005150:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005152:	bf00      	nop
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	20001234 	.word	0x20001234

08005160 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800516a:	2300      	movs	r3, #0
 800516c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800516e:	4b42      	ldr	r3, [pc, #264]	@ (8005278 <xTaskResumeAll+0x118>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10b      	bne.n	800518e <xTaskResumeAll+0x2e>
	__asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	603b      	str	r3, [r7, #0]
}
 8005188:	bf00      	nop
 800518a:	bf00      	nop
 800518c:	e7fd      	b.n	800518a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800518e:	f001 f93b 	bl	8006408 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005192:	4b39      	ldr	r3, [pc, #228]	@ (8005278 <xTaskResumeAll+0x118>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3b01      	subs	r3, #1
 8005198:	4a37      	ldr	r2, [pc, #220]	@ (8005278 <xTaskResumeAll+0x118>)
 800519a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800519c:	4b36      	ldr	r3, [pc, #216]	@ (8005278 <xTaskResumeAll+0x118>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d162      	bne.n	800526a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051a4:	4b35      	ldr	r3, [pc, #212]	@ (800527c <xTaskResumeAll+0x11c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d05e      	beq.n	800526a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051ac:	e02f      	b.n	800520e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ae:	4b34      	ldr	r3, [pc, #208]	@ (8005280 <xTaskResumeAll+0x120>)
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3318      	adds	r3, #24
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff f870 	bl	80042a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	3304      	adds	r3, #4
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7ff f86b 	bl	80042a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005284 <xTaskResumeAll+0x124>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d903      	bls.n	80051de <xTaskResumeAll+0x7e>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051da:	4a2a      	ldr	r2, [pc, #168]	@ (8005284 <xTaskResumeAll+0x124>)
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051e2:	4613      	mov	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4a27      	ldr	r2, [pc, #156]	@ (8005288 <xTaskResumeAll+0x128>)
 80051ec:	441a      	add	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3304      	adds	r3, #4
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f7fe fff6 	bl	80041e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051fe:	4b23      	ldr	r3, [pc, #140]	@ (800528c <xTaskResumeAll+0x12c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005204:	429a      	cmp	r2, r3
 8005206:	d302      	bcc.n	800520e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005208:	4b21      	ldr	r3, [pc, #132]	@ (8005290 <xTaskResumeAll+0x130>)
 800520a:	2201      	movs	r2, #1
 800520c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800520e:	4b1c      	ldr	r3, [pc, #112]	@ (8005280 <xTaskResumeAll+0x120>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1cb      	bne.n	80051ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800521c:	f000 fb66 	bl	80058ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005220:	4b1c      	ldr	r3, [pc, #112]	@ (8005294 <xTaskResumeAll+0x134>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d010      	beq.n	800524e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800522c:	f000 f846 	bl	80052bc <xTaskIncrementTick>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005236:	4b16      	ldr	r3, [pc, #88]	@ (8005290 <xTaskResumeAll+0x130>)
 8005238:	2201      	movs	r2, #1
 800523a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3b01      	subs	r3, #1
 8005240:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1f1      	bne.n	800522c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005248:	4b12      	ldr	r3, [pc, #72]	@ (8005294 <xTaskResumeAll+0x134>)
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800524e:	4b10      	ldr	r3, [pc, #64]	@ (8005290 <xTaskResumeAll+0x130>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d009      	beq.n	800526a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005256:	2301      	movs	r3, #1
 8005258:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800525a:	4b0f      	ldr	r3, [pc, #60]	@ (8005298 <xTaskResumeAll+0x138>)
 800525c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800526a:	f001 f8ff 	bl	800646c <vPortExitCritical>

	return xAlreadyYielded;
 800526e:	68bb      	ldr	r3, [r7, #8]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20001234 	.word	0x20001234
 800527c:	2000120c 	.word	0x2000120c
 8005280:	200011cc 	.word	0x200011cc
 8005284:	20001214 	.word	0x20001214
 8005288:	20000d3c 	.word	0x20000d3c
 800528c:	20000d38 	.word	0x20000d38
 8005290:	20001220 	.word	0x20001220
 8005294:	2000121c 	.word	0x2000121c
 8005298:	e000ed04 	.word	0xe000ed04

0800529c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80052a2:	4b05      	ldr	r3, [pc, #20]	@ (80052b8 <xTaskGetTickCount+0x1c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80052a8:	687b      	ldr	r3, [r7, #4]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	20001210 	.word	0x20001210

080052bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052c2:	2300      	movs	r3, #0
 80052c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052c6:	4b4f      	ldr	r3, [pc, #316]	@ (8005404 <xTaskIncrementTick+0x148>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f040 8090 	bne.w	80053f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052d0:	4b4d      	ldr	r3, [pc, #308]	@ (8005408 <xTaskIncrementTick+0x14c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3301      	adds	r3, #1
 80052d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052d8:	4a4b      	ldr	r2, [pc, #300]	@ (8005408 <xTaskIncrementTick+0x14c>)
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d121      	bne.n	8005328 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80052e4:	4b49      	ldr	r3, [pc, #292]	@ (800540c <xTaskIncrementTick+0x150>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00b      	beq.n	8005306 <xTaskIncrementTick+0x4a>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	603b      	str	r3, [r7, #0]
}
 8005300:	bf00      	nop
 8005302:	bf00      	nop
 8005304:	e7fd      	b.n	8005302 <xTaskIncrementTick+0x46>
 8005306:	4b41      	ldr	r3, [pc, #260]	@ (800540c <xTaskIncrementTick+0x150>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	4b40      	ldr	r3, [pc, #256]	@ (8005410 <xTaskIncrementTick+0x154>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a3e      	ldr	r2, [pc, #248]	@ (800540c <xTaskIncrementTick+0x150>)
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	4a3e      	ldr	r2, [pc, #248]	@ (8005410 <xTaskIncrementTick+0x154>)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	4b3e      	ldr	r3, [pc, #248]	@ (8005414 <xTaskIncrementTick+0x158>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3301      	adds	r3, #1
 8005320:	4a3c      	ldr	r2, [pc, #240]	@ (8005414 <xTaskIncrementTick+0x158>)
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	f000 fae2 	bl	80058ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005328:	4b3b      	ldr	r3, [pc, #236]	@ (8005418 <xTaskIncrementTick+0x15c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	429a      	cmp	r2, r3
 8005330:	d349      	bcc.n	80053c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005332:	4b36      	ldr	r3, [pc, #216]	@ (800540c <xTaskIncrementTick+0x150>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d104      	bne.n	8005346 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800533c:	4b36      	ldr	r3, [pc, #216]	@ (8005418 <xTaskIncrementTick+0x15c>)
 800533e:	f04f 32ff 	mov.w	r2, #4294967295
 8005342:	601a      	str	r2, [r3, #0]
					break;
 8005344:	e03f      	b.n	80053c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005346:	4b31      	ldr	r3, [pc, #196]	@ (800540c <xTaskIncrementTick+0x150>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	429a      	cmp	r2, r3
 800535c:	d203      	bcs.n	8005366 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800535e:	4a2e      	ldr	r2, [pc, #184]	@ (8005418 <xTaskIncrementTick+0x15c>)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005364:	e02f      	b.n	80053c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	3304      	adds	r3, #4
 800536a:	4618      	mov	r0, r3
 800536c:	f7fe ff98 	bl	80042a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005374:	2b00      	cmp	r3, #0
 8005376:	d004      	beq.n	8005382 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	3318      	adds	r3, #24
 800537c:	4618      	mov	r0, r3
 800537e:	f7fe ff8f 	bl	80042a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005386:	4b25      	ldr	r3, [pc, #148]	@ (800541c <xTaskIncrementTick+0x160>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d903      	bls.n	8005396 <xTaskIncrementTick+0xda>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005392:	4a22      	ldr	r2, [pc, #136]	@ (800541c <xTaskIncrementTick+0x160>)
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005420 <xTaskIncrementTick+0x164>)
 80053a4:	441a      	add	r2, r3
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	3304      	adds	r3, #4
 80053aa:	4619      	mov	r1, r3
 80053ac:	4610      	mov	r0, r2
 80053ae:	f7fe ff1a 	bl	80041e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005424 <xTaskIncrementTick+0x168>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053bc:	429a      	cmp	r2, r3
 80053be:	d3b8      	bcc.n	8005332 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80053c0:	2301      	movs	r3, #1
 80053c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053c4:	e7b5      	b.n	8005332 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053c6:	4b17      	ldr	r3, [pc, #92]	@ (8005424 <xTaskIncrementTick+0x168>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053cc:	4914      	ldr	r1, [pc, #80]	@ (8005420 <xTaskIncrementTick+0x164>)
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	440b      	add	r3, r1
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d901      	bls.n	80053e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80053de:	2301      	movs	r3, #1
 80053e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80053e2:	4b11      	ldr	r3, [pc, #68]	@ (8005428 <xTaskIncrementTick+0x16c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d007      	beq.n	80053fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80053ea:	2301      	movs	r3, #1
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	e004      	b.n	80053fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80053f0:	4b0e      	ldr	r3, [pc, #56]	@ (800542c <xTaskIncrementTick+0x170>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3301      	adds	r3, #1
 80053f6:	4a0d      	ldr	r2, [pc, #52]	@ (800542c <xTaskIncrementTick+0x170>)
 80053f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80053fa:	697b      	ldr	r3, [r7, #20]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20001234 	.word	0x20001234
 8005408:	20001210 	.word	0x20001210
 800540c:	200011c4 	.word	0x200011c4
 8005410:	200011c8 	.word	0x200011c8
 8005414:	20001224 	.word	0x20001224
 8005418:	2000122c 	.word	0x2000122c
 800541c:	20001214 	.word	0x20001214
 8005420:	20000d3c 	.word	0x20000d3c
 8005424:	20000d38 	.word	0x20000d38
 8005428:	20001220 	.word	0x20001220
 800542c:	2000121c 	.word	0x2000121c

08005430 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005436:	4b2b      	ldr	r3, [pc, #172]	@ (80054e4 <vTaskSwitchContext+0xb4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800543e:	4b2a      	ldr	r3, [pc, #168]	@ (80054e8 <vTaskSwitchContext+0xb8>)
 8005440:	2201      	movs	r2, #1
 8005442:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005444:	e047      	b.n	80054d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005446:	4b28      	ldr	r3, [pc, #160]	@ (80054e8 <vTaskSwitchContext+0xb8>)
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800544c:	4b27      	ldr	r3, [pc, #156]	@ (80054ec <vTaskSwitchContext+0xbc>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	e011      	b.n	8005478 <vTaskSwitchContext+0x48>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10b      	bne.n	8005472 <vTaskSwitchContext+0x42>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	607b      	str	r3, [r7, #4]
}
 800546c:	bf00      	nop
 800546e:	bf00      	nop
 8005470:	e7fd      	b.n	800546e <vTaskSwitchContext+0x3e>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3b01      	subs	r3, #1
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	491d      	ldr	r1, [pc, #116]	@ (80054f0 <vTaskSwitchContext+0xc0>)
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0e3      	beq.n	8005454 <vTaskSwitchContext+0x24>
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4613      	mov	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4a16      	ldr	r2, [pc, #88]	@ (80054f0 <vTaskSwitchContext+0xc0>)
 8005498:	4413      	add	r3, r2
 800549a:	60bb      	str	r3, [r7, #8]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	3308      	adds	r3, #8
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d104      	bne.n	80054bc <vTaskSwitchContext+0x8c>
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	605a      	str	r2, [r3, #4]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	4a0c      	ldr	r2, [pc, #48]	@ (80054f4 <vTaskSwitchContext+0xc4>)
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	4a09      	ldr	r2, [pc, #36]	@ (80054ec <vTaskSwitchContext+0xbc>)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054cc:	4b09      	ldr	r3, [pc, #36]	@ (80054f4 <vTaskSwitchContext+0xc4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3354      	adds	r3, #84	@ 0x54
 80054d2:	4a09      	ldr	r2, [pc, #36]	@ (80054f8 <vTaskSwitchContext+0xc8>)
 80054d4:	6013      	str	r3, [r2, #0]
}
 80054d6:	bf00      	nop
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	20001234 	.word	0x20001234
 80054e8:	20001220 	.word	0x20001220
 80054ec:	20001214 	.word	0x20001214
 80054f0:	20000d3c 	.word	0x20000d3c
 80054f4:	20000d38 	.word	0x20000d38
 80054f8:	2000002c 	.word	0x2000002c

080054fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10b      	bne.n	8005524 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	60fb      	str	r3, [r7, #12]
}
 800551e:	bf00      	nop
 8005520:	bf00      	nop
 8005522:	e7fd      	b.n	8005520 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005524:	4b07      	ldr	r3, [pc, #28]	@ (8005544 <vTaskPlaceOnEventList+0x48>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3318      	adds	r3, #24
 800552a:	4619      	mov	r1, r3
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7fe fe7e 	bl	800422e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005532:	2101      	movs	r1, #1
 8005534:	6838      	ldr	r0, [r7, #0]
 8005536:	f000 fa87 	bl	8005a48 <prvAddCurrentTaskToDelayedList>
}
 800553a:	bf00      	nop
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20000d38 	.word	0x20000d38

08005548 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10b      	bne.n	8005572 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800555a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	617b      	str	r3, [r7, #20]
}
 800556c:	bf00      	nop
 800556e:	bf00      	nop
 8005570:	e7fd      	b.n	800556e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005572:	4b0a      	ldr	r3, [pc, #40]	@ (800559c <vTaskPlaceOnEventListRestricted+0x54>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3318      	adds	r3, #24
 8005578:	4619      	mov	r1, r3
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f7fe fe33 	bl	80041e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005586:	f04f 33ff 	mov.w	r3, #4294967295
 800558a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	68b8      	ldr	r0, [r7, #8]
 8005590:	f000 fa5a 	bl	8005a48 <prvAddCurrentTaskToDelayedList>
	}
 8005594:	bf00      	nop
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	20000d38 	.word	0x20000d38

080055a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10b      	bne.n	80055ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80055b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	60fb      	str	r3, [r7, #12]
}
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop
 80055cc:	e7fd      	b.n	80055ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	3318      	adds	r3, #24
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fe fe64 	bl	80042a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005650 <xTaskRemoveFromEventList+0xb0>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d11d      	bne.n	800561c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	3304      	adds	r3, #4
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7fe fe5b 	bl	80042a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ee:	4b19      	ldr	r3, [pc, #100]	@ (8005654 <xTaskRemoveFromEventList+0xb4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d903      	bls.n	80055fe <xTaskRemoveFromEventList+0x5e>
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fa:	4a16      	ldr	r2, [pc, #88]	@ (8005654 <xTaskRemoveFromEventList+0xb4>)
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4a13      	ldr	r2, [pc, #76]	@ (8005658 <xTaskRemoveFromEventList+0xb8>)
 800560c:	441a      	add	r2, r3
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	3304      	adds	r3, #4
 8005612:	4619      	mov	r1, r3
 8005614:	4610      	mov	r0, r2
 8005616:	f7fe fde6 	bl	80041e6 <vListInsertEnd>
 800561a:	e005      	b.n	8005628 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	3318      	adds	r3, #24
 8005620:	4619      	mov	r1, r3
 8005622:	480e      	ldr	r0, [pc, #56]	@ (800565c <xTaskRemoveFromEventList+0xbc>)
 8005624:	f7fe fddf 	bl	80041e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800562c:	4b0c      	ldr	r3, [pc, #48]	@ (8005660 <xTaskRemoveFromEventList+0xc0>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005632:	429a      	cmp	r2, r3
 8005634:	d905      	bls.n	8005642 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005636:	2301      	movs	r3, #1
 8005638:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800563a:	4b0a      	ldr	r3, [pc, #40]	@ (8005664 <xTaskRemoveFromEventList+0xc4>)
 800563c:	2201      	movs	r2, #1
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	e001      	b.n	8005646 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005646:	697b      	ldr	r3, [r7, #20]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	20001234 	.word	0x20001234
 8005654:	20001214 	.word	0x20001214
 8005658:	20000d3c 	.word	0x20000d3c
 800565c:	200011cc 	.word	0x200011cc
 8005660:	20000d38 	.word	0x20000d38
 8005664:	20001220 	.word	0x20001220

08005668 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005670:	4b06      	ldr	r3, [pc, #24]	@ (800568c <vTaskInternalSetTimeOutState+0x24>)
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005678:	4b05      	ldr	r3, [pc, #20]	@ (8005690 <vTaskInternalSetTimeOutState+0x28>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	605a      	str	r2, [r3, #4]
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	20001224 	.word	0x20001224
 8005690:	20001210 	.word	0x20001210

08005694 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10b      	bne.n	80056bc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80056a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	613b      	str	r3, [r7, #16]
}
 80056b6:	bf00      	nop
 80056b8:	bf00      	nop
 80056ba:	e7fd      	b.n	80056b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10b      	bne.n	80056da <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	60fb      	str	r3, [r7, #12]
}
 80056d4:	bf00      	nop
 80056d6:	bf00      	nop
 80056d8:	e7fd      	b.n	80056d6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80056da:	f000 fe95 	bl	8006408 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056de:	4b1d      	ldr	r3, [pc, #116]	@ (8005754 <xTaskCheckForTimeOut+0xc0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f6:	d102      	bne.n	80056fe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80056f8:	2300      	movs	r3, #0
 80056fa:	61fb      	str	r3, [r7, #28]
 80056fc:	e023      	b.n	8005746 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4b15      	ldr	r3, [pc, #84]	@ (8005758 <xTaskCheckForTimeOut+0xc4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d007      	beq.n	800571a <xTaskCheckForTimeOut+0x86>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	429a      	cmp	r2, r3
 8005712:	d302      	bcc.n	800571a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005714:	2301      	movs	r3, #1
 8005716:	61fb      	str	r3, [r7, #28]
 8005718:	e015      	b.n	8005746 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	429a      	cmp	r2, r3
 8005722:	d20b      	bcs.n	800573c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	1ad2      	subs	r2, r2, r3
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff ff99 	bl	8005668 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005736:	2300      	movs	r3, #0
 8005738:	61fb      	str	r3, [r7, #28]
 800573a:	e004      	b.n	8005746 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005742:	2301      	movs	r3, #1
 8005744:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005746:	f000 fe91 	bl	800646c <vPortExitCritical>

	return xReturn;
 800574a:	69fb      	ldr	r3, [r7, #28]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3720      	adds	r7, #32
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20001210 	.word	0x20001210
 8005758:	20001224 	.word	0x20001224

0800575c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005760:	4b03      	ldr	r3, [pc, #12]	@ (8005770 <vTaskMissedYield+0x14>)
 8005762:	2201      	movs	r2, #1
 8005764:	601a      	str	r2, [r3, #0]
}
 8005766:	bf00      	nop
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	20001220 	.word	0x20001220

08005774 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800577c:	f000 f852 	bl	8005824 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005780:	4b06      	ldr	r3, [pc, #24]	@ (800579c <prvIdleTask+0x28>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d9f9      	bls.n	800577c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005788:	4b05      	ldr	r3, [pc, #20]	@ (80057a0 <prvIdleTask+0x2c>)
 800578a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005798:	e7f0      	b.n	800577c <prvIdleTask+0x8>
 800579a:	bf00      	nop
 800579c:	20000d3c 	.word	0x20000d3c
 80057a0:	e000ed04 	.word	0xe000ed04

080057a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057aa:	2300      	movs	r3, #0
 80057ac:	607b      	str	r3, [r7, #4]
 80057ae:	e00c      	b.n	80057ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	4613      	mov	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4a12      	ldr	r2, [pc, #72]	@ (8005804 <prvInitialiseTaskLists+0x60>)
 80057bc:	4413      	add	r3, r2
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe fce4 	bl	800418c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3301      	adds	r3, #1
 80057c8:	607b      	str	r3, [r7, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b37      	cmp	r3, #55	@ 0x37
 80057ce:	d9ef      	bls.n	80057b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057d0:	480d      	ldr	r0, [pc, #52]	@ (8005808 <prvInitialiseTaskLists+0x64>)
 80057d2:	f7fe fcdb 	bl	800418c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057d6:	480d      	ldr	r0, [pc, #52]	@ (800580c <prvInitialiseTaskLists+0x68>)
 80057d8:	f7fe fcd8 	bl	800418c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057dc:	480c      	ldr	r0, [pc, #48]	@ (8005810 <prvInitialiseTaskLists+0x6c>)
 80057de:	f7fe fcd5 	bl	800418c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057e2:	480c      	ldr	r0, [pc, #48]	@ (8005814 <prvInitialiseTaskLists+0x70>)
 80057e4:	f7fe fcd2 	bl	800418c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057e8:	480b      	ldr	r0, [pc, #44]	@ (8005818 <prvInitialiseTaskLists+0x74>)
 80057ea:	f7fe fccf 	bl	800418c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057ee:	4b0b      	ldr	r3, [pc, #44]	@ (800581c <prvInitialiseTaskLists+0x78>)
 80057f0:	4a05      	ldr	r2, [pc, #20]	@ (8005808 <prvInitialiseTaskLists+0x64>)
 80057f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005820 <prvInitialiseTaskLists+0x7c>)
 80057f6:	4a05      	ldr	r2, [pc, #20]	@ (800580c <prvInitialiseTaskLists+0x68>)
 80057f8:	601a      	str	r2, [r3, #0]
}
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20000d3c 	.word	0x20000d3c
 8005808:	2000119c 	.word	0x2000119c
 800580c:	200011b0 	.word	0x200011b0
 8005810:	200011cc 	.word	0x200011cc
 8005814:	200011e0 	.word	0x200011e0
 8005818:	200011f8 	.word	0x200011f8
 800581c:	200011c4 	.word	0x200011c4
 8005820:	200011c8 	.word	0x200011c8

08005824 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800582a:	e019      	b.n	8005860 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800582c:	f000 fdec 	bl	8006408 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005830:	4b10      	ldr	r3, [pc, #64]	@ (8005874 <prvCheckTasksWaitingTermination+0x50>)
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3304      	adds	r3, #4
 800583c:	4618      	mov	r0, r3
 800583e:	f7fe fd2f 	bl	80042a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005842:	4b0d      	ldr	r3, [pc, #52]	@ (8005878 <prvCheckTasksWaitingTermination+0x54>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3b01      	subs	r3, #1
 8005848:	4a0b      	ldr	r2, [pc, #44]	@ (8005878 <prvCheckTasksWaitingTermination+0x54>)
 800584a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800584c:	4b0b      	ldr	r3, [pc, #44]	@ (800587c <prvCheckTasksWaitingTermination+0x58>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3b01      	subs	r3, #1
 8005852:	4a0a      	ldr	r2, [pc, #40]	@ (800587c <prvCheckTasksWaitingTermination+0x58>)
 8005854:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005856:	f000 fe09 	bl	800646c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f810 	bl	8005880 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005860:	4b06      	ldr	r3, [pc, #24]	@ (800587c <prvCheckTasksWaitingTermination+0x58>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e1      	bne.n	800582c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	200011e0 	.word	0x200011e0
 8005878:	2000120c 	.word	0x2000120c
 800587c:	200011f4 	.word	0x200011f4

08005880 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3354      	adds	r3, #84	@ 0x54
 800588c:	4618      	mov	r0, r3
 800588e:	f001 f8d3 	bl	8006a38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005898:	2b00      	cmp	r3, #0
 800589a:	d108      	bne.n	80058ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 ffa1 	bl	80067e8 <vPortFree>
				vPortFree( pxTCB );
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 ff9e 	bl	80067e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058ac:	e019      	b.n	80058e2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d103      	bne.n	80058c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 ff95 	bl	80067e8 <vPortFree>
	}
 80058be:	e010      	b.n	80058e2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d00b      	beq.n	80058e2 <prvDeleteTCB+0x62>
	__asm volatile
 80058ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	60fb      	str	r3, [r7, #12]
}
 80058dc:	bf00      	nop
 80058de:	bf00      	nop
 80058e0:	e7fd      	b.n	80058de <prvDeleteTCB+0x5e>
	}
 80058e2:	bf00      	nop
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005924 <prvResetNextTaskUnblockTime+0x38>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d104      	bne.n	8005906 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005928 <prvResetNextTaskUnblockTime+0x3c>)
 80058fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005902:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005904:	e008      	b.n	8005918 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005906:	4b07      	ldr	r3, [pc, #28]	@ (8005924 <prvResetNextTaskUnblockTime+0x38>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	4a04      	ldr	r2, [pc, #16]	@ (8005928 <prvResetNextTaskUnblockTime+0x3c>)
 8005916:	6013      	str	r3, [r2, #0]
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	200011c4 	.word	0x200011c4
 8005928:	2000122c 	.word	0x2000122c

0800592c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005932:	4b0b      	ldr	r3, [pc, #44]	@ (8005960 <xTaskGetSchedulerState+0x34>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d102      	bne.n	8005940 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800593a:	2301      	movs	r3, #1
 800593c:	607b      	str	r3, [r7, #4]
 800593e:	e008      	b.n	8005952 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005940:	4b08      	ldr	r3, [pc, #32]	@ (8005964 <xTaskGetSchedulerState+0x38>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d102      	bne.n	800594e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005948:	2302      	movs	r3, #2
 800594a:	607b      	str	r3, [r7, #4]
 800594c:	e001      	b.n	8005952 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800594e:	2300      	movs	r3, #0
 8005950:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005952:	687b      	ldr	r3, [r7, #4]
	}
 8005954:	4618      	mov	r0, r3
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	20001218 	.word	0x20001218
 8005964:	20001234 	.word	0x20001234

08005968 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005974:	2300      	movs	r3, #0
 8005976:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d058      	beq.n	8005a30 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800597e:	4b2f      	ldr	r3, [pc, #188]	@ (8005a3c <xTaskPriorityDisinherit+0xd4>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	429a      	cmp	r2, r3
 8005986:	d00b      	beq.n	80059a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	60fb      	str	r3, [r7, #12]
}
 800599a:	bf00      	nop
 800599c:	bf00      	nop
 800599e:	e7fd      	b.n	800599c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10b      	bne.n	80059c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	60bb      	str	r3, [r7, #8]
}
 80059ba:	bf00      	nop
 80059bc:	bf00      	nop
 80059be:	e7fd      	b.n	80059bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059c4:	1e5a      	subs	r2, r3, #1
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d02c      	beq.n	8005a30 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d128      	bne.n	8005a30 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	3304      	adds	r3, #4
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fe fc5c 	bl	80042a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a00:	4b0f      	ldr	r3, [pc, #60]	@ (8005a40 <xTaskPriorityDisinherit+0xd8>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d903      	bls.n	8005a10 <xTaskPriorityDisinherit+0xa8>
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0c:	4a0c      	ldr	r2, [pc, #48]	@ (8005a40 <xTaskPriorityDisinherit+0xd8>)
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4a09      	ldr	r2, [pc, #36]	@ (8005a44 <xTaskPriorityDisinherit+0xdc>)
 8005a1e:	441a      	add	r2, r3
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	3304      	adds	r3, #4
 8005a24:	4619      	mov	r1, r3
 8005a26:	4610      	mov	r0, r2
 8005a28:	f7fe fbdd 	bl	80041e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a30:	697b      	ldr	r3, [r7, #20]
	}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000d38 	.word	0x20000d38
 8005a40:	20001214 	.word	0x20001214
 8005a44:	20000d3c 	.word	0x20000d3c

08005a48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a52:	4b21      	ldr	r3, [pc, #132]	@ (8005ad8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a58:	4b20      	ldr	r3, [pc, #128]	@ (8005adc <prvAddCurrentTaskToDelayedList+0x94>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fe fc1e 	bl	80042a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6a:	d10a      	bne.n	8005a82 <prvAddCurrentTaskToDelayedList+0x3a>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d007      	beq.n	8005a82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a72:	4b1a      	ldr	r3, [pc, #104]	@ (8005adc <prvAddCurrentTaskToDelayedList+0x94>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3304      	adds	r3, #4
 8005a78:	4619      	mov	r1, r3
 8005a7a:	4819      	ldr	r0, [pc, #100]	@ (8005ae0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005a7c:	f7fe fbb3 	bl	80041e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a80:	e026      	b.n	8005ad0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4413      	add	r3, r2
 8005a88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a8a:	4b14      	ldr	r3, [pc, #80]	@ (8005adc <prvAddCurrentTaskToDelayedList+0x94>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d209      	bcs.n	8005aae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a9a:	4b12      	ldr	r3, [pc, #72]	@ (8005ae4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8005adc <prvAddCurrentTaskToDelayedList+0x94>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	f7fe fbc1 	bl	800422e <vListInsert>
}
 8005aac:	e010      	b.n	8005ad0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aae:	4b0e      	ldr	r3, [pc, #56]	@ (8005ae8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8005adc <prvAddCurrentTaskToDelayedList+0x94>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4610      	mov	r0, r2
 8005abc:	f7fe fbb7 	bl	800422e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8005aec <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d202      	bcs.n	8005ad0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005aca:	4a08      	ldr	r2, [pc, #32]	@ (8005aec <prvAddCurrentTaskToDelayedList+0xa4>)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	6013      	str	r3, [r2, #0]
}
 8005ad0:	bf00      	nop
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	20001210 	.word	0x20001210
 8005adc:	20000d38 	.word	0x20000d38
 8005ae0:	200011f8 	.word	0x200011f8
 8005ae4:	200011c8 	.word	0x200011c8
 8005ae8:	200011c4 	.word	0x200011c4
 8005aec:	2000122c 	.word	0x2000122c

08005af0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08a      	sub	sp, #40	@ 0x28
 8005af4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005afa:	f000 fb13 	bl	8006124 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005afe:	4b1d      	ldr	r3, [pc, #116]	@ (8005b74 <xTimerCreateTimerTask+0x84>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d021      	beq.n	8005b4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b0e:	1d3a      	adds	r2, r7, #4
 8005b10:	f107 0108 	add.w	r1, r7, #8
 8005b14:	f107 030c 	add.w	r3, r7, #12
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fe fb1d 	bl	8004158 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	9202      	str	r2, [sp, #8]
 8005b26:	9301      	str	r3, [sp, #4]
 8005b28:	2302      	movs	r3, #2
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	460a      	mov	r2, r1
 8005b30:	4911      	ldr	r1, [pc, #68]	@ (8005b78 <xTimerCreateTimerTask+0x88>)
 8005b32:	4812      	ldr	r0, [pc, #72]	@ (8005b7c <xTimerCreateTimerTask+0x8c>)
 8005b34:	f7ff f8d8 	bl	8004ce8 <xTaskCreateStatic>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	4a11      	ldr	r2, [pc, #68]	@ (8005b80 <xTimerCreateTimerTask+0x90>)
 8005b3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b3e:	4b10      	ldr	r3, [pc, #64]	@ (8005b80 <xTimerCreateTimerTask+0x90>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b46:	2301      	movs	r3, #1
 8005b48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10b      	bne.n	8005b68 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	613b      	str	r3, [r7, #16]
}
 8005b62:	bf00      	nop
 8005b64:	bf00      	nop
 8005b66:	e7fd      	b.n	8005b64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005b68:	697b      	ldr	r3, [r7, #20]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20001268 	.word	0x20001268
 8005b78:	08006c5c 	.word	0x08006c5c
 8005b7c:	08005cbd 	.word	0x08005cbd
 8005b80:	2000126c 	.word	0x2000126c

08005b84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08a      	sub	sp, #40	@ 0x28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10b      	bne.n	8005bb4 <xTimerGenericCommand+0x30>
	__asm volatile
 8005b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	623b      	str	r3, [r7, #32]
}
 8005bae:	bf00      	nop
 8005bb0:	bf00      	nop
 8005bb2:	e7fd      	b.n	8005bb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005bb4:	4b19      	ldr	r3, [pc, #100]	@ (8005c1c <xTimerGenericCommand+0x98>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d02a      	beq.n	8005c12 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b05      	cmp	r3, #5
 8005bcc:	dc18      	bgt.n	8005c00 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005bce:	f7ff fead 	bl	800592c <xTaskGetSchedulerState>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d109      	bne.n	8005bec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005bd8:	4b10      	ldr	r3, [pc, #64]	@ (8005c1c <xTimerGenericCommand+0x98>)
 8005bda:	6818      	ldr	r0, [r3, #0]
 8005bdc:	f107 0110 	add.w	r1, r7, #16
 8005be0:	2300      	movs	r3, #0
 8005be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005be4:	f7fe fc90 	bl	8004508 <xQueueGenericSend>
 8005be8:	6278      	str	r0, [r7, #36]	@ 0x24
 8005bea:	e012      	b.n	8005c12 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005bec:	4b0b      	ldr	r3, [pc, #44]	@ (8005c1c <xTimerGenericCommand+0x98>)
 8005bee:	6818      	ldr	r0, [r3, #0]
 8005bf0:	f107 0110 	add.w	r1, r7, #16
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f7fe fc86 	bl	8004508 <xQueueGenericSend>
 8005bfc:	6278      	str	r0, [r7, #36]	@ 0x24
 8005bfe:	e008      	b.n	8005c12 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c00:	4b06      	ldr	r3, [pc, #24]	@ (8005c1c <xTimerGenericCommand+0x98>)
 8005c02:	6818      	ldr	r0, [r3, #0]
 8005c04:	f107 0110 	add.w	r1, r7, #16
 8005c08:	2300      	movs	r3, #0
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	f7fe fd7e 	bl	800470c <xQueueGenericSendFromISR>
 8005c10:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3728      	adds	r7, #40	@ 0x28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	20001268 	.word	0x20001268

08005c20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af02      	add	r7, sp, #8
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c2a:	4b23      	ldr	r3, [pc, #140]	@ (8005cb8 <prvProcessExpiredTimer+0x98>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	3304      	adds	r3, #4
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fe fb31 	bl	80042a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d023      	beq.n	8005c94 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	699a      	ldr	r2, [r3, #24]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	18d1      	adds	r1, r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	6978      	ldr	r0, [r7, #20]
 8005c5a:	f000 f8d5 	bl	8005e08 <prvInsertTimerInActiveList>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d020      	beq.n	8005ca6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c64:	2300      	movs	r3, #0
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	6978      	ldr	r0, [r7, #20]
 8005c70:	f7ff ff88 	bl	8005b84 <xTimerGenericCommand>
 8005c74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d114      	bne.n	8005ca6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	60fb      	str	r3, [r7, #12]
}
 8005c8e:	bf00      	nop
 8005c90:	bf00      	nop
 8005c92:	e7fd      	b.n	8005c90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c9a:	f023 0301 	bic.w	r3, r3, #1
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	6978      	ldr	r0, [r7, #20]
 8005cac:	4798      	blx	r3
}
 8005cae:	bf00      	nop
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20001260 	.word	0x20001260

08005cbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cc4:	f107 0308 	add.w	r3, r7, #8
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 f859 	bl	8005d80 <prvGetNextExpireTime>
 8005cce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 f805 	bl	8005ce4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005cda:	f000 f8d7 	bl	8005e8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cde:	bf00      	nop
 8005ce0:	e7f0      	b.n	8005cc4 <prvTimerTask+0x8>
	...

08005ce4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005cee:	f7ff fa29 	bl	8005144 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cf2:	f107 0308 	add.w	r3, r7, #8
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 f866 	bl	8005dc8 <prvSampleTimeNow>
 8005cfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d130      	bne.n	8005d66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10a      	bne.n	8005d20 <prvProcessTimerOrBlockTask+0x3c>
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d806      	bhi.n	8005d20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d12:	f7ff fa25 	bl	8005160 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d16:	68f9      	ldr	r1, [r7, #12]
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff ff81 	bl	8005c20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d1e:	e024      	b.n	8005d6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d008      	beq.n	8005d38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d26:	4b13      	ldr	r3, [pc, #76]	@ (8005d74 <prvProcessTimerOrBlockTask+0x90>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <prvProcessTimerOrBlockTask+0x50>
 8005d30:	2301      	movs	r3, #1
 8005d32:	e000      	b.n	8005d36 <prvProcessTimerOrBlockTask+0x52>
 8005d34:	2300      	movs	r3, #0
 8005d36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d38:	4b0f      	ldr	r3, [pc, #60]	@ (8005d78 <prvProcessTimerOrBlockTask+0x94>)
 8005d3a:	6818      	ldr	r0, [r3, #0]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	4619      	mov	r1, r3
 8005d46:	f7fe ff9b 	bl	8004c80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d4a:	f7ff fa09 	bl	8005160 <xTaskResumeAll>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d54:	4b09      	ldr	r3, [pc, #36]	@ (8005d7c <prvProcessTimerOrBlockTask+0x98>)
 8005d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	f3bf 8f6f 	isb	sy
}
 8005d64:	e001      	b.n	8005d6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d66:	f7ff f9fb 	bl	8005160 <xTaskResumeAll>
}
 8005d6a:	bf00      	nop
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20001264 	.word	0x20001264
 8005d78:	20001268 	.word	0x20001268
 8005d7c:	e000ed04 	.word	0xe000ed04

08005d80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d88:	4b0e      	ldr	r3, [pc, #56]	@ (8005dc4 <prvGetNextExpireTime+0x44>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <prvGetNextExpireTime+0x16>
 8005d92:	2201      	movs	r2, #1
 8005d94:	e000      	b.n	8005d98 <prvGetNextExpireTime+0x18>
 8005d96:	2200      	movs	r2, #0
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d105      	bne.n	8005db0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005da4:	4b07      	ldr	r3, [pc, #28]	@ (8005dc4 <prvGetNextExpireTime+0x44>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	e001      	b.n	8005db4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005db4:	68fb      	ldr	r3, [r7, #12]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	20001260 	.word	0x20001260

08005dc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005dd0:	f7ff fa64 	bl	800529c <xTaskGetTickCount>
 8005dd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e04 <prvSampleTimeNow+0x3c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d205      	bcs.n	8005dec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005de0:	f000 f93a 	bl	8006058 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	e002      	b.n	8005df2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005df2:	4a04      	ldr	r2, [pc, #16]	@ (8005e04 <prvSampleTimeNow+0x3c>)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005df8:	68fb      	ldr	r3, [r7, #12]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20001270 	.word	0x20001270

08005e08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e16:	2300      	movs	r3, #0
 8005e18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d812      	bhi.n	8005e54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	1ad2      	subs	r2, r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d302      	bcc.n	8005e42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	617b      	str	r3, [r7, #20]
 8005e40:	e01b      	b.n	8005e7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e42:	4b10      	ldr	r3, [pc, #64]	@ (8005e84 <prvInsertTimerInActiveList+0x7c>)
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	f7fe f9ee 	bl	800422e <vListInsert>
 8005e52:	e012      	b.n	8005e7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d206      	bcs.n	8005e6a <prvInsertTimerInActiveList+0x62>
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d302      	bcc.n	8005e6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e64:	2301      	movs	r3, #1
 8005e66:	617b      	str	r3, [r7, #20]
 8005e68:	e007      	b.n	8005e7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e6a:	4b07      	ldr	r3, [pc, #28]	@ (8005e88 <prvInsertTimerInActiveList+0x80>)
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	3304      	adds	r3, #4
 8005e72:	4619      	mov	r1, r3
 8005e74:	4610      	mov	r0, r2
 8005e76:	f7fe f9da 	bl	800422e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e7a:	697b      	ldr	r3, [r7, #20]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	20001264 	.word	0x20001264
 8005e88:	20001260 	.word	0x20001260

08005e8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08e      	sub	sp, #56	@ 0x38
 8005e90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e92:	e0ce      	b.n	8006032 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	da19      	bge.n	8005ece <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e9a:	1d3b      	adds	r3, r7, #4
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10b      	bne.n	8005ebe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	61fb      	str	r3, [r7, #28]
}
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	e7fd      	b.n	8005eba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ec4:	6850      	ldr	r0, [r2, #4]
 8005ec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ec8:	6892      	ldr	r2, [r2, #8]
 8005eca:	4611      	mov	r1, r2
 8005ecc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f2c0 80ae 	blt.w	8006032 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d004      	beq.n	8005eec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fe f9da 	bl	80042a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005eec:	463b      	mov	r3, r7
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7ff ff6a 	bl	8005dc8 <prvSampleTimeNow>
 8005ef4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b09      	cmp	r3, #9
 8005efa:	f200 8097 	bhi.w	800602c <prvProcessReceivedCommands+0x1a0>
 8005efe:	a201      	add	r2, pc, #4	@ (adr r2, 8005f04 <prvProcessReceivedCommands+0x78>)
 8005f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f04:	08005f2d 	.word	0x08005f2d
 8005f08:	08005f2d 	.word	0x08005f2d
 8005f0c:	08005f2d 	.word	0x08005f2d
 8005f10:	08005fa3 	.word	0x08005fa3
 8005f14:	08005fb7 	.word	0x08005fb7
 8005f18:	08006003 	.word	0x08006003
 8005f1c:	08005f2d 	.word	0x08005f2d
 8005f20:	08005f2d 	.word	0x08005f2d
 8005f24:	08005fa3 	.word	0x08005fa3
 8005f28:	08005fb7 	.word	0x08005fb7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f32:	f043 0301 	orr.w	r3, r3, #1
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	18d1      	adds	r1, r2, r3
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f4c:	f7ff ff5c 	bl	8005e08 <prvInsertTimerInActiveList>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d06c      	beq.n	8006030 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d061      	beq.n	8006030 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	441a      	add	r2, r3
 8005f74:	2300      	movs	r3, #0
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f7e:	f7ff fe01 	bl	8005b84 <xTimerGenericCommand>
 8005f82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d152      	bne.n	8006030 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	61bb      	str	r3, [r7, #24]
}
 8005f9c:	bf00      	nop
 8005f9e:	bf00      	nop
 8005fa0:	e7fd      	b.n	8005f9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fa8:	f023 0301 	bic.w	r3, r3, #1
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005fb4:	e03d      	b.n	8006032 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fbc:	f043 0301 	orr.w	r3, r3, #1
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fcc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10b      	bne.n	8005fee <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	617b      	str	r3, [r7, #20]
}
 8005fe8:	bf00      	nop
 8005fea:	bf00      	nop
 8005fec:	e7fd      	b.n	8005fea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff4:	18d1      	adds	r1, r2, r3
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ffc:	f7ff ff04 	bl	8005e08 <prvInsertTimerInActiveList>
					break;
 8006000:	e017      	b.n	8006032 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006004:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d103      	bne.n	8006018 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006010:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006012:	f000 fbe9 	bl	80067e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006016:	e00c      	b.n	8006032 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800601e:	f023 0301 	bic.w	r3, r3, #1
 8006022:	b2da      	uxtb	r2, r3
 8006024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006026:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800602a:	e002      	b.n	8006032 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800602c:	bf00      	nop
 800602e:	e000      	b.n	8006032 <prvProcessReceivedCommands+0x1a6>
					break;
 8006030:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006032:	4b08      	ldr	r3, [pc, #32]	@ (8006054 <prvProcessReceivedCommands+0x1c8>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	1d39      	adds	r1, r7, #4
 8006038:	2200      	movs	r2, #0
 800603a:	4618      	mov	r0, r3
 800603c:	f7fe fc04 	bl	8004848 <xQueueReceive>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	f47f af26 	bne.w	8005e94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006048:	bf00      	nop
 800604a:	bf00      	nop
 800604c:	3730      	adds	r7, #48	@ 0x30
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20001268 	.word	0x20001268

08006058 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800605e:	e049      	b.n	80060f4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006060:	4b2e      	ldr	r3, [pc, #184]	@ (800611c <prvSwitchTimerLists+0xc4>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800606a:	4b2c      	ldr	r3, [pc, #176]	@ (800611c <prvSwitchTimerLists+0xc4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	3304      	adds	r3, #4
 8006078:	4618      	mov	r0, r3
 800607a:	f7fe f911 	bl	80042a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b00      	cmp	r3, #0
 8006092:	d02f      	beq.n	80060f4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	4413      	add	r3, r2
 800609c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d90e      	bls.n	80060c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060b2:	4b1a      	ldr	r3, [pc, #104]	@ (800611c <prvSwitchTimerLists+0xc4>)
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3304      	adds	r3, #4
 80060ba:	4619      	mov	r1, r3
 80060bc:	4610      	mov	r0, r2
 80060be:	f7fe f8b6 	bl	800422e <vListInsert>
 80060c2:	e017      	b.n	80060f4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060c4:	2300      	movs	r3, #0
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	2300      	movs	r3, #0
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	2100      	movs	r1, #0
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f7ff fd58 	bl	8005b84 <xTimerGenericCommand>
 80060d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10b      	bne.n	80060f4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80060dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	603b      	str	r3, [r7, #0]
}
 80060ee:	bf00      	nop
 80060f0:	bf00      	nop
 80060f2:	e7fd      	b.n	80060f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060f4:	4b09      	ldr	r3, [pc, #36]	@ (800611c <prvSwitchTimerLists+0xc4>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1b0      	bne.n	8006060 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80060fe:	4b07      	ldr	r3, [pc, #28]	@ (800611c <prvSwitchTimerLists+0xc4>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006104:	4b06      	ldr	r3, [pc, #24]	@ (8006120 <prvSwitchTimerLists+0xc8>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a04      	ldr	r2, [pc, #16]	@ (800611c <prvSwitchTimerLists+0xc4>)
 800610a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800610c:	4a04      	ldr	r2, [pc, #16]	@ (8006120 <prvSwitchTimerLists+0xc8>)
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	6013      	str	r3, [r2, #0]
}
 8006112:	bf00      	nop
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20001260 	.word	0x20001260
 8006120:	20001264 	.word	0x20001264

08006124 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800612a:	f000 f96d 	bl	8006408 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800612e:	4b15      	ldr	r3, [pc, #84]	@ (8006184 <prvCheckForValidListAndQueue+0x60>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d120      	bne.n	8006178 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006136:	4814      	ldr	r0, [pc, #80]	@ (8006188 <prvCheckForValidListAndQueue+0x64>)
 8006138:	f7fe f828 	bl	800418c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800613c:	4813      	ldr	r0, [pc, #76]	@ (800618c <prvCheckForValidListAndQueue+0x68>)
 800613e:	f7fe f825 	bl	800418c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006142:	4b13      	ldr	r3, [pc, #76]	@ (8006190 <prvCheckForValidListAndQueue+0x6c>)
 8006144:	4a10      	ldr	r2, [pc, #64]	@ (8006188 <prvCheckForValidListAndQueue+0x64>)
 8006146:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006148:	4b12      	ldr	r3, [pc, #72]	@ (8006194 <prvCheckForValidListAndQueue+0x70>)
 800614a:	4a10      	ldr	r2, [pc, #64]	@ (800618c <prvCheckForValidListAndQueue+0x68>)
 800614c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800614e:	2300      	movs	r3, #0
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	4b11      	ldr	r3, [pc, #68]	@ (8006198 <prvCheckForValidListAndQueue+0x74>)
 8006154:	4a11      	ldr	r2, [pc, #68]	@ (800619c <prvCheckForValidListAndQueue+0x78>)
 8006156:	2110      	movs	r1, #16
 8006158:	200a      	movs	r0, #10
 800615a:	f7fe f935 	bl	80043c8 <xQueueGenericCreateStatic>
 800615e:	4603      	mov	r3, r0
 8006160:	4a08      	ldr	r2, [pc, #32]	@ (8006184 <prvCheckForValidListAndQueue+0x60>)
 8006162:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006164:	4b07      	ldr	r3, [pc, #28]	@ (8006184 <prvCheckForValidListAndQueue+0x60>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d005      	beq.n	8006178 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800616c:	4b05      	ldr	r3, [pc, #20]	@ (8006184 <prvCheckForValidListAndQueue+0x60>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	490b      	ldr	r1, [pc, #44]	@ (80061a0 <prvCheckForValidListAndQueue+0x7c>)
 8006172:	4618      	mov	r0, r3
 8006174:	f7fe fd5a 	bl	8004c2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006178:	f000 f978 	bl	800646c <vPortExitCritical>
}
 800617c:	bf00      	nop
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20001268 	.word	0x20001268
 8006188:	20001238 	.word	0x20001238
 800618c:	2000124c 	.word	0x2000124c
 8006190:	20001260 	.word	0x20001260
 8006194:	20001264 	.word	0x20001264
 8006198:	20001314 	.word	0x20001314
 800619c:	20001274 	.word	0x20001274
 80061a0:	08006c64 	.word	0x08006c64

080061a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3b04      	subs	r3, #4
 80061b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80061bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3b04      	subs	r3, #4
 80061c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f023 0201 	bic.w	r2, r3, #1
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3b04      	subs	r3, #4
 80061d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061d4:	4a0c      	ldr	r2, [pc, #48]	@ (8006208 <pxPortInitialiseStack+0x64>)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	3b14      	subs	r3, #20
 80061de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3b04      	subs	r3, #4
 80061ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f06f 0202 	mvn.w	r2, #2
 80061f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	3b20      	subs	r3, #32
 80061f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061fa:	68fb      	ldr	r3, [r7, #12]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	0800620d 	.word	0x0800620d

0800620c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006216:	4b13      	ldr	r3, [pc, #76]	@ (8006264 <prvTaskExitError+0x58>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621e:	d00b      	beq.n	8006238 <prvTaskExitError+0x2c>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	60fb      	str	r3, [r7, #12]
}
 8006232:	bf00      	nop
 8006234:	bf00      	nop
 8006236:	e7fd      	b.n	8006234 <prvTaskExitError+0x28>
	__asm volatile
 8006238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	60bb      	str	r3, [r7, #8]
}
 800624a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800624c:	bf00      	nop
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d0fc      	beq.n	800624e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	20000028 	.word	0x20000028
	...

08006270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006270:	4b07      	ldr	r3, [pc, #28]	@ (8006290 <pxCurrentTCBConst2>)
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	6808      	ldr	r0, [r1, #0]
 8006276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627a:	f380 8809 	msr	PSP, r0
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f04f 0000 	mov.w	r0, #0
 8006286:	f380 8811 	msr	BASEPRI, r0
 800628a:	4770      	bx	lr
 800628c:	f3af 8000 	nop.w

08006290 <pxCurrentTCBConst2>:
 8006290:	20000d38 	.word	0x20000d38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop

08006298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006298:	4808      	ldr	r0, [pc, #32]	@ (80062bc <prvPortStartFirstTask+0x24>)
 800629a:	6800      	ldr	r0, [r0, #0]
 800629c:	6800      	ldr	r0, [r0, #0]
 800629e:	f380 8808 	msr	MSP, r0
 80062a2:	f04f 0000 	mov.w	r0, #0
 80062a6:	f380 8814 	msr	CONTROL, r0
 80062aa:	b662      	cpsie	i
 80062ac:	b661      	cpsie	f
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	df00      	svc	0
 80062b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062ba:	bf00      	nop
 80062bc:	e000ed08 	.word	0xe000ed08

080062c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062c6:	4b47      	ldr	r3, [pc, #284]	@ (80063e4 <xPortStartScheduler+0x124>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a47      	ldr	r2, [pc, #284]	@ (80063e8 <xPortStartScheduler+0x128>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d10b      	bne.n	80062e8 <xPortStartScheduler+0x28>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	613b      	str	r3, [r7, #16]
}
 80062e2:	bf00      	nop
 80062e4:	bf00      	nop
 80062e6:	e7fd      	b.n	80062e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062e8:	4b3e      	ldr	r3, [pc, #248]	@ (80063e4 <xPortStartScheduler+0x124>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a3f      	ldr	r2, [pc, #252]	@ (80063ec <xPortStartScheduler+0x12c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d10b      	bne.n	800630a <xPortStartScheduler+0x4a>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	60fb      	str	r3, [r7, #12]
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	e7fd      	b.n	8006306 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800630a:	4b39      	ldr	r3, [pc, #228]	@ (80063f0 <xPortStartScheduler+0x130>)
 800630c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	b2db      	uxtb	r3, r3
 8006314:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	22ff      	movs	r2, #255	@ 0xff
 800631a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	b2db      	uxtb	r3, r3
 8006322:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800632c:	b2da      	uxtb	r2, r3
 800632e:	4b31      	ldr	r3, [pc, #196]	@ (80063f4 <xPortStartScheduler+0x134>)
 8006330:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006332:	4b31      	ldr	r3, [pc, #196]	@ (80063f8 <xPortStartScheduler+0x138>)
 8006334:	2207      	movs	r2, #7
 8006336:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006338:	e009      	b.n	800634e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800633a:	4b2f      	ldr	r3, [pc, #188]	@ (80063f8 <xPortStartScheduler+0x138>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3b01      	subs	r3, #1
 8006340:	4a2d      	ldr	r2, [pc, #180]	@ (80063f8 <xPortStartScheduler+0x138>)
 8006342:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	b2db      	uxtb	r3, r3
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	b2db      	uxtb	r3, r3
 800634c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800634e:	78fb      	ldrb	r3, [r7, #3]
 8006350:	b2db      	uxtb	r3, r3
 8006352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006356:	2b80      	cmp	r3, #128	@ 0x80
 8006358:	d0ef      	beq.n	800633a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800635a:	4b27      	ldr	r3, [pc, #156]	@ (80063f8 <xPortStartScheduler+0x138>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f1c3 0307 	rsb	r3, r3, #7
 8006362:	2b04      	cmp	r3, #4
 8006364:	d00b      	beq.n	800637e <xPortStartScheduler+0xbe>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	60bb      	str	r3, [r7, #8]
}
 8006378:	bf00      	nop
 800637a:	bf00      	nop
 800637c:	e7fd      	b.n	800637a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800637e:	4b1e      	ldr	r3, [pc, #120]	@ (80063f8 <xPortStartScheduler+0x138>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	021b      	lsls	r3, r3, #8
 8006384:	4a1c      	ldr	r2, [pc, #112]	@ (80063f8 <xPortStartScheduler+0x138>)
 8006386:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006388:	4b1b      	ldr	r3, [pc, #108]	@ (80063f8 <xPortStartScheduler+0x138>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006390:	4a19      	ldr	r2, [pc, #100]	@ (80063f8 <xPortStartScheduler+0x138>)
 8006392:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	b2da      	uxtb	r2, r3
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800639c:	4b17      	ldr	r3, [pc, #92]	@ (80063fc <xPortStartScheduler+0x13c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a16      	ldr	r2, [pc, #88]	@ (80063fc <xPortStartScheduler+0x13c>)
 80063a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80063a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063a8:	4b14      	ldr	r3, [pc, #80]	@ (80063fc <xPortStartScheduler+0x13c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a13      	ldr	r2, [pc, #76]	@ (80063fc <xPortStartScheduler+0x13c>)
 80063ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80063b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063b4:	f000 f8da 	bl	800656c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063b8:	4b11      	ldr	r3, [pc, #68]	@ (8006400 <xPortStartScheduler+0x140>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063be:	f000 f8f9 	bl	80065b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063c2:	4b10      	ldr	r3, [pc, #64]	@ (8006404 <xPortStartScheduler+0x144>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006404 <xPortStartScheduler+0x144>)
 80063c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80063cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063ce:	f7ff ff63 	bl	8006298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063d2:	f7ff f82d 	bl	8005430 <vTaskSwitchContext>
	prvTaskExitError();
 80063d6:	f7ff ff19 	bl	800620c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	e000ed00 	.word	0xe000ed00
 80063e8:	410fc271 	.word	0x410fc271
 80063ec:	410fc270 	.word	0x410fc270
 80063f0:	e000e400 	.word	0xe000e400
 80063f4:	20001364 	.word	0x20001364
 80063f8:	20001368 	.word	0x20001368
 80063fc:	e000ed20 	.word	0xe000ed20
 8006400:	20000028 	.word	0x20000028
 8006404:	e000ef34 	.word	0xe000ef34

08006408 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	607b      	str	r3, [r7, #4]
}
 8006420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006422:	4b10      	ldr	r3, [pc, #64]	@ (8006464 <vPortEnterCritical+0x5c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3301      	adds	r3, #1
 8006428:	4a0e      	ldr	r2, [pc, #56]	@ (8006464 <vPortEnterCritical+0x5c>)
 800642a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800642c:	4b0d      	ldr	r3, [pc, #52]	@ (8006464 <vPortEnterCritical+0x5c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d110      	bne.n	8006456 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006434:	4b0c      	ldr	r3, [pc, #48]	@ (8006468 <vPortEnterCritical+0x60>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00b      	beq.n	8006456 <vPortEnterCritical+0x4e>
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	603b      	str	r3, [r7, #0]
}
 8006450:	bf00      	nop
 8006452:	bf00      	nop
 8006454:	e7fd      	b.n	8006452 <vPortEnterCritical+0x4a>
	}
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	20000028 	.word	0x20000028
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006472:	4b12      	ldr	r3, [pc, #72]	@ (80064bc <vPortExitCritical+0x50>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10b      	bne.n	8006492 <vPortExitCritical+0x26>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	607b      	str	r3, [r7, #4]
}
 800648c:	bf00      	nop
 800648e:	bf00      	nop
 8006490:	e7fd      	b.n	800648e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006492:	4b0a      	ldr	r3, [pc, #40]	@ (80064bc <vPortExitCritical+0x50>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3b01      	subs	r3, #1
 8006498:	4a08      	ldr	r2, [pc, #32]	@ (80064bc <vPortExitCritical+0x50>)
 800649a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800649c:	4b07      	ldr	r3, [pc, #28]	@ (80064bc <vPortExitCritical+0x50>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d105      	bne.n	80064b0 <vPortExitCritical+0x44>
 80064a4:	2300      	movs	r3, #0
 80064a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	f383 8811 	msr	BASEPRI, r3
}
 80064ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	20000028 	.word	0x20000028

080064c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064c0:	f3ef 8009 	mrs	r0, PSP
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	4b15      	ldr	r3, [pc, #84]	@ (8006520 <pxCurrentTCBConst>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	f01e 0f10 	tst.w	lr, #16
 80064d0:	bf08      	it	eq
 80064d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064da:	6010      	str	r0, [r2, #0]
 80064dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80064e4:	f380 8811 	msr	BASEPRI, r0
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f7fe ff9e 	bl	8005430 <vTaskSwitchContext>
 80064f4:	f04f 0000 	mov.w	r0, #0
 80064f8:	f380 8811 	msr	BASEPRI, r0
 80064fc:	bc09      	pop	{r0, r3}
 80064fe:	6819      	ldr	r1, [r3, #0]
 8006500:	6808      	ldr	r0, [r1, #0]
 8006502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006506:	f01e 0f10 	tst.w	lr, #16
 800650a:	bf08      	it	eq
 800650c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006510:	f380 8809 	msr	PSP, r0
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	f3af 8000 	nop.w

08006520 <pxCurrentTCBConst>:
 8006520:	20000d38 	.word	0x20000d38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop

08006528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	607b      	str	r3, [r7, #4]
}
 8006540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006542:	f7fe febb 	bl	80052bc <xTaskIncrementTick>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800654c:	4b06      	ldr	r3, [pc, #24]	@ (8006568 <xPortSysTickHandler+0x40>)
 800654e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	2300      	movs	r3, #0
 8006556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	f383 8811 	msr	BASEPRI, r3
}
 800655e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006560:	bf00      	nop
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	e000ed04 	.word	0xe000ed04

0800656c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006570:	4b0b      	ldr	r3, [pc, #44]	@ (80065a0 <vPortSetupTimerInterrupt+0x34>)
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006576:	4b0b      	ldr	r3, [pc, #44]	@ (80065a4 <vPortSetupTimerInterrupt+0x38>)
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800657c:	4b0a      	ldr	r3, [pc, #40]	@ (80065a8 <vPortSetupTimerInterrupt+0x3c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a0a      	ldr	r2, [pc, #40]	@ (80065ac <vPortSetupTimerInterrupt+0x40>)
 8006582:	fba2 2303 	umull	r2, r3, r2, r3
 8006586:	099b      	lsrs	r3, r3, #6
 8006588:	4a09      	ldr	r2, [pc, #36]	@ (80065b0 <vPortSetupTimerInterrupt+0x44>)
 800658a:	3b01      	subs	r3, #1
 800658c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800658e:	4b04      	ldr	r3, [pc, #16]	@ (80065a0 <vPortSetupTimerInterrupt+0x34>)
 8006590:	2207      	movs	r2, #7
 8006592:	601a      	str	r2, [r3, #0]
}
 8006594:	bf00      	nop
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	e000e010 	.word	0xe000e010
 80065a4:	e000e018 	.word	0xe000e018
 80065a8:	2000001c 	.word	0x2000001c
 80065ac:	10624dd3 	.word	0x10624dd3
 80065b0:	e000e014 	.word	0xe000e014

080065b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80065c4 <vPortEnableVFP+0x10>
 80065b8:	6801      	ldr	r1, [r0, #0]
 80065ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80065be:	6001      	str	r1, [r0, #0]
 80065c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065c2:	bf00      	nop
 80065c4:	e000ed88 	.word	0xe000ed88

080065c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065ce:	f3ef 8305 	mrs	r3, IPSR
 80065d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b0f      	cmp	r3, #15
 80065d8:	d915      	bls.n	8006606 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065da:	4a18      	ldr	r2, [pc, #96]	@ (800663c <vPortValidateInterruptPriority+0x74>)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065e4:	4b16      	ldr	r3, [pc, #88]	@ (8006640 <vPortValidateInterruptPriority+0x78>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	7afa      	ldrb	r2, [r7, #11]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d20b      	bcs.n	8006606 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	607b      	str	r3, [r7, #4]
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	e7fd      	b.n	8006602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006606:	4b0f      	ldr	r3, [pc, #60]	@ (8006644 <vPortValidateInterruptPriority+0x7c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800660e:	4b0e      	ldr	r3, [pc, #56]	@ (8006648 <vPortValidateInterruptPriority+0x80>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d90b      	bls.n	800662e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	603b      	str	r3, [r7, #0]
}
 8006628:	bf00      	nop
 800662a:	bf00      	nop
 800662c:	e7fd      	b.n	800662a <vPortValidateInterruptPriority+0x62>
	}
 800662e:	bf00      	nop
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	e000e3f0 	.word	0xe000e3f0
 8006640:	20001364 	.word	0x20001364
 8006644:	e000ed0c 	.word	0xe000ed0c
 8006648:	20001368 	.word	0x20001368

0800664c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08a      	sub	sp, #40	@ 0x28
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006654:	2300      	movs	r3, #0
 8006656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006658:	f7fe fd74 	bl	8005144 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800665c:	4b5c      	ldr	r3, [pc, #368]	@ (80067d0 <pvPortMalloc+0x184>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006664:	f000 f924 	bl	80068b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006668:	4b5a      	ldr	r3, [pc, #360]	@ (80067d4 <pvPortMalloc+0x188>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4013      	ands	r3, r2
 8006670:	2b00      	cmp	r3, #0
 8006672:	f040 8095 	bne.w	80067a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01e      	beq.n	80066ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800667c:	2208      	movs	r2, #8
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4413      	add	r3, r2
 8006682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	2b00      	cmp	r3, #0
 800668c:	d015      	beq.n	80066ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f023 0307 	bic.w	r3, r3, #7
 8006694:	3308      	adds	r3, #8
 8006696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00b      	beq.n	80066ba <pvPortMalloc+0x6e>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	617b      	str	r3, [r7, #20]
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop
 80066b8:	e7fd      	b.n	80066b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d06f      	beq.n	80067a0 <pvPortMalloc+0x154>
 80066c0:	4b45      	ldr	r3, [pc, #276]	@ (80067d8 <pvPortMalloc+0x18c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d86a      	bhi.n	80067a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066ca:	4b44      	ldr	r3, [pc, #272]	@ (80067dc <pvPortMalloc+0x190>)
 80066cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066ce:	4b43      	ldr	r3, [pc, #268]	@ (80067dc <pvPortMalloc+0x190>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066d4:	e004      	b.n	80066e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80066d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d903      	bls.n	80066f2 <pvPortMalloc+0xa6>
 80066ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1f1      	bne.n	80066d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066f2:	4b37      	ldr	r3, [pc, #220]	@ (80067d0 <pvPortMalloc+0x184>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d051      	beq.n	80067a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2208      	movs	r2, #8
 8006702:	4413      	add	r3, r2
 8006704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	1ad2      	subs	r2, r2, r3
 8006716:	2308      	movs	r3, #8
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	429a      	cmp	r2, r3
 800671c:	d920      	bls.n	8006760 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800671e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4413      	add	r3, r2
 8006724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	f003 0307 	and.w	r3, r3, #7
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00b      	beq.n	8006748 <pvPortMalloc+0xfc>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	613b      	str	r3, [r7, #16]
}
 8006742:	bf00      	nop
 8006744:	bf00      	nop
 8006746:	e7fd      	b.n	8006744 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	1ad2      	subs	r2, r2, r3
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800675a:	69b8      	ldr	r0, [r7, #24]
 800675c:	f000 f90a 	bl	8006974 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006760:	4b1d      	ldr	r3, [pc, #116]	@ (80067d8 <pvPortMalloc+0x18c>)
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	4a1b      	ldr	r2, [pc, #108]	@ (80067d8 <pvPortMalloc+0x18c>)
 800676c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800676e:	4b1a      	ldr	r3, [pc, #104]	@ (80067d8 <pvPortMalloc+0x18c>)
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	4b1b      	ldr	r3, [pc, #108]	@ (80067e0 <pvPortMalloc+0x194>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d203      	bcs.n	8006782 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800677a:	4b17      	ldr	r3, [pc, #92]	@ (80067d8 <pvPortMalloc+0x18c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a18      	ldr	r2, [pc, #96]	@ (80067e0 <pvPortMalloc+0x194>)
 8006780:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	4b13      	ldr	r3, [pc, #76]	@ (80067d4 <pvPortMalloc+0x188>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	431a      	orrs	r2, r3
 800678c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	2200      	movs	r2, #0
 8006794:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006796:	4b13      	ldr	r3, [pc, #76]	@ (80067e4 <pvPortMalloc+0x198>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3301      	adds	r3, #1
 800679c:	4a11      	ldr	r2, [pc, #68]	@ (80067e4 <pvPortMalloc+0x198>)
 800679e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067a0:	f7fe fcde 	bl	8005160 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	f003 0307 	and.w	r3, r3, #7
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00b      	beq.n	80067c6 <pvPortMalloc+0x17a>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	60fb      	str	r3, [r7, #12]
}
 80067c0:	bf00      	nop
 80067c2:	bf00      	nop
 80067c4:	e7fd      	b.n	80067c2 <pvPortMalloc+0x176>
	return pvReturn;
 80067c6:	69fb      	ldr	r3, [r7, #28]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3728      	adds	r7, #40	@ 0x28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	20004f74 	.word	0x20004f74
 80067d4:	20004f88 	.word	0x20004f88
 80067d8:	20004f78 	.word	0x20004f78
 80067dc:	20004f6c 	.word	0x20004f6c
 80067e0:	20004f7c 	.word	0x20004f7c
 80067e4:	20004f80 	.word	0x20004f80

080067e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d04f      	beq.n	800689a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067fa:	2308      	movs	r3, #8
 80067fc:	425b      	negs	r3, r3
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	4413      	add	r3, r2
 8006802:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	4b25      	ldr	r3, [pc, #148]	@ (80068a4 <vPortFree+0xbc>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4013      	ands	r3, r2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10b      	bne.n	800682e <vPortFree+0x46>
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	60fb      	str	r3, [r7, #12]
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	e7fd      	b.n	800682a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00b      	beq.n	800684e <vPortFree+0x66>
	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	60bb      	str	r3, [r7, #8]
}
 8006848:	bf00      	nop
 800684a:	bf00      	nop
 800684c:	e7fd      	b.n	800684a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	4b14      	ldr	r3, [pc, #80]	@ (80068a4 <vPortFree+0xbc>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4013      	ands	r3, r2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01e      	beq.n	800689a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d11a      	bne.n	800689a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	4b0e      	ldr	r3, [pc, #56]	@ (80068a4 <vPortFree+0xbc>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	43db      	mvns	r3, r3
 800686e:	401a      	ands	r2, r3
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006874:	f7fe fc66 	bl	8005144 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	4b0a      	ldr	r3, [pc, #40]	@ (80068a8 <vPortFree+0xc0>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4413      	add	r3, r2
 8006882:	4a09      	ldr	r2, [pc, #36]	@ (80068a8 <vPortFree+0xc0>)
 8006884:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006886:	6938      	ldr	r0, [r7, #16]
 8006888:	f000 f874 	bl	8006974 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800688c:	4b07      	ldr	r3, [pc, #28]	@ (80068ac <vPortFree+0xc4>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3301      	adds	r3, #1
 8006892:	4a06      	ldr	r2, [pc, #24]	@ (80068ac <vPortFree+0xc4>)
 8006894:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006896:	f7fe fc63 	bl	8005160 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800689a:	bf00      	nop
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20004f88 	.word	0x20004f88
 80068a8:	20004f78 	.word	0x20004f78
 80068ac:	20004f84 	.word	0x20004f84

080068b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80068ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068bc:	4b27      	ldr	r3, [pc, #156]	@ (800695c <prvHeapInit+0xac>)
 80068be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f003 0307 	and.w	r3, r3, #7
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00c      	beq.n	80068e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3307      	adds	r3, #7
 80068ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f023 0307 	bic.w	r3, r3, #7
 80068d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	4a1f      	ldr	r2, [pc, #124]	@ (800695c <prvHeapInit+0xac>)
 80068e0:	4413      	add	r3, r2
 80068e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006960 <prvHeapInit+0xb0>)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068ee:	4b1c      	ldr	r3, [pc, #112]	@ (8006960 <prvHeapInit+0xb0>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	4413      	add	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068fc:	2208      	movs	r2, #8
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	1a9b      	subs	r3, r3, r2
 8006902:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f023 0307 	bic.w	r3, r3, #7
 800690a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4a15      	ldr	r2, [pc, #84]	@ (8006964 <prvHeapInit+0xb4>)
 8006910:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006912:	4b14      	ldr	r3, [pc, #80]	@ (8006964 <prvHeapInit+0xb4>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2200      	movs	r2, #0
 8006918:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800691a:	4b12      	ldr	r3, [pc, #72]	@ (8006964 <prvHeapInit+0xb4>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	1ad2      	subs	r2, r2, r3
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006930:	4b0c      	ldr	r3, [pc, #48]	@ (8006964 <prvHeapInit+0xb4>)
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	4a0a      	ldr	r2, [pc, #40]	@ (8006968 <prvHeapInit+0xb8>)
 800693e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	4a09      	ldr	r2, [pc, #36]	@ (800696c <prvHeapInit+0xbc>)
 8006946:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006948:	4b09      	ldr	r3, [pc, #36]	@ (8006970 <prvHeapInit+0xc0>)
 800694a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800694e:	601a      	str	r2, [r3, #0]
}
 8006950:	bf00      	nop
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	2000136c 	.word	0x2000136c
 8006960:	20004f6c 	.word	0x20004f6c
 8006964:	20004f74 	.word	0x20004f74
 8006968:	20004f7c 	.word	0x20004f7c
 800696c:	20004f78 	.word	0x20004f78
 8006970:	20004f88 	.word	0x20004f88

08006974 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800697c:	4b28      	ldr	r3, [pc, #160]	@ (8006a20 <prvInsertBlockIntoFreeList+0xac>)
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	e002      	b.n	8006988 <prvInsertBlockIntoFreeList+0x14>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	429a      	cmp	r2, r3
 8006990:	d8f7      	bhi.n	8006982 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	4413      	add	r3, r2
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d108      	bne.n	80069b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	441a      	add	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	441a      	add	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d118      	bne.n	80069fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	4b15      	ldr	r3, [pc, #84]	@ (8006a24 <prvInsertBlockIntoFreeList+0xb0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d00d      	beq.n	80069f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	441a      	add	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	e008      	b.n	8006a04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006a24 <prvInsertBlockIntoFreeList+0xb0>)
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	e003      	b.n	8006a04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d002      	beq.n	8006a12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a12:	bf00      	nop
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	20004f6c 	.word	0x20004f6c
 8006a24:	20004f74 	.word	0x20004f74

08006a28 <memset>:
 8006a28:	4402      	add	r2, r0
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d100      	bne.n	8006a32 <memset+0xa>
 8006a30:	4770      	bx	lr
 8006a32:	f803 1b01 	strb.w	r1, [r3], #1
 8006a36:	e7f9      	b.n	8006a2c <memset+0x4>

08006a38 <_reclaim_reent>:
 8006a38:	4b29      	ldr	r3, [pc, #164]	@ (8006ae0 <_reclaim_reent+0xa8>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4283      	cmp	r3, r0
 8006a3e:	b570      	push	{r4, r5, r6, lr}
 8006a40:	4604      	mov	r4, r0
 8006a42:	d04b      	beq.n	8006adc <_reclaim_reent+0xa4>
 8006a44:	69c3      	ldr	r3, [r0, #28]
 8006a46:	b1ab      	cbz	r3, 8006a74 <_reclaim_reent+0x3c>
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	b16b      	cbz	r3, 8006a68 <_reclaim_reent+0x30>
 8006a4c:	2500      	movs	r5, #0
 8006a4e:	69e3      	ldr	r3, [r4, #28]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	5959      	ldr	r1, [r3, r5]
 8006a54:	2900      	cmp	r1, #0
 8006a56:	d13b      	bne.n	8006ad0 <_reclaim_reent+0x98>
 8006a58:	3504      	adds	r5, #4
 8006a5a:	2d80      	cmp	r5, #128	@ 0x80
 8006a5c:	d1f7      	bne.n	8006a4e <_reclaim_reent+0x16>
 8006a5e:	69e3      	ldr	r3, [r4, #28]
 8006a60:	4620      	mov	r0, r4
 8006a62:	68d9      	ldr	r1, [r3, #12]
 8006a64:	f000 f87a 	bl	8006b5c <_free_r>
 8006a68:	69e3      	ldr	r3, [r4, #28]
 8006a6a:	6819      	ldr	r1, [r3, #0]
 8006a6c:	b111      	cbz	r1, 8006a74 <_reclaim_reent+0x3c>
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f000 f874 	bl	8006b5c <_free_r>
 8006a74:	6961      	ldr	r1, [r4, #20]
 8006a76:	b111      	cbz	r1, 8006a7e <_reclaim_reent+0x46>
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f000 f86f 	bl	8006b5c <_free_r>
 8006a7e:	69e1      	ldr	r1, [r4, #28]
 8006a80:	b111      	cbz	r1, 8006a88 <_reclaim_reent+0x50>
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 f86a 	bl	8006b5c <_free_r>
 8006a88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006a8a:	b111      	cbz	r1, 8006a92 <_reclaim_reent+0x5a>
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	f000 f865 	bl	8006b5c <_free_r>
 8006a92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a94:	b111      	cbz	r1, 8006a9c <_reclaim_reent+0x64>
 8006a96:	4620      	mov	r0, r4
 8006a98:	f000 f860 	bl	8006b5c <_free_r>
 8006a9c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006a9e:	b111      	cbz	r1, 8006aa6 <_reclaim_reent+0x6e>
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f000 f85b 	bl	8006b5c <_free_r>
 8006aa6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006aa8:	b111      	cbz	r1, 8006ab0 <_reclaim_reent+0x78>
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f000 f856 	bl	8006b5c <_free_r>
 8006ab0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006ab2:	b111      	cbz	r1, 8006aba <_reclaim_reent+0x82>
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f000 f851 	bl	8006b5c <_free_r>
 8006aba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006abc:	b111      	cbz	r1, 8006ac4 <_reclaim_reent+0x8c>
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f000 f84c 	bl	8006b5c <_free_r>
 8006ac4:	6a23      	ldr	r3, [r4, #32]
 8006ac6:	b14b      	cbz	r3, 8006adc <_reclaim_reent+0xa4>
 8006ac8:	4620      	mov	r0, r4
 8006aca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006ace:	4718      	bx	r3
 8006ad0:	680e      	ldr	r6, [r1, #0]
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f000 f842 	bl	8006b5c <_free_r>
 8006ad8:	4631      	mov	r1, r6
 8006ada:	e7bb      	b.n	8006a54 <_reclaim_reent+0x1c>
 8006adc:	bd70      	pop	{r4, r5, r6, pc}
 8006ade:	bf00      	nop
 8006ae0:	2000002c 	.word	0x2000002c

08006ae4 <__libc_init_array>:
 8006ae4:	b570      	push	{r4, r5, r6, lr}
 8006ae6:	4d0d      	ldr	r5, [pc, #52]	@ (8006b1c <__libc_init_array+0x38>)
 8006ae8:	4c0d      	ldr	r4, [pc, #52]	@ (8006b20 <__libc_init_array+0x3c>)
 8006aea:	1b64      	subs	r4, r4, r5
 8006aec:	10a4      	asrs	r4, r4, #2
 8006aee:	2600      	movs	r6, #0
 8006af0:	42a6      	cmp	r6, r4
 8006af2:	d109      	bne.n	8006b08 <__libc_init_array+0x24>
 8006af4:	4d0b      	ldr	r5, [pc, #44]	@ (8006b24 <__libc_init_array+0x40>)
 8006af6:	4c0c      	ldr	r4, [pc, #48]	@ (8006b28 <__libc_init_array+0x44>)
 8006af8:	f000 f886 	bl	8006c08 <_init>
 8006afc:	1b64      	subs	r4, r4, r5
 8006afe:	10a4      	asrs	r4, r4, #2
 8006b00:	2600      	movs	r6, #0
 8006b02:	42a6      	cmp	r6, r4
 8006b04:	d105      	bne.n	8006b12 <__libc_init_array+0x2e>
 8006b06:	bd70      	pop	{r4, r5, r6, pc}
 8006b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b0c:	4798      	blx	r3
 8006b0e:	3601      	adds	r6, #1
 8006b10:	e7ee      	b.n	8006af0 <__libc_init_array+0xc>
 8006b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b16:	4798      	blx	r3
 8006b18:	3601      	adds	r6, #1
 8006b1a:	e7f2      	b.n	8006b02 <__libc_init_array+0x1e>
 8006b1c:	08007a54 	.word	0x08007a54
 8006b20:	08007a54 	.word	0x08007a54
 8006b24:	08007a54 	.word	0x08007a54
 8006b28:	08007a58 	.word	0x08007a58

08006b2c <__retarget_lock_acquire_recursive>:
 8006b2c:	4770      	bx	lr

08006b2e <__retarget_lock_release_recursive>:
 8006b2e:	4770      	bx	lr

08006b30 <strcpy>:
 8006b30:	4603      	mov	r3, r0
 8006b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b36:	f803 2b01 	strb.w	r2, [r3], #1
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	d1f9      	bne.n	8006b32 <strcpy+0x2>
 8006b3e:	4770      	bx	lr

08006b40 <memcpy>:
 8006b40:	440a      	add	r2, r1
 8006b42:	4291      	cmp	r1, r2
 8006b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b48:	d100      	bne.n	8006b4c <memcpy+0xc>
 8006b4a:	4770      	bx	lr
 8006b4c:	b510      	push	{r4, lr}
 8006b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b56:	4291      	cmp	r1, r2
 8006b58:	d1f9      	bne.n	8006b4e <memcpy+0xe>
 8006b5a:	bd10      	pop	{r4, pc}

08006b5c <_free_r>:
 8006b5c:	b538      	push	{r3, r4, r5, lr}
 8006b5e:	4605      	mov	r5, r0
 8006b60:	2900      	cmp	r1, #0
 8006b62:	d041      	beq.n	8006be8 <_free_r+0x8c>
 8006b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b68:	1f0c      	subs	r4, r1, #4
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	bfb8      	it	lt
 8006b6e:	18e4      	addlt	r4, r4, r3
 8006b70:	f000 f83e 	bl	8006bf0 <__malloc_lock>
 8006b74:	4a1d      	ldr	r2, [pc, #116]	@ (8006bec <_free_r+0x90>)
 8006b76:	6813      	ldr	r3, [r2, #0]
 8006b78:	b933      	cbnz	r3, 8006b88 <_free_r+0x2c>
 8006b7a:	6063      	str	r3, [r4, #4]
 8006b7c:	6014      	str	r4, [r2, #0]
 8006b7e:	4628      	mov	r0, r5
 8006b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b84:	f000 b83a 	b.w	8006bfc <__malloc_unlock>
 8006b88:	42a3      	cmp	r3, r4
 8006b8a:	d908      	bls.n	8006b9e <_free_r+0x42>
 8006b8c:	6820      	ldr	r0, [r4, #0]
 8006b8e:	1821      	adds	r1, r4, r0
 8006b90:	428b      	cmp	r3, r1
 8006b92:	bf01      	itttt	eq
 8006b94:	6819      	ldreq	r1, [r3, #0]
 8006b96:	685b      	ldreq	r3, [r3, #4]
 8006b98:	1809      	addeq	r1, r1, r0
 8006b9a:	6021      	streq	r1, [r4, #0]
 8006b9c:	e7ed      	b.n	8006b7a <_free_r+0x1e>
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	b10b      	cbz	r3, 8006ba8 <_free_r+0x4c>
 8006ba4:	42a3      	cmp	r3, r4
 8006ba6:	d9fa      	bls.n	8006b9e <_free_r+0x42>
 8006ba8:	6811      	ldr	r1, [r2, #0]
 8006baa:	1850      	adds	r0, r2, r1
 8006bac:	42a0      	cmp	r0, r4
 8006bae:	d10b      	bne.n	8006bc8 <_free_r+0x6c>
 8006bb0:	6820      	ldr	r0, [r4, #0]
 8006bb2:	4401      	add	r1, r0
 8006bb4:	1850      	adds	r0, r2, r1
 8006bb6:	4283      	cmp	r3, r0
 8006bb8:	6011      	str	r1, [r2, #0]
 8006bba:	d1e0      	bne.n	8006b7e <_free_r+0x22>
 8006bbc:	6818      	ldr	r0, [r3, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	6053      	str	r3, [r2, #4]
 8006bc2:	4408      	add	r0, r1
 8006bc4:	6010      	str	r0, [r2, #0]
 8006bc6:	e7da      	b.n	8006b7e <_free_r+0x22>
 8006bc8:	d902      	bls.n	8006bd0 <_free_r+0x74>
 8006bca:	230c      	movs	r3, #12
 8006bcc:	602b      	str	r3, [r5, #0]
 8006bce:	e7d6      	b.n	8006b7e <_free_r+0x22>
 8006bd0:	6820      	ldr	r0, [r4, #0]
 8006bd2:	1821      	adds	r1, r4, r0
 8006bd4:	428b      	cmp	r3, r1
 8006bd6:	bf04      	itt	eq
 8006bd8:	6819      	ldreq	r1, [r3, #0]
 8006bda:	685b      	ldreq	r3, [r3, #4]
 8006bdc:	6063      	str	r3, [r4, #4]
 8006bde:	bf04      	itt	eq
 8006be0:	1809      	addeq	r1, r1, r0
 8006be2:	6021      	streq	r1, [r4, #0]
 8006be4:	6054      	str	r4, [r2, #4]
 8006be6:	e7ca      	b.n	8006b7e <_free_r+0x22>
 8006be8:	bd38      	pop	{r3, r4, r5, pc}
 8006bea:	bf00      	nop
 8006bec:	200050c8 	.word	0x200050c8

08006bf0 <__malloc_lock>:
 8006bf0:	4801      	ldr	r0, [pc, #4]	@ (8006bf8 <__malloc_lock+0x8>)
 8006bf2:	f7ff bf9b 	b.w	8006b2c <__retarget_lock_acquire_recursive>
 8006bf6:	bf00      	nop
 8006bf8:	200050c4 	.word	0x200050c4

08006bfc <__malloc_unlock>:
 8006bfc:	4801      	ldr	r0, [pc, #4]	@ (8006c04 <__malloc_unlock+0x8>)
 8006bfe:	f7ff bf96 	b.w	8006b2e <__retarget_lock_release_recursive>
 8006c02:	bf00      	nop
 8006c04:	200050c4 	.word	0x200050c4

08006c08 <_init>:
 8006c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0a:	bf00      	nop
 8006c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0e:	bc08      	pop	{r3}
 8006c10:	469e      	mov	lr, r3
 8006c12:	4770      	bx	lr

08006c14 <_fini>:
 8006c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c16:	bf00      	nop
 8006c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1a:	bc08      	pop	{r3}
 8006c1c:	469e      	mov	lr, r3
 8006c1e:	4770      	bx	lr
