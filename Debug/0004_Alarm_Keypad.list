
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b60  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e88  08006d30  08006d30  00007d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bb8  08007bb8  0000907c  2**0
                  CONTENTS
  4 .ARM          00000008  08007bb8  08007bb8  00008bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bc0  08007bc0  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bc0  08007bc0  00008bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bc4  08007bc4  00008bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007bc8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000501c  2000007c  08007c44  0000907c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005098  08007c44  00009098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000190a5  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000383f  00000000  00000000  00022151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  00025990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001131  00000000  00000000  00026fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f2f  00000000  00000000  000280d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a73e  00000000  00000000  0004c008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbd9e  00000000  00000000  00066746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001424e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006084  00000000  00000000  00142528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  001485ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006d18 	.word	0x08006d18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08006d18 	.word	0x08006d18

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b96a 	b.w	8000520 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9d08      	ldr	r5, [sp, #32]
 800026a:	460c      	mov	r4, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14e      	bne.n	800030e <__udivmoddi4+0xaa>
 8000270:	4694      	mov	ip, r2
 8000272:	458c      	cmp	ip, r1
 8000274:	4686      	mov	lr, r0
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	d962      	bls.n	8000342 <__udivmoddi4+0xde>
 800027c:	b14a      	cbz	r2, 8000292 <__udivmoddi4+0x2e>
 800027e:	f1c2 0320 	rsb	r3, r2, #32
 8000282:	4091      	lsls	r1, r2
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	4319      	orrs	r1, r3
 800028e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000292:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000296:	fa1f f68c 	uxth.w	r6, ip
 800029a:	fbb1 f4f7 	udiv	r4, r1, r7
 800029e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a2:	fb07 1114 	mls	r1, r7, r4, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb04 f106 	mul.w	r1, r4, r6
 80002ae:	4299      	cmp	r1, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x64>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ba:	f080 8112 	bcs.w	80004e2 <__udivmoddi4+0x27e>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 810f 	bls.w	80004e2 <__udivmoddi4+0x27e>
 80002c4:	3c02      	subs	r4, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a59      	subs	r1, r3, r1
 80002ca:	fa1f f38e 	uxth.w	r3, lr
 80002ce:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d2:	fb07 1110 	mls	r1, r7, r0, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb00 f606 	mul.w	r6, r0, r6
 80002de:	429e      	cmp	r6, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x94>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ea:	f080 80fc 	bcs.w	80004e6 <__udivmoddi4+0x282>
 80002ee:	429e      	cmp	r6, r3
 80002f0:	f240 80f9 	bls.w	80004e6 <__udivmoddi4+0x282>
 80002f4:	4463      	add	r3, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	1b9b      	subs	r3, r3, r6
 80002fa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa6>
 8000302:	40d3      	lsrs	r3, r2
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xba>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb4>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa6>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x150>
 8000326:	42a3      	cmp	r3, r4
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xcc>
 800032a:	4290      	cmp	r0, r2
 800032c:	f0c0 80f0 	bcc.w	8000510 <__udivmoddi4+0x2ac>
 8000330:	1a86      	subs	r6, r0, r2
 8000332:	eb64 0303 	sbc.w	r3, r4, r3
 8000336:	2001      	movs	r0, #1
 8000338:	2d00      	cmp	r5, #0
 800033a:	d0e6      	beq.n	800030a <__udivmoddi4+0xa6>
 800033c:	e9c5 6300 	strd	r6, r3, [r5]
 8000340:	e7e3      	b.n	800030a <__udivmoddi4+0xa6>
 8000342:	2a00      	cmp	r2, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x204>
 8000348:	eba1 040c 	sub.w	r4, r1, ip
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	fa1f f78c 	uxth.w	r7, ip
 8000354:	2101      	movs	r1, #1
 8000356:	fbb4 f6f8 	udiv	r6, r4, r8
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb08 4416 	mls	r4, r8, r6, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb07 f006 	mul.w	r0, r7, r6
 800036a:	4298      	cmp	r0, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x11c>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 34ff 	add.w	r4, r6, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x11a>
 8000378:	4298      	cmp	r0, r3
 800037a:	f200 80cd 	bhi.w	8000518 <__udivmoddi4+0x2b4>
 800037e:	4626      	mov	r6, r4
 8000380:	1a1c      	subs	r4, r3, r0
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb4 f0f8 	udiv	r0, r4, r8
 800038a:	fb08 4410 	mls	r4, r8, r0, r4
 800038e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000392:	fb00 f707 	mul.w	r7, r0, r7
 8000396:	429f      	cmp	r7, r3
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x148>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x146>
 80003a4:	429f      	cmp	r7, r3
 80003a6:	f200 80b0 	bhi.w	800050a <__udivmoddi4+0x2a6>
 80003aa:	4620      	mov	r0, r4
 80003ac:	1bdb      	subs	r3, r3, r7
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x9c>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c4:	fa04 f301 	lsl.w	r3, r4, r1
 80003c8:	ea43 030c 	orr.w	r3, r3, ip
 80003cc:	40f4      	lsrs	r4, r6
 80003ce:	fa00 f801 	lsl.w	r8, r0, r1
 80003d2:	0c38      	lsrs	r0, r7, #16
 80003d4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d8:	fbb4 fef0 	udiv	lr, r4, r0
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	fb00 441e 	mls	r4, r0, lr, r4
 80003e4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e8:	fb0e f90c 	mul.w	r9, lr, ip
 80003ec:	45a1      	cmp	r9, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90a      	bls.n	800040a <__udivmoddi4+0x1a6>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fa:	f080 8084 	bcs.w	8000506 <__udivmoddi4+0x2a2>
 80003fe:	45a1      	cmp	r9, r4
 8000400:	f240 8081 	bls.w	8000506 <__udivmoddi4+0x2a2>
 8000404:	f1ae 0e02 	sub.w	lr, lr, #2
 8000408:	443c      	add	r4, r7
 800040a:	eba4 0409 	sub.w	r4, r4, r9
 800040e:	fa1f f983 	uxth.w	r9, r3
 8000412:	fbb4 f3f0 	udiv	r3, r4, r0
 8000416:	fb00 4413 	mls	r4, r0, r3, r4
 800041a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000422:	45a4      	cmp	ip, r4
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x1d2>
 8000426:	193c      	adds	r4, r7, r4
 8000428:	f103 30ff 	add.w	r0, r3, #4294967295
 800042c:	d267      	bcs.n	80004fe <__udivmoddi4+0x29a>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d965      	bls.n	80004fe <__udivmoddi4+0x29a>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043a:	fba0 9302 	umull	r9, r3, r0, r2
 800043e:	eba4 040c 	sub.w	r4, r4, ip
 8000442:	429c      	cmp	r4, r3
 8000444:	46ce      	mov	lr, r9
 8000446:	469c      	mov	ip, r3
 8000448:	d351      	bcc.n	80004ee <__udivmoddi4+0x28a>
 800044a:	d04e      	beq.n	80004ea <__udivmoddi4+0x286>
 800044c:	b155      	cbz	r5, 8000464 <__udivmoddi4+0x200>
 800044e:	ebb8 030e 	subs.w	r3, r8, lr
 8000452:	eb64 040c 	sbc.w	r4, r4, ip
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	40cb      	lsrs	r3, r1
 800045c:	431e      	orrs	r6, r3
 800045e:	40cc      	lsrs	r4, r1
 8000460:	e9c5 6400 	strd	r6, r4, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	e750      	b.n	800030a <__udivmoddi4+0xa6>
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa24 f303 	lsr.w	r3, r4, r3
 8000478:	4094      	lsls	r4, r2
 800047a:	430c      	orrs	r4, r1
 800047c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000480:	fa00 fe02 	lsl.w	lr, r0, r2
 8000484:	fa1f f78c 	uxth.w	r7, ip
 8000488:	fbb3 f0f8 	udiv	r0, r3, r8
 800048c:	fb08 3110 	mls	r1, r8, r0, r3
 8000490:	0c23      	lsrs	r3, r4, #16
 8000492:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000496:	fb00 f107 	mul.w	r1, r0, r7
 800049a:	4299      	cmp	r1, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x24c>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a6:	d22c      	bcs.n	8000502 <__udivmoddi4+0x29e>
 80004a8:	4299      	cmp	r1, r3
 80004aa:	d92a      	bls.n	8000502 <__udivmoddi4+0x29e>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a5b      	subs	r3, r3, r1
 80004b2:	b2a4      	uxth	r4, r4
 80004b4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b8:	fb08 3311 	mls	r3, r8, r1, r3
 80004bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c0:	fb01 f307 	mul.w	r3, r1, r7
 80004c4:	42a3      	cmp	r3, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x276>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d0:	d213      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004d2:	42a3      	cmp	r3, r4
 80004d4:	d911      	bls.n	80004fa <__udivmoddi4+0x296>
 80004d6:	3902      	subs	r1, #2
 80004d8:	4464      	add	r4, ip
 80004da:	1ae4      	subs	r4, r4, r3
 80004dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e0:	e739      	b.n	8000356 <__udivmoddi4+0xf2>
 80004e2:	4604      	mov	r4, r0
 80004e4:	e6f0      	b.n	80002c8 <__udivmoddi4+0x64>
 80004e6:	4608      	mov	r0, r1
 80004e8:	e706      	b.n	80002f8 <__udivmoddi4+0x94>
 80004ea:	45c8      	cmp	r8, r9
 80004ec:	d2ae      	bcs.n	800044c <__udivmoddi4+0x1e8>
 80004ee:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7a8      	b.n	800044c <__udivmoddi4+0x1e8>
 80004fa:	4631      	mov	r1, r6
 80004fc:	e7ed      	b.n	80004da <__udivmoddi4+0x276>
 80004fe:	4603      	mov	r3, r0
 8000500:	e799      	b.n	8000436 <__udivmoddi4+0x1d2>
 8000502:	4630      	mov	r0, r6
 8000504:	e7d4      	b.n	80004b0 <__udivmoddi4+0x24c>
 8000506:	46d6      	mov	lr, sl
 8000508:	e77f      	b.n	800040a <__udivmoddi4+0x1a6>
 800050a:	4463      	add	r3, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e74d      	b.n	80003ac <__udivmoddi4+0x148>
 8000510:	4606      	mov	r6, r0
 8000512:	4623      	mov	r3, r4
 8000514:	4608      	mov	r0, r1
 8000516:	e70f      	b.n	8000338 <__udivmoddi4+0xd4>
 8000518:	3e02      	subs	r6, #2
 800051a:	4463      	add	r3, ip
 800051c:	e730      	b.n	8000380 <__udivmoddi4+0x11c>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
	int done=1;
 800052a:	2301      	movs	r3, #1
 800052c:	607b      	str	r3, [r7, #4]
	while(done)
 800052e:	e19b      	b.n	8000868 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000536:	48b3      	ldr	r0, [pc, #716]	@ (8000804 <Get_Key+0x2e0>)
 8000538:	f001 fbce 	bl	8001cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 800053c:	2200      	movs	r2, #0
 800053e:	2110      	movs	r1, #16
 8000540:	48b0      	ldr	r0, [pc, #704]	@ (8000804 <Get_Key+0x2e0>)
 8000542:	f001 fbc9 	bl	8001cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000546:	2200      	movs	r2, #0
 8000548:	2120      	movs	r1, #32
 800054a:	48ae      	ldr	r0, [pc, #696]	@ (8000804 <Get_Key+0x2e0>)
 800054c:	f001 fbc4 	bl	8001cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000550:	2200      	movs	r2, #0
 8000552:	2108      	movs	r1, #8
 8000554:	48ab      	ldr	r0, [pc, #684]	@ (8000804 <Get_Key+0x2e0>)
 8000556:	f001 fbbf 	bl	8001cd8 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 800055a:	2140      	movs	r1, #64	@ 0x40
 800055c:	48a9      	ldr	r0, [pc, #676]	@ (8000804 <Get_Key+0x2e0>)
 800055e:	f001 fba3 	bl	8001ca8 <HAL_GPIO_ReadPin>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d00b      	beq.n	8000580 <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000568:	bf00      	nop
 800056a:	2140      	movs	r1, #64	@ 0x40
 800056c:	48a5      	ldr	r0, [pc, #660]	@ (8000804 <Get_Key+0x2e0>)
 800056e:	f001 fb9b 	bl	8001ca8 <HAL_GPIO_ReadPin>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d1f8      	bne.n	800056a <Get_Key+0x46>
		key='1';
 8000578:	4ba3      	ldr	r3, [pc, #652]	@ (8000808 <Get_Key+0x2e4>)
 800057a:	2231      	movs	r2, #49	@ 0x31
 800057c:	701a      	strb	r2, [r3, #0]
		break;
 800057e:	e177      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000580:	2180      	movs	r1, #128	@ 0x80
 8000582:	48a2      	ldr	r0, [pc, #648]	@ (800080c <Get_Key+0x2e8>)
 8000584:	f001 fb90 	bl	8001ca8 <HAL_GPIO_ReadPin>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d00b      	beq.n	80005a6 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800058e:	bf00      	nop
 8000590:	2180      	movs	r1, #128	@ 0x80
 8000592:	489e      	ldr	r0, [pc, #632]	@ (800080c <Get_Key+0x2e8>)
 8000594:	f001 fb88 	bl	8001ca8 <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d1f8      	bne.n	8000590 <Get_Key+0x6c>
		key='4';
 800059e:	4b9a      	ldr	r3, [pc, #616]	@ (8000808 <Get_Key+0x2e4>)
 80005a0:	2234      	movs	r2, #52	@ 0x34
 80005a2:	701a      	strb	r2, [r3, #0]
		break;
 80005a4:	e164      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80005a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005aa:	4899      	ldr	r0, [pc, #612]	@ (8000810 <Get_Key+0x2ec>)
 80005ac:	f001 fb7c 	bl	8001ca8 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00c      	beq.n	80005d0 <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80005b6:	bf00      	nop
 80005b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005bc:	4894      	ldr	r0, [pc, #592]	@ (8000810 <Get_Key+0x2ec>)
 80005be:	f001 fb73 	bl	8001ca8 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1f7      	bne.n	80005b8 <Get_Key+0x94>
		key='7';
 80005c8:	4b8f      	ldr	r3, [pc, #572]	@ (8000808 <Get_Key+0x2e4>)
 80005ca:	2237      	movs	r2, #55	@ 0x37
 80005cc:	701a      	strb	r2, [r3, #0]
		break;
 80005ce:	e14f      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80005d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d4:	488e      	ldr	r0, [pc, #568]	@ (8000810 <Get_Key+0x2ec>)
 80005d6:	f001 fb67 	bl	8001ca8 <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00c      	beq.n	80005fa <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80005e0:	bf00      	nop
 80005e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005e6:	488a      	ldr	r0, [pc, #552]	@ (8000810 <Get_Key+0x2ec>)
 80005e8:	f001 fb5e 	bl	8001ca8 <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1f7      	bne.n	80005e2 <Get_Key+0xbe>
		key='*';
 80005f2:	4b85      	ldr	r3, [pc, #532]	@ (8000808 <Get_Key+0x2e4>)
 80005f4:	222a      	movs	r2, #42	@ 0x2a
 80005f6:	701a      	strb	r2, [r3, #0]
		break;
 80005f8:	e13a      	b.n	8000870 <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000600:	4880      	ldr	r0, [pc, #512]	@ (8000804 <Get_Key+0x2e0>)
 8000602:	f001 fb69 	bl	8001cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 8000606:	2201      	movs	r2, #1
 8000608:	2110      	movs	r1, #16
 800060a:	487e      	ldr	r0, [pc, #504]	@ (8000804 <Get_Key+0x2e0>)
 800060c:	f001 fb64 	bl	8001cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000610:	2200      	movs	r2, #0
 8000612:	2120      	movs	r1, #32
 8000614:	487b      	ldr	r0, [pc, #492]	@ (8000804 <Get_Key+0x2e0>)
 8000616:	f001 fb5f 	bl	8001cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 800061a:	2200      	movs	r2, #0
 800061c:	2108      	movs	r1, #8
 800061e:	4879      	ldr	r0, [pc, #484]	@ (8000804 <Get_Key+0x2e0>)
 8000620:	f001 fb5a 	bl	8001cd8 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000624:	2140      	movs	r1, #64	@ 0x40
 8000626:	4877      	ldr	r0, [pc, #476]	@ (8000804 <Get_Key+0x2e0>)
 8000628:	f001 fb3e 	bl	8001ca8 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d00b      	beq.n	800064a <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000632:	bf00      	nop
 8000634:	2140      	movs	r1, #64	@ 0x40
 8000636:	4873      	ldr	r0, [pc, #460]	@ (8000804 <Get_Key+0x2e0>)
 8000638:	f001 fb36 	bl	8001ca8 <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1f8      	bne.n	8000634 <Get_Key+0x110>
		key='2';
 8000642:	4b71      	ldr	r3, [pc, #452]	@ (8000808 <Get_Key+0x2e4>)
 8000644:	2232      	movs	r2, #50	@ 0x32
 8000646:	701a      	strb	r2, [r3, #0]
		break;
 8000648:	e112      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800064a:	2180      	movs	r1, #128	@ 0x80
 800064c:	486f      	ldr	r0, [pc, #444]	@ (800080c <Get_Key+0x2e8>)
 800064e:	f001 fb2b 	bl	8001ca8 <HAL_GPIO_ReadPin>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d00b      	beq.n	8000670 <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000658:	bf00      	nop
 800065a:	2180      	movs	r1, #128	@ 0x80
 800065c:	486b      	ldr	r0, [pc, #428]	@ (800080c <Get_Key+0x2e8>)
 800065e:	f001 fb23 	bl	8001ca8 <HAL_GPIO_ReadPin>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f8      	bne.n	800065a <Get_Key+0x136>
		key='5';
 8000668:	4b67      	ldr	r3, [pc, #412]	@ (8000808 <Get_Key+0x2e4>)
 800066a:	2235      	movs	r2, #53	@ 0x35
 800066c:	701a      	strb	r2, [r3, #0]
		break;
 800066e:	e0ff      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000670:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000674:	4866      	ldr	r0, [pc, #408]	@ (8000810 <Get_Key+0x2ec>)
 8000676:	f001 fb17 	bl	8001ca8 <HAL_GPIO_ReadPin>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00c      	beq.n	800069a <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000680:	bf00      	nop
 8000682:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000686:	4862      	ldr	r0, [pc, #392]	@ (8000810 <Get_Key+0x2ec>)
 8000688:	f001 fb0e 	bl	8001ca8 <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f7      	bne.n	8000682 <Get_Key+0x15e>
		key='8';
 8000692:	4b5d      	ldr	r3, [pc, #372]	@ (8000808 <Get_Key+0x2e4>)
 8000694:	2238      	movs	r2, #56	@ 0x38
 8000696:	701a      	strb	r2, [r3, #0]
		break;
 8000698:	e0ea      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800069a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800069e:	485c      	ldr	r0, [pc, #368]	@ (8000810 <Get_Key+0x2ec>)
 80006a0:	f001 fb02 	bl	8001ca8 <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d00c      	beq.n	80006c4 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80006aa:	bf00      	nop
 80006ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006b0:	4857      	ldr	r0, [pc, #348]	@ (8000810 <Get_Key+0x2ec>)
 80006b2:	f001 faf9 	bl	8001ca8 <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1f7      	bne.n	80006ac <Get_Key+0x188>
		key='0';
 80006bc:	4b52      	ldr	r3, [pc, #328]	@ (8000808 <Get_Key+0x2e4>)
 80006be:	2230      	movs	r2, #48	@ 0x30
 80006c0:	701a      	strb	r2, [r3, #0]
		break;
 80006c2:	e0d5      	b.n	8000870 <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ca:	484e      	ldr	r0, [pc, #312]	@ (8000804 <Get_Key+0x2e0>)
 80006cc:	f001 fb04 	bl	8001cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 80006d0:	2200      	movs	r2, #0
 80006d2:	2110      	movs	r1, #16
 80006d4:	484b      	ldr	r0, [pc, #300]	@ (8000804 <Get_Key+0x2e0>)
 80006d6:	f001 faff 	bl	8001cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 80006da:	2201      	movs	r2, #1
 80006dc:	2120      	movs	r1, #32
 80006de:	4849      	ldr	r0, [pc, #292]	@ (8000804 <Get_Key+0x2e0>)
 80006e0:	f001 fafa 	bl	8001cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 80006e4:	2200      	movs	r2, #0
 80006e6:	2108      	movs	r1, #8
 80006e8:	4846      	ldr	r0, [pc, #280]	@ (8000804 <Get_Key+0x2e0>)
 80006ea:	f001 faf5 	bl	8001cd8 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006ee:	2140      	movs	r1, #64	@ 0x40
 80006f0:	4844      	ldr	r0, [pc, #272]	@ (8000804 <Get_Key+0x2e0>)
 80006f2:	f001 fad9 	bl	8001ca8 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00b      	beq.n	8000714 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006fc:	bf00      	nop
 80006fe:	2140      	movs	r1, #64	@ 0x40
 8000700:	4840      	ldr	r0, [pc, #256]	@ (8000804 <Get_Key+0x2e0>)
 8000702:	f001 fad1 	bl	8001ca8 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d1f8      	bne.n	80006fe <Get_Key+0x1da>
		key='3';
 800070c:	4b3e      	ldr	r3, [pc, #248]	@ (8000808 <Get_Key+0x2e4>)
 800070e:	2233      	movs	r2, #51	@ 0x33
 8000710:	701a      	strb	r2, [r3, #0]
		break;
 8000712:	e0ad      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000714:	2180      	movs	r1, #128	@ 0x80
 8000716:	483d      	ldr	r0, [pc, #244]	@ (800080c <Get_Key+0x2e8>)
 8000718:	f001 fac6 	bl	8001ca8 <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d00b      	beq.n	800073a <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000722:	bf00      	nop
 8000724:	2180      	movs	r1, #128	@ 0x80
 8000726:	4839      	ldr	r0, [pc, #228]	@ (800080c <Get_Key+0x2e8>)
 8000728:	f001 fabe 	bl	8001ca8 <HAL_GPIO_ReadPin>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1f8      	bne.n	8000724 <Get_Key+0x200>
		key='6';
 8000732:	4b35      	ldr	r3, [pc, #212]	@ (8000808 <Get_Key+0x2e4>)
 8000734:	2236      	movs	r2, #54	@ 0x36
 8000736:	701a      	strb	r2, [r3, #0]
		break;
 8000738:	e09a      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800073a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800073e:	4834      	ldr	r0, [pc, #208]	@ (8000810 <Get_Key+0x2ec>)
 8000740:	f001 fab2 	bl	8001ca8 <HAL_GPIO_ReadPin>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00c      	beq.n	8000764 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800074a:	bf00      	nop
 800074c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000750:	482f      	ldr	r0, [pc, #188]	@ (8000810 <Get_Key+0x2ec>)
 8000752:	f001 faa9 	bl	8001ca8 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1f7      	bne.n	800074c <Get_Key+0x228>
		key='9';
 800075c:	4b2a      	ldr	r3, [pc, #168]	@ (8000808 <Get_Key+0x2e4>)
 800075e:	2239      	movs	r2, #57	@ 0x39
 8000760:	701a      	strb	r2, [r3, #0]
		break;
 8000762:	e085      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000764:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000768:	4829      	ldr	r0, [pc, #164]	@ (8000810 <Get_Key+0x2ec>)
 800076a:	f001 fa9d 	bl	8001ca8 <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d00c      	beq.n	800078e <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000774:	bf00      	nop
 8000776:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800077a:	4825      	ldr	r0, [pc, #148]	@ (8000810 <Get_Key+0x2ec>)
 800077c:	f001 fa94 	bl	8001ca8 <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1f7      	bne.n	8000776 <Get_Key+0x252>
		key='#';
 8000786:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <Get_Key+0x2e4>)
 8000788:	2223      	movs	r2, #35	@ 0x23
 800078a:	701a      	strb	r2, [r3, #0]
		break;
 800078c:	e070      	b.n	8000870 <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000794:	481b      	ldr	r0, [pc, #108]	@ (8000804 <Get_Key+0x2e0>)
 8000796:	f001 fa9f 	bl	8001cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 800079a:	2200      	movs	r2, #0
 800079c:	2110      	movs	r1, #16
 800079e:	4819      	ldr	r0, [pc, #100]	@ (8000804 <Get_Key+0x2e0>)
 80007a0:	f001 fa9a 	bl	8001cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80007a4:	2200      	movs	r2, #0
 80007a6:	2120      	movs	r1, #32
 80007a8:	4816      	ldr	r0, [pc, #88]	@ (8000804 <Get_Key+0x2e0>)
 80007aa:	f001 fa95 	bl	8001cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 80007ae:	2201      	movs	r2, #1
 80007b0:	2108      	movs	r1, #8
 80007b2:	4814      	ldr	r0, [pc, #80]	@ (8000804 <Get_Key+0x2e0>)
 80007b4:	f001 fa90 	bl	8001cd8 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80007b8:	2140      	movs	r1, #64	@ 0x40
 80007ba:	4812      	ldr	r0, [pc, #72]	@ (8000804 <Get_Key+0x2e0>)
 80007bc:	f001 fa74 	bl	8001ca8 <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00b      	beq.n	80007de <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80007c6:	bf00      	nop
 80007c8:	2140      	movs	r1, #64	@ 0x40
 80007ca:	480e      	ldr	r0, [pc, #56]	@ (8000804 <Get_Key+0x2e0>)
 80007cc:	f001 fa6c 	bl	8001ca8 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f8      	bne.n	80007c8 <Get_Key+0x2a4>
		key='A';
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <Get_Key+0x2e4>)
 80007d8:	2241      	movs	r2, #65	@ 0x41
 80007da:	701a      	strb	r2, [r3, #0]
		break;
 80007dc:	e048      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007de:	2180      	movs	r1, #128	@ 0x80
 80007e0:	480a      	ldr	r0, [pc, #40]	@ (800080c <Get_Key+0x2e8>)
 80007e2:	f001 fa61 	bl	8001ca8 <HAL_GPIO_ReadPin>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d013      	beq.n	8000814 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007ec:	bf00      	nop
 80007ee:	2180      	movs	r1, #128	@ 0x80
 80007f0:	4806      	ldr	r0, [pc, #24]	@ (800080c <Get_Key+0x2e8>)
 80007f2:	f001 fa59 	bl	8001ca8 <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f8      	bne.n	80007ee <Get_Key+0x2ca>
		key='B';
 80007fc:	4b02      	ldr	r3, [pc, #8]	@ (8000808 <Get_Key+0x2e4>)
 80007fe:	2242      	movs	r2, #66	@ 0x42
 8000800:	701a      	strb	r2, [r3, #0]
		break;
 8000802:	e035      	b.n	8000870 <Get_Key+0x34c>
 8000804:	40020400 	.word	0x40020400
 8000808:	20000098 	.word	0x20000098
 800080c:	40020800 	.word	0x40020800
 8000810:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000814:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000818:	481a      	ldr	r0, [pc, #104]	@ (8000884 <Get_Key+0x360>)
 800081a:	f001 fa45 	bl	8001ca8 <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00c      	beq.n	800083e <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000824:	bf00      	nop
 8000826:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800082a:	4816      	ldr	r0, [pc, #88]	@ (8000884 <Get_Key+0x360>)
 800082c:	f001 fa3c 	bl	8001ca8 <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1f7      	bne.n	8000826 <Get_Key+0x302>
		key='C';
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <Get_Key+0x364>)
 8000838:	2243      	movs	r2, #67	@ 0x43
 800083a:	701a      	strb	r2, [r3, #0]
		break;
 800083c:	e018      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800083e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000842:	4810      	ldr	r0, [pc, #64]	@ (8000884 <Get_Key+0x360>)
 8000844:	f001 fa30 	bl	8001ca8 <HAL_GPIO_ReadPin>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00c      	beq.n	8000868 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800084e:	bf00      	nop
 8000850:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000854:	480b      	ldr	r0, [pc, #44]	@ (8000884 <Get_Key+0x360>)
 8000856:	f001 fa27 	bl	8001ca8 <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1f7      	bne.n	8000850 <Get_Key+0x32c>
		key='D';
 8000860:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <Get_Key+0x364>)
 8000862:	2244      	movs	r2, #68	@ 0x44
 8000864:	701a      	strb	r2, [r3, #0]
		break;
 8000866:	e003      	b.n	8000870 <Get_Key+0x34c>
	while(done)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	f47f ae60 	bne.w	8000530 <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000870:	2120      	movs	r1, #32
 8000872:	4804      	ldr	r0, [pc, #16]	@ (8000884 <Get_Key+0x360>)
 8000874:	f001 fa49 	bl	8001d0a <HAL_GPIO_TogglePin>
	return(key);
 8000878:	4b03      	ldr	r3, [pc, #12]	@ (8000888 <Get_Key+0x364>)
 800087a:	781b      	ldrb	r3, [r3, #0]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40020000 	.word	0x40020000
 8000888:	20000098 	.word	0x20000098

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000890:	f000 ff52 	bl	8001738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000894:	f000 f858 	bl	8000948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000898:	f000 f8f2 	bl	8000a80 <MX_GPIO_Init>
  MX_I2C1_Init();
 800089c:	f000 f8c2 	bl	8000a24 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008a0:	f003 f906 	bl	8003ab0 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
	xSemaphore = xSemaphoreCreateMutex();
 80008a4:	2001      	movs	r0, #1
 80008a6:	f003 fc42 	bl	800412e <xQueueCreateMutex>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a16      	ldr	r2, [pc, #88]	@ (8000908 <main+0x7c>)
 80008ae:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of KeypadTask */
  KeypadTaskHandle = osThreadNew(StartKeypadTask, NULL, &KeypadTask_attributes);
 80008b0:	4a16      	ldr	r2, [pc, #88]	@ (800090c <main+0x80>)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4816      	ldr	r0, [pc, #88]	@ (8000910 <main+0x84>)
 80008b6:	f003 f945 	bl	8003b44 <osThreadNew>
 80008ba:	4603      	mov	r3, r0
 80008bc:	4a15      	ldr	r2, [pc, #84]	@ (8000914 <main+0x88>)
 80008be:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(StartLCDTask, NULL, &LCDTask_attributes);
 80008c0:	4a15      	ldr	r2, [pc, #84]	@ (8000918 <main+0x8c>)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4815      	ldr	r0, [pc, #84]	@ (800091c <main+0x90>)
 80008c6:	f003 f93d 	bl	8003b44 <osThreadNew>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4a14      	ldr	r2, [pc, #80]	@ (8000920 <main+0x94>)
 80008ce:	6013      	str	r3, [r2, #0]

  /* creation of LEDsTask */
  LEDsTaskHandle = osThreadNew(StartLEDsTask, NULL, &LEDsTask_attributes);
 80008d0:	4a14      	ldr	r2, [pc, #80]	@ (8000924 <main+0x98>)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4814      	ldr	r0, [pc, #80]	@ (8000928 <main+0x9c>)
 80008d6:	f003 f935 	bl	8003b44 <osThreadNew>
 80008da:	4603      	mov	r3, r0
 80008dc:	4a13      	ldr	r2, [pc, #76]	@ (800092c <main+0xa0>)
 80008de:	6013      	str	r3, [r2, #0]

  /* creation of PIRTask */
  PIRTaskHandle = osThreadNew(StartPIRTask, NULL, &PIRTask_attributes);
 80008e0:	4a13      	ldr	r2, [pc, #76]	@ (8000930 <main+0xa4>)
 80008e2:	2100      	movs	r1, #0
 80008e4:	4813      	ldr	r0, [pc, #76]	@ (8000934 <main+0xa8>)
 80008e6:	f003 f92d 	bl	8003b44 <osThreadNew>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4a12      	ldr	r2, [pc, #72]	@ (8000938 <main+0xac>)
 80008ee:	6013      	str	r3, [r2, #0]

  /* creation of BuzzerTask */
  BuzzerTaskHandle = osThreadNew(StartBuzzerTask, NULL, &BuzzerTask_attributes);
 80008f0:	4a12      	ldr	r2, [pc, #72]	@ (800093c <main+0xb0>)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4812      	ldr	r0, [pc, #72]	@ (8000940 <main+0xb4>)
 80008f6:	f003 f925 	bl	8003b44 <osThreadNew>
 80008fa:	4603      	mov	r3, r0
 80008fc:	4a11      	ldr	r2, [pc, #68]	@ (8000944 <main+0xb8>)
 80008fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000900:	f003 f8fa 	bl	8003af8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <main+0x78>
 8000908:	20000118 	.word	0x20000118
 800090c:	08007aec 	.word	0x08007aec
 8000910:	08000bf5 	.word	0x08000bf5
 8000914:	200000f0 	.word	0x200000f0
 8000918:	08007b10 	.word	0x08007b10
 800091c:	08000d01 	.word	0x08000d01
 8000920:	200000f4 	.word	0x200000f4
 8000924:	08007b34 	.word	0x08007b34
 8000928:	08000df5 	.word	0x08000df5
 800092c:	200000f8 	.word	0x200000f8
 8000930:	08007b58 	.word	0x08007b58
 8000934:	08000e49 	.word	0x08000e49
 8000938:	200000fc 	.word	0x200000fc
 800093c:	08007b7c 	.word	0x08007b7c
 8000940:	08000eb1 	.word	0x08000eb1
 8000944:	20000100 	.word	0x20000100

08000948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b094      	sub	sp, #80	@ 0x50
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	2234      	movs	r2, #52	@ 0x34
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f006 f8ee 	bl	8006b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	4b2a      	ldr	r3, [pc, #168]	@ (8000a1c <SystemClock_Config+0xd4>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000974:	4a29      	ldr	r2, [pc, #164]	@ (8000a1c <SystemClock_Config+0xd4>)
 8000976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800097a:	6413      	str	r3, [r2, #64]	@ 0x40
 800097c:	4b27      	ldr	r3, [pc, #156]	@ (8000a1c <SystemClock_Config+0xd4>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000988:	2300      	movs	r3, #0
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	4b24      	ldr	r3, [pc, #144]	@ (8000a20 <SystemClock_Config+0xd8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000994:	4a22      	ldr	r2, [pc, #136]	@ (8000a20 <SystemClock_Config+0xd8>)
 8000996:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	4b20      	ldr	r3, [pc, #128]	@ (8000a20 <SystemClock_Config+0xd8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ac:	2301      	movs	r3, #1
 80009ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b0:	2310      	movs	r3, #16
 80009b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b4:	2302      	movs	r3, #2
 80009b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b8:	2300      	movs	r3, #0
 80009ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009bc:	2310      	movs	r3, #16
 80009be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009c6:	2304      	movs	r3, #4
 80009c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 fae6 	bl	8002fa8 <HAL_RCC_OscConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009e2:	f000 fa93 	bl	8000f0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e6:	230f      	movs	r3, #15
 80009e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ea:	2302      	movs	r3, #2
 80009ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009fc:	f107 0308 	add.w	r3, r7, #8
 8000a00:	2102      	movs	r1, #2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 ff68 	bl	80028d8 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a0e:	f000 fa7d 	bl	8000f0c <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3750      	adds	r7, #80	@ 0x50
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40007000 	.word	0x40007000

08000a24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a2a:	4a13      	ldr	r2, [pc, #76]	@ (8000a78 <MX_I2C1_Init+0x54>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a30:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <MX_I2C1_Init+0x58>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a54:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a62:	f001 f96d 	bl	8001d40 <HAL_I2C_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a6c:	f000 fa4e 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000009c 	.word	0x2000009c
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	00061a80 	.word	0x00061a80

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b52      	ldr	r3, [pc, #328]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a51      	ldr	r2, [pc, #324]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b4f      	ldr	r3, [pc, #316]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b4b      	ldr	r3, [pc, #300]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a4a      	ldr	r2, [pc, #296]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b48      	ldr	r3, [pc, #288]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b44      	ldr	r3, [pc, #272]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a43      	ldr	r2, [pc, #268]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b41      	ldr	r3, [pc, #260]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b3d      	ldr	r3, [pc, #244]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a3c      	ldr	r2, [pc, #240]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b3a      	ldr	r3, [pc, #232]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 618c 	mov.w	r1, #1120	@ 0x460
 8000b0c:	4836      	ldr	r0, [pc, #216]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000b0e:	f001 f8e3 	bl	8001cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 8000b18:	4834      	ldr	r0, [pc, #208]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000b1a:	f001 f8dd 	bl	8001cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b1e:	230c      	movs	r3, #12
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b2e:	2307      	movs	r3, #7
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	482b      	ldr	r0, [pc, #172]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000b3a:	f000 ff21 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
 8000b3e:	f44f 638c 	mov.w	r3, #1120	@ 0x460
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4824      	ldr	r0, [pc, #144]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000b58:	f000 ff12 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b5c:	2380      	movs	r3, #128	@ 0x80
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	481e      	ldr	r0, [pc, #120]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000b70:	f000 ff06 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin;
 8000b74:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4817      	ldr	r0, [pc, #92]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000b8e:	f000 fef7 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000b92:	2380      	movs	r3, #128	@ 0x80
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4812      	ldr	r0, [pc, #72]	@ (8000bf0 <MX_GPIO_Init+0x170>)
 8000ba6:	f000 feeb 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000baa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480a      	ldr	r0, [pc, #40]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000bc0:	f000 fede 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000bc4:	2340      	movs	r3, #64	@ 0x40
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000bd8:	f000 fed2 	bl	8001980 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	@ 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020000 	.word	0x40020000
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	40020800 	.word	0x40020800

08000bf4 <StartKeypadTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartKeypadTask */
void StartKeypadTask(void *argument)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */

	char code[5];
	int numInputs = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]

	osDelay(1000);
 8000c00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c04:	f003 f830 	bl	8003c68 <osDelay>

	for (;;) {

		if(sync_LCD == 0) {
 8000c08:	4b37      	ldr	r3, [pc, #220]	@ (8000ce8 <StartKeypadTask+0xf4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d165      	bne.n	8000cdc <StartKeypadTask+0xe8>
			if(xSemaphoreTake(xSemaphore, ( TickType_t ) 10 ) == pdTRUE && sync_LCD == 0) {
 8000c10:	4b36      	ldr	r3, [pc, #216]	@ (8000cec <StartKeypadTask+0xf8>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	210a      	movs	r1, #10
 8000c16:	4618      	mov	r0, r3
 8000c18:	f003 fd24 	bl	8004664 <xQueueSemaphoreTake>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d15c      	bne.n	8000cdc <StartKeypadTask+0xe8>
 8000c22:	4b31      	ldr	r3, [pc, #196]	@ (8000ce8 <StartKeypadTask+0xf4>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d158      	bne.n	8000cdc <StartKeypadTask+0xe8>
				key = Get_Key();
 8000c2a:	f7ff fc7b 	bl	8000524 <Get_Key>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf0 <StartKeypadTask+0xfc>)
 8000c34:	701a      	strb	r2, [r3, #0]
				hold[numInputs] = key;
 8000c36:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf0 <StartKeypadTask+0xfc>)
 8000c38:	7819      	ldrb	r1, [r3, #0]
 8000c3a:	4a2e      	ldr	r2, [pc, #184]	@ (8000cf4 <StartKeypadTask+0x100>)
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	4413      	add	r3, r2
 8000c40:	460a      	mov	r2, r1
 8000c42:	701a      	strb	r2, [r3, #0]
				numInputs++;
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	3301      	adds	r3, #1
 8000c48:	61fb      	str	r3, [r7, #28]
				// Signal LCDTask to update the display after pressing each key
				//osEventFlagsSet(lcdEvent, 0x01);

				if (numInputs == 4) {
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	d13b      	bne.n	8000cc8 <StartKeypadTask+0xd4>
					if (armed == 0) {
 8000c50:	4b29      	ldr	r3, [pc, #164]	@ (8000cf8 <StartKeypadTask+0x104>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d109      	bne.n	8000c6c <StartKeypadTask+0x78>
						strcpy(code, hold);
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	4925      	ldr	r1, [pc, #148]	@ (8000cf4 <StartKeypadTask+0x100>)
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f005 ffee 	bl	8006c40 <strcpy>
						armed = 1;
 8000c64:	4b24      	ldr	r3, [pc, #144]	@ (8000cf8 <StartKeypadTask+0x104>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	e01d      	b.n	8000ca8 <StartKeypadTask+0xb4>

					} else {
						if (strcmp(code, hold) == 0) {
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	4920      	ldr	r1, [pc, #128]	@ (8000cf4 <StartKeypadTask+0x100>)
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff facc 	bl	8000210 <strcmp>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d114      	bne.n	8000ca8 <StartKeypadTask+0xb4>
							armed = 0;
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf8 <StartKeypadTask+0x104>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
							detected = 0;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <StartKeypadTask+0x108>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
							for (int i = 0; i < 4; i++) {
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
 8000c8e:	e008      	b.n	8000ca2 <StartKeypadTask+0xae>
								code[i] = '\0';
 8000c90:	f107 020c 	add.w	r2, r7, #12
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	4413      	add	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
							for (int i = 0; i < 4; i++) {
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	61bb      	str	r3, [r7, #24]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	ddf3      	ble.n	8000c90 <StartKeypadTask+0x9c>
							}
						}
					}

					for (int i = 0; i < 4; i++) {
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	e007      	b.n	8000cbe <StartKeypadTask+0xca>
						hold[i] = '\0';
 8000cae:	4a11      	ldr	r2, [pc, #68]	@ (8000cf4 <StartKeypadTask+0x100>)
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 4; i++) {
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	2b03      	cmp	r3, #3
 8000cc2:	ddf4      	ble.n	8000cae <StartKeypadTask+0xba>
					}
					numInputs = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
				}

				xSemaphoreGive(xSemaphore);
 8000cc8:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <StartKeypadTask+0xf8>)
 8000cca:	6818      	ldr	r0, [r3, #0]
 8000ccc:	2300      	movs	r3, #0
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	f003 fa45 	bl	8004160 <xQueueGenericSend>
				sync_LCD = 1;
 8000cd6:	4b04      	ldr	r3, [pc, #16]	@ (8000ce8 <StartKeypadTask+0xf4>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	601a      	str	r2, [r3, #0]
			}
		}
		osDelay(300);
 8000cdc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000ce0:	f002 ffc2 	bl	8003c68 <osDelay>
		if(sync_LCD == 0) {
 8000ce4:	e790      	b.n	8000c08 <StartKeypadTask+0x14>
 8000ce6:	bf00      	nop
 8000ce8:	20000110 	.word	0x20000110
 8000cec:	20000118 	.word	0x20000118
 8000cf0:	20000098 	.word	0x20000098
 8000cf4:	20000104 	.word	0x20000104
 8000cf8:	2000010c 	.word	0x2000010c
 8000cfc:	20000114 	.word	0x20000114

08000d00 <StartLCDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLCDTask */
void StartLCDTask(void *argument)
{
 8000d00:	b5b0      	push	{r4, r5, r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCDTask */
	SSD1306_Init();
 8000d08:	f000 f906 	bl	8000f18 <SSD1306_Init>

	// Initial message on the LCD
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f000 f9f5 	bl	80010fc <SSD1306_Fill>
	SSD1306_GotoXY(0, 0);
 8000d12:	2100      	movs	r1, #0
 8000d14:	2000      	movs	r0, #0
 8000d16:	f000 fa69 	bl	80011ec <SSD1306_GotoXY>
	SSD1306_Puts(armed_messages[armed], &Font_11x18, 1);
 8000d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd8 <StartLCDTask+0xd8>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4a2d      	ldr	r2, [pc, #180]	@ (8000ddc <StartLCDTask+0xdc>)
 8000d28:	4413      	add	r3, r2
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	492c      	ldr	r1, [pc, #176]	@ (8000de0 <StartLCDTask+0xe0>)
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 faf0 	bl	8001314 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000d34:	f000 f9b4 	bl	80010a0 <SSD1306_UpdateScreen>

	osDelay(100);
 8000d38:	2064      	movs	r0, #100	@ 0x64
 8000d3a:	f002 ff95 	bl	8003c68 <osDelay>

	/* Infinite loop */
	for (;;) {
		// Wait for a keypad event
		//osEventFlagsWait(lcdEvent, 0x01, osFlagsWaitAny, osWaitForever)}
		if(xSemaphoreTake(xSemaphore, ( TickType_t ) 10 ) == pdTRUE) {
 8000d3e:	4b29      	ldr	r3, [pc, #164]	@ (8000de4 <StartLCDTask+0xe4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	210a      	movs	r1, #10
 8000d44:	4618      	mov	r0, r3
 8000d46:	f003 fc8d 	bl	8004664 <xQueueSemaphoreTake>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d13f      	bne.n	8000dd0 <StartLCDTask+0xd0>
			SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f000 f9d3 	bl	80010fc <SSD1306_Fill>
			SSD1306_GotoXY(0, 0);
 8000d56:	2100      	movs	r1, #0
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f000 fa47 	bl	80011ec <SSD1306_GotoXY>
			SSD1306_Puts(armed_messages[armed], &Font_11x18, 1);
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <StartLCDTask+0xd8>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ddc <StartLCDTask+0xdc>)
 8000d6c:	4413      	add	r3, r2
 8000d6e:	2201      	movs	r2, #1
 8000d70:	491b      	ldr	r1, [pc, #108]	@ (8000de0 <StartLCDTask+0xe0>)
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 face 	bl	8001314 <SSD1306_Puts>

			if (strlen(hold) > 0) {
 8000d78:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <StartLCDTask+0xe8>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d01b      	beq.n	8000db8 <StartLCDTask+0xb8>

				char stars[4][5] = { "*", "**", "***", "****" };
 8000d80:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <StartLCDTask+0xec>)
 8000d82:	f107 040c 	add.w	r4, r7, #12
 8000d86:	461d      	mov	r5, r3
 8000d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d8c:	682b      	ldr	r3, [r5, #0]
 8000d8e:	6023      	str	r3, [r4, #0]

				SSD1306_GotoXY(0, 30);
 8000d90:	211e      	movs	r1, #30
 8000d92:	2000      	movs	r0, #0
 8000d94:	f000 fa2a 	bl	80011ec <SSD1306_GotoXY>
				SSD1306_Puts(stars[strlen(hold) - 1], &Font_11x18, 1);
 8000d98:	4813      	ldr	r0, [pc, #76]	@ (8000de8 <StartLCDTask+0xe8>)
 8000d9a:	f7ff fa43 	bl	8000224 <strlen>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	1e5a      	subs	r2, r3, #1
 8000da2:	f107 010c 	add.w	r1, r7, #12
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	440b      	add	r3, r1
 8000dae:	2201      	movs	r2, #1
 8000db0:	490b      	ldr	r1, [pc, #44]	@ (8000de0 <StartLCDTask+0xe0>)
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 faae 	bl	8001314 <SSD1306_Puts>
			}

			SSD1306_UpdateScreen();
 8000db8:	f000 f972 	bl	80010a0 <SSD1306_UpdateScreen>
			xSemaphoreGive(xSemaphore);
 8000dbc:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <StartLCDTask+0xe4>)
 8000dbe:	6818      	ldr	r0, [r3, #0]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	f003 f9cb 	bl	8004160 <xQueueGenericSend>
			sync_LCD = 0;
 8000dca:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <StartLCDTask+0xf0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
		}
		osDelay(100);
 8000dd0:	2064      	movs	r0, #100	@ 0x64
 8000dd2:	f002 ff49 	bl	8003c68 <osDelay>
		if(xSemaphoreTake(xSemaphore, ( TickType_t ) 10 ) == pdTRUE) {
 8000dd6:	e7b2      	b.n	8000d3e <StartLCDTask+0x3e>
 8000dd8:	2000010c 	.word	0x2000010c
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000118 	.word	0x20000118
 8000de8:	20000104 	.word	0x20000104
 8000dec:	08006d64 	.word	0x08006d64
 8000df0:	20000110 	.word	0x20000110

08000df4 <StartLEDsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLEDsTask */
void StartLEDsTask(void *argument)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDsTask */

	/* Infinite loop */
	for (;;) {
		// Not armed
		if (armed) {
 8000dfc:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <StartLEDsTask+0x4c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d00a      	beq.n	8000e1a <StartLEDsTask+0x26>
			// Turn on Green LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2140      	movs	r1, #64	@ 0x40
 8000e08:	480e      	ldr	r0, [pc, #56]	@ (8000e44 <StartLEDsTask+0x50>)
 8000e0a:	f000 ff65 	bl	8001cd8 <HAL_GPIO_WritePin>

			// Turn off Red LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e14:	480b      	ldr	r0, [pc, #44]	@ (8000e44 <StartLEDsTask+0x50>)
 8000e16:	f000 ff5f 	bl	8001cd8 <HAL_GPIO_WritePin>
		}

		osDelay(10);
 8000e1a:	200a      	movs	r0, #10
 8000e1c:	f002 ff24 	bl	8003c68 <osDelay>
		// Armed
		if (!armed) {
 8000e20:	4b07      	ldr	r3, [pc, #28]	@ (8000e40 <StartLEDsTask+0x4c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1e9      	bne.n	8000dfc <StartLEDsTask+0x8>
			// Turn off Green LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2140      	movs	r1, #64	@ 0x40
 8000e2c:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <StartLEDsTask+0x50>)
 8000e2e:	f000 ff53 	bl	8001cd8 <HAL_GPIO_WritePin>

			// Turn on Red LED
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e38:	4802      	ldr	r0, [pc, #8]	@ (8000e44 <StartLEDsTask+0x50>)
 8000e3a:	f000 ff4d 	bl	8001cd8 <HAL_GPIO_WritePin>
		if (armed) {
 8000e3e:	e7dd      	b.n	8000dfc <StartLEDsTask+0x8>
 8000e40:	2000010c 	.word	0x2000010c
 8000e44:	40020000 	.word	0x40020000

08000e48 <StartPIRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPIRTask */
void StartPIRTask(void *argument)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPIRTask */
	/* Infinite loop */
	osDelay(1000);
 8000e50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e54:	f002 ff08 	bl	8003c68 <osDelay>
	for (;;) {
		if(sync_LCD == 0) {
 8000e58:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <StartPIRTask+0x58>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d11a      	bne.n	8000e96 <StartPIRTask+0x4e>
			//if(xSemaphoreTake(xSemaphore, ( TickType_t ) 10 ) == pdTRUE) {
		// If the PIR detects something, wait 60 seconds to let the user enter the code to disarm the system, otherwise sound the buzzer
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET) {
 8000e60:	2180      	movs	r1, #128	@ 0x80
 8000e62:	4810      	ldr	r0, [pc, #64]	@ (8000ea4 <StartPIRTask+0x5c>)
 8000e64:	f000 ff20 	bl	8001ca8 <HAL_GPIO_ReadPin>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d113      	bne.n	8000e96 <StartPIRTask+0x4e>
				// Delay 60 seconds
					if (armed) {
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <StartPIRTask+0x60>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00f      	beq.n	8000e96 <StartPIRTask+0x4e>
						osDelay(2000);
 8000e76:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e7a:	f002 fef5 	bl	8003c68 <osDelay>
						if(armed) {
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <StartPIRTask+0x60>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d007      	beq.n	8000e96 <StartPIRTask+0x4e>
							detected = 1;
 8000e86:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <StartPIRTask+0x64>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2120      	movs	r1, #32
 8000e90:	4804      	ldr	r0, [pc, #16]	@ (8000ea4 <StartPIRTask+0x5c>)
 8000e92:	f000 ff21 	bl	8001cd8 <HAL_GPIO_WritePin>
					//}
					// After detection, keypad loses functionality
			}
		//}
	}
	osDelay(100);
 8000e96:	2064      	movs	r0, #100	@ 0x64
 8000e98:	f002 fee6 	bl	8003c68 <osDelay>
		if(sync_LCD == 0) {
 8000e9c:	e7dc      	b.n	8000e58 <StartPIRTask+0x10>
 8000e9e:	bf00      	nop
 8000ea0:	20000110 	.word	0x20000110
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	2000010c 	.word	0x2000010c
 8000eac:	20000114 	.word	0x20000114

08000eb0 <StartBuzzerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBuzzerTask */
void StartBuzzerTask(void *argument)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBuzzerTask */

	/* Infinite loop */
	for (;;) {

		if(detected) {
 8000eb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <StartBuzzerTask+0x30>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d005      	beq.n	8000ecc <StartBuzzerTask+0x1c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2120      	movs	r1, #32
 8000ec4:	4807      	ldr	r0, [pc, #28]	@ (8000ee4 <StartBuzzerTask+0x34>)
 8000ec6:	f000 ff07 	bl	8001cd8 <HAL_GPIO_WritePin>
 8000eca:	e004      	b.n	8000ed6 <StartBuzzerTask+0x26>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2120      	movs	r1, #32
 8000ed0:	4804      	ldr	r0, [pc, #16]	@ (8000ee4 <StartBuzzerTask+0x34>)
 8000ed2:	f000 ff01 	bl	8001cd8 <HAL_GPIO_WritePin>
		}

		osDelay(100);
 8000ed6:	2064      	movs	r0, #100	@ 0x64
 8000ed8:	f002 fec6 	bl	8003c68 <osDelay>
		if(detected) {
 8000edc:	e7ec      	b.n	8000eb8 <StartBuzzerTask+0x8>
 8000ede:	bf00      	nop
 8000ee0:	20000114 	.word	0x20000114
 8000ee4:	40020000 	.word	0x40020000

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a04      	ldr	r2, [pc, #16]	@ (8000f08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000efa:	f000 fc3f 	bl	800177c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40001000 	.word	0x40001000

08000f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f10:	b672      	cpsid	i
}
 8000f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <Error_Handler+0x8>

08000f18 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000f1e:	f000 fa1f 	bl	8001360 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000f22:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000f26:	2201      	movs	r2, #1
 8000f28:	2178      	movs	r1, #120	@ 0x78
 8000f2a:	485b      	ldr	r0, [pc, #364]	@ (8001098 <SSD1306_Init+0x180>)
 8000f2c:	f001 f94a 	bl	80021c4 <HAL_I2C_IsDeviceReady>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e0a9      	b.n	800108e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000f3a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000f3e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f40:	e002      	b.n	8000f48 <SSD1306_Init+0x30>
		p--;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f9      	bne.n	8000f42 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000f4e:	22ae      	movs	r2, #174	@ 0xae
 8000f50:	2100      	movs	r1, #0
 8000f52:	2078      	movs	r0, #120	@ 0x78
 8000f54:	f000 fa80 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000f58:	2220      	movs	r2, #32
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2078      	movs	r0, #120	@ 0x78
 8000f5e:	f000 fa7b 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000f62:	2210      	movs	r2, #16
 8000f64:	2100      	movs	r1, #0
 8000f66:	2078      	movs	r0, #120	@ 0x78
 8000f68:	f000 fa76 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f6c:	22b0      	movs	r2, #176	@ 0xb0
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2078      	movs	r0, #120	@ 0x78
 8000f72:	f000 fa71 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000f76:	22c8      	movs	r2, #200	@ 0xc8
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2078      	movs	r0, #120	@ 0x78
 8000f7c:	f000 fa6c 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	2078      	movs	r0, #120	@ 0x78
 8000f86:	f000 fa67 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000f8a:	2210      	movs	r2, #16
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2078      	movs	r0, #120	@ 0x78
 8000f90:	f000 fa62 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000f94:	2240      	movs	r2, #64	@ 0x40
 8000f96:	2100      	movs	r1, #0
 8000f98:	2078      	movs	r0, #120	@ 0x78
 8000f9a:	f000 fa5d 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000f9e:	2281      	movs	r2, #129	@ 0x81
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2078      	movs	r0, #120	@ 0x78
 8000fa4:	f000 fa58 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000fa8:	22ff      	movs	r2, #255	@ 0xff
 8000faa:	2100      	movs	r1, #0
 8000fac:	2078      	movs	r0, #120	@ 0x78
 8000fae:	f000 fa53 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000fb2:	22a1      	movs	r2, #161	@ 0xa1
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2078      	movs	r0, #120	@ 0x78
 8000fb8:	f000 fa4e 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000fbc:	22a6      	movs	r2, #166	@ 0xa6
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2078      	movs	r0, #120	@ 0x78
 8000fc2:	f000 fa49 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000fc6:	22a8      	movs	r2, #168	@ 0xa8
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2078      	movs	r0, #120	@ 0x78
 8000fcc:	f000 fa44 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000fd0:	223f      	movs	r2, #63	@ 0x3f
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2078      	movs	r0, #120	@ 0x78
 8000fd6:	f000 fa3f 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000fda:	22a4      	movs	r2, #164	@ 0xa4
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2078      	movs	r0, #120	@ 0x78
 8000fe0:	f000 fa3a 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000fe4:	22d3      	movs	r2, #211	@ 0xd3
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2078      	movs	r0, #120	@ 0x78
 8000fea:	f000 fa35 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2078      	movs	r0, #120	@ 0x78
 8000ff4:	f000 fa30 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ff8:	22d5      	movs	r2, #213	@ 0xd5
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2078      	movs	r0, #120	@ 0x78
 8000ffe:	f000 fa2b 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001002:	22f0      	movs	r2, #240	@ 0xf0
 8001004:	2100      	movs	r1, #0
 8001006:	2078      	movs	r0, #120	@ 0x78
 8001008:	f000 fa26 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800100c:	22d9      	movs	r2, #217	@ 0xd9
 800100e:	2100      	movs	r1, #0
 8001010:	2078      	movs	r0, #120	@ 0x78
 8001012:	f000 fa21 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001016:	2222      	movs	r2, #34	@ 0x22
 8001018:	2100      	movs	r1, #0
 800101a:	2078      	movs	r0, #120	@ 0x78
 800101c:	f000 fa1c 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001020:	22da      	movs	r2, #218	@ 0xda
 8001022:	2100      	movs	r1, #0
 8001024:	2078      	movs	r0, #120	@ 0x78
 8001026:	f000 fa17 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800102a:	2212      	movs	r2, #18
 800102c:	2100      	movs	r1, #0
 800102e:	2078      	movs	r0, #120	@ 0x78
 8001030:	f000 fa12 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001034:	22db      	movs	r2, #219	@ 0xdb
 8001036:	2100      	movs	r1, #0
 8001038:	2078      	movs	r0, #120	@ 0x78
 800103a:	f000 fa0d 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800103e:	2220      	movs	r2, #32
 8001040:	2100      	movs	r1, #0
 8001042:	2078      	movs	r0, #120	@ 0x78
 8001044:	f000 fa08 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001048:	228d      	movs	r2, #141	@ 0x8d
 800104a:	2100      	movs	r1, #0
 800104c:	2078      	movs	r0, #120	@ 0x78
 800104e:	f000 fa03 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001052:	2214      	movs	r2, #20
 8001054:	2100      	movs	r1, #0
 8001056:	2078      	movs	r0, #120	@ 0x78
 8001058:	f000 f9fe 	bl	8001458 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800105c:	22af      	movs	r2, #175	@ 0xaf
 800105e:	2100      	movs	r1, #0
 8001060:	2078      	movs	r0, #120	@ 0x78
 8001062:	f000 f9f9 	bl	8001458 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001066:	222e      	movs	r2, #46	@ 0x2e
 8001068:	2100      	movs	r1, #0
 800106a:	2078      	movs	r0, #120	@ 0x78
 800106c:	f000 f9f4 	bl	8001458 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001070:	2000      	movs	r0, #0
 8001072:	f000 f843 	bl	80010fc <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001076:	f000 f813 	bl	80010a0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800107a:	4b08      	ldr	r3, [pc, #32]	@ (800109c <SSD1306_Init+0x184>)
 800107c:	2200      	movs	r2, #0
 800107e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <SSD1306_Init+0x184>)
 8001082:	2200      	movs	r2, #0
 8001084:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001086:	4b05      	ldr	r3, [pc, #20]	@ (800109c <SSD1306_Init+0x184>)
 8001088:	2201      	movs	r2, #1
 800108a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800108c:	2301      	movs	r3, #1
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000009c 	.word	0x2000009c
 800109c:	2000051c 	.word	0x2000051c

080010a0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80010a6:	2300      	movs	r3, #0
 80010a8:	71fb      	strb	r3, [r7, #7]
 80010aa:	e01d      	b.n	80010e8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	3b50      	subs	r3, #80	@ 0x50
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	461a      	mov	r2, r3
 80010b4:	2100      	movs	r1, #0
 80010b6:	2078      	movs	r0, #120	@ 0x78
 80010b8:	f000 f9ce 	bl	8001458 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	2078      	movs	r0, #120	@ 0x78
 80010c2:	f000 f9c9 	bl	8001458 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80010c6:	2210      	movs	r2, #16
 80010c8:	2100      	movs	r1, #0
 80010ca:	2078      	movs	r0, #120	@ 0x78
 80010cc:	f000 f9c4 	bl	8001458 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	01db      	lsls	r3, r3, #7
 80010d4:	4a08      	ldr	r2, [pc, #32]	@ (80010f8 <SSD1306_UpdateScreen+0x58>)
 80010d6:	441a      	add	r2, r3
 80010d8:	2380      	movs	r3, #128	@ 0x80
 80010da:	2140      	movs	r1, #64	@ 0x40
 80010dc:	2078      	movs	r0, #120	@ 0x78
 80010de:	f000 f955 	bl	800138c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	3301      	adds	r3, #1
 80010e6:	71fb      	strb	r3, [r7, #7]
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b07      	cmp	r3, #7
 80010ec:	d9de      	bls.n	80010ac <SSD1306_UpdateScreen+0xc>
	}
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	2000011c 	.word	0x2000011c

080010fc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <SSD1306_Fill+0x14>
 800110c:	2300      	movs	r3, #0
 800110e:	e000      	b.n	8001112 <SSD1306_Fill+0x16>
 8001110:	23ff      	movs	r3, #255	@ 0xff
 8001112:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001116:	4619      	mov	r1, r3
 8001118:	4803      	ldr	r0, [pc, #12]	@ (8001128 <SSD1306_Fill+0x2c>)
 800111a:	f005 fd0d 	bl	8006b38 <memset>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000011c 	.word	0x2000011c

0800112c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
 8001136:	460b      	mov	r3, r1
 8001138:	80bb      	strh	r3, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	70fb      	strb	r3, [r7, #3]
	if (
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	2b7f      	cmp	r3, #127	@ 0x7f
 8001142:	d848      	bhi.n	80011d6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001144:	88bb      	ldrh	r3, [r7, #4]
 8001146:	2b3f      	cmp	r3, #63	@ 0x3f
 8001148:	d845      	bhi.n	80011d6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800114a:	4b26      	ldr	r3, [pc, #152]	@ (80011e4 <SSD1306_DrawPixel+0xb8>)
 800114c:	791b      	ldrb	r3, [r3, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d006      	beq.n	8001160 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001152:	78fb      	ldrb	r3, [r7, #3]
 8001154:	2b00      	cmp	r3, #0
 8001156:	bf0c      	ite	eq
 8001158:	2301      	moveq	r3, #1
 800115a:	2300      	movne	r3, #0
 800115c:	b2db      	uxtb	r3, r3
 800115e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d11a      	bne.n	800119c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001166:	88fa      	ldrh	r2, [r7, #6]
 8001168:	88bb      	ldrh	r3, [r7, #4]
 800116a:	08db      	lsrs	r3, r3, #3
 800116c:	b298      	uxth	r0, r3
 800116e:	4603      	mov	r3, r0
 8001170:	01db      	lsls	r3, r3, #7
 8001172:	4413      	add	r3, r2
 8001174:	4a1c      	ldr	r2, [pc, #112]	@ (80011e8 <SSD1306_DrawPixel+0xbc>)
 8001176:	5cd3      	ldrb	r3, [r2, r3]
 8001178:	b25a      	sxtb	r2, r3
 800117a:	88bb      	ldrh	r3, [r7, #4]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	2101      	movs	r1, #1
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	b25b      	sxtb	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b259      	sxtb	r1, r3
 800118c:	88fa      	ldrh	r2, [r7, #6]
 800118e:	4603      	mov	r3, r0
 8001190:	01db      	lsls	r3, r3, #7
 8001192:	4413      	add	r3, r2
 8001194:	b2c9      	uxtb	r1, r1
 8001196:	4a14      	ldr	r2, [pc, #80]	@ (80011e8 <SSD1306_DrawPixel+0xbc>)
 8001198:	54d1      	strb	r1, [r2, r3]
 800119a:	e01d      	b.n	80011d8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800119c:	88fa      	ldrh	r2, [r7, #6]
 800119e:	88bb      	ldrh	r3, [r7, #4]
 80011a0:	08db      	lsrs	r3, r3, #3
 80011a2:	b298      	uxth	r0, r3
 80011a4:	4603      	mov	r3, r0
 80011a6:	01db      	lsls	r3, r3, #7
 80011a8:	4413      	add	r3, r2
 80011aa:	4a0f      	ldr	r2, [pc, #60]	@ (80011e8 <SSD1306_DrawPixel+0xbc>)
 80011ac:	5cd3      	ldrb	r3, [r2, r3]
 80011ae:	b25a      	sxtb	r2, r3
 80011b0:	88bb      	ldrh	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	2101      	movs	r1, #1
 80011b8:	fa01 f303 	lsl.w	r3, r1, r3
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	4013      	ands	r3, r2
 80011c4:	b259      	sxtb	r1, r3
 80011c6:	88fa      	ldrh	r2, [r7, #6]
 80011c8:	4603      	mov	r3, r0
 80011ca:	01db      	lsls	r3, r3, #7
 80011cc:	4413      	add	r3, r2
 80011ce:	b2c9      	uxtb	r1, r1
 80011d0:	4a05      	ldr	r2, [pc, #20]	@ (80011e8 <SSD1306_DrawPixel+0xbc>)
 80011d2:	54d1      	strb	r1, [r2, r3]
 80011d4:	e000      	b.n	80011d8 <SSD1306_DrawPixel+0xac>
		return;
 80011d6:	bf00      	nop
	}
}
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	2000051c 	.word	0x2000051c
 80011e8:	2000011c 	.word	0x2000011c

080011ec <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	460a      	mov	r2, r1
 80011f6:	80fb      	strh	r3, [r7, #6]
 80011f8:	4613      	mov	r3, r2
 80011fa:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80011fc:	4a05      	ldr	r2, [pc, #20]	@ (8001214 <SSD1306_GotoXY+0x28>)
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001202:	4a04      	ldr	r2, [pc, #16]	@ (8001214 <SSD1306_GotoXY+0x28>)
 8001204:	88bb      	ldrh	r3, [r7, #4]
 8001206:	8053      	strh	r3, [r2, #2]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	2000051c 	.word	0x2000051c

08001218 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
 8001224:	4613      	mov	r3, r2
 8001226:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001228:	4b39      	ldr	r3, [pc, #228]	@ (8001310 <SSD1306_Putc+0xf8>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
	if (
 8001234:	2b7f      	cmp	r3, #127	@ 0x7f
 8001236:	dc07      	bgt.n	8001248 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001238:	4b35      	ldr	r3, [pc, #212]	@ (8001310 <SSD1306_Putc+0xf8>)
 800123a:	885b      	ldrh	r3, [r3, #2]
 800123c:	461a      	mov	r2, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	785b      	ldrb	r3, [r3, #1]
 8001242:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001244:	2b3f      	cmp	r3, #63	@ 0x3f
 8001246:	dd01      	ble.n	800124c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001248:	2300      	movs	r3, #0
 800124a:	e05d      	b.n	8001308 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	e04b      	b.n	80012ea <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	3b20      	subs	r3, #32
 800125a:	6839      	ldr	r1, [r7, #0]
 800125c:	7849      	ldrb	r1, [r1, #1]
 800125e:	fb01 f303 	mul.w	r3, r1, r3
 8001262:	4619      	mov	r1, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	440b      	add	r3, r1
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001270:	2300      	movs	r3, #0
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	e030      	b.n	80012d8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d010      	beq.n	80012a8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001286:	4b22      	ldr	r3, [pc, #136]	@ (8001310 <SSD1306_Putc+0xf8>)
 8001288:	881a      	ldrh	r2, [r3, #0]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	b29b      	uxth	r3, r3
 800128e:	4413      	add	r3, r2
 8001290:	b298      	uxth	r0, r3
 8001292:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <SSD1306_Putc+0xf8>)
 8001294:	885a      	ldrh	r2, [r3, #2]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	b29b      	uxth	r3, r3
 800129a:	4413      	add	r3, r2
 800129c:	b29b      	uxth	r3, r3
 800129e:	79ba      	ldrb	r2, [r7, #6]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f7ff ff43 	bl	800112c <SSD1306_DrawPixel>
 80012a6:	e014      	b.n	80012d2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80012a8:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <SSD1306_Putc+0xf8>)
 80012aa:	881a      	ldrh	r2, [r3, #0]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	4413      	add	r3, r2
 80012b2:	b298      	uxth	r0, r3
 80012b4:	4b16      	ldr	r3, [pc, #88]	@ (8001310 <SSD1306_Putc+0xf8>)
 80012b6:	885a      	ldrh	r2, [r3, #2]
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	4413      	add	r3, r2
 80012be:	b299      	uxth	r1, r3
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	bf0c      	ite	eq
 80012c6:	2301      	moveq	r3, #1
 80012c8:	2300      	movne	r3, #0
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	f7ff ff2d 	bl	800112c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	3301      	adds	r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d3c8      	bcc.n	8001276 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	3301      	adds	r3, #1
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	785b      	ldrb	r3, [r3, #1]
 80012ee:	461a      	mov	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d3ad      	bcc.n	8001252 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <SSD1306_Putc+0xf8>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	7812      	ldrb	r2, [r2, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	b29a      	uxth	r2, r3
 8001302:	4b03      	ldr	r3, [pc, #12]	@ (8001310 <SSD1306_Putc+0xf8>)
 8001304:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001306:	79fb      	ldrb	r3, [r7, #7]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	2000051c 	.word	0x2000051c

08001314 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	4613      	mov	r3, r2
 8001320:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001322:	e012      	b.n	800134a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	79fa      	ldrb	r2, [r7, #7]
 800132a:	68b9      	ldr	r1, [r7, #8]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff73 	bl	8001218 <SSD1306_Putc>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d002      	beq.n	8001344 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	e008      	b.n	8001356 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3301      	adds	r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1e8      	bne.n	8001324 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	781b      	ldrb	r3, [r3, #0]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <ssd1306_I2C_Init+0x28>)
 8001368:	607b      	str	r3, [r7, #4]
	while(p>0)
 800136a:	e002      	b.n	8001372 <ssd1306_I2C_Init+0x12>
		p--;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1f9      	bne.n	800136c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	0003d090 	.word	0x0003d090

0800138c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b0c7      	sub	sp, #284	@ 0x11c
 8001390:	af02      	add	r7, sp, #8
 8001392:	4604      	mov	r4, r0
 8001394:	4608      	mov	r0, r1
 8001396:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800139a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800139e:	600a      	str	r2, [r1, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013a6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80013aa:	4622      	mov	r2, r4
 80013ac:	701a      	strb	r2, [r3, #0]
 80013ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013b2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80013b6:	4602      	mov	r2, r0
 80013b8:	701a      	strb	r2, [r3, #0]
 80013ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013c2:	460a      	mov	r2, r1
 80013c4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80013c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013ce:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80013d2:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80013d6:	7812      	ldrb	r2, [r2, #0]
 80013d8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80013da:	2300      	movs	r3, #0
 80013dc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80013e0:	e015      	b.n	800140e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80013e2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80013e6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80013ea:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	441a      	add	r2, r3
 80013f2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80013f6:	3301      	adds	r3, #1
 80013f8:	7811      	ldrb	r1, [r2, #0]
 80013fa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80013fe:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001402:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001404:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001408:	3301      	adds	r3, #1
 800140a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800140e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001412:	b29b      	uxth	r3, r3
 8001414:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001418:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800141c:	8812      	ldrh	r2, [r2, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	d8df      	bhi.n	80013e2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001422:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001426:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b299      	uxth	r1, r3
 800142e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001432:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	b29b      	uxth	r3, r3
 800143c:	f107 020c 	add.w	r2, r7, #12
 8001440:	200a      	movs	r0, #10
 8001442:	9000      	str	r0, [sp, #0]
 8001444:	4803      	ldr	r0, [pc, #12]	@ (8001454 <ssd1306_I2C_WriteMulti+0xc8>)
 8001446:	f000 fdbf 	bl	8001fc8 <HAL_I2C_Master_Transmit>
}
 800144a:	bf00      	nop
 800144c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001450:	46bd      	mov	sp, r7
 8001452:	bd90      	pop	{r4, r7, pc}
 8001454:	2000009c 	.word	0x2000009c

08001458 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af02      	add	r7, sp, #8
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
 8001462:	460b      	mov	r3, r1
 8001464:	71bb      	strb	r3, [r7, #6]
 8001466:	4613      	mov	r3, r2
 8001468:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800146a:	79bb      	ldrb	r3, [r7, #6]
 800146c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800146e:	797b      	ldrb	r3, [r7, #5]
 8001470:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	b299      	uxth	r1, r3
 8001476:	f107 020c 	add.w	r2, r7, #12
 800147a:	230a      	movs	r3, #10
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2302      	movs	r3, #2
 8001480:	4803      	ldr	r0, [pc, #12]	@ (8001490 <ssd1306_I2C_Write+0x38>)
 8001482:	f000 fda1 	bl	8001fc8 <HAL_I2C_Master_Transmit>
}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	2000009c 	.word	0x2000009c

08001494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <HAL_MspInit+0x54>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a2:	4a11      	ldr	r2, [pc, #68]	@ (80014e8 <HAL_MspInit+0x54>)
 80014a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014aa:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <HAL_MspInit+0x54>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <HAL_MspInit+0x54>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <HAL_MspInit+0x54>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c6:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <HAL_MspInit+0x54>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	210f      	movs	r1, #15
 80014d6:	f06f 0001 	mvn.w	r0, #1
 80014da:	f000 fa27 	bl	800192c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	@ 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a19      	ldr	r2, [pc, #100]	@ (8001570 <HAL_I2C_MspInit+0x84>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d12c      	bne.n	8001568 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <HAL_I2C_MspInit+0x88>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a17      	ldr	r2, [pc, #92]	@ (8001574 <HAL_I2C_MspInit+0x88>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <HAL_I2C_MspInit+0x88>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800152a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001530:	2312      	movs	r3, #18
 8001532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800153c:	2304      	movs	r3, #4
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	480c      	ldr	r0, [pc, #48]	@ (8001578 <HAL_I2C_MspInit+0x8c>)
 8001548:	f000 fa1a 	bl	8001980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <HAL_I2C_MspInit+0x88>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001554:	4a07      	ldr	r2, [pc, #28]	@ (8001574 <HAL_I2C_MspInit+0x88>)
 8001556:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800155a:	6413      	str	r3, [r2, #64]	@ 0x40
 800155c:	4b05      	ldr	r3, [pc, #20]	@ (8001574 <HAL_I2C_MspInit+0x88>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001560:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001568:	bf00      	nop
 800156a:	3728      	adds	r7, #40	@ 0x28
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40005400 	.word	0x40005400
 8001574:	40023800 	.word	0x40023800
 8001578:	40020400 	.word	0x40020400

0800157c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08e      	sub	sp, #56	@ 0x38
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	4b33      	ldr	r3, [pc, #204]	@ (8001660 <HAL_InitTick+0xe4>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001594:	4a32      	ldr	r2, [pc, #200]	@ (8001660 <HAL_InitTick+0xe4>)
 8001596:	f043 0310 	orr.w	r3, r3, #16
 800159a:	6413      	str	r3, [r2, #64]	@ 0x40
 800159c:	4b30      	ldr	r3, [pc, #192]	@ (8001660 <HAL_InitTick+0xe4>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015a8:	f107 0210 	add.w	r2, r7, #16
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f001 fa96 	bl	8002ae4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d103      	bne.n	80015ca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015c2:	f001 fa7b 	bl	8002abc <HAL_RCC_GetPCLK1Freq>
 80015c6:	6378      	str	r0, [r7, #52]	@ 0x34
 80015c8:	e004      	b.n	80015d4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015ca:	f001 fa77 	bl	8002abc <HAL_RCC_GetPCLK1Freq>
 80015ce:	4603      	mov	r3, r0
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015d6:	4a23      	ldr	r2, [pc, #140]	@ (8001664 <HAL_InitTick+0xe8>)
 80015d8:	fba2 2303 	umull	r2, r3, r2, r3
 80015dc:	0c9b      	lsrs	r3, r3, #18
 80015de:	3b01      	subs	r3, #1
 80015e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015e2:	4b21      	ldr	r3, [pc, #132]	@ (8001668 <HAL_InitTick+0xec>)
 80015e4:	4a21      	ldr	r2, [pc, #132]	@ (800166c <HAL_InitTick+0xf0>)
 80015e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001668 <HAL_InitTick+0xec>)
 80015ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001668 <HAL_InitTick+0xec>)
 80015f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001668 <HAL_InitTick+0xec>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001668 <HAL_InitTick+0xec>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001602:	4b19      	ldr	r3, [pc, #100]	@ (8001668 <HAL_InitTick+0xec>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001608:	4817      	ldr	r0, [pc, #92]	@ (8001668 <HAL_InitTick+0xec>)
 800160a:	f001 ff6b 	bl	80034e4 <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001614:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001618:	2b00      	cmp	r3, #0
 800161a:	d11b      	bne.n	8001654 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800161c:	4812      	ldr	r0, [pc, #72]	@ (8001668 <HAL_InitTick+0xec>)
 800161e:	f001 ffbb 	bl	8003598 <HAL_TIM_Base_Start_IT>
 8001622:	4603      	mov	r3, r0
 8001624:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001628:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800162c:	2b00      	cmp	r3, #0
 800162e:	d111      	bne.n	8001654 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001630:	2036      	movs	r0, #54	@ 0x36
 8001632:	f000 f997 	bl	8001964 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d808      	bhi.n	800164e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	2036      	movs	r0, #54	@ 0x36
 8001642:	f000 f973 	bl	800192c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001646:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <HAL_InitTick+0xf4>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	e002      	b.n	8001654 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001654:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001658:	4618      	mov	r0, r3
 800165a:	3738      	adds	r7, #56	@ 0x38
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800
 8001664:	431bde83 	.word	0x431bde83
 8001668:	20000524 	.word	0x20000524
 800166c:	40001000 	.word	0x40001000
 8001670:	20000020 	.word	0x20000020

08001674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <NMI_Handler+0x4>

0800167c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <MemManage_Handler+0x4>

0800168c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <BusFault_Handler+0x4>

08001694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <UsageFault_Handler+0x4>

0800169c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016b0:	4802      	ldr	r0, [pc, #8]	@ (80016bc <TIM6_DAC_IRQHandler+0x10>)
 80016b2:	f001 ffe1 	bl	8003678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000524 	.word	0x20000524

080016c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <SystemInit+0x20>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ca:	4a05      	ldr	r2, [pc, #20]	@ (80016e0 <SystemInit+0x20>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800171c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016e8:	f7ff ffea 	bl	80016c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016ec:	480c      	ldr	r0, [pc, #48]	@ (8001720 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ee:	490d      	ldr	r1, [pc, #52]	@ (8001724 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001728 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001704:	4c0a      	ldr	r4, [pc, #40]	@ (8001730 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001712:	f005 fa6f 	bl	8006bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001716:	f7ff f8b9 	bl	800088c <main>
  bx  lr    
 800171a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800171c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001728:	08007bc8 	.word	0x08007bc8
  ldr r2, =_sbss
 800172c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001730:	20005098 	.word	0x20005098

08001734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC_IRQHandler>
	...

08001738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800173c:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0d      	ldr	r2, [pc, #52]	@ (8001778 <HAL_Init+0x40>)
 8001742:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001746:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001748:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0a      	ldr	r2, [pc, #40]	@ (8001778 <HAL_Init+0x40>)
 800174e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001752:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001754:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a07      	ldr	r2, [pc, #28]	@ (8001778 <HAL_Init+0x40>)
 800175a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800175e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001760:	2003      	movs	r0, #3
 8001762:	f000 f8d8 	bl	8001916 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001766:	200f      	movs	r0, #15
 8001768:	f7ff ff08 	bl	800157c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800176c:	f7ff fe92 	bl	8001494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023c00 	.word	0x40023c00

0800177c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_IncTick+0x20>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_IncTick+0x24>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <HAL_IncTick+0x24>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000024 	.word	0x20000024
 80017a0:	2000056c 	.word	0x2000056c

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b03      	ldr	r3, [pc, #12]	@ (80017b8 <HAL_GetTick+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	2000056c 	.word	0x2000056c

080017bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ee:	4a04      	ldr	r2, [pc, #16]	@ (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	60d3      	str	r3, [r2, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001808:	4b04      	ldr	r3, [pc, #16]	@ (800181c <__NVIC_GetPriorityGrouping+0x18>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	f003 0307 	and.w	r3, r3, #7
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	2b00      	cmp	r3, #0
 8001830:	db0b      	blt.n	800184a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	f003 021f 	and.w	r2, r3, #31
 8001838:	4907      	ldr	r1, [pc, #28]	@ (8001858 <__NVIC_EnableIRQ+0x38>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	2001      	movs	r0, #1
 8001842:	fa00 f202 	lsl.w	r2, r0, r2
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000e100 	.word	0xe000e100

0800185c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	db0a      	blt.n	8001886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	490c      	ldr	r1, [pc, #48]	@ (80018a8 <__NVIC_SetPriority+0x4c>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	0112      	lsls	r2, r2, #4
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	440b      	add	r3, r1
 8001880:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001884:	e00a      	b.n	800189c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4908      	ldr	r1, [pc, #32]	@ (80018ac <__NVIC_SetPriority+0x50>)
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	3b04      	subs	r3, #4
 8001894:	0112      	lsls	r2, r2, #4
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	440b      	add	r3, r1
 800189a:	761a      	strb	r2, [r3, #24]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000e100 	.word	0xe000e100
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	@ 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f1c3 0307 	rsb	r3, r3, #7
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	bf28      	it	cs
 80018ce:	2304      	movcs	r3, #4
 80018d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3304      	adds	r3, #4
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d902      	bls.n	80018e0 <NVIC_EncodePriority+0x30>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3b03      	subs	r3, #3
 80018de:	e000      	b.n	80018e2 <NVIC_EncodePriority+0x32>
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43da      	mvns	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	401a      	ands	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f8:	f04f 31ff 	mov.w	r1, #4294967295
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43d9      	mvns	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	4313      	orrs	r3, r2
         );
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	@ 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ff4c 	bl	80017bc <__NVIC_SetPriorityGrouping>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800193e:	f7ff ff61 	bl	8001804 <__NVIC_GetPriorityGrouping>
 8001942:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	68b9      	ldr	r1, [r7, #8]
 8001948:	6978      	ldr	r0, [r7, #20]
 800194a:	f7ff ffb1 	bl	80018b0 <NVIC_EncodePriority>
 800194e:	4602      	mov	r2, r0
 8001950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff80 	bl	800185c <__NVIC_SetPriority>
}
 800195c:	bf00      	nop
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff54 	bl	8001820 <__NVIC_EnableIRQ>
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	@ 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	e165      	b.n	8001c68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800199c:	2201      	movs	r2, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	f040 8154 	bne.w	8001c62 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d005      	beq.n	80019d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d130      	bne.n	8001a34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 0201 	and.w	r2, r3, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d017      	beq.n	8001a70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d123      	bne.n	8001ac4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	08da      	lsrs	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3208      	adds	r2, #8
 8001a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	220f      	movs	r2, #15
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	691a      	ldr	r2, [r3, #16]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	08da      	lsrs	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3208      	adds	r2, #8
 8001abe:	69b9      	ldr	r1, [r7, #24]
 8001ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0203 	and.w	r2, r3, #3
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80ae 	beq.w	8001c62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001c80 <HAL_GPIO_Init+0x300>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0e:	4a5c      	ldr	r2, [pc, #368]	@ (8001c80 <HAL_GPIO_Init+0x300>)
 8001b10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b16:	4b5a      	ldr	r3, [pc, #360]	@ (8001c80 <HAL_GPIO_Init+0x300>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b22:	4a58      	ldr	r2, [pc, #352]	@ (8001c84 <HAL_GPIO_Init+0x304>)
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	3302      	adds	r3, #2
 8001b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	220f      	movs	r2, #15
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4f      	ldr	r2, [pc, #316]	@ (8001c88 <HAL_GPIO_Init+0x308>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d025      	beq.n	8001b9a <HAL_GPIO_Init+0x21a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a4e      	ldr	r2, [pc, #312]	@ (8001c8c <HAL_GPIO_Init+0x30c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d01f      	beq.n	8001b96 <HAL_GPIO_Init+0x216>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a4d      	ldr	r2, [pc, #308]	@ (8001c90 <HAL_GPIO_Init+0x310>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d019      	beq.n	8001b92 <HAL_GPIO_Init+0x212>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4c      	ldr	r2, [pc, #304]	@ (8001c94 <HAL_GPIO_Init+0x314>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <HAL_GPIO_Init+0x20e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4b      	ldr	r2, [pc, #300]	@ (8001c98 <HAL_GPIO_Init+0x318>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00d      	beq.n	8001b8a <HAL_GPIO_Init+0x20a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4a      	ldr	r2, [pc, #296]	@ (8001c9c <HAL_GPIO_Init+0x31c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d007      	beq.n	8001b86 <HAL_GPIO_Init+0x206>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a49      	ldr	r2, [pc, #292]	@ (8001ca0 <HAL_GPIO_Init+0x320>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d101      	bne.n	8001b82 <HAL_GPIO_Init+0x202>
 8001b7e:	2306      	movs	r3, #6
 8001b80:	e00c      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b82:	2307      	movs	r3, #7
 8001b84:	e00a      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b86:	2305      	movs	r3, #5
 8001b88:	e008      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	e006      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e004      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e002      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	69fa      	ldr	r2, [r7, #28]
 8001b9e:	f002 0203 	and.w	r2, r2, #3
 8001ba2:	0092      	lsls	r2, r2, #2
 8001ba4:	4093      	lsls	r3, r2
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bac:	4935      	ldr	r1, [pc, #212]	@ (8001c84 <HAL_GPIO_Init+0x304>)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	089b      	lsrs	r3, r3, #2
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bba:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca4 <HAL_GPIO_Init+0x324>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bde:	4a31      	ldr	r2, [pc, #196]	@ (8001ca4 <HAL_GPIO_Init+0x324>)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001be4:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca4 <HAL_GPIO_Init+0x324>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c08:	4a26      	ldr	r2, [pc, #152]	@ (8001ca4 <HAL_GPIO_Init+0x324>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c0e:	4b25      	ldr	r3, [pc, #148]	@ (8001ca4 <HAL_GPIO_Init+0x324>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c32:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca4 <HAL_GPIO_Init+0x324>)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c38:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca4 <HAL_GPIO_Init+0x324>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c5c:	4a11      	ldr	r2, [pc, #68]	@ (8001ca4 <HAL_GPIO_Init+0x324>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3301      	adds	r3, #1
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	2b0f      	cmp	r3, #15
 8001c6c:	f67f ae96 	bls.w	800199c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	3724      	adds	r7, #36	@ 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40013800 	.word	0x40013800
 8001c88:	40020000 	.word	0x40020000
 8001c8c:	40020400 	.word	0x40020400
 8001c90:	40020800 	.word	0x40020800
 8001c94:	40020c00 	.word	0x40020c00
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40021400 	.word	0x40021400
 8001ca0:	40021800 	.word	0x40021800
 8001ca4:	40013c00 	.word	0x40013c00

08001ca8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	887b      	ldrh	r3, [r7, #2]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	73fb      	strb	r3, [r7, #15]
 8001cc4:	e001      	b.n	8001cca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce8:	787b      	ldrb	r3, [r7, #1]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cee:	887a      	ldrh	r2, [r7, #2]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cf4:	e003      	b.n	8001cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cf6:	887b      	ldrh	r3, [r7, #2]
 8001cf8:	041a      	lsls	r2, r3, #16
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	619a      	str	r2, [r3, #24]
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b085      	sub	sp, #20
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	460b      	mov	r3, r1
 8001d14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d1c:	887a      	ldrh	r2, [r7, #2]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4013      	ands	r3, r2
 8001d22:	041a      	lsls	r2, r3, #16
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	43d9      	mvns	r1, r3
 8001d28:	887b      	ldrh	r3, [r7, #2]
 8001d2a:	400b      	ands	r3, r1
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	619a      	str	r2, [r3, #24]
}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e12b      	b.n	8001faa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff fbc0 	bl	80014ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2224      	movs	r2, #36	@ 0x24
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001da4:	f000 fe8a 	bl	8002abc <HAL_RCC_GetPCLK1Freq>
 8001da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4a81      	ldr	r2, [pc, #516]	@ (8001fb4 <HAL_I2C_Init+0x274>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d807      	bhi.n	8001dc4 <HAL_I2C_Init+0x84>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4a80      	ldr	r2, [pc, #512]	@ (8001fb8 <HAL_I2C_Init+0x278>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	bf94      	ite	ls
 8001dbc:	2301      	movls	r3, #1
 8001dbe:	2300      	movhi	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	e006      	b.n	8001dd2 <HAL_I2C_Init+0x92>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4a7d      	ldr	r2, [pc, #500]	@ (8001fbc <HAL_I2C_Init+0x27c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	bf94      	ite	ls
 8001dcc:	2301      	movls	r3, #1
 8001dce:	2300      	movhi	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e0e7      	b.n	8001faa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4a78      	ldr	r2, [pc, #480]	@ (8001fc0 <HAL_I2C_Init+0x280>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0c9b      	lsrs	r3, r3, #18
 8001de4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4a6a      	ldr	r2, [pc, #424]	@ (8001fb4 <HAL_I2C_Init+0x274>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d802      	bhi.n	8001e14 <HAL_I2C_Init+0xd4>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	3301      	adds	r3, #1
 8001e12:	e009      	b.n	8001e28 <HAL_I2C_Init+0xe8>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e1a:	fb02 f303 	mul.w	r3, r2, r3
 8001e1e:	4a69      	ldr	r2, [pc, #420]	@ (8001fc4 <HAL_I2C_Init+0x284>)
 8001e20:	fba2 2303 	umull	r2, r3, r2, r3
 8001e24:	099b      	lsrs	r3, r3, #6
 8001e26:	3301      	adds	r3, #1
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	495c      	ldr	r1, [pc, #368]	@ (8001fb4 <HAL_I2C_Init+0x274>)
 8001e44:	428b      	cmp	r3, r1
 8001e46:	d819      	bhi.n	8001e7c <HAL_I2C_Init+0x13c>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1e59      	subs	r1, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e56:	1c59      	adds	r1, r3, #1
 8001e58:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e5c:	400b      	ands	r3, r1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00a      	beq.n	8001e78 <HAL_I2C_Init+0x138>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1e59      	subs	r1, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e70:	3301      	adds	r3, #1
 8001e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e76:	e051      	b.n	8001f1c <HAL_I2C_Init+0x1dc>
 8001e78:	2304      	movs	r3, #4
 8001e7a:	e04f      	b.n	8001f1c <HAL_I2C_Init+0x1dc>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d111      	bne.n	8001ea8 <HAL_I2C_Init+0x168>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1e58      	subs	r0, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6859      	ldr	r1, [r3, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	440b      	add	r3, r1
 8001e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e96:	3301      	adds	r3, #1
 8001e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bf0c      	ite	eq
 8001ea0:	2301      	moveq	r3, #1
 8001ea2:	2300      	movne	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	e012      	b.n	8001ece <HAL_I2C_Init+0x18e>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1e58      	subs	r0, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	0099      	lsls	r1, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_I2C_Init+0x196>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e022      	b.n	8001f1c <HAL_I2C_Init+0x1dc>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10e      	bne.n	8001efc <HAL_I2C_Init+0x1bc>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1e58      	subs	r0, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6859      	ldr	r1, [r3, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	440b      	add	r3, r1
 8001eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001efa:	e00f      	b.n	8001f1c <HAL_I2C_Init+0x1dc>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1e58      	subs	r0, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	0099      	lsls	r1, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f12:	3301      	adds	r3, #1
 8001f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	6809      	ldr	r1, [r1, #0]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69da      	ldr	r2, [r3, #28]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6911      	ldr	r1, [r2, #16]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68d2      	ldr	r2, [r2, #12]
 8001f56:	4311      	orrs	r1, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2220      	movs	r2, #32
 8001f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	000186a0 	.word	0x000186a0
 8001fb8:	001e847f 	.word	0x001e847f
 8001fbc:	003d08ff 	.word	0x003d08ff
 8001fc0:	431bde83 	.word	0x431bde83
 8001fc4:	10624dd3 	.word	0x10624dd3

08001fc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	607a      	str	r2, [r7, #4]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	817b      	strh	r3, [r7, #10]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fdc:	f7ff fbe2 	bl	80017a4 <HAL_GetTick>
 8001fe0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	f040 80e0 	bne.w	80021b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2319      	movs	r3, #25
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4970      	ldr	r1, [pc, #448]	@ (80021bc <HAL_I2C_Master_Transmit+0x1f4>)
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 fa92 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002006:	2302      	movs	r3, #2
 8002008:	e0d3      	b.n	80021b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_I2C_Master_Transmit+0x50>
 8002014:	2302      	movs	r3, #2
 8002016:	e0cc      	b.n	80021b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d007      	beq.n	800203e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0201 	orr.w	r2, r2, #1
 800203c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800204c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2221      	movs	r2, #33	@ 0x21
 8002052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2210      	movs	r2, #16
 800205a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	893a      	ldrh	r2, [r7, #8]
 800206e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4a50      	ldr	r2, [pc, #320]	@ (80021c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800207e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002080:	8979      	ldrh	r1, [r7, #10]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	6a3a      	ldr	r2, [r7, #32]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f9ca 	bl	8002420 <I2C_MasterRequestWrite>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e08d      	b.n	80021b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020ac:	e066      	b.n	800217c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	6a39      	ldr	r1, [r7, #32]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 fb50 	bl	8002758 <I2C_WaitOnTXEFlagUntilTimeout>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00d      	beq.n	80020da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d107      	bne.n	80020d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e06b      	b.n	80021b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020de:	781a      	ldrb	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002102:	3b01      	subs	r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b04      	cmp	r3, #4
 8002116:	d11b      	bne.n	8002150 <HAL_I2C_Master_Transmit+0x188>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211c:	2b00      	cmp	r3, #0
 800211e:	d017      	beq.n	8002150 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002124:	781a      	ldrb	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	6a39      	ldr	r1, [r7, #32]
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 fb47 	bl	80027e8 <I2C_WaitOnBTFFlagUntilTimeout>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00d      	beq.n	800217c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002164:	2b04      	cmp	r3, #4
 8002166:	d107      	bne.n	8002178 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002176:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e01a      	b.n	80021b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	d194      	bne.n	80020ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	e000      	b.n	80021b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021b0:	2302      	movs	r3, #2
  }
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	00100002 	.word	0x00100002
 80021c0:	ffff0000 	.word	0xffff0000

080021c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	@ 0x28
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	460b      	mov	r3, r1
 80021d2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80021d4:	f7ff fae6 	bl	80017a4 <HAL_GetTick>
 80021d8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b20      	cmp	r3, #32
 80021e8:	f040 8111 	bne.w	800240e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2319      	movs	r3, #25
 80021f2:	2201      	movs	r2, #1
 80021f4:	4988      	ldr	r1, [pc, #544]	@ (8002418 <HAL_I2C_IsDeviceReady+0x254>)
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f994 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002202:	2302      	movs	r3, #2
 8002204:	e104      	b.n	8002410 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_I2C_IsDeviceReady+0x50>
 8002210:	2302      	movs	r3, #2
 8002212:	e0fd      	b.n	8002410 <HAL_I2C_IsDeviceReady+0x24c>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b01      	cmp	r3, #1
 8002228:	d007      	beq.n	800223a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0201 	orr.w	r2, r2, #1
 8002238:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002248:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2224      	movs	r2, #36	@ 0x24
 800224e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4a70      	ldr	r2, [pc, #448]	@ (800241c <HAL_I2C_IsDeviceReady+0x258>)
 800225c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800226c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2200      	movs	r2, #0
 8002276:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f952 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00d      	beq.n	80022a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002290:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002294:	d103      	bne.n	800229e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800229c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e0b6      	b.n	8002410 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022a2:	897b      	ldrh	r3, [r7, #10]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80022b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80022b2:	f7ff fa77 	bl	80017a4 <HAL_GetTick>
 80022b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	bf0c      	ite	eq
 80022c6:	2301      	moveq	r3, #1
 80022c8:	2300      	movne	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022dc:	bf0c      	ite	eq
 80022de:	2301      	moveq	r3, #1
 80022e0:	2300      	movne	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80022e6:	e025      	b.n	8002334 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022e8:	f7ff fa5c 	bl	80017a4 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d302      	bcc.n	80022fe <HAL_I2C_IsDeviceReady+0x13a>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d103      	bne.n	8002306 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	22a0      	movs	r2, #160	@ 0xa0
 8002302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b02      	cmp	r3, #2
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800232a:	bf0c      	ite	eq
 800232c:	2301      	moveq	r3, #1
 800232e:	2300      	movne	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2ba0      	cmp	r3, #160	@ 0xa0
 800233e:	d005      	beq.n	800234c <HAL_I2C_IsDeviceReady+0x188>
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d102      	bne.n	800234c <HAL_I2C_IsDeviceReady+0x188>
 8002346:	7dbb      	ldrb	r3, [r7, #22]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0cd      	beq.n	80022e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b02      	cmp	r3, #2
 8002360:	d129      	bne.n	80023b6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002370:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	2319      	movs	r3, #25
 800238e:	2201      	movs	r2, #1
 8002390:	4921      	ldr	r1, [pc, #132]	@ (8002418 <HAL_I2C_IsDeviceReady+0x254>)
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 f8c6 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e036      	b.n	8002410 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e02c      	b.n	8002410 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	2319      	movs	r3, #25
 80023d6:	2201      	movs	r2, #1
 80023d8:	490f      	ldr	r1, [pc, #60]	@ (8002418 <HAL_I2C_IsDeviceReady+0x254>)
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f8a2 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e012      	b.n	8002410 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	3301      	adds	r3, #1
 80023ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	f4ff af32 	bcc.w	800225e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800240e:	2302      	movs	r3, #2
  }
}
 8002410:	4618      	mov	r0, r3
 8002412:	3720      	adds	r7, #32
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	00100002 	.word	0x00100002
 800241c:	ffff0000 	.word	0xffff0000

08002420 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	460b      	mov	r3, r1
 800242e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002434:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2b08      	cmp	r3, #8
 800243a:	d006      	beq.n	800244a <I2C_MasterRequestWrite+0x2a>
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d003      	beq.n	800244a <I2C_MasterRequestWrite+0x2a>
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002448:	d108      	bne.n	800245c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	e00b      	b.n	8002474 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002460:	2b12      	cmp	r3, #18
 8002462:	d107      	bne.n	8002474 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002472:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 f84f 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00d      	beq.n	80024a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800249a:	d103      	bne.n	80024a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e035      	b.n	8002514 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024b0:	d108      	bne.n	80024c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024b2:	897b      	ldrh	r3, [r7, #10]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024c0:	611a      	str	r2, [r3, #16]
 80024c2:	e01b      	b.n	80024fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024c4:	897b      	ldrh	r3, [r7, #10]
 80024c6:	11db      	asrs	r3, r3, #7
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f003 0306 	and.w	r3, r3, #6
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f063 030f 	orn	r3, r3, #15
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	490e      	ldr	r1, [pc, #56]	@ (800251c <I2C_MasterRequestWrite+0xfc>)
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f898 	bl	8002618 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e010      	b.n	8002514 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024f2:	897b      	ldrh	r3, [r7, #10]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	4907      	ldr	r1, [pc, #28]	@ (8002520 <I2C_MasterRequestWrite+0x100>)
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 f888 	bl	8002618 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	00010008 	.word	0x00010008
 8002520:	00010002 	.word	0x00010002

08002524 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	4613      	mov	r3, r2
 8002532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002534:	e048      	b.n	80025c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d044      	beq.n	80025c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253e:	f7ff f931 	bl	80017a4 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d302      	bcc.n	8002554 <I2C_WaitOnFlagUntilTimeout+0x30>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d139      	bne.n	80025c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	0c1b      	lsrs	r3, r3, #16
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d10d      	bne.n	800257a <I2C_WaitOnFlagUntilTimeout+0x56>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	43da      	mvns	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	4013      	ands	r3, r2
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	e00c      	b.n	8002594 <I2C_WaitOnFlagUntilTimeout+0x70>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	43da      	mvns	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	4013      	ands	r3, r2
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	429a      	cmp	r2, r3
 8002598:	d116      	bne.n	80025c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b4:	f043 0220 	orr.w	r2, r3, #32
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e023      	b.n	8002610 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	0c1b      	lsrs	r3, r3, #16
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d10d      	bne.n	80025ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	43da      	mvns	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	4013      	ands	r3, r2
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bf0c      	ite	eq
 80025e4:	2301      	moveq	r3, #1
 80025e6:	2300      	movne	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	e00c      	b.n	8002608 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	43da      	mvns	r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	4013      	ands	r3, r2
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf0c      	ite	eq
 8002600:	2301      	moveq	r3, #1
 8002602:	2300      	movne	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	429a      	cmp	r2, r3
 800260c:	d093      	beq.n	8002536 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002626:	e071      	b.n	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002636:	d123      	bne.n	8002680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002646:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002650:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266c:	f043 0204 	orr.w	r2, r3, #4
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e067      	b.n	8002750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002686:	d041      	beq.n	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002688:	f7ff f88c 	bl	80017a4 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	429a      	cmp	r2, r3
 8002696:	d302      	bcc.n	800269e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d136      	bne.n	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	0c1b      	lsrs	r3, r3, #16
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d10c      	bne.n	80026c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	43da      	mvns	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	4013      	ands	r3, r2
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bf14      	ite	ne
 80026ba:	2301      	movne	r3, #1
 80026bc:	2300      	moveq	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	e00b      	b.n	80026da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	43da      	mvns	r2, r3
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	4013      	ands	r3, r2
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf14      	ite	ne
 80026d4:	2301      	movne	r3, #1
 80026d6:	2300      	moveq	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d016      	beq.n	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f8:	f043 0220 	orr.w	r2, r3, #32
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e021      	b.n	8002750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	0c1b      	lsrs	r3, r3, #16
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b01      	cmp	r3, #1
 8002714:	d10c      	bne.n	8002730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	43da      	mvns	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	4013      	ands	r3, r2
 8002722:	b29b      	uxth	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf14      	ite	ne
 8002728:	2301      	movne	r3, #1
 800272a:	2300      	moveq	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e00b      	b.n	8002748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	43da      	mvns	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	4013      	ands	r3, r2
 800273c:	b29b      	uxth	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	bf14      	ite	ne
 8002742:	2301      	movne	r3, #1
 8002744:	2300      	moveq	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	f47f af6d 	bne.w	8002628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002764:	e034      	b.n	80027d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f886 	bl	8002878 <I2C_IsAcknowledgeFailed>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e034      	b.n	80027e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277c:	d028      	beq.n	80027d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277e:	f7ff f811 	bl	80017a4 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	429a      	cmp	r2, r3
 800278c:	d302      	bcc.n	8002794 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d11d      	bne.n	80027d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800279e:	2b80      	cmp	r3, #128	@ 0x80
 80027a0:	d016      	beq.n	80027d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027bc:	f043 0220 	orr.w	r2, r3, #32
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e007      	b.n	80027e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027da:	2b80      	cmp	r3, #128	@ 0x80
 80027dc:	d1c3      	bne.n	8002766 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027f4:	e034      	b.n	8002860 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f83e 	bl	8002878 <I2C_IsAcknowledgeFailed>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e034      	b.n	8002870 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d028      	beq.n	8002860 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280e:	f7fe ffc9 	bl	80017a4 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	429a      	cmp	r2, r3
 800281c:	d302      	bcc.n	8002824 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d11d      	bne.n	8002860 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b04      	cmp	r3, #4
 8002830:	d016      	beq.n	8002860 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	f043 0220 	orr.w	r2, r3, #32
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e007      	b.n	8002870 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b04      	cmp	r3, #4
 800286c:	d1c3      	bne.n	80027f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800288a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800288e:	d11b      	bne.n	80028c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002898:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2220      	movs	r2, #32
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	f043 0204 	orr.w	r2, r3, #4
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0cc      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028ec:	4b68      	ldr	r3, [pc, #416]	@ (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d90c      	bls.n	8002914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b65      	ldr	r3, [pc, #404]	@ (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002902:	4b63      	ldr	r3, [pc, #396]	@ (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0b8      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d020      	beq.n	8002962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800292c:	4b59      	ldr	r3, [pc, #356]	@ (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4a58      	ldr	r2, [pc, #352]	@ (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002936:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002944:	4b53      	ldr	r3, [pc, #332]	@ (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a52      	ldr	r2, [pc, #328]	@ (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800294e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002950:	4b50      	ldr	r3, [pc, #320]	@ (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	494d      	ldr	r1, [pc, #308]	@ (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d044      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d107      	bne.n	8002986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	4b47      	ldr	r3, [pc, #284]	@ (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d119      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e07f      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d003      	beq.n	8002996 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002992:	2b03      	cmp	r3, #3
 8002994:	d107      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002996:	4b3f      	ldr	r3, [pc, #252]	@ (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e06f      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e067      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b6:	4b37      	ldr	r3, [pc, #220]	@ (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f023 0203 	bic.w	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4934      	ldr	r1, [pc, #208]	@ (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c8:	f7fe feec 	bl	80017a4 <HAL_GetTick>
 80029cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	e00a      	b.n	80029e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d0:	f7fe fee8 	bl	80017a4 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029de:	4293      	cmp	r3, r2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e04f      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 020c 	and.w	r2, r3, #12
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d1eb      	bne.n	80029d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f8:	4b25      	ldr	r3, [pc, #148]	@ (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d20c      	bcs.n	8002a20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b22      	ldr	r3, [pc, #136]	@ (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0e:	4b20      	ldr	r3, [pc, #128]	@ (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e032      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a2c:	4b19      	ldr	r3, [pc, #100]	@ (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4916      	ldr	r1, [pc, #88]	@ (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a4a:	4b12      	ldr	r3, [pc, #72]	@ (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	490e      	ldr	r1, [pc, #56]	@ (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a5e:	f000 f873 	bl	8002b48 <HAL_RCC_GetSysClockFreq>
 8002a62:	4602      	mov	r2, r0
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	490a      	ldr	r1, [pc, #40]	@ (8002a98 <HAL_RCC_ClockConfig+0x1c0>)
 8002a70:	5ccb      	ldrb	r3, [r1, r3]
 8002a72:	fa22 f303 	lsr.w	r3, r2, r3
 8002a76:	4a09      	ldr	r2, [pc, #36]	@ (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a7a:	4b09      	ldr	r3, [pc, #36]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe fd7c 	bl	800157c <HAL_InitTick>

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023c00 	.word	0x40023c00
 8002a94:	40023800 	.word	0x40023800
 8002a98:	08007ba0 	.word	0x08007ba0
 8002a9c:	2000001c 	.word	0x2000001c
 8002aa0:	20000020 	.word	0x20000020

08002aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	@ (8002ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	2000001c 	.word	0x2000001c

08002abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ac0:	f7ff fff0 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	4b05      	ldr	r3, [pc, #20]	@ (8002adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	0a9b      	lsrs	r3, r3, #10
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	4903      	ldr	r1, [pc, #12]	@ (8002ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ad2:	5ccb      	ldrb	r3, [r1, r3]
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	08007bb0 	.word	0x08007bb0

08002ae4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	220f      	movs	r2, #15
 8002af2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002af4:	4b12      	ldr	r3, [pc, #72]	@ (8002b40 <HAL_RCC_GetClockConfig+0x5c>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0203 	and.w	r2, r3, #3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b00:	4b0f      	ldr	r3, [pc, #60]	@ (8002b40 <HAL_RCC_GetClockConfig+0x5c>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <HAL_RCC_GetClockConfig+0x5c>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b18:	4b09      	ldr	r3, [pc, #36]	@ (8002b40 <HAL_RCC_GetClockConfig+0x5c>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	08db      	lsrs	r3, r3, #3
 8002b1e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b26:	4b07      	ldr	r3, [pc, #28]	@ (8002b44 <HAL_RCC_GetClockConfig+0x60>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 020f 	and.w	r2, r3, #15
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	601a      	str	r2, [r3, #0]
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40023c00 	.word	0x40023c00

08002b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b4c:	b0ae      	sub	sp, #184	@ 0xb8
 8002b4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b6e:	4bcb      	ldr	r3, [pc, #812]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b0c      	cmp	r3, #12
 8002b78:	f200 8206 	bhi.w	8002f88 <HAL_RCC_GetSysClockFreq+0x440>
 8002b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b84 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b82:	bf00      	nop
 8002b84:	08002bb9 	.word	0x08002bb9
 8002b88:	08002f89 	.word	0x08002f89
 8002b8c:	08002f89 	.word	0x08002f89
 8002b90:	08002f89 	.word	0x08002f89
 8002b94:	08002bc1 	.word	0x08002bc1
 8002b98:	08002f89 	.word	0x08002f89
 8002b9c:	08002f89 	.word	0x08002f89
 8002ba0:	08002f89 	.word	0x08002f89
 8002ba4:	08002bc9 	.word	0x08002bc9
 8002ba8:	08002f89 	.word	0x08002f89
 8002bac:	08002f89 	.word	0x08002f89
 8002bb0:	08002f89 	.word	0x08002f89
 8002bb4:	08002db9 	.word	0x08002db9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bb8:	4bb9      	ldr	r3, [pc, #740]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002bba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bbe:	e1e7      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bc0:	4bb8      	ldr	r3, [pc, #736]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bc6:	e1e3      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bc8:	4bb4      	ldr	r3, [pc, #720]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bd4:	4bb1      	ldr	r3, [pc, #708]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d071      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be0:	4bae      	ldr	r3, [pc, #696]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	099b      	lsrs	r3, r3, #6
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002bec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c06:	4622      	mov	r2, r4
 8002c08:	462b      	mov	r3, r5
 8002c0a:	f04f 0000 	mov.w	r0, #0
 8002c0e:	f04f 0100 	mov.w	r1, #0
 8002c12:	0159      	lsls	r1, r3, #5
 8002c14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c18:	0150      	lsls	r0, r2, #5
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4621      	mov	r1, r4
 8002c20:	1a51      	subs	r1, r2, r1
 8002c22:	6439      	str	r1, [r7, #64]	@ 0x40
 8002c24:	4629      	mov	r1, r5
 8002c26:	eb63 0301 	sbc.w	r3, r3, r1
 8002c2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002c38:	4649      	mov	r1, r9
 8002c3a:	018b      	lsls	r3, r1, #6
 8002c3c:	4641      	mov	r1, r8
 8002c3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c42:	4641      	mov	r1, r8
 8002c44:	018a      	lsls	r2, r1, #6
 8002c46:	4641      	mov	r1, r8
 8002c48:	1a51      	subs	r1, r2, r1
 8002c4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c4c:	4649      	mov	r1, r9
 8002c4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002c60:	4649      	mov	r1, r9
 8002c62:	00cb      	lsls	r3, r1, #3
 8002c64:	4641      	mov	r1, r8
 8002c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c6a:	4641      	mov	r1, r8
 8002c6c:	00ca      	lsls	r2, r1, #3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	4619      	mov	r1, r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	4622      	mov	r2, r4
 8002c76:	189b      	adds	r3, r3, r2
 8002c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c7a:	462b      	mov	r3, r5
 8002c7c:	460a      	mov	r2, r1
 8002c7e:	eb42 0303 	adc.w	r3, r2, r3
 8002c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c90:	4629      	mov	r1, r5
 8002c92:	024b      	lsls	r3, r1, #9
 8002c94:	4621      	mov	r1, r4
 8002c96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c9a:	4621      	mov	r1, r4
 8002c9c:	024a      	lsls	r2, r1, #9
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002cb0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002cb4:	f7fd fabe 	bl	8000234 <__aeabi_uldivmod>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cc2:	e067      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc4:	4b75      	ldr	r3, [pc, #468]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002cd0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002cd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cdc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cde:	2300      	movs	r3, #0
 8002ce0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ce2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002ce6:	4622      	mov	r2, r4
 8002ce8:	462b      	mov	r3, r5
 8002cea:	f04f 0000 	mov.w	r0, #0
 8002cee:	f04f 0100 	mov.w	r1, #0
 8002cf2:	0159      	lsls	r1, r3, #5
 8002cf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cf8:	0150      	lsls	r0, r2, #5
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4621      	mov	r1, r4
 8002d00:	1a51      	subs	r1, r2, r1
 8002d02:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002d04:	4629      	mov	r1, r5
 8002d06:	eb63 0301 	sbc.w	r3, r3, r1
 8002d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002d18:	4649      	mov	r1, r9
 8002d1a:	018b      	lsls	r3, r1, #6
 8002d1c:	4641      	mov	r1, r8
 8002d1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d22:	4641      	mov	r1, r8
 8002d24:	018a      	lsls	r2, r1, #6
 8002d26:	4641      	mov	r1, r8
 8002d28:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d2c:	4649      	mov	r1, r9
 8002d2e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d3e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d46:	4692      	mov	sl, r2
 8002d48:	469b      	mov	fp, r3
 8002d4a:	4623      	mov	r3, r4
 8002d4c:	eb1a 0303 	adds.w	r3, sl, r3
 8002d50:	623b      	str	r3, [r7, #32]
 8002d52:	462b      	mov	r3, r5
 8002d54:	eb4b 0303 	adc.w	r3, fp, r3
 8002d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d66:	4629      	mov	r1, r5
 8002d68:	028b      	lsls	r3, r1, #10
 8002d6a:	4621      	mov	r1, r4
 8002d6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d70:	4621      	mov	r1, r4
 8002d72:	028a      	lsls	r2, r1, #10
 8002d74:	4610      	mov	r0, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d80:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d82:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002d86:	f7fd fa55 	bl	8000234 <__aeabi_uldivmod>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4613      	mov	r3, r2
 8002d90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d94:	4b41      	ldr	r3, [pc, #260]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002da6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002daa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002db6:	e0eb      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db8:	4b38      	ldr	r3, [pc, #224]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dc4:	4b35      	ldr	r3, [pc, #212]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d06b      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd0:	4b32      	ldr	r3, [pc, #200]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	099b      	lsrs	r3, r3, #6
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ddc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002de2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002de4:	2300      	movs	r3, #0
 8002de6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002de8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002dec:	4622      	mov	r2, r4
 8002dee:	462b      	mov	r3, r5
 8002df0:	f04f 0000 	mov.w	r0, #0
 8002df4:	f04f 0100 	mov.w	r1, #0
 8002df8:	0159      	lsls	r1, r3, #5
 8002dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dfe:	0150      	lsls	r0, r2, #5
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4621      	mov	r1, r4
 8002e06:	1a51      	subs	r1, r2, r1
 8002e08:	61b9      	str	r1, [r7, #24]
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	eb63 0301 	sbc.w	r3, r3, r1
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002e1e:	4659      	mov	r1, fp
 8002e20:	018b      	lsls	r3, r1, #6
 8002e22:	4651      	mov	r1, sl
 8002e24:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e28:	4651      	mov	r1, sl
 8002e2a:	018a      	lsls	r2, r1, #6
 8002e2c:	4651      	mov	r1, sl
 8002e2e:	ebb2 0801 	subs.w	r8, r2, r1
 8002e32:	4659      	mov	r1, fp
 8002e34:	eb63 0901 	sbc.w	r9, r3, r1
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e4c:	4690      	mov	r8, r2
 8002e4e:	4699      	mov	r9, r3
 8002e50:	4623      	mov	r3, r4
 8002e52:	eb18 0303 	adds.w	r3, r8, r3
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	462b      	mov	r3, r5
 8002e5a:	eb49 0303 	adc.w	r3, r9, r3
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	024b      	lsls	r3, r1, #9
 8002e70:	4621      	mov	r1, r4
 8002e72:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e76:	4621      	mov	r1, r4
 8002e78:	024a      	lsls	r2, r1, #9
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e82:	2200      	movs	r2, #0
 8002e84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e86:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002e88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e8c:	f7fd f9d2 	bl	8000234 <__aeabi_uldivmod>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4613      	mov	r3, r2
 8002e96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e9a:	e065      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x420>
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	00f42400 	.word	0x00f42400
 8002ea4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea8:	4b3d      	ldr	r3, [pc, #244]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	099b      	lsrs	r3, r3, #6
 8002eae:	2200      	movs	r2, #0
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002eb8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002eba:	2300      	movs	r3, #0
 8002ebc:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ebe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002ec2:	4642      	mov	r2, r8
 8002ec4:	464b      	mov	r3, r9
 8002ec6:	f04f 0000 	mov.w	r0, #0
 8002eca:	f04f 0100 	mov.w	r1, #0
 8002ece:	0159      	lsls	r1, r3, #5
 8002ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ed4:	0150      	lsls	r0, r2, #5
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4641      	mov	r1, r8
 8002edc:	1a51      	subs	r1, r2, r1
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	4649      	mov	r1, r9
 8002ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ef4:	4659      	mov	r1, fp
 8002ef6:	018b      	lsls	r3, r1, #6
 8002ef8:	4651      	mov	r1, sl
 8002efa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002efe:	4651      	mov	r1, sl
 8002f00:	018a      	lsls	r2, r1, #6
 8002f02:	4651      	mov	r1, sl
 8002f04:	1a54      	subs	r4, r2, r1
 8002f06:	4659      	mov	r1, fp
 8002f08:	eb63 0501 	sbc.w	r5, r3, r1
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	00eb      	lsls	r3, r5, #3
 8002f16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f1a:	00e2      	lsls	r2, r4, #3
 8002f1c:	4614      	mov	r4, r2
 8002f1e:	461d      	mov	r5, r3
 8002f20:	4643      	mov	r3, r8
 8002f22:	18e3      	adds	r3, r4, r3
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	464b      	mov	r3, r9
 8002f28:	eb45 0303 	adc.w	r3, r5, r3
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	028b      	lsls	r3, r1, #10
 8002f3e:	4621      	mov	r1, r4
 8002f40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f44:	4621      	mov	r1, r4
 8002f46:	028a      	lsls	r2, r1, #10
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f50:	2200      	movs	r2, #0
 8002f52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f54:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002f56:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f5a:	f7fd f96b 	bl	8000234 <__aeabi_uldivmod>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4613      	mov	r3, r2
 8002f64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f68:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	0f1b      	lsrs	r3, r3, #28
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002f76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f86:	e003      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f88:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	37b8      	adds	r7, #184	@ 0xb8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	00f42400 	.word	0x00f42400

08002fa8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e28d      	b.n	80034d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 8083 	beq.w	80030ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002fc8:	4b94      	ldr	r3, [pc, #592]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d019      	beq.n	8003008 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002fd4:	4b91      	ldr	r3, [pc, #580]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 030c 	and.w	r3, r3, #12
        || \
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d106      	bne.n	8002fee <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002fe0:	4b8e      	ldr	r3, [pc, #568]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fe8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fec:	d00c      	beq.n	8003008 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fee:	4b8b      	ldr	r3, [pc, #556]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ff6:	2b0c      	cmp	r3, #12
 8002ff8:	d112      	bne.n	8003020 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ffa:	4b88      	ldr	r3, [pc, #544]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003002:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003006:	d10b      	bne.n	8003020 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003008:	4b84      	ldr	r3, [pc, #528]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d05b      	beq.n	80030cc <HAL_RCC_OscConfig+0x124>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d157      	bne.n	80030cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e25a      	b.n	80034d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003028:	d106      	bne.n	8003038 <HAL_RCC_OscConfig+0x90>
 800302a:	4b7c      	ldr	r3, [pc, #496]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a7b      	ldr	r2, [pc, #492]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 8003030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	e01d      	b.n	8003074 <HAL_RCC_OscConfig+0xcc>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003040:	d10c      	bne.n	800305c <HAL_RCC_OscConfig+0xb4>
 8003042:	4b76      	ldr	r3, [pc, #472]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a75      	ldr	r2, [pc, #468]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 8003048:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	4b73      	ldr	r3, [pc, #460]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a72      	ldr	r2, [pc, #456]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 8003054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	e00b      	b.n	8003074 <HAL_RCC_OscConfig+0xcc>
 800305c:	4b6f      	ldr	r3, [pc, #444]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a6e      	ldr	r2, [pc, #440]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 8003062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	4b6c      	ldr	r3, [pc, #432]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a6b      	ldr	r2, [pc, #428]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 800306e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d013      	beq.n	80030a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7fe fb92 	bl	80017a4 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003084:	f7fe fb8e 	bl	80017a4 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b64      	cmp	r3, #100	@ 0x64
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e21f      	b.n	80034d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003096:	4b61      	ldr	r3, [pc, #388]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0xdc>
 80030a2:	e014      	b.n	80030ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7fe fb7e 	bl	80017a4 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ac:	f7fe fb7a 	bl	80017a4 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	@ 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e20b      	b.n	80034d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030be:	4b57      	ldr	r3, [pc, #348]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x104>
 80030ca:	e000      	b.n	80030ce <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d06f      	beq.n	80031ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030da:	4b50      	ldr	r3, [pc, #320]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d017      	beq.n	8003116 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030e6:	4b4d      	ldr	r3, [pc, #308]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 030c 	and.w	r3, r3, #12
        || \
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d105      	bne.n	80030fe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030f2:	4b4a      	ldr	r3, [pc, #296]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030fe:	4b47      	ldr	r3, [pc, #284]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003106:	2b0c      	cmp	r3, #12
 8003108:	d11c      	bne.n	8003144 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310a:	4b44      	ldr	r3, [pc, #272]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d116      	bne.n	8003144 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003116:	4b41      	ldr	r3, [pc, #260]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <HAL_RCC_OscConfig+0x186>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d001      	beq.n	800312e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e1d3      	b.n	80034d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312e:	4b3b      	ldr	r3, [pc, #236]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4937      	ldr	r1, [pc, #220]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 800313e:	4313      	orrs	r3, r2
 8003140:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003142:	e03a      	b.n	80031ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d020      	beq.n	800318e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800314c:	4b34      	ldr	r3, [pc, #208]	@ (8003220 <HAL_RCC_OscConfig+0x278>)
 800314e:	2201      	movs	r2, #1
 8003150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003152:	f7fe fb27 	bl	80017a4 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315a:	f7fe fb23 	bl	80017a4 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e1b4      	b.n	80034d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316c:	4b2b      	ldr	r3, [pc, #172]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003178:	4b28      	ldr	r3, [pc, #160]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4925      	ldr	r1, [pc, #148]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 8003188:	4313      	orrs	r3, r2
 800318a:	600b      	str	r3, [r1, #0]
 800318c:	e015      	b.n	80031ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800318e:	4b24      	ldr	r3, [pc, #144]	@ (8003220 <HAL_RCC_OscConfig+0x278>)
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003194:	f7fe fb06 	bl	80017a4 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800319c:	f7fe fb02 	bl	80017a4 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e193      	b.n	80034d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ae:	4b1b      	ldr	r3, [pc, #108]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d036      	beq.n	8003234 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d016      	beq.n	80031fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ce:	4b15      	ldr	r3, [pc, #84]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d4:	f7fe fae6 	bl	80017a4 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031dc:	f7fe fae2 	bl	80017a4 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e173      	b.n	80034d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ee:	4b0b      	ldr	r3, [pc, #44]	@ (800321c <HAL_RCC_OscConfig+0x274>)
 80031f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x234>
 80031fa:	e01b      	b.n	8003234 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031fc:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <HAL_RCC_OscConfig+0x27c>)
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003202:	f7fe facf 	bl	80017a4 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003208:	e00e      	b.n	8003228 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800320a:	f7fe facb 	bl	80017a4 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d907      	bls.n	8003228 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e15c      	b.n	80034d6 <HAL_RCC_OscConfig+0x52e>
 800321c:	40023800 	.word	0x40023800
 8003220:	42470000 	.word	0x42470000
 8003224:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003228:	4b8a      	ldr	r3, [pc, #552]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 800322a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1ea      	bne.n	800320a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8097 	beq.w	8003370 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003242:	2300      	movs	r3, #0
 8003244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003246:	4b83      	ldr	r3, [pc, #524]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10f      	bne.n	8003272 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	4b7f      	ldr	r3, [pc, #508]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	4a7e      	ldr	r2, [pc, #504]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 800325c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003260:	6413      	str	r3, [r2, #64]	@ 0x40
 8003262:	4b7c      	ldr	r3, [pc, #496]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800326e:	2301      	movs	r3, #1
 8003270:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003272:	4b79      	ldr	r3, [pc, #484]	@ (8003458 <HAL_RCC_OscConfig+0x4b0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d118      	bne.n	80032b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800327e:	4b76      	ldr	r3, [pc, #472]	@ (8003458 <HAL_RCC_OscConfig+0x4b0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a75      	ldr	r2, [pc, #468]	@ (8003458 <HAL_RCC_OscConfig+0x4b0>)
 8003284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800328a:	f7fe fa8b 	bl	80017a4 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003292:	f7fe fa87 	bl	80017a4 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e118      	b.n	80034d6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a4:	4b6c      	ldr	r3, [pc, #432]	@ (8003458 <HAL_RCC_OscConfig+0x4b0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d106      	bne.n	80032c6 <HAL_RCC_OscConfig+0x31e>
 80032b8:	4b66      	ldr	r3, [pc, #408]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 80032ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032bc:	4a65      	ldr	r2, [pc, #404]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80032c4:	e01c      	b.n	8003300 <HAL_RCC_OscConfig+0x358>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b05      	cmp	r3, #5
 80032cc:	d10c      	bne.n	80032e8 <HAL_RCC_OscConfig+0x340>
 80032ce:	4b61      	ldr	r3, [pc, #388]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 80032d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d2:	4a60      	ldr	r2, [pc, #384]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 80032d4:	f043 0304 	orr.w	r3, r3, #4
 80032d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032da:	4b5e      	ldr	r3, [pc, #376]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 80032dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032de:	4a5d      	ldr	r2, [pc, #372]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80032e6:	e00b      	b.n	8003300 <HAL_RCC_OscConfig+0x358>
 80032e8:	4b5a      	ldr	r3, [pc, #360]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ec:	4a59      	ldr	r2, [pc, #356]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 80032ee:	f023 0301 	bic.w	r3, r3, #1
 80032f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f4:	4b57      	ldr	r3, [pc, #348]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f8:	4a56      	ldr	r2, [pc, #344]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 80032fa:	f023 0304 	bic.w	r3, r3, #4
 80032fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d015      	beq.n	8003334 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003308:	f7fe fa4c 	bl	80017a4 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330e:	e00a      	b.n	8003326 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003310:	f7fe fa48 	bl	80017a4 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e0d7      	b.n	80034d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003326:	4b4b      	ldr	r3, [pc, #300]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 8003328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0ee      	beq.n	8003310 <HAL_RCC_OscConfig+0x368>
 8003332:	e014      	b.n	800335e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7fe fa36 	bl	80017a4 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333a:	e00a      	b.n	8003352 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333c:	f7fe fa32 	bl	80017a4 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e0c1      	b.n	80034d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003352:	4b40      	ldr	r3, [pc, #256]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1ee      	bne.n	800333c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800335e:	7dfb      	ldrb	r3, [r7, #23]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d105      	bne.n	8003370 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003364:	4b3b      	ldr	r3, [pc, #236]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 8003366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003368:	4a3a      	ldr	r2, [pc, #232]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 800336a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800336e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80ad 	beq.w	80034d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800337a:	4b36      	ldr	r3, [pc, #216]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	2b08      	cmp	r3, #8
 8003384:	d060      	beq.n	8003448 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d145      	bne.n	800341a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338e:	4b33      	ldr	r3, [pc, #204]	@ (800345c <HAL_RCC_OscConfig+0x4b4>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fe fa06 	bl	80017a4 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800339c:	f7fe fa02 	bl	80017a4 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e093      	b.n	80034d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ae:	4b29      	ldr	r3, [pc, #164]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69da      	ldr	r2, [r3, #28]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	019b      	lsls	r3, r3, #6
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d0:	085b      	lsrs	r3, r3, #1
 80033d2:	3b01      	subs	r3, #1
 80033d4:	041b      	lsls	r3, r3, #16
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033dc:	061b      	lsls	r3, r3, #24
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e4:	071b      	lsls	r3, r3, #28
 80033e6:	491b      	ldr	r1, [pc, #108]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ec:	4b1b      	ldr	r3, [pc, #108]	@ (800345c <HAL_RCC_OscConfig+0x4b4>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f2:	f7fe f9d7 	bl	80017a4 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fa:	f7fe f9d3 	bl	80017a4 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e064      	b.n	80034d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340c:	4b11      	ldr	r3, [pc, #68]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f0      	beq.n	80033fa <HAL_RCC_OscConfig+0x452>
 8003418:	e05c      	b.n	80034d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341a:	4b10      	ldr	r3, [pc, #64]	@ (800345c <HAL_RCC_OscConfig+0x4b4>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fe f9c0 	bl	80017a4 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003428:	f7fe f9bc 	bl	80017a4 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e04d      	b.n	80034d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343a:	4b06      	ldr	r3, [pc, #24]	@ (8003454 <HAL_RCC_OscConfig+0x4ac>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x480>
 8003446:	e045      	b.n	80034d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d107      	bne.n	8003460 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e040      	b.n	80034d6 <HAL_RCC_OscConfig+0x52e>
 8003454:	40023800 	.word	0x40023800
 8003458:	40007000 	.word	0x40007000
 800345c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003460:	4b1f      	ldr	r3, [pc, #124]	@ (80034e0 <HAL_RCC_OscConfig+0x538>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d030      	beq.n	80034d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003478:	429a      	cmp	r2, r3
 800347a:	d129      	bne.n	80034d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003486:	429a      	cmp	r2, r3
 8003488:	d122      	bne.n	80034d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003490:	4013      	ands	r3, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003496:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003498:	4293      	cmp	r3, r2
 800349a:	d119      	bne.n	80034d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a6:	085b      	lsrs	r3, r3, #1
 80034a8:	3b01      	subs	r3, #1
 80034aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d10f      	bne.n	80034d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d107      	bne.n	80034d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800

080034e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e041      	b.n	800357a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f839 	bl	8003582 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3304      	adds	r3, #4
 8003520:	4619      	mov	r1, r3
 8003522:	4610      	mov	r0, r2
 8003524:	f000 f9c0 	bl	80038a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d001      	beq.n	80035b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e04e      	b.n	800364e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a23      	ldr	r2, [pc, #140]	@ (800365c <HAL_TIM_Base_Start_IT+0xc4>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d022      	beq.n	8003618 <HAL_TIM_Base_Start_IT+0x80>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035da:	d01d      	beq.n	8003618 <HAL_TIM_Base_Start_IT+0x80>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003660 <HAL_TIM_Base_Start_IT+0xc8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d018      	beq.n	8003618 <HAL_TIM_Base_Start_IT+0x80>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003664 <HAL_TIM_Base_Start_IT+0xcc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d013      	beq.n	8003618 <HAL_TIM_Base_Start_IT+0x80>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003668 <HAL_TIM_Base_Start_IT+0xd0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00e      	beq.n	8003618 <HAL_TIM_Base_Start_IT+0x80>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a1b      	ldr	r2, [pc, #108]	@ (800366c <HAL_TIM_Base_Start_IT+0xd4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d009      	beq.n	8003618 <HAL_TIM_Base_Start_IT+0x80>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a19      	ldr	r2, [pc, #100]	@ (8003670 <HAL_TIM_Base_Start_IT+0xd8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d004      	beq.n	8003618 <HAL_TIM_Base_Start_IT+0x80>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a18      	ldr	r2, [pc, #96]	@ (8003674 <HAL_TIM_Base_Start_IT+0xdc>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d111      	bne.n	800363c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b06      	cmp	r3, #6
 8003628:	d010      	beq.n	800364c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 0201 	orr.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363a:	e007      	b.n	800364c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40010000 	.word	0x40010000
 8003660:	40000400 	.word	0x40000400
 8003664:	40000800 	.word	0x40000800
 8003668:	40000c00 	.word	0x40000c00
 800366c:	40010400 	.word	0x40010400
 8003670:	40014000 	.word	0x40014000
 8003674:	40001800 	.word	0x40001800

08003678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d020      	beq.n	80036dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01b      	beq.n	80036dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0202 	mvn.w	r2, #2
 80036ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f8d2 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 80036c8:	e005      	b.n	80036d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f8c4 	bl	8003858 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f8d5 	bl	8003880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d020      	beq.n	8003728 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01b      	beq.n	8003728 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f06f 0204 	mvn.w	r2, #4
 80036f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2202      	movs	r2, #2
 80036fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f8ac 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 8003714:	e005      	b.n	8003722 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f89e 	bl	8003858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f8af 	bl	8003880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d020      	beq.n	8003774 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d01b      	beq.n	8003774 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0208 	mvn.w	r2, #8
 8003744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2204      	movs	r2, #4
 800374a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f886 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 8003760:	e005      	b.n	800376e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f878 	bl	8003858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f889 	bl	8003880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f003 0310 	and.w	r3, r3, #16
 800377a:	2b00      	cmp	r3, #0
 800377c:	d020      	beq.n	80037c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f003 0310 	and.w	r3, r3, #16
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01b      	beq.n	80037c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f06f 0210 	mvn.w	r2, #16
 8003790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2208      	movs	r2, #8
 8003796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f860 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 80037ac:	e005      	b.n	80037ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f852 	bl	8003858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f863 	bl	8003880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00c      	beq.n	80037e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d007      	beq.n	80037e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0201 	mvn.w	r2, #1
 80037dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7fd fb82 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00c      	beq.n	8003808 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d007      	beq.n	8003808 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f906 	bl	8003a14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00c      	beq.n	800382c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f834 	bl	8003894 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00c      	beq.n	8003850 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d007      	beq.n	8003850 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0220 	mvn.w	r2, #32
 8003848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f8d8 	bl	8003a00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a46      	ldr	r2, [pc, #280]	@ (80039d4 <TIM_Base_SetConfig+0x12c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d013      	beq.n	80038e8 <TIM_Base_SetConfig+0x40>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c6:	d00f      	beq.n	80038e8 <TIM_Base_SetConfig+0x40>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a43      	ldr	r2, [pc, #268]	@ (80039d8 <TIM_Base_SetConfig+0x130>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00b      	beq.n	80038e8 <TIM_Base_SetConfig+0x40>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a42      	ldr	r2, [pc, #264]	@ (80039dc <TIM_Base_SetConfig+0x134>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d007      	beq.n	80038e8 <TIM_Base_SetConfig+0x40>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a41      	ldr	r2, [pc, #260]	@ (80039e0 <TIM_Base_SetConfig+0x138>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d003      	beq.n	80038e8 <TIM_Base_SetConfig+0x40>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a40      	ldr	r2, [pc, #256]	@ (80039e4 <TIM_Base_SetConfig+0x13c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d108      	bne.n	80038fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a35      	ldr	r2, [pc, #212]	@ (80039d4 <TIM_Base_SetConfig+0x12c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d02b      	beq.n	800395a <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003908:	d027      	beq.n	800395a <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a32      	ldr	r2, [pc, #200]	@ (80039d8 <TIM_Base_SetConfig+0x130>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d023      	beq.n	800395a <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a31      	ldr	r2, [pc, #196]	@ (80039dc <TIM_Base_SetConfig+0x134>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d01f      	beq.n	800395a <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a30      	ldr	r2, [pc, #192]	@ (80039e0 <TIM_Base_SetConfig+0x138>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d01b      	beq.n	800395a <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a2f      	ldr	r2, [pc, #188]	@ (80039e4 <TIM_Base_SetConfig+0x13c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d017      	beq.n	800395a <TIM_Base_SetConfig+0xb2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a2e      	ldr	r2, [pc, #184]	@ (80039e8 <TIM_Base_SetConfig+0x140>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d013      	beq.n	800395a <TIM_Base_SetConfig+0xb2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a2d      	ldr	r2, [pc, #180]	@ (80039ec <TIM_Base_SetConfig+0x144>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00f      	beq.n	800395a <TIM_Base_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a2c      	ldr	r2, [pc, #176]	@ (80039f0 <TIM_Base_SetConfig+0x148>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00b      	beq.n	800395a <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a2b      	ldr	r2, [pc, #172]	@ (80039f4 <TIM_Base_SetConfig+0x14c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d007      	beq.n	800395a <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2a      	ldr	r2, [pc, #168]	@ (80039f8 <TIM_Base_SetConfig+0x150>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d003      	beq.n	800395a <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a29      	ldr	r2, [pc, #164]	@ (80039fc <TIM_Base_SetConfig+0x154>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d108      	bne.n	800396c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4313      	orrs	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a10      	ldr	r2, [pc, #64]	@ (80039d4 <TIM_Base_SetConfig+0x12c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d003      	beq.n	80039a0 <TIM_Base_SetConfig+0xf8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a12      	ldr	r2, [pc, #72]	@ (80039e4 <TIM_Base_SetConfig+0x13c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d103      	bne.n	80039a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d105      	bne.n	80039c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f023 0201 	bic.w	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	611a      	str	r2, [r3, #16]
  }
}
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40010000 	.word	0x40010000
 80039d8:	40000400 	.word	0x40000400
 80039dc:	40000800 	.word	0x40000800
 80039e0:	40000c00 	.word	0x40000c00
 80039e4:	40010400 	.word	0x40010400
 80039e8:	40014000 	.word	0x40014000
 80039ec:	40014400 	.word	0x40014400
 80039f0:	40014800 	.word	0x40014800
 80039f4:	40001800 	.word	0x40001800
 80039f8:	40001c00 	.word	0x40001c00
 80039fc:	40002000 	.word	0x40002000

08003a00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <__NVIC_SetPriority>:
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	6039      	str	r1, [r7, #0]
 8003a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	db0a      	blt.n	8003a52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	490c      	ldr	r1, [pc, #48]	@ (8003a74 <__NVIC_SetPriority+0x4c>)
 8003a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a46:	0112      	lsls	r2, r2, #4
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003a50:	e00a      	b.n	8003a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	4908      	ldr	r1, [pc, #32]	@ (8003a78 <__NVIC_SetPriority+0x50>)
 8003a58:	79fb      	ldrb	r3, [r7, #7]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	3b04      	subs	r3, #4
 8003a60:	0112      	lsls	r2, r2, #4
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	440b      	add	r3, r1
 8003a66:	761a      	strb	r2, [r3, #24]
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	e000e100 	.word	0xe000e100
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003a80:	4b05      	ldr	r3, [pc, #20]	@ (8003a98 <SysTick_Handler+0x1c>)
 8003a82:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003a84:	f001 fedc 	bl	8005840 <xTaskGetSchedulerState>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d001      	beq.n	8003a92 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003a8e:	f002 fdd3 	bl	8006638 <xPortSysTickHandler>
  }
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	e000e010 	.word	0xe000e010

08003a9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	f06f 0004 	mvn.w	r0, #4
 8003aa6:	f7ff ffbf 	bl	8003a28 <__NVIC_SetPriority>
#endif
}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ab6:	f3ef 8305 	mrs	r3, IPSR
 8003aba:	603b      	str	r3, [r7, #0]
  return(result);
 8003abc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003ac2:	f06f 0305 	mvn.w	r3, #5
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	e00c      	b.n	8003ae4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003aca:	4b0a      	ldr	r3, [pc, #40]	@ (8003af4 <osKernelInitialize+0x44>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d105      	bne.n	8003ade <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003ad2:	4b08      	ldr	r3, [pc, #32]	@ (8003af4 <osKernelInitialize+0x44>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	607b      	str	r3, [r7, #4]
 8003adc:	e002      	b.n	8003ae4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003ade:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ae4:	687b      	ldr	r3, [r7, #4]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	20000570 	.word	0x20000570

08003af8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003afe:	f3ef 8305 	mrs	r3, IPSR
 8003b02:	603b      	str	r3, [r7, #0]
  return(result);
 8003b04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003b0a:	f06f 0305 	mvn.w	r3, #5
 8003b0e:	607b      	str	r3, [r7, #4]
 8003b10:	e010      	b.n	8003b34 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003b12:	4b0b      	ldr	r3, [pc, #44]	@ (8003b40 <osKernelStart+0x48>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d109      	bne.n	8003b2e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003b1a:	f7ff ffbf 	bl	8003a9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003b1e:	4b08      	ldr	r3, [pc, #32]	@ (8003b40 <osKernelStart+0x48>)
 8003b20:	2202      	movs	r2, #2
 8003b22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003b24:	f001 fa28 	bl	8004f78 <vTaskStartScheduler>
      stat = osOK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	607b      	str	r3, [r7, #4]
 8003b2c:	e002      	b.n	8003b34 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b34:	687b      	ldr	r3, [r7, #4]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000570 	.word	0x20000570

08003b44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08e      	sub	sp, #56	@ 0x38
 8003b48:	af04      	add	r7, sp, #16
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b54:	f3ef 8305 	mrs	r3, IPSR
 8003b58:	617b      	str	r3, [r7, #20]
  return(result);
 8003b5a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d17e      	bne.n	8003c5e <osThreadNew+0x11a>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d07b      	beq.n	8003c5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003b66:	2380      	movs	r3, #128	@ 0x80
 8003b68:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003b6a:	2318      	movs	r3, #24
 8003b6c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003b72:	f04f 33ff 	mov.w	r3, #4294967295
 8003b76:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d045      	beq.n	8003c0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <osThreadNew+0x48>
        name = attr->name;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <osThreadNew+0x6e>
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	2b38      	cmp	r3, #56	@ 0x38
 8003ba4:	d805      	bhi.n	8003bb2 <osThreadNew+0x6e>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <osThreadNew+0x72>
        return (NULL);
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e054      	b.n	8003c60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	089b      	lsrs	r3, r3, #2
 8003bc4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00e      	beq.n	8003bec <osThreadNew+0xa8>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2ba7      	cmp	r3, #167	@ 0xa7
 8003bd4:	d90a      	bls.n	8003bec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d006      	beq.n	8003bec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <osThreadNew+0xa8>
        mem = 1;
 8003be6:	2301      	movs	r3, #1
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	e010      	b.n	8003c0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10c      	bne.n	8003c0e <osThreadNew+0xca>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d108      	bne.n	8003c0e <osThreadNew+0xca>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d104      	bne.n	8003c0e <osThreadNew+0xca>
          mem = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	e001      	b.n	8003c0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d110      	bne.n	8003c36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c1c:	9202      	str	r2, [sp, #8]
 8003c1e:	9301      	str	r3, [sp, #4]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	6a3a      	ldr	r2, [r7, #32]
 8003c28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 ffb0 	bl	8004b90 <xTaskCreateStatic>
 8003c30:	4603      	mov	r3, r0
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	e013      	b.n	8003c5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d110      	bne.n	8003c5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	f107 0310 	add.w	r3, r7, #16
 8003c44:	9301      	str	r3, [sp, #4]
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 fffe 	bl	8004c50 <xTaskCreate>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d001      	beq.n	8003c5e <osThreadNew+0x11a>
            hTask = NULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c5e:	693b      	ldr	r3, [r7, #16]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3728      	adds	r7, #40	@ 0x28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c70:	f3ef 8305 	mrs	r3, IPSR
 8003c74:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <osDelay+0x1c>
    stat = osErrorISR;
 8003c7c:	f06f 0305 	mvn.w	r3, #5
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	e007      	b.n	8003c94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f001 f93c 	bl	8004f0c <vTaskDelay>
    }
  }

  return (stat);
 8003c94:	68fb      	ldr	r3, [r7, #12]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4a07      	ldr	r2, [pc, #28]	@ (8003ccc <vApplicationGetIdleTaskMemory+0x2c>)
 8003cb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	4a06      	ldr	r2, [pc, #24]	@ (8003cd0 <vApplicationGetIdleTaskMemory+0x30>)
 8003cb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2280      	movs	r2, #128	@ 0x80
 8003cbc:	601a      	str	r2, [r3, #0]
}
 8003cbe:	bf00      	nop
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	20000574 	.word	0x20000574
 8003cd0:	2000061c 	.word	0x2000061c

08003cd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4a07      	ldr	r2, [pc, #28]	@ (8003d00 <vApplicationGetTimerTaskMemory+0x2c>)
 8003ce4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	4a06      	ldr	r2, [pc, #24]	@ (8003d04 <vApplicationGetTimerTaskMemory+0x30>)
 8003cea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cf2:	601a      	str	r2, [r3, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	2000081c 	.word	0x2000081c
 8003d04:	200008c4 	.word	0x200008c4

08003d08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f103 0208 	add.w	r2, r3, #8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f103 0208 	add.w	r2, r3, #8
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f103 0208 	add.w	r2, r3, #8
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d62:	b480      	push	{r7}
 8003d64:	b085      	sub	sp, #20
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	601a      	str	r2, [r3, #0]
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003daa:	b480      	push	{r7}
 8003dac:	b085      	sub	sp, #20
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc0:	d103      	bne.n	8003dca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	e00c      	b.n	8003de4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3308      	adds	r3, #8
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	e002      	b.n	8003dd8 <vListInsert+0x2e>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d2f6      	bcs.n	8003dd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	601a      	str	r2, [r3, #0]
}
 8003e10:	bf00      	nop
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6892      	ldr	r2, [r2, #8]
 8003e32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6852      	ldr	r2, [r2, #4]
 8003e3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d103      	bne.n	8003e50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	1e5a      	subs	r2, r3, #1
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10b      	bne.n	8003e9c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e96:	bf00      	nop
 8003e98:	bf00      	nop
 8003e9a:	e7fd      	b.n	8003e98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003e9c:	f002 fb3c 	bl	8006518 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea8:	68f9      	ldr	r1, [r7, #12]
 8003eaa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	441a      	add	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	68f9      	ldr	r1, [r7, #12]
 8003ed0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ed2:	fb01 f303 	mul.w	r3, r1, r3
 8003ed6:	441a      	add	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	22ff      	movs	r2, #255	@ 0xff
 8003ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	22ff      	movs	r2, #255	@ 0xff
 8003ee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d114      	bne.n	8003f1c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d01a      	beq.n	8003f30 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3310      	adds	r3, #16
 8003efe:	4618      	mov	r0, r3
 8003f00:	f001 fad8 	bl	80054b4 <xTaskRemoveFromEventList>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d012      	beq.n	8003f30 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f40 <xQueueGenericReset+0xd0>)
 8003f0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	e009      	b.n	8003f30 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3310      	adds	r3, #16
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff fef1 	bl	8003d08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3324      	adds	r3, #36	@ 0x24
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff feec 	bl	8003d08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f30:	f002 fb24 	bl	800657c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f34:	2301      	movs	r3, #1
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	e000ed04 	.word	0xe000ed04

08003f44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08e      	sub	sp, #56	@ 0x38
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
 8003f50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10b      	bne.n	8003f70 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f6a:	bf00      	nop
 8003f6c:	bf00      	nop
 8003f6e:	e7fd      	b.n	8003f6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10b      	bne.n	8003f8e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f88:	bf00      	nop
 8003f8a:	bf00      	nop
 8003f8c:	e7fd      	b.n	8003f8a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <xQueueGenericCreateStatic+0x56>
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <xQueueGenericCreateStatic+0x5a>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <xQueueGenericCreateStatic+0x5c>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10b      	bne.n	8003fbc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	623b      	str	r3, [r7, #32]
}
 8003fb6:	bf00      	nop
 8003fb8:	bf00      	nop
 8003fba:	e7fd      	b.n	8003fb8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d102      	bne.n	8003fc8 <xQueueGenericCreateStatic+0x84>
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <xQueueGenericCreateStatic+0x88>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <xQueueGenericCreateStatic+0x8a>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10b      	bne.n	8003fea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	61fb      	str	r3, [r7, #28]
}
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop
 8003fe8:	e7fd      	b.n	8003fe6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003fea:	2350      	movs	r3, #80	@ 0x50
 8003fec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2b50      	cmp	r3, #80	@ 0x50
 8003ff2:	d00b      	beq.n	800400c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	61bb      	str	r3, [r7, #24]
}
 8004006:	bf00      	nop
 8004008:	bf00      	nop
 800400a:	e7fd      	b.n	8004008 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800400c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00d      	beq.n	8004034 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004020:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	68b9      	ldr	r1, [r7, #8]
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f840 	bl	80040b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004036:	4618      	mov	r0, r3
 8004038:	3730      	adds	r7, #48	@ 0x30
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800403e:	b580      	push	{r7, lr}
 8004040:	b08a      	sub	sp, #40	@ 0x28
 8004042:	af02      	add	r7, sp, #8
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	4613      	mov	r3, r2
 800404a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10b      	bne.n	800406a <xQueueGenericCreate+0x2c>
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	613b      	str	r3, [r7, #16]
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	e7fd      	b.n	8004066 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	fb02 f303 	mul.w	r3, r2, r3
 8004072:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	3350      	adds	r3, #80	@ 0x50
 8004078:	4618      	mov	r0, r3
 800407a:	f002 fb6f 	bl	800675c <pvPortMalloc>
 800407e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d011      	beq.n	80040aa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	3350      	adds	r3, #80	@ 0x50
 800408e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004098:	79fa      	ldrb	r2, [r7, #7]
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	4613      	mov	r3, r2
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f805 	bl	80040b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040aa:	69bb      	ldr	r3, [r7, #24]
	}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3720      	adds	r7, #32
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d103      	bne.n	80040d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	e002      	b.n	80040d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040e2:	2101      	movs	r1, #1
 80040e4:	69b8      	ldr	r0, [r7, #24]
 80040e6:	f7ff fec3 	bl	8003e70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	78fa      	ldrb	r2, [r7, #3]
 80040ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80040f2:	bf00      	nop
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b082      	sub	sp, #8
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00e      	beq.n	8004126 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800411a:	2300      	movs	r3, #0
 800411c:	2200      	movs	r2, #0
 800411e:	2100      	movs	r1, #0
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f81d 	bl	8004160 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800412e:	b580      	push	{r7, lr}
 8004130:	b086      	sub	sp, #24
 8004132:	af00      	add	r7, sp, #0
 8004134:	4603      	mov	r3, r0
 8004136:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004138:	2301      	movs	r3, #1
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	2300      	movs	r3, #0
 800413e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	461a      	mov	r2, r3
 8004144:	6939      	ldr	r1, [r7, #16]
 8004146:	6978      	ldr	r0, [r7, #20]
 8004148:	f7ff ff79 	bl	800403e <xQueueGenericCreate>
 800414c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f7ff ffd3 	bl	80040fa <prvInitialiseMutex>

		return xNewQueue;
 8004154:	68fb      	ldr	r3, [r7, #12]
	}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08e      	sub	sp, #56	@ 0x38
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800416e:	2300      	movs	r3, #0
 8004170:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10b      	bne.n	8004194 <xQueueGenericSend+0x34>
	__asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800418e:	bf00      	nop
 8004190:	bf00      	nop
 8004192:	e7fd      	b.n	8004190 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d103      	bne.n	80041a2 <xQueueGenericSend+0x42>
 800419a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <xQueueGenericSend+0x46>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e000      	b.n	80041a8 <xQueueGenericSend+0x48>
 80041a6:	2300      	movs	r3, #0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10b      	bne.n	80041c4 <xQueueGenericSend+0x64>
	__asm volatile
 80041ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80041be:	bf00      	nop
 80041c0:	bf00      	nop
 80041c2:	e7fd      	b.n	80041c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d103      	bne.n	80041d2 <xQueueGenericSend+0x72>
 80041ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <xQueueGenericSend+0x76>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <xQueueGenericSend+0x78>
 80041d6:	2300      	movs	r3, #0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10b      	bne.n	80041f4 <xQueueGenericSend+0x94>
	__asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	623b      	str	r3, [r7, #32]
}
 80041ee:	bf00      	nop
 80041f0:	bf00      	nop
 80041f2:	e7fd      	b.n	80041f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041f4:	f001 fb24 	bl	8005840 <xTaskGetSchedulerState>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d102      	bne.n	8004204 <xQueueGenericSend+0xa4>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <xQueueGenericSend+0xa8>
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <xQueueGenericSend+0xaa>
 8004208:	2300      	movs	r3, #0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10b      	bne.n	8004226 <xQueueGenericSend+0xc6>
	__asm volatile
 800420e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	61fb      	str	r3, [r7, #28]
}
 8004220:	bf00      	nop
 8004222:	bf00      	nop
 8004224:	e7fd      	b.n	8004222 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004226:	f002 f977 	bl	8006518 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800422a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800422e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004232:	429a      	cmp	r2, r3
 8004234:	d302      	bcc.n	800423c <xQueueGenericSend+0xdc>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b02      	cmp	r3, #2
 800423a:	d129      	bne.n	8004290 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	68b9      	ldr	r1, [r7, #8]
 8004240:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004242:	f000 fb37 	bl	80048b4 <prvCopyDataToQueue>
 8004246:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	2b00      	cmp	r3, #0
 800424e:	d010      	beq.n	8004272 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004252:	3324      	adds	r3, #36	@ 0x24
 8004254:	4618      	mov	r0, r3
 8004256:	f001 f92d 	bl	80054b4 <xTaskRemoveFromEventList>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d013      	beq.n	8004288 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004260:	4b3f      	ldr	r3, [pc, #252]	@ (8004360 <xQueueGenericSend+0x200>)
 8004262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	e00a      	b.n	8004288 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004274:	2b00      	cmp	r3, #0
 8004276:	d007      	beq.n	8004288 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004278:	4b39      	ldr	r3, [pc, #228]	@ (8004360 <xQueueGenericSend+0x200>)
 800427a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004288:	f002 f978 	bl	800657c <vPortExitCritical>
				return pdPASS;
 800428c:	2301      	movs	r3, #1
 800428e:	e063      	b.n	8004358 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d103      	bne.n	800429e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004296:	f002 f971 	bl	800657c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800429a:	2300      	movs	r3, #0
 800429c:	e05c      	b.n	8004358 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800429e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d106      	bne.n	80042b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042a4:	f107 0314 	add.w	r3, r7, #20
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 f967 	bl	800557c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042ae:	2301      	movs	r3, #1
 80042b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042b2:	f002 f963 	bl	800657c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042b6:	f000 fecf 	bl	8005058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042ba:	f002 f92d 	bl	8006518 <vPortEnterCritical>
 80042be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042c4:	b25b      	sxtb	r3, r3
 80042c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ca:	d103      	bne.n	80042d4 <xQueueGenericSend+0x174>
 80042cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042da:	b25b      	sxtb	r3, r3
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e0:	d103      	bne.n	80042ea <xQueueGenericSend+0x18a>
 80042e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042ea:	f002 f947 	bl	800657c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042ee:	1d3a      	adds	r2, r7, #4
 80042f0:	f107 0314 	add.w	r3, r7, #20
 80042f4:	4611      	mov	r1, r2
 80042f6:	4618      	mov	r0, r3
 80042f8:	f001 f956 	bl	80055a8 <xTaskCheckForTimeOut>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d124      	bne.n	800434c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004302:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004304:	f000 fbce 	bl	8004aa4 <prvIsQueueFull>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d018      	beq.n	8004340 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800430e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004310:	3310      	adds	r3, #16
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	4611      	mov	r1, r2
 8004316:	4618      	mov	r0, r3
 8004318:	f001 f87a 	bl	8005410 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800431c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800431e:	f000 fb59 	bl	80049d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004322:	f000 fea7 	bl	8005074 <xTaskResumeAll>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	f47f af7c 	bne.w	8004226 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800432e:	4b0c      	ldr	r3, [pc, #48]	@ (8004360 <xQueueGenericSend+0x200>)
 8004330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	e772      	b.n	8004226 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004340:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004342:	f000 fb47 	bl	80049d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004346:	f000 fe95 	bl	8005074 <xTaskResumeAll>
 800434a:	e76c      	b.n	8004226 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800434c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800434e:	f000 fb41 	bl	80049d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004352:	f000 fe8f 	bl	8005074 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004356:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004358:	4618      	mov	r0, r3
 800435a:	3738      	adds	r7, #56	@ 0x38
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	e000ed04 	.word	0xe000ed04

08004364 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b090      	sub	sp, #64	@ 0x40
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10b      	bne.n	8004394 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800438e:	bf00      	nop
 8004390:	bf00      	nop
 8004392:	e7fd      	b.n	8004390 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d103      	bne.n	80043a2 <xQueueGenericSendFromISR+0x3e>
 800439a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800439c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <xQueueGenericSendFromISR+0x42>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <xQueueGenericSendFromISR+0x44>
 80043a6:	2300      	movs	r3, #0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10b      	bne.n	80043c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80043ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b0:	f383 8811 	msr	BASEPRI, r3
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80043be:	bf00      	nop
 80043c0:	bf00      	nop
 80043c2:	e7fd      	b.n	80043c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d103      	bne.n	80043d2 <xQueueGenericSendFromISR+0x6e>
 80043ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <xQueueGenericSendFromISR+0x72>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e000      	b.n	80043d8 <xQueueGenericSendFromISR+0x74>
 80043d6:	2300      	movs	r3, #0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10b      	bne.n	80043f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	623b      	str	r3, [r7, #32]
}
 80043ee:	bf00      	nop
 80043f0:	bf00      	nop
 80043f2:	e7fd      	b.n	80043f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043f4:	f002 f970 	bl	80066d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043f8:	f3ef 8211 	mrs	r2, BASEPRI
 80043fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	61fa      	str	r2, [r7, #28]
 800440e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004410:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004412:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004416:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800441a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441c:	429a      	cmp	r2, r3
 800441e:	d302      	bcc.n	8004426 <xQueueGenericSendFromISR+0xc2>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d12f      	bne.n	8004486 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004428:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800442c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004434:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	68b9      	ldr	r1, [r7, #8]
 800443a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800443c:	f000 fa3a 	bl	80048b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004440:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004448:	d112      	bne.n	8004470 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800444a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	2b00      	cmp	r3, #0
 8004450:	d016      	beq.n	8004480 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004454:	3324      	adds	r3, #36	@ 0x24
 8004456:	4618      	mov	r0, r3
 8004458:	f001 f82c 	bl	80054b4 <xTaskRemoveFromEventList>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00e      	beq.n	8004480 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00b      	beq.n	8004480 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	e007      	b.n	8004480 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004470:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004474:	3301      	adds	r3, #1
 8004476:	b2db      	uxtb	r3, r3
 8004478:	b25a      	sxtb	r2, r3
 800447a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004480:	2301      	movs	r3, #1
 8004482:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004484:	e001      	b.n	800448a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004486:	2300      	movs	r3, #0
 8004488:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800448a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004494:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004498:	4618      	mov	r0, r3
 800449a:	3740      	adds	r7, #64	@ 0x40
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08c      	sub	sp, #48	@ 0x30
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044ac:	2300      	movs	r3, #0
 80044ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10b      	bne.n	80044d2 <xQueueReceive+0x32>
	__asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	623b      	str	r3, [r7, #32]
}
 80044cc:	bf00      	nop
 80044ce:	bf00      	nop
 80044d0:	e7fd      	b.n	80044ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d103      	bne.n	80044e0 <xQueueReceive+0x40>
 80044d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <xQueueReceive+0x44>
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <xQueueReceive+0x46>
 80044e4:	2300      	movs	r3, #0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10b      	bne.n	8004502 <xQueueReceive+0x62>
	__asm volatile
 80044ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	61fb      	str	r3, [r7, #28]
}
 80044fc:	bf00      	nop
 80044fe:	bf00      	nop
 8004500:	e7fd      	b.n	80044fe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004502:	f001 f99d 	bl	8005840 <xTaskGetSchedulerState>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d102      	bne.n	8004512 <xQueueReceive+0x72>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <xQueueReceive+0x76>
 8004512:	2301      	movs	r3, #1
 8004514:	e000      	b.n	8004518 <xQueueReceive+0x78>
 8004516:	2300      	movs	r3, #0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10b      	bne.n	8004534 <xQueueReceive+0x94>
	__asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	61bb      	str	r3, [r7, #24]
}
 800452e:	bf00      	nop
 8004530:	bf00      	nop
 8004532:	e7fd      	b.n	8004530 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004534:	f001 fff0 	bl	8006518 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01f      	beq.n	8004584 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004544:	68b9      	ldr	r1, [r7, #8]
 8004546:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004548:	f000 fa1e 	bl	8004988 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800454c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454e:	1e5a      	subs	r2, r3, #1
 8004550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004552:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00f      	beq.n	800457c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800455c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455e:	3310      	adds	r3, #16
 8004560:	4618      	mov	r0, r3
 8004562:	f000 ffa7 	bl	80054b4 <xTaskRemoveFromEventList>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d007      	beq.n	800457c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800456c:	4b3c      	ldr	r3, [pc, #240]	@ (8004660 <xQueueReceive+0x1c0>)
 800456e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800457c:	f001 fffe 	bl	800657c <vPortExitCritical>
				return pdPASS;
 8004580:	2301      	movs	r3, #1
 8004582:	e069      	b.n	8004658 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d103      	bne.n	8004592 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800458a:	f001 fff7 	bl	800657c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800458e:	2300      	movs	r3, #0
 8004590:	e062      	b.n	8004658 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d106      	bne.n	80045a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004598:	f107 0310 	add.w	r3, r7, #16
 800459c:	4618      	mov	r0, r3
 800459e:	f000 ffed 	bl	800557c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045a2:	2301      	movs	r3, #1
 80045a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045a6:	f001 ffe9 	bl	800657c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045aa:	f000 fd55 	bl	8005058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045ae:	f001 ffb3 	bl	8006518 <vPortEnterCritical>
 80045b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045b8:	b25b      	sxtb	r3, r3
 80045ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045be:	d103      	bne.n	80045c8 <xQueueReceive+0x128>
 80045c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045ce:	b25b      	sxtb	r3, r3
 80045d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d4:	d103      	bne.n	80045de <xQueueReceive+0x13e>
 80045d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045de:	f001 ffcd 	bl	800657c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045e2:	1d3a      	adds	r2, r7, #4
 80045e4:	f107 0310 	add.w	r3, r7, #16
 80045e8:	4611      	mov	r1, r2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 ffdc 	bl	80055a8 <xTaskCheckForTimeOut>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d123      	bne.n	800463e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045f8:	f000 fa3e 	bl	8004a78 <prvIsQueueEmpty>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d017      	beq.n	8004632 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004604:	3324      	adds	r3, #36	@ 0x24
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	4611      	mov	r1, r2
 800460a:	4618      	mov	r0, r3
 800460c:	f000 ff00 	bl	8005410 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004610:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004612:	f000 f9df 	bl	80049d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004616:	f000 fd2d 	bl	8005074 <xTaskResumeAll>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d189      	bne.n	8004534 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004620:	4b0f      	ldr	r3, [pc, #60]	@ (8004660 <xQueueReceive+0x1c0>)
 8004622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	e780      	b.n	8004534 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004632:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004634:	f000 f9ce 	bl	80049d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004638:	f000 fd1c 	bl	8005074 <xTaskResumeAll>
 800463c:	e77a      	b.n	8004534 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800463e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004640:	f000 f9c8 	bl	80049d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004644:	f000 fd16 	bl	8005074 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004648:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800464a:	f000 fa15 	bl	8004a78 <prvIsQueueEmpty>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	f43f af6f 	beq.w	8004534 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004656:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004658:	4618      	mov	r0, r3
 800465a:	3730      	adds	r7, #48	@ 0x30
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	e000ed04 	.word	0xe000ed04

08004664 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b08e      	sub	sp, #56	@ 0x38
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800466e:	2300      	movs	r3, #0
 8004670:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004676:	2300      	movs	r3, #0
 8004678:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800467a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10b      	bne.n	8004698 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	623b      	str	r3, [r7, #32]
}
 8004692:	bf00      	nop
 8004694:	bf00      	nop
 8004696:	e7fd      	b.n	8004694 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00b      	beq.n	80046b8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80046a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	61fb      	str	r3, [r7, #28]
}
 80046b2:	bf00      	nop
 80046b4:	bf00      	nop
 80046b6:	e7fd      	b.n	80046b4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046b8:	f001 f8c2 	bl	8005840 <xTaskGetSchedulerState>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d102      	bne.n	80046c8 <xQueueSemaphoreTake+0x64>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <xQueueSemaphoreTake+0x68>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <xQueueSemaphoreTake+0x6a>
 80046cc:	2300      	movs	r3, #0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10b      	bne.n	80046ea <xQueueSemaphoreTake+0x86>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	61bb      	str	r3, [r7, #24]
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop
 80046e8:	e7fd      	b.n	80046e6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046ea:	f001 ff15 	bl	8006518 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80046ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80046f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d024      	beq.n	8004744 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80046fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fc:	1e5a      	subs	r2, r3, #1
 80046fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004700:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d104      	bne.n	8004714 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800470a:	f001 fa13 	bl	8005b34 <pvTaskIncrementMutexHeldCount>
 800470e:	4602      	mov	r2, r0
 8004710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004712:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00f      	beq.n	800473c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800471c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800471e:	3310      	adds	r3, #16
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fec7 	bl	80054b4 <xTaskRemoveFromEventList>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d007      	beq.n	800473c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800472c:	4b54      	ldr	r3, [pc, #336]	@ (8004880 <xQueueSemaphoreTake+0x21c>)
 800472e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800473c:	f001 ff1e 	bl	800657c <vPortExitCritical>
				return pdPASS;
 8004740:	2301      	movs	r3, #1
 8004742:	e098      	b.n	8004876 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d112      	bne.n	8004770 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800474a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00b      	beq.n	8004768 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	617b      	str	r3, [r7, #20]
}
 8004762:	bf00      	nop
 8004764:	bf00      	nop
 8004766:	e7fd      	b.n	8004764 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004768:	f001 ff08 	bl	800657c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800476c:	2300      	movs	r3, #0
 800476e:	e082      	b.n	8004876 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004776:	f107 030c 	add.w	r3, r7, #12
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fefe 	bl	800557c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004780:	2301      	movs	r3, #1
 8004782:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004784:	f001 fefa 	bl	800657c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004788:	f000 fc66 	bl	8005058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800478c:	f001 fec4 	bl	8006518 <vPortEnterCritical>
 8004790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004792:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004796:	b25b      	sxtb	r3, r3
 8004798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479c:	d103      	bne.n	80047a6 <xQueueSemaphoreTake+0x142>
 800479e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047ac:	b25b      	sxtb	r3, r3
 80047ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b2:	d103      	bne.n	80047bc <xQueueSemaphoreTake+0x158>
 80047b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047bc:	f001 fede 	bl	800657c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047c0:	463a      	mov	r2, r7
 80047c2:	f107 030c 	add.w	r3, r7, #12
 80047c6:	4611      	mov	r1, r2
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 feed 	bl	80055a8 <xTaskCheckForTimeOut>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d132      	bne.n	800483a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80047d6:	f000 f94f 	bl	8004a78 <prvIsQueueEmpty>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d026      	beq.n	800482e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d109      	bne.n	80047fc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80047e8:	f001 fe96 	bl	8006518 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f001 f843 	bl	800587c <xTaskPriorityInherit>
 80047f6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80047f8:	f001 fec0 	bl	800657c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fe:	3324      	adds	r3, #36	@ 0x24
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	4611      	mov	r1, r2
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fe03 	bl	8005410 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800480a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800480c:	f000 f8e2 	bl	80049d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004810:	f000 fc30 	bl	8005074 <xTaskResumeAll>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	f47f af67 	bne.w	80046ea <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800481c:	4b18      	ldr	r3, [pc, #96]	@ (8004880 <xQueueSemaphoreTake+0x21c>)
 800481e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	e75d      	b.n	80046ea <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800482e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004830:	f000 f8d0 	bl	80049d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004834:	f000 fc1e 	bl	8005074 <xTaskResumeAll>
 8004838:	e757      	b.n	80046ea <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800483a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800483c:	f000 f8ca 	bl	80049d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004840:	f000 fc18 	bl	8005074 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004844:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004846:	f000 f917 	bl	8004a78 <prvIsQueueEmpty>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	f43f af4c 	beq.w	80046ea <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00d      	beq.n	8004874 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004858:	f001 fe5e 	bl	8006518 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800485c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800485e:	f000 f811 	bl	8004884 <prvGetDisinheritPriorityAfterTimeout>
 8004862:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800486a:	4618      	mov	r0, r3
 800486c:	f001 f8de 	bl	8005a2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004870:	f001 fe84 	bl	800657c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004874:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004876:	4618      	mov	r0, r3
 8004878:	3738      	adds	r7, #56	@ 0x38
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	e000ed04 	.word	0xe000ed04

08004884 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	2b00      	cmp	r3, #0
 8004892:	d006      	beq.n	80048a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	e001      	b.n	80048a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80048a6:	68fb      	ldr	r3, [r7, #12]
	}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10d      	bne.n	80048ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d14d      	bne.n	8004976 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	4618      	mov	r0, r3
 80048e0:	f001 f834 	bl	800594c <xTaskPriorityDisinherit>
 80048e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	609a      	str	r2, [r3, #8]
 80048ec:	e043      	b.n	8004976 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d119      	bne.n	8004928 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6858      	ldr	r0, [r3, #4]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fc:	461a      	mov	r2, r3
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	f002 f9a6 	bl	8006c50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490c:	441a      	add	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	429a      	cmp	r2, r3
 800491c:	d32b      	bcc.n	8004976 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	605a      	str	r2, [r3, #4]
 8004926:	e026      	b.n	8004976 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	68d8      	ldr	r0, [r3, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004930:	461a      	mov	r2, r3
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	f002 f98c 	bl	8006c50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004940:	425b      	negs	r3, r3
 8004942:	441a      	add	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d207      	bcs.n	8004964 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495c:	425b      	negs	r3, r3
 800495e:	441a      	add	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d105      	bne.n	8004976 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	3b01      	subs	r3, #1
 8004974:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800497e:	697b      	ldr	r3, [r7, #20]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d018      	beq.n	80049cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a2:	441a      	add	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d303      	bcc.n	80049bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68d9      	ldr	r1, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c4:	461a      	mov	r2, r3
 80049c6:	6838      	ldr	r0, [r7, #0]
 80049c8:	f002 f942 	bl	8006c50 <memcpy>
	}
}
 80049cc:	bf00      	nop
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80049dc:	f001 fd9c 	bl	8006518 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049e8:	e011      	b.n	8004a0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d012      	beq.n	8004a18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3324      	adds	r3, #36	@ 0x24
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fd5c 	bl	80054b4 <xTaskRemoveFromEventList>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a02:	f000 fe35 	bl	8005670 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	dce9      	bgt.n	80049ea <prvUnlockQueue+0x16>
 8004a16:	e000      	b.n	8004a1a <prvUnlockQueue+0x46>
					break;
 8004a18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	22ff      	movs	r2, #255	@ 0xff
 8004a1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004a22:	f001 fdab 	bl	800657c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a26:	f001 fd77 	bl	8006518 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a32:	e011      	b.n	8004a58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d012      	beq.n	8004a62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3310      	adds	r3, #16
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fd37 	bl	80054b4 <xTaskRemoveFromEventList>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a4c:	f000 fe10 	bl	8005670 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a50:	7bbb      	ldrb	r3, [r7, #14]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	dce9      	bgt.n	8004a34 <prvUnlockQueue+0x60>
 8004a60:	e000      	b.n	8004a64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	22ff      	movs	r2, #255	@ 0xff
 8004a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004a6c:	f001 fd86 	bl	800657c <vPortExitCritical>
}
 8004a70:	bf00      	nop
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a80:	f001 fd4a 	bl	8006518 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d102      	bne.n	8004a92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	e001      	b.n	8004a96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a96:	f001 fd71 	bl	800657c <vPortExitCritical>

	return xReturn;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004aac:	f001 fd34 	bl	8006518 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d102      	bne.n	8004ac2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004abc:	2301      	movs	r3, #1
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	e001      	b.n	8004ac6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ac6:	f001 fd59 	bl	800657c <vPortExitCritical>

	return xReturn;
 8004aca:	68fb      	ldr	r3, [r7, #12]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	e014      	b.n	8004b0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ae4:	4a0f      	ldr	r2, [pc, #60]	@ (8004b24 <vQueueAddToRegistry+0x50>)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10b      	bne.n	8004b08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004af0:	490c      	ldr	r1, [pc, #48]	@ (8004b24 <vQueueAddToRegistry+0x50>)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004afa:	4a0a      	ldr	r2, [pc, #40]	@ (8004b24 <vQueueAddToRegistry+0x50>)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4413      	add	r3, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b06:	e006      	b.n	8004b16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b07      	cmp	r3, #7
 8004b12:	d9e7      	bls.n	8004ae4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	20000cc4 	.word	0x20000cc4

08004b28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b38:	f001 fcee 	bl	8006518 <vPortEnterCritical>
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b42:	b25b      	sxtb	r3, r3
 8004b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b48:	d103      	bne.n	8004b52 <vQueueWaitForMessageRestricted+0x2a>
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b58:	b25b      	sxtb	r3, r3
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5e:	d103      	bne.n	8004b68 <vQueueWaitForMessageRestricted+0x40>
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b68:	f001 fd08 	bl	800657c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d106      	bne.n	8004b82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	3324      	adds	r3, #36	@ 0x24
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fc6d 	bl	800545c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b82:	6978      	ldr	r0, [r7, #20]
 8004b84:	f7ff ff26 	bl	80049d4 <prvUnlockQueue>
	}
 8004b88:	bf00      	nop
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08e      	sub	sp, #56	@ 0x38
 8004b94:	af04      	add	r7, sp, #16
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10b      	bne.n	8004bbc <xTaskCreateStatic+0x2c>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	623b      	str	r3, [r7, #32]
}
 8004bb6:	bf00      	nop
 8004bb8:	bf00      	nop
 8004bba:	e7fd      	b.n	8004bb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10b      	bne.n	8004bda <xTaskCreateStatic+0x4a>
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	61fb      	str	r3, [r7, #28]
}
 8004bd4:	bf00      	nop
 8004bd6:	bf00      	nop
 8004bd8:	e7fd      	b.n	8004bd6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004bda:	23a8      	movs	r3, #168	@ 0xa8
 8004bdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	2ba8      	cmp	r3, #168	@ 0xa8
 8004be2:	d00b      	beq.n	8004bfc <xTaskCreateStatic+0x6c>
	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	61bb      	str	r3, [r7, #24]
}
 8004bf6:	bf00      	nop
 8004bf8:	bf00      	nop
 8004bfa:	e7fd      	b.n	8004bf8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004bfc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01e      	beq.n	8004c42 <xTaskCreateStatic+0xb2>
 8004c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d01b      	beq.n	8004c42 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c12:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	9303      	str	r3, [sp, #12]
 8004c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c22:	9302      	str	r3, [sp, #8]
 8004c24:	f107 0314 	add.w	r3, r7, #20
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f851 	bl	8004cdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c3c:	f000 f8f6 	bl	8004e2c <prvAddNewTaskToReadyList>
 8004c40:	e001      	b.n	8004c46 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c46:	697b      	ldr	r3, [r7, #20]
	}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3728      	adds	r7, #40	@ 0x28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08c      	sub	sp, #48	@ 0x30
 8004c54:	af04      	add	r7, sp, #16
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c60:	88fb      	ldrh	r3, [r7, #6]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4618      	mov	r0, r3
 8004c66:	f001 fd79 	bl	800675c <pvPortMalloc>
 8004c6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00e      	beq.n	8004c90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c72:	20a8      	movs	r0, #168	@ 0xa8
 8004c74:	f001 fd72 	bl	800675c <pvPortMalloc>
 8004c78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c86:	e005      	b.n	8004c94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c88:	6978      	ldr	r0, [r7, #20]
 8004c8a:	f001 fe35 	bl	80068f8 <vPortFree>
 8004c8e:	e001      	b.n	8004c94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d017      	beq.n	8004cca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ca2:	88fa      	ldrh	r2, [r7, #6]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	9303      	str	r3, [sp, #12]
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	9302      	str	r3, [sp, #8]
 8004cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cae:	9301      	str	r3, [sp, #4]
 8004cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 f80f 	bl	8004cdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cbe:	69f8      	ldr	r0, [r7, #28]
 8004cc0:	f000 f8b4 	bl	8004e2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	61bb      	str	r3, [r7, #24]
 8004cc8:	e002      	b.n	8004cd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004cca:	f04f 33ff 	mov.w	r3, #4294967295
 8004cce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004cd0:	69bb      	ldr	r3, [r7, #24]
	}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3720      	adds	r7, #32
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cec:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	21a5      	movs	r1, #165	@ 0xa5
 8004cf6:	f001 ff1f 	bl	8006b38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d04:	3b01      	subs	r3, #1
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	f023 0307 	bic.w	r3, r3, #7
 8004d12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00b      	beq.n	8004d36 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	617b      	str	r3, [r7, #20]
}
 8004d30:	bf00      	nop
 8004d32:	bf00      	nop
 8004d34:	e7fd      	b.n	8004d32 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01f      	beq.n	8004d7c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61fb      	str	r3, [r7, #28]
 8004d40:	e012      	b.n	8004d68 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	7819      	ldrb	r1, [r3, #0]
 8004d4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	4413      	add	r3, r2
 8004d50:	3334      	adds	r3, #52	@ 0x34
 8004d52:	460a      	mov	r2, r1
 8004d54:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d006      	beq.n	8004d70 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	3301      	adds	r3, #1
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2b0f      	cmp	r3, #15
 8004d6c:	d9e9      	bls.n	8004d42 <prvInitialiseNewTask+0x66>
 8004d6e:	e000      	b.n	8004d72 <prvInitialiseNewTask+0x96>
			{
				break;
 8004d70:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d7a:	e003      	b.n	8004d84 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d86:	2b37      	cmp	r3, #55	@ 0x37
 8004d88:	d901      	bls.n	8004d8e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d8a:	2337      	movs	r3, #55	@ 0x37
 8004d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d92:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d98:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da2:	3304      	adds	r3, #4
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fe ffcf 	bl	8003d48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dac:	3318      	adds	r3, #24
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe ffca 	bl	8003d48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004db8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dc8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ddc:	3354      	adds	r3, #84	@ 0x54
 8004dde:	224c      	movs	r2, #76	@ 0x4c
 8004de0:	2100      	movs	r1, #0
 8004de2:	4618      	mov	r0, r3
 8004de4:	f001 fea8 	bl	8006b38 <memset>
 8004de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dea:	4a0d      	ldr	r2, [pc, #52]	@ (8004e20 <prvInitialiseNewTask+0x144>)
 8004dec:	659a      	str	r2, [r3, #88]	@ 0x58
 8004dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df0:	4a0c      	ldr	r2, [pc, #48]	@ (8004e24 <prvInitialiseNewTask+0x148>)
 8004df2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df6:	4a0c      	ldr	r2, [pc, #48]	@ (8004e28 <prvInitialiseNewTask+0x14c>)
 8004df8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	68f9      	ldr	r1, [r7, #12]
 8004dfe:	69b8      	ldr	r0, [r7, #24]
 8004e00:	f001 fa5a 	bl	80062b8 <pxPortInitialiseStack>
 8004e04:	4602      	mov	r2, r0
 8004e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e16:	bf00      	nop
 8004e18:	3720      	adds	r7, #32
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20004f58 	.word	0x20004f58
 8004e24:	20004fc0 	.word	0x20004fc0
 8004e28:	20005028 	.word	0x20005028

08004e2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e34:	f001 fb70 	bl	8006518 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e38:	4b2d      	ldr	r3, [pc, #180]	@ (8004ef0 <prvAddNewTaskToReadyList+0xc4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8004ef0 <prvAddNewTaskToReadyList+0xc4>)
 8004e40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e42:	4b2c      	ldr	r3, [pc, #176]	@ (8004ef4 <prvAddNewTaskToReadyList+0xc8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d109      	bne.n	8004e5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ef4 <prvAddNewTaskToReadyList+0xc8>)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e50:	4b27      	ldr	r3, [pc, #156]	@ (8004ef0 <prvAddNewTaskToReadyList+0xc4>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d110      	bne.n	8004e7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e58:	f000 fc2e 	bl	80056b8 <prvInitialiseTaskLists>
 8004e5c:	e00d      	b.n	8004e7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e5e:	4b26      	ldr	r3, [pc, #152]	@ (8004ef8 <prvAddNewTaskToReadyList+0xcc>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d109      	bne.n	8004e7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e66:	4b23      	ldr	r3, [pc, #140]	@ (8004ef4 <prvAddNewTaskToReadyList+0xc8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d802      	bhi.n	8004e7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e74:	4a1f      	ldr	r2, [pc, #124]	@ (8004ef4 <prvAddNewTaskToReadyList+0xc8>)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e7a:	4b20      	ldr	r3, [pc, #128]	@ (8004efc <prvAddNewTaskToReadyList+0xd0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	4a1e      	ldr	r2, [pc, #120]	@ (8004efc <prvAddNewTaskToReadyList+0xd0>)
 8004e82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e84:	4b1d      	ldr	r3, [pc, #116]	@ (8004efc <prvAddNewTaskToReadyList+0xd0>)
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e90:	4b1b      	ldr	r3, [pc, #108]	@ (8004f00 <prvAddNewTaskToReadyList+0xd4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d903      	bls.n	8004ea0 <prvAddNewTaskToReadyList+0x74>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9c:	4a18      	ldr	r2, [pc, #96]	@ (8004f00 <prvAddNewTaskToReadyList+0xd4>)
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4a15      	ldr	r2, [pc, #84]	@ (8004f04 <prvAddNewTaskToReadyList+0xd8>)
 8004eae:	441a      	add	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	f7fe ff53 	bl	8003d62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ebc:	f001 fb5e 	bl	800657c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef8 <prvAddNewTaskToReadyList+0xcc>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00e      	beq.n	8004ee6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef4 <prvAddNewTaskToReadyList+0xc8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d207      	bcs.n	8004ee6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8004f08 <prvAddNewTaskToReadyList+0xdc>)
 8004ed8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ee6:	bf00      	nop
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	200011d8 	.word	0x200011d8
 8004ef4:	20000d04 	.word	0x20000d04
 8004ef8:	200011e4 	.word	0x200011e4
 8004efc:	200011f4 	.word	0x200011f4
 8004f00:	200011e0 	.word	0x200011e0
 8004f04:	20000d08 	.word	0x20000d08
 8004f08:	e000ed04 	.word	0xe000ed04

08004f0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d018      	beq.n	8004f50 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f1e:	4b14      	ldr	r3, [pc, #80]	@ (8004f70 <vTaskDelay+0x64>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00b      	beq.n	8004f3e <vTaskDelay+0x32>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	60bb      	str	r3, [r7, #8]
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	e7fd      	b.n	8004f3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f3e:	f000 f88b 	bl	8005058 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f42:	2100      	movs	r1, #0
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fe09 	bl	8005b5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f4a:	f000 f893 	bl	8005074 <xTaskResumeAll>
 8004f4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d107      	bne.n	8004f66 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004f56:	4b07      	ldr	r3, [pc, #28]	@ (8004f74 <vTaskDelay+0x68>)
 8004f58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f66:	bf00      	nop
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20001200 	.word	0x20001200
 8004f74:	e000ed04 	.word	0xe000ed04

08004f78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	@ 0x28
 8004f7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f86:	463a      	mov	r2, r7
 8004f88:	1d39      	adds	r1, r7, #4
 8004f8a:	f107 0308 	add.w	r3, r7, #8
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fe fe86 	bl	8003ca0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f94:	6839      	ldr	r1, [r7, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	9202      	str	r2, [sp, #8]
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	460a      	mov	r2, r1
 8004fa6:	4924      	ldr	r1, [pc, #144]	@ (8005038 <vTaskStartScheduler+0xc0>)
 8004fa8:	4824      	ldr	r0, [pc, #144]	@ (800503c <vTaskStartScheduler+0xc4>)
 8004faa:	f7ff fdf1 	bl	8004b90 <xTaskCreateStatic>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	4a23      	ldr	r2, [pc, #140]	@ (8005040 <vTaskStartScheduler+0xc8>)
 8004fb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fb4:	4b22      	ldr	r3, [pc, #136]	@ (8005040 <vTaskStartScheduler+0xc8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	e001      	b.n	8004fc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d102      	bne.n	8004fd2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004fcc:	f000 fe1a 	bl	8005c04 <xTimerCreateTimerTask>
 8004fd0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d11b      	bne.n	8005010 <vTaskStartScheduler+0x98>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	613b      	str	r3, [r7, #16]
}
 8004fea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004fec:	4b15      	ldr	r3, [pc, #84]	@ (8005044 <vTaskStartScheduler+0xcc>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3354      	adds	r3, #84	@ 0x54
 8004ff2:	4a15      	ldr	r2, [pc, #84]	@ (8005048 <vTaskStartScheduler+0xd0>)
 8004ff4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ff6:	4b15      	ldr	r3, [pc, #84]	@ (800504c <vTaskStartScheduler+0xd4>)
 8004ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ffe:	4b14      	ldr	r3, [pc, #80]	@ (8005050 <vTaskStartScheduler+0xd8>)
 8005000:	2201      	movs	r2, #1
 8005002:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005004:	4b13      	ldr	r3, [pc, #76]	@ (8005054 <vTaskStartScheduler+0xdc>)
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800500a:	f001 f9e1 	bl	80063d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800500e:	e00f      	b.n	8005030 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005016:	d10b      	bne.n	8005030 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	60fb      	str	r3, [r7, #12]
}
 800502a:	bf00      	nop
 800502c:	bf00      	nop
 800502e:	e7fd      	b.n	800502c <vTaskStartScheduler+0xb4>
}
 8005030:	bf00      	nop
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	08006d78 	.word	0x08006d78
 800503c:	08005689 	.word	0x08005689
 8005040:	200011fc 	.word	0x200011fc
 8005044:	20000d04 	.word	0x20000d04
 8005048:	2000002c 	.word	0x2000002c
 800504c:	200011f8 	.word	0x200011f8
 8005050:	200011e4 	.word	0x200011e4
 8005054:	200011dc 	.word	0x200011dc

08005058 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800505c:	4b04      	ldr	r3, [pc, #16]	@ (8005070 <vTaskSuspendAll+0x18>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3301      	adds	r3, #1
 8005062:	4a03      	ldr	r2, [pc, #12]	@ (8005070 <vTaskSuspendAll+0x18>)
 8005064:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005066:	bf00      	nop
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	20001200 	.word	0x20001200

08005074 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800507a:	2300      	movs	r3, #0
 800507c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800507e:	2300      	movs	r3, #0
 8005080:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005082:	4b42      	ldr	r3, [pc, #264]	@ (800518c <xTaskResumeAll+0x118>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10b      	bne.n	80050a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	603b      	str	r3, [r7, #0]
}
 800509c:	bf00      	nop
 800509e:	bf00      	nop
 80050a0:	e7fd      	b.n	800509e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050a2:	f001 fa39 	bl	8006518 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80050a6:	4b39      	ldr	r3, [pc, #228]	@ (800518c <xTaskResumeAll+0x118>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	4a37      	ldr	r2, [pc, #220]	@ (800518c <xTaskResumeAll+0x118>)
 80050ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050b0:	4b36      	ldr	r3, [pc, #216]	@ (800518c <xTaskResumeAll+0x118>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d162      	bne.n	800517e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050b8:	4b35      	ldr	r3, [pc, #212]	@ (8005190 <xTaskResumeAll+0x11c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d05e      	beq.n	800517e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050c0:	e02f      	b.n	8005122 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050c2:	4b34      	ldr	r3, [pc, #208]	@ (8005194 <xTaskResumeAll+0x120>)
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3318      	adds	r3, #24
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fe fea4 	bl	8003e1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3304      	adds	r3, #4
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fe fe9f 	bl	8003e1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e2:	4b2d      	ldr	r3, [pc, #180]	@ (8005198 <xTaskResumeAll+0x124>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d903      	bls.n	80050f2 <xTaskResumeAll+0x7e>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005198 <xTaskResumeAll+0x124>)
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4a27      	ldr	r2, [pc, #156]	@ (800519c <xTaskResumeAll+0x128>)
 8005100:	441a      	add	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3304      	adds	r3, #4
 8005106:	4619      	mov	r1, r3
 8005108:	4610      	mov	r0, r2
 800510a:	f7fe fe2a 	bl	8003d62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005112:	4b23      	ldr	r3, [pc, #140]	@ (80051a0 <xTaskResumeAll+0x12c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005118:	429a      	cmp	r2, r3
 800511a:	d302      	bcc.n	8005122 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800511c:	4b21      	ldr	r3, [pc, #132]	@ (80051a4 <xTaskResumeAll+0x130>)
 800511e:	2201      	movs	r2, #1
 8005120:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005122:	4b1c      	ldr	r3, [pc, #112]	@ (8005194 <xTaskResumeAll+0x120>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1cb      	bne.n	80050c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005130:	f000 fb66 	bl	8005800 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005134:	4b1c      	ldr	r3, [pc, #112]	@ (80051a8 <xTaskResumeAll+0x134>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d010      	beq.n	8005162 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005140:	f000 f846 	bl	80051d0 <xTaskIncrementTick>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800514a:	4b16      	ldr	r3, [pc, #88]	@ (80051a4 <xTaskResumeAll+0x130>)
 800514c:	2201      	movs	r2, #1
 800514e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3b01      	subs	r3, #1
 8005154:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1f1      	bne.n	8005140 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800515c:	4b12      	ldr	r3, [pc, #72]	@ (80051a8 <xTaskResumeAll+0x134>)
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005162:	4b10      	ldr	r3, [pc, #64]	@ (80051a4 <xTaskResumeAll+0x130>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d009      	beq.n	800517e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800516a:	2301      	movs	r3, #1
 800516c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800516e:	4b0f      	ldr	r3, [pc, #60]	@ (80051ac <xTaskResumeAll+0x138>)
 8005170:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800517e:	f001 f9fd 	bl	800657c <vPortExitCritical>

	return xAlreadyYielded;
 8005182:	68bb      	ldr	r3, [r7, #8]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20001200 	.word	0x20001200
 8005190:	200011d8 	.word	0x200011d8
 8005194:	20001198 	.word	0x20001198
 8005198:	200011e0 	.word	0x200011e0
 800519c:	20000d08 	.word	0x20000d08
 80051a0:	20000d04 	.word	0x20000d04
 80051a4:	200011ec 	.word	0x200011ec
 80051a8:	200011e8 	.word	0x200011e8
 80051ac:	e000ed04 	.word	0xe000ed04

080051b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80051b6:	4b05      	ldr	r3, [pc, #20]	@ (80051cc <xTaskGetTickCount+0x1c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80051bc:	687b      	ldr	r3, [r7, #4]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	200011dc 	.word	0x200011dc

080051d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051d6:	2300      	movs	r3, #0
 80051d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051da:	4b4f      	ldr	r3, [pc, #316]	@ (8005318 <xTaskIncrementTick+0x148>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f040 8090 	bne.w	8005304 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051e4:	4b4d      	ldr	r3, [pc, #308]	@ (800531c <xTaskIncrementTick+0x14c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3301      	adds	r3, #1
 80051ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80051ec:	4a4b      	ldr	r2, [pc, #300]	@ (800531c <xTaskIncrementTick+0x14c>)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d121      	bne.n	800523c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80051f8:	4b49      	ldr	r3, [pc, #292]	@ (8005320 <xTaskIncrementTick+0x150>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00b      	beq.n	800521a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	603b      	str	r3, [r7, #0]
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop
 8005218:	e7fd      	b.n	8005216 <xTaskIncrementTick+0x46>
 800521a:	4b41      	ldr	r3, [pc, #260]	@ (8005320 <xTaskIncrementTick+0x150>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	4b40      	ldr	r3, [pc, #256]	@ (8005324 <xTaskIncrementTick+0x154>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a3e      	ldr	r2, [pc, #248]	@ (8005320 <xTaskIncrementTick+0x150>)
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	4a3e      	ldr	r2, [pc, #248]	@ (8005324 <xTaskIncrementTick+0x154>)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	4b3e      	ldr	r3, [pc, #248]	@ (8005328 <xTaskIncrementTick+0x158>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3301      	adds	r3, #1
 8005234:	4a3c      	ldr	r2, [pc, #240]	@ (8005328 <xTaskIncrementTick+0x158>)
 8005236:	6013      	str	r3, [r2, #0]
 8005238:	f000 fae2 	bl	8005800 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800523c:	4b3b      	ldr	r3, [pc, #236]	@ (800532c <xTaskIncrementTick+0x15c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	429a      	cmp	r2, r3
 8005244:	d349      	bcc.n	80052da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005246:	4b36      	ldr	r3, [pc, #216]	@ (8005320 <xTaskIncrementTick+0x150>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d104      	bne.n	800525a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005250:	4b36      	ldr	r3, [pc, #216]	@ (800532c <xTaskIncrementTick+0x15c>)
 8005252:	f04f 32ff 	mov.w	r2, #4294967295
 8005256:	601a      	str	r2, [r3, #0]
					break;
 8005258:	e03f      	b.n	80052da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800525a:	4b31      	ldr	r3, [pc, #196]	@ (8005320 <xTaskIncrementTick+0x150>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	429a      	cmp	r2, r3
 8005270:	d203      	bcs.n	800527a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005272:	4a2e      	ldr	r2, [pc, #184]	@ (800532c <xTaskIncrementTick+0x15c>)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005278:	e02f      	b.n	80052da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	3304      	adds	r3, #4
 800527e:	4618      	mov	r0, r3
 8005280:	f7fe fdcc 	bl	8003e1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005288:	2b00      	cmp	r3, #0
 800528a:	d004      	beq.n	8005296 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	3318      	adds	r3, #24
 8005290:	4618      	mov	r0, r3
 8005292:	f7fe fdc3 	bl	8003e1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800529a:	4b25      	ldr	r3, [pc, #148]	@ (8005330 <xTaskIncrementTick+0x160>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d903      	bls.n	80052aa <xTaskIncrementTick+0xda>
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a6:	4a22      	ldr	r2, [pc, #136]	@ (8005330 <xTaskIncrementTick+0x160>)
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ae:	4613      	mov	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005334 <xTaskIncrementTick+0x164>)
 80052b8:	441a      	add	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	3304      	adds	r3, #4
 80052be:	4619      	mov	r1, r3
 80052c0:	4610      	mov	r0, r2
 80052c2:	f7fe fd4e 	bl	8003d62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005338 <xTaskIncrementTick+0x168>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d3b8      	bcc.n	8005246 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80052d4:	2301      	movs	r3, #1
 80052d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052d8:	e7b5      	b.n	8005246 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052da:	4b17      	ldr	r3, [pc, #92]	@ (8005338 <xTaskIncrementTick+0x168>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e0:	4914      	ldr	r1, [pc, #80]	@ (8005334 <xTaskIncrementTick+0x164>)
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d901      	bls.n	80052f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80052f2:	2301      	movs	r3, #1
 80052f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80052f6:	4b11      	ldr	r3, [pc, #68]	@ (800533c <xTaskIncrementTick+0x16c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d007      	beq.n	800530e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80052fe:	2301      	movs	r3, #1
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	e004      	b.n	800530e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005304:	4b0e      	ldr	r3, [pc, #56]	@ (8005340 <xTaskIncrementTick+0x170>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3301      	adds	r3, #1
 800530a:	4a0d      	ldr	r2, [pc, #52]	@ (8005340 <xTaskIncrementTick+0x170>)
 800530c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800530e:	697b      	ldr	r3, [r7, #20]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	20001200 	.word	0x20001200
 800531c:	200011dc 	.word	0x200011dc
 8005320:	20001190 	.word	0x20001190
 8005324:	20001194 	.word	0x20001194
 8005328:	200011f0 	.word	0x200011f0
 800532c:	200011f8 	.word	0x200011f8
 8005330:	200011e0 	.word	0x200011e0
 8005334:	20000d08 	.word	0x20000d08
 8005338:	20000d04 	.word	0x20000d04
 800533c:	200011ec 	.word	0x200011ec
 8005340:	200011e8 	.word	0x200011e8

08005344 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800534a:	4b2b      	ldr	r3, [pc, #172]	@ (80053f8 <vTaskSwitchContext+0xb4>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005352:	4b2a      	ldr	r3, [pc, #168]	@ (80053fc <vTaskSwitchContext+0xb8>)
 8005354:	2201      	movs	r2, #1
 8005356:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005358:	e047      	b.n	80053ea <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800535a:	4b28      	ldr	r3, [pc, #160]	@ (80053fc <vTaskSwitchContext+0xb8>)
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005360:	4b27      	ldr	r3, [pc, #156]	@ (8005400 <vTaskSwitchContext+0xbc>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	e011      	b.n	800538c <vTaskSwitchContext+0x48>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10b      	bne.n	8005386 <vTaskSwitchContext+0x42>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	607b      	str	r3, [r7, #4]
}
 8005380:	bf00      	nop
 8005382:	bf00      	nop
 8005384:	e7fd      	b.n	8005382 <vTaskSwitchContext+0x3e>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	3b01      	subs	r3, #1
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	491d      	ldr	r1, [pc, #116]	@ (8005404 <vTaskSwitchContext+0xc0>)
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4613      	mov	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0e3      	beq.n	8005368 <vTaskSwitchContext+0x24>
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4a16      	ldr	r2, [pc, #88]	@ (8005404 <vTaskSwitchContext+0xc0>)
 80053ac:	4413      	add	r3, r2
 80053ae:	60bb      	str	r3, [r7, #8]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	605a      	str	r2, [r3, #4]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	3308      	adds	r3, #8
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d104      	bne.n	80053d0 <vTaskSwitchContext+0x8c>
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	605a      	str	r2, [r3, #4]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005408 <vTaskSwitchContext+0xc4>)
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	4a09      	ldr	r2, [pc, #36]	@ (8005400 <vTaskSwitchContext+0xbc>)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053e0:	4b09      	ldr	r3, [pc, #36]	@ (8005408 <vTaskSwitchContext+0xc4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3354      	adds	r3, #84	@ 0x54
 80053e6:	4a09      	ldr	r2, [pc, #36]	@ (800540c <vTaskSwitchContext+0xc8>)
 80053e8:	6013      	str	r3, [r2, #0]
}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20001200 	.word	0x20001200
 80053fc:	200011ec 	.word	0x200011ec
 8005400:	200011e0 	.word	0x200011e0
 8005404:	20000d08 	.word	0x20000d08
 8005408:	20000d04 	.word	0x20000d04
 800540c:	2000002c 	.word	0x2000002c

08005410 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10b      	bne.n	8005438 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	60fb      	str	r3, [r7, #12]
}
 8005432:	bf00      	nop
 8005434:	bf00      	nop
 8005436:	e7fd      	b.n	8005434 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005438:	4b07      	ldr	r3, [pc, #28]	@ (8005458 <vTaskPlaceOnEventList+0x48>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3318      	adds	r3, #24
 800543e:	4619      	mov	r1, r3
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7fe fcb2 	bl	8003daa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005446:	2101      	movs	r1, #1
 8005448:	6838      	ldr	r0, [r7, #0]
 800544a:	f000 fb87 	bl	8005b5c <prvAddCurrentTaskToDelayedList>
}
 800544e:	bf00      	nop
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20000d04 	.word	0x20000d04

0800545c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10b      	bne.n	8005486 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	617b      	str	r3, [r7, #20]
}
 8005480:	bf00      	nop
 8005482:	bf00      	nop
 8005484:	e7fd      	b.n	8005482 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005486:	4b0a      	ldr	r3, [pc, #40]	@ (80054b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3318      	adds	r3, #24
 800548c:	4619      	mov	r1, r3
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f7fe fc67 	bl	8003d62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800549a:	f04f 33ff 	mov.w	r3, #4294967295
 800549e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	68b8      	ldr	r0, [r7, #8]
 80054a4:	f000 fb5a 	bl	8005b5c <prvAddCurrentTaskToDelayedList>
	}
 80054a8:	bf00      	nop
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	20000d04 	.word	0x20000d04

080054b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	60fb      	str	r3, [r7, #12]
}
 80054dc:	bf00      	nop
 80054de:	bf00      	nop
 80054e0:	e7fd      	b.n	80054de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	3318      	adds	r3, #24
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fe fc98 	bl	8003e1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005564 <xTaskRemoveFromEventList+0xb0>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d11d      	bne.n	8005530 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	3304      	adds	r3, #4
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fe fc8f 	bl	8003e1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005502:	4b19      	ldr	r3, [pc, #100]	@ (8005568 <xTaskRemoveFromEventList+0xb4>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d903      	bls.n	8005512 <xTaskRemoveFromEventList+0x5e>
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550e:	4a16      	ldr	r2, [pc, #88]	@ (8005568 <xTaskRemoveFromEventList+0xb4>)
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005516:	4613      	mov	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4a13      	ldr	r2, [pc, #76]	@ (800556c <xTaskRemoveFromEventList+0xb8>)
 8005520:	441a      	add	r2, r3
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	3304      	adds	r3, #4
 8005526:	4619      	mov	r1, r3
 8005528:	4610      	mov	r0, r2
 800552a:	f7fe fc1a 	bl	8003d62 <vListInsertEnd>
 800552e:	e005      	b.n	800553c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	3318      	adds	r3, #24
 8005534:	4619      	mov	r1, r3
 8005536:	480e      	ldr	r0, [pc, #56]	@ (8005570 <xTaskRemoveFromEventList+0xbc>)
 8005538:	f7fe fc13 	bl	8003d62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005540:	4b0c      	ldr	r3, [pc, #48]	@ (8005574 <xTaskRemoveFromEventList+0xc0>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005546:	429a      	cmp	r2, r3
 8005548:	d905      	bls.n	8005556 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800554a:	2301      	movs	r3, #1
 800554c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800554e:	4b0a      	ldr	r3, [pc, #40]	@ (8005578 <xTaskRemoveFromEventList+0xc4>)
 8005550:	2201      	movs	r2, #1
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	e001      	b.n	800555a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800555a:	697b      	ldr	r3, [r7, #20]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20001200 	.word	0x20001200
 8005568:	200011e0 	.word	0x200011e0
 800556c:	20000d08 	.word	0x20000d08
 8005570:	20001198 	.word	0x20001198
 8005574:	20000d04 	.word	0x20000d04
 8005578:	200011ec 	.word	0x200011ec

0800557c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005584:	4b06      	ldr	r3, [pc, #24]	@ (80055a0 <vTaskInternalSetTimeOutState+0x24>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800558c:	4b05      	ldr	r3, [pc, #20]	@ (80055a4 <vTaskInternalSetTimeOutState+0x28>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	605a      	str	r2, [r3, #4]
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	200011f0 	.word	0x200011f0
 80055a4:	200011dc 	.word	0x200011dc

080055a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10b      	bne.n	80055d0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80055b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	613b      	str	r3, [r7, #16]
}
 80055ca:	bf00      	nop
 80055cc:	bf00      	nop
 80055ce:	e7fd      	b.n	80055cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10b      	bne.n	80055ee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	60fb      	str	r3, [r7, #12]
}
 80055e8:	bf00      	nop
 80055ea:	bf00      	nop
 80055ec:	e7fd      	b.n	80055ea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80055ee:	f000 ff93 	bl	8006518 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80055f2:	4b1d      	ldr	r3, [pc, #116]	@ (8005668 <xTaskCheckForTimeOut+0xc0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560a:	d102      	bne.n	8005612 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800560c:	2300      	movs	r3, #0
 800560e:	61fb      	str	r3, [r7, #28]
 8005610:	e023      	b.n	800565a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	4b15      	ldr	r3, [pc, #84]	@ (800566c <xTaskCheckForTimeOut+0xc4>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d007      	beq.n	800562e <xTaskCheckForTimeOut+0x86>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	429a      	cmp	r2, r3
 8005626:	d302      	bcc.n	800562e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005628:	2301      	movs	r3, #1
 800562a:	61fb      	str	r3, [r7, #28]
 800562c:	e015      	b.n	800565a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	429a      	cmp	r2, r3
 8005636:	d20b      	bcs.n	8005650 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	1ad2      	subs	r2, r2, r3
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff ff99 	bl	800557c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
 800564e:	e004      	b.n	800565a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005656:	2301      	movs	r3, #1
 8005658:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800565a:	f000 ff8f 	bl	800657c <vPortExitCritical>

	return xReturn;
 800565e:	69fb      	ldr	r3, [r7, #28]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3720      	adds	r7, #32
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	200011dc 	.word	0x200011dc
 800566c:	200011f0 	.word	0x200011f0

08005670 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005674:	4b03      	ldr	r3, [pc, #12]	@ (8005684 <vTaskMissedYield+0x14>)
 8005676:	2201      	movs	r2, #1
 8005678:	601a      	str	r2, [r3, #0]
}
 800567a:	bf00      	nop
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	200011ec 	.word	0x200011ec

08005688 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005690:	f000 f852 	bl	8005738 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005694:	4b06      	ldr	r3, [pc, #24]	@ (80056b0 <prvIdleTask+0x28>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d9f9      	bls.n	8005690 <prvIdleTask+0x8>
			{
				taskYIELD();
 800569c:	4b05      	ldr	r3, [pc, #20]	@ (80056b4 <prvIdleTask+0x2c>)
 800569e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056ac:	e7f0      	b.n	8005690 <prvIdleTask+0x8>
 80056ae:	bf00      	nop
 80056b0:	20000d08 	.word	0x20000d08
 80056b4:	e000ed04 	.word	0xe000ed04

080056b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056be:	2300      	movs	r3, #0
 80056c0:	607b      	str	r3, [r7, #4]
 80056c2:	e00c      	b.n	80056de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4a12      	ldr	r2, [pc, #72]	@ (8005718 <prvInitialiseTaskLists+0x60>)
 80056d0:	4413      	add	r3, r2
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fe fb18 	bl	8003d08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3301      	adds	r3, #1
 80056dc:	607b      	str	r3, [r7, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b37      	cmp	r3, #55	@ 0x37
 80056e2:	d9ef      	bls.n	80056c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056e4:	480d      	ldr	r0, [pc, #52]	@ (800571c <prvInitialiseTaskLists+0x64>)
 80056e6:	f7fe fb0f 	bl	8003d08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056ea:	480d      	ldr	r0, [pc, #52]	@ (8005720 <prvInitialiseTaskLists+0x68>)
 80056ec:	f7fe fb0c 	bl	8003d08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056f0:	480c      	ldr	r0, [pc, #48]	@ (8005724 <prvInitialiseTaskLists+0x6c>)
 80056f2:	f7fe fb09 	bl	8003d08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80056f6:	480c      	ldr	r0, [pc, #48]	@ (8005728 <prvInitialiseTaskLists+0x70>)
 80056f8:	f7fe fb06 	bl	8003d08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80056fc:	480b      	ldr	r0, [pc, #44]	@ (800572c <prvInitialiseTaskLists+0x74>)
 80056fe:	f7fe fb03 	bl	8003d08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005702:	4b0b      	ldr	r3, [pc, #44]	@ (8005730 <prvInitialiseTaskLists+0x78>)
 8005704:	4a05      	ldr	r2, [pc, #20]	@ (800571c <prvInitialiseTaskLists+0x64>)
 8005706:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005708:	4b0a      	ldr	r3, [pc, #40]	@ (8005734 <prvInitialiseTaskLists+0x7c>)
 800570a:	4a05      	ldr	r2, [pc, #20]	@ (8005720 <prvInitialiseTaskLists+0x68>)
 800570c:	601a      	str	r2, [r3, #0]
}
 800570e:	bf00      	nop
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20000d08 	.word	0x20000d08
 800571c:	20001168 	.word	0x20001168
 8005720:	2000117c 	.word	0x2000117c
 8005724:	20001198 	.word	0x20001198
 8005728:	200011ac 	.word	0x200011ac
 800572c:	200011c4 	.word	0x200011c4
 8005730:	20001190 	.word	0x20001190
 8005734:	20001194 	.word	0x20001194

08005738 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800573e:	e019      	b.n	8005774 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005740:	f000 feea 	bl	8006518 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005744:	4b10      	ldr	r3, [pc, #64]	@ (8005788 <prvCheckTasksWaitingTermination+0x50>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3304      	adds	r3, #4
 8005750:	4618      	mov	r0, r3
 8005752:	f7fe fb63 	bl	8003e1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005756:	4b0d      	ldr	r3, [pc, #52]	@ (800578c <prvCheckTasksWaitingTermination+0x54>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3b01      	subs	r3, #1
 800575c:	4a0b      	ldr	r2, [pc, #44]	@ (800578c <prvCheckTasksWaitingTermination+0x54>)
 800575e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005760:	4b0b      	ldr	r3, [pc, #44]	@ (8005790 <prvCheckTasksWaitingTermination+0x58>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3b01      	subs	r3, #1
 8005766:	4a0a      	ldr	r2, [pc, #40]	@ (8005790 <prvCheckTasksWaitingTermination+0x58>)
 8005768:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800576a:	f000 ff07 	bl	800657c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f810 	bl	8005794 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005774:	4b06      	ldr	r3, [pc, #24]	@ (8005790 <prvCheckTasksWaitingTermination+0x58>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1e1      	bne.n	8005740 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800577c:	bf00      	nop
 800577e:	bf00      	nop
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	200011ac 	.word	0x200011ac
 800578c:	200011d8 	.word	0x200011d8
 8005790:	200011c0 	.word	0x200011c0

08005794 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3354      	adds	r3, #84	@ 0x54
 80057a0:	4618      	mov	r0, r3
 80057a2:	f001 f9d1 	bl	8006b48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d108      	bne.n	80057c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b4:	4618      	mov	r0, r3
 80057b6:	f001 f89f 	bl	80068f8 <vPortFree>
				vPortFree( pxTCB );
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f001 f89c 	bl	80068f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057c0:	e019      	b.n	80057f6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d103      	bne.n	80057d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f001 f893 	bl	80068f8 <vPortFree>
	}
 80057d2:	e010      	b.n	80057f6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d00b      	beq.n	80057f6 <prvDeleteTCB+0x62>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	60fb      	str	r3, [r7, #12]
}
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	e7fd      	b.n	80057f2 <prvDeleteTCB+0x5e>
	}
 80057f6:	bf00      	nop
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005806:	4b0c      	ldr	r3, [pc, #48]	@ (8005838 <prvResetNextTaskUnblockTime+0x38>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d104      	bne.n	800581a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005810:	4b0a      	ldr	r3, [pc, #40]	@ (800583c <prvResetNextTaskUnblockTime+0x3c>)
 8005812:	f04f 32ff 	mov.w	r2, #4294967295
 8005816:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005818:	e008      	b.n	800582c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800581a:	4b07      	ldr	r3, [pc, #28]	@ (8005838 <prvResetNextTaskUnblockTime+0x38>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	4a04      	ldr	r2, [pc, #16]	@ (800583c <prvResetNextTaskUnblockTime+0x3c>)
 800582a:	6013      	str	r3, [r2, #0]
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	20001190 	.word	0x20001190
 800583c:	200011f8 	.word	0x200011f8

08005840 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005846:	4b0b      	ldr	r3, [pc, #44]	@ (8005874 <xTaskGetSchedulerState+0x34>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d102      	bne.n	8005854 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800584e:	2301      	movs	r3, #1
 8005850:	607b      	str	r3, [r7, #4]
 8005852:	e008      	b.n	8005866 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005854:	4b08      	ldr	r3, [pc, #32]	@ (8005878 <xTaskGetSchedulerState+0x38>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d102      	bne.n	8005862 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800585c:	2302      	movs	r3, #2
 800585e:	607b      	str	r3, [r7, #4]
 8005860:	e001      	b.n	8005866 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005862:	2300      	movs	r3, #0
 8005864:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005866:	687b      	ldr	r3, [r7, #4]
	}
 8005868:	4618      	mov	r0, r3
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	200011e4 	.word	0x200011e4
 8005878:	20001200 	.word	0x20001200

0800587c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005888:	2300      	movs	r3, #0
 800588a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d051      	beq.n	8005936 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005896:	4b2a      	ldr	r3, [pc, #168]	@ (8005940 <xTaskPriorityInherit+0xc4>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589c:	429a      	cmp	r2, r3
 800589e:	d241      	bcs.n	8005924 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	db06      	blt.n	80058b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058a8:	4b25      	ldr	r3, [pc, #148]	@ (8005940 <xTaskPriorityInherit+0xc4>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	6959      	ldr	r1, [r3, #20]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058be:	4613      	mov	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4a1f      	ldr	r2, [pc, #124]	@ (8005944 <xTaskPriorityInherit+0xc8>)
 80058c8:	4413      	add	r3, r2
 80058ca:	4299      	cmp	r1, r3
 80058cc:	d122      	bne.n	8005914 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	3304      	adds	r3, #4
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fe faa2 	bl	8003e1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80058d8:	4b19      	ldr	r3, [pc, #100]	@ (8005940 <xTaskPriorityInherit+0xc4>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e6:	4b18      	ldr	r3, [pc, #96]	@ (8005948 <xTaskPriorityInherit+0xcc>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d903      	bls.n	80058f6 <xTaskPriorityInherit+0x7a>
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f2:	4a15      	ldr	r2, [pc, #84]	@ (8005948 <xTaskPriorityInherit+0xcc>)
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058fa:	4613      	mov	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4a10      	ldr	r2, [pc, #64]	@ (8005944 <xTaskPriorityInherit+0xc8>)
 8005904:	441a      	add	r2, r3
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	3304      	adds	r3, #4
 800590a:	4619      	mov	r1, r3
 800590c:	4610      	mov	r0, r2
 800590e:	f7fe fa28 	bl	8003d62 <vListInsertEnd>
 8005912:	e004      	b.n	800591e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005914:	4b0a      	ldr	r3, [pc, #40]	@ (8005940 <xTaskPriorityInherit+0xc4>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800591e:	2301      	movs	r3, #1
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	e008      	b.n	8005936 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005928:	4b05      	ldr	r3, [pc, #20]	@ (8005940 <xTaskPriorityInherit+0xc4>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592e:	429a      	cmp	r2, r3
 8005930:	d201      	bcs.n	8005936 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005932:	2301      	movs	r3, #1
 8005934:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005936:	68fb      	ldr	r3, [r7, #12]
	}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	20000d04 	.word	0x20000d04
 8005944:	20000d08 	.word	0x20000d08
 8005948:	200011e0 	.word	0x200011e0

0800594c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005958:	2300      	movs	r3, #0
 800595a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d058      	beq.n	8005a14 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005962:	4b2f      	ldr	r3, [pc, #188]	@ (8005a20 <xTaskPriorityDisinherit+0xd4>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	429a      	cmp	r2, r3
 800596a:	d00b      	beq.n	8005984 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800596c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	60fb      	str	r3, [r7, #12]
}
 800597e:	bf00      	nop
 8005980:	bf00      	nop
 8005982:	e7fd      	b.n	8005980 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10b      	bne.n	80059a4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	60bb      	str	r3, [r7, #8]
}
 800599e:	bf00      	nop
 80059a0:	bf00      	nop
 80059a2:	e7fd      	b.n	80059a0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a8:	1e5a      	subs	r2, r3, #1
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d02c      	beq.n	8005a14 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d128      	bne.n	8005a14 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	3304      	adds	r3, #4
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fe fa28 	bl	8003e1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005a24 <xTaskPriorityDisinherit+0xd8>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d903      	bls.n	80059f4 <xTaskPriorityDisinherit+0xa8>
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f0:	4a0c      	ldr	r2, [pc, #48]	@ (8005a24 <xTaskPriorityDisinherit+0xd8>)
 80059f2:	6013      	str	r3, [r2, #0]
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4a09      	ldr	r2, [pc, #36]	@ (8005a28 <xTaskPriorityDisinherit+0xdc>)
 8005a02:	441a      	add	r2, r3
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	3304      	adds	r3, #4
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	f7fe f9a9 	bl	8003d62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a10:	2301      	movs	r3, #1
 8005a12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a14:	697b      	ldr	r3, [r7, #20]
	}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000d04 	.word	0x20000d04
 8005a24:	200011e0 	.word	0x200011e0
 8005a28:	20000d08 	.word	0x20000d08

08005a2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d06c      	beq.n	8005b1e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10b      	bne.n	8005a64 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	60fb      	str	r3, [r7, #12]
}
 8005a5e:	bf00      	nop
 8005a60:	bf00      	nop
 8005a62:	e7fd      	b.n	8005a60 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d902      	bls.n	8005a74 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	61fb      	str	r3, [r7, #28]
 8005a72:	e002      	b.n	8005a7a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a78:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d04c      	beq.n	8005b1e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d147      	bne.n	8005b1e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005a8e:	4b26      	ldr	r3, [pc, #152]	@ (8005b28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d10b      	bne.n	8005ab0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	60bb      	str	r3, [r7, #8]
}
 8005aaa:	bf00      	nop
 8005aac:	bf00      	nop
 8005aae:	e7fd      	b.n	8005aac <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	db04      	blt.n	8005ace <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	6959      	ldr	r1, [r3, #20]
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4a13      	ldr	r2, [pc, #76]	@ (8005b2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005ade:	4413      	add	r3, r2
 8005ae0:	4299      	cmp	r1, r3
 8005ae2:	d11c      	bne.n	8005b1e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7fe f997 	bl	8003e1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005af2:	4b0f      	ldr	r3, [pc, #60]	@ (8005b30 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d903      	bls.n	8005b02 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afe:	4a0c      	ldr	r2, [pc, #48]	@ (8005b30 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005b00:	6013      	str	r3, [r2, #0]
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4a07      	ldr	r2, [pc, #28]	@ (8005b2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005b10:	441a      	add	r2, r3
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	3304      	adds	r3, #4
 8005b16:	4619      	mov	r1, r3
 8005b18:	4610      	mov	r0, r2
 8005b1a:	f7fe f922 	bl	8003d62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b1e:	bf00      	nop
 8005b20:	3720      	adds	r7, #32
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	20000d04 	.word	0x20000d04
 8005b2c:	20000d08 	.word	0x20000d08
 8005b30:	200011e0 	.word	0x200011e0

08005b34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005b38:	4b07      	ldr	r3, [pc, #28]	@ (8005b58 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d004      	beq.n	8005b4a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005b40:	4b05      	ldr	r3, [pc, #20]	@ (8005b58 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b46:	3201      	adds	r2, #1
 8005b48:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005b4a:	4b03      	ldr	r3, [pc, #12]	@ (8005b58 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
	}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	20000d04 	.word	0x20000d04

08005b5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b66:	4b21      	ldr	r3, [pc, #132]	@ (8005bec <prvAddCurrentTaskToDelayedList+0x90>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b6c:	4b20      	ldr	r3, [pc, #128]	@ (8005bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3304      	adds	r3, #4
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fe f952 	bl	8003e1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7e:	d10a      	bne.n	8005b96 <prvAddCurrentTaskToDelayedList+0x3a>
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d007      	beq.n	8005b96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b86:	4b1a      	ldr	r3, [pc, #104]	@ (8005bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4819      	ldr	r0, [pc, #100]	@ (8005bf4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b90:	f7fe f8e7 	bl	8003d62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b94:	e026      	b.n	8005be4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b9e:	4b14      	ldr	r3, [pc, #80]	@ (8005bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d209      	bcs.n	8005bc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bae:	4b12      	ldr	r3, [pc, #72]	@ (8005bf8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8005bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4610      	mov	r0, r2
 8005bbc:	f7fe f8f5 	bl	8003daa <vListInsert>
}
 8005bc0:	e010      	b.n	8005be4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8005bfc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4610      	mov	r0, r2
 8005bd0:	f7fe f8eb 	bl	8003daa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8005c00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d202      	bcs.n	8005be4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005bde:	4a08      	ldr	r2, [pc, #32]	@ (8005c00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	6013      	str	r3, [r2, #0]
}
 8005be4:	bf00      	nop
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	200011dc 	.word	0x200011dc
 8005bf0:	20000d04 	.word	0x20000d04
 8005bf4:	200011c4 	.word	0x200011c4
 8005bf8:	20001194 	.word	0x20001194
 8005bfc:	20001190 	.word	0x20001190
 8005c00:	200011f8 	.word	0x200011f8

08005c04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08a      	sub	sp, #40	@ 0x28
 8005c08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c0e:	f000 fb13 	bl	8006238 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c12:	4b1d      	ldr	r3, [pc, #116]	@ (8005c88 <xTimerCreateTimerTask+0x84>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d021      	beq.n	8005c5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c22:	1d3a      	adds	r2, r7, #4
 8005c24:	f107 0108 	add.w	r1, r7, #8
 8005c28:	f107 030c 	add.w	r3, r7, #12
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fe f851 	bl	8003cd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c32:	6879      	ldr	r1, [r7, #4]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	9202      	str	r2, [sp, #8]
 8005c3a:	9301      	str	r3, [sp, #4]
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	2300      	movs	r3, #0
 8005c42:	460a      	mov	r2, r1
 8005c44:	4911      	ldr	r1, [pc, #68]	@ (8005c8c <xTimerCreateTimerTask+0x88>)
 8005c46:	4812      	ldr	r0, [pc, #72]	@ (8005c90 <xTimerCreateTimerTask+0x8c>)
 8005c48:	f7fe ffa2 	bl	8004b90 <xTaskCreateStatic>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	4a11      	ldr	r2, [pc, #68]	@ (8005c94 <xTimerCreateTimerTask+0x90>)
 8005c50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c52:	4b10      	ldr	r3, [pc, #64]	@ (8005c94 <xTimerCreateTimerTask+0x90>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10b      	bne.n	8005c7c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	613b      	str	r3, [r7, #16]
}
 8005c76:	bf00      	nop
 8005c78:	bf00      	nop
 8005c7a:	e7fd      	b.n	8005c78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c7c:	697b      	ldr	r3, [r7, #20]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20001234 	.word	0x20001234
 8005c8c:	08006d80 	.word	0x08006d80
 8005c90:	08005dd1 	.word	0x08005dd1
 8005c94:	20001238 	.word	0x20001238

08005c98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	@ 0x28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10b      	bne.n	8005cc8 <xTimerGenericCommand+0x30>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	623b      	str	r3, [r7, #32]
}
 8005cc2:	bf00      	nop
 8005cc4:	bf00      	nop
 8005cc6:	e7fd      	b.n	8005cc4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005cc8:	4b19      	ldr	r3, [pc, #100]	@ (8005d30 <xTimerGenericCommand+0x98>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d02a      	beq.n	8005d26 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2b05      	cmp	r3, #5
 8005ce0:	dc18      	bgt.n	8005d14 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ce2:	f7ff fdad 	bl	8005840 <xTaskGetSchedulerState>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d109      	bne.n	8005d00 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005cec:	4b10      	ldr	r3, [pc, #64]	@ (8005d30 <xTimerGenericCommand+0x98>)
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	f107 0110 	add.w	r1, r7, #16
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cf8:	f7fe fa32 	bl	8004160 <xQueueGenericSend>
 8005cfc:	6278      	str	r0, [r7, #36]	@ 0x24
 8005cfe:	e012      	b.n	8005d26 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d00:	4b0b      	ldr	r3, [pc, #44]	@ (8005d30 <xTimerGenericCommand+0x98>)
 8005d02:	6818      	ldr	r0, [r3, #0]
 8005d04:	f107 0110 	add.w	r1, r7, #16
 8005d08:	2300      	movs	r3, #0
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f7fe fa28 	bl	8004160 <xQueueGenericSend>
 8005d10:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d12:	e008      	b.n	8005d26 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d14:	4b06      	ldr	r3, [pc, #24]	@ (8005d30 <xTimerGenericCommand+0x98>)
 8005d16:	6818      	ldr	r0, [r3, #0]
 8005d18:	f107 0110 	add.w	r1, r7, #16
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	f7fe fb20 	bl	8004364 <xQueueGenericSendFromISR>
 8005d24:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3728      	adds	r7, #40	@ 0x28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	20001234 	.word	0x20001234

08005d34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af02      	add	r7, sp, #8
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d3e:	4b23      	ldr	r3, [pc, #140]	@ (8005dcc <prvProcessExpiredTimer+0x98>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fe f865 	bl	8003e1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d023      	beq.n	8005da8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	699a      	ldr	r2, [r3, #24]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	18d1      	adds	r1, r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	6978      	ldr	r0, [r7, #20]
 8005d6e:	f000 f8d5 	bl	8005f1c <prvInsertTimerInActiveList>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d020      	beq.n	8005dba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d78:	2300      	movs	r3, #0
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	2100      	movs	r1, #0
 8005d82:	6978      	ldr	r0, [r7, #20]
 8005d84:	f7ff ff88 	bl	8005c98 <xTimerGenericCommand>
 8005d88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d114      	bne.n	8005dba <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	60fb      	str	r3, [r7, #12]
}
 8005da2:	bf00      	nop
 8005da4:	bf00      	nop
 8005da6:	e7fd      	b.n	8005da4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005dae:	f023 0301 	bic.w	r3, r3, #1
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	6978      	ldr	r0, [r7, #20]
 8005dc0:	4798      	blx	r3
}
 8005dc2:	bf00      	nop
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	2000122c 	.word	0x2000122c

08005dd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005dd8:	f107 0308 	add.w	r3, r7, #8
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 f859 	bl	8005e94 <prvGetNextExpireTime>
 8005de2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	4619      	mov	r1, r3
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 f805 	bl	8005df8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005dee:	f000 f8d7 	bl	8005fa0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005df2:	bf00      	nop
 8005df4:	e7f0      	b.n	8005dd8 <prvTimerTask+0x8>
	...

08005df8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e02:	f7ff f929 	bl	8005058 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e06:	f107 0308 	add.w	r3, r7, #8
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 f866 	bl	8005edc <prvSampleTimeNow>
 8005e10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d130      	bne.n	8005e7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10a      	bne.n	8005e34 <prvProcessTimerOrBlockTask+0x3c>
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d806      	bhi.n	8005e34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e26:	f7ff f925 	bl	8005074 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e2a:	68f9      	ldr	r1, [r7, #12]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7ff ff81 	bl	8005d34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e32:	e024      	b.n	8005e7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d008      	beq.n	8005e4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e3a:	4b13      	ldr	r3, [pc, #76]	@ (8005e88 <prvProcessTimerOrBlockTask+0x90>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <prvProcessTimerOrBlockTask+0x50>
 8005e44:	2301      	movs	r3, #1
 8005e46:	e000      	b.n	8005e4a <prvProcessTimerOrBlockTask+0x52>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e8c <prvProcessTimerOrBlockTask+0x94>)
 8005e4e:	6818      	ldr	r0, [r3, #0]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	4619      	mov	r1, r3
 8005e5a:	f7fe fe65 	bl	8004b28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e5e:	f7ff f909 	bl	8005074 <xTaskResumeAll>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e68:	4b09      	ldr	r3, [pc, #36]	@ (8005e90 <prvProcessTimerOrBlockTask+0x98>)
 8005e6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	f3bf 8f6f 	isb	sy
}
 8005e78:	e001      	b.n	8005e7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e7a:	f7ff f8fb 	bl	8005074 <xTaskResumeAll>
}
 8005e7e:	bf00      	nop
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20001230 	.word	0x20001230
 8005e8c:	20001234 	.word	0x20001234
 8005e90:	e000ed04 	.word	0xe000ed04

08005e94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed8 <prvGetNextExpireTime+0x44>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <prvGetNextExpireTime+0x16>
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	e000      	b.n	8005eac <prvGetNextExpireTime+0x18>
 8005eaa:	2200      	movs	r2, #0
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d105      	bne.n	8005ec4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005eb8:	4b07      	ldr	r3, [pc, #28]	@ (8005ed8 <prvGetNextExpireTime+0x44>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	e001      	b.n	8005ec8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	2000122c 	.word	0x2000122c

08005edc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ee4:	f7ff f964 	bl	80051b0 <xTaskGetTickCount>
 8005ee8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005eea:	4b0b      	ldr	r3, [pc, #44]	@ (8005f18 <prvSampleTimeNow+0x3c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d205      	bcs.n	8005f00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ef4:	f000 f93a 	bl	800616c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	e002      	b.n	8005f06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f06:	4a04      	ldr	r2, [pc, #16]	@ (8005f18 <prvSampleTimeNow+0x3c>)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	2000123c 	.word	0x2000123c

08005f1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
 8005f28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d812      	bhi.n	8005f68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	1ad2      	subs	r2, r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d302      	bcc.n	8005f56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f50:	2301      	movs	r3, #1
 8005f52:	617b      	str	r3, [r7, #20]
 8005f54:	e01b      	b.n	8005f8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f56:	4b10      	ldr	r3, [pc, #64]	@ (8005f98 <prvInsertTimerInActiveList+0x7c>)
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	4619      	mov	r1, r3
 8005f60:	4610      	mov	r0, r2
 8005f62:	f7fd ff22 	bl	8003daa <vListInsert>
 8005f66:	e012      	b.n	8005f8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d206      	bcs.n	8005f7e <prvInsertTimerInActiveList+0x62>
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d302      	bcc.n	8005f7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	e007      	b.n	8005f8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f7e:	4b07      	ldr	r3, [pc, #28]	@ (8005f9c <prvInsertTimerInActiveList+0x80>)
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3304      	adds	r3, #4
 8005f86:	4619      	mov	r1, r3
 8005f88:	4610      	mov	r0, r2
 8005f8a:	f7fd ff0e 	bl	8003daa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f8e:	697b      	ldr	r3, [r7, #20]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	20001230 	.word	0x20001230
 8005f9c:	2000122c 	.word	0x2000122c

08005fa0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08e      	sub	sp, #56	@ 0x38
 8005fa4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fa6:	e0ce      	b.n	8006146 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	da19      	bge.n	8005fe2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005fae:	1d3b      	adds	r3, r7, #4
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10b      	bne.n	8005fd2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	61fb      	str	r3, [r7, #28]
}
 8005fcc:	bf00      	nop
 8005fce:	bf00      	nop
 8005fd0:	e7fd      	b.n	8005fce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fd8:	6850      	ldr	r0, [r2, #4]
 8005fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fdc:	6892      	ldr	r2, [r2, #8]
 8005fde:	4611      	mov	r1, r2
 8005fe0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f2c0 80ae 	blt.w	8006146 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d004      	beq.n	8006000 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fd ff0e 	bl	8003e1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006000:	463b      	mov	r3, r7
 8006002:	4618      	mov	r0, r3
 8006004:	f7ff ff6a 	bl	8005edc <prvSampleTimeNow>
 8006008:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b09      	cmp	r3, #9
 800600e:	f200 8097 	bhi.w	8006140 <prvProcessReceivedCommands+0x1a0>
 8006012:	a201      	add	r2, pc, #4	@ (adr r2, 8006018 <prvProcessReceivedCommands+0x78>)
 8006014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006018:	08006041 	.word	0x08006041
 800601c:	08006041 	.word	0x08006041
 8006020:	08006041 	.word	0x08006041
 8006024:	080060b7 	.word	0x080060b7
 8006028:	080060cb 	.word	0x080060cb
 800602c:	08006117 	.word	0x08006117
 8006030:	08006041 	.word	0x08006041
 8006034:	08006041 	.word	0x08006041
 8006038:	080060b7 	.word	0x080060b7
 800603c:	080060cb 	.word	0x080060cb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006042:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006046:	f043 0301 	orr.w	r3, r3, #1
 800604a:	b2da      	uxtb	r2, r3
 800604c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	18d1      	adds	r1, r2, r3
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800605e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006060:	f7ff ff5c 	bl	8005f1c <prvInsertTimerInActiveList>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d06c      	beq.n	8006144 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800606a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006070:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006074:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	d061      	beq.n	8006144 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	441a      	add	r2, r3
 8006088:	2300      	movs	r3, #0
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	2300      	movs	r3, #0
 800608e:	2100      	movs	r1, #0
 8006090:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006092:	f7ff fe01 	bl	8005c98 <xTimerGenericCommand>
 8006096:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d152      	bne.n	8006144 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	61bb      	str	r3, [r7, #24]
}
 80060b0:	bf00      	nop
 80060b2:	bf00      	nop
 80060b4:	e7fd      	b.n	80060b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060bc:	f023 0301 	bic.w	r3, r3, #1
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80060c8:	e03d      	b.n	8006146 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060d0:	f043 0301 	orr.w	r3, r3, #1
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80060e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10b      	bne.n	8006102 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	617b      	str	r3, [r7, #20]
}
 80060fc:	bf00      	nop
 80060fe:	bf00      	nop
 8006100:	e7fd      	b.n	80060fe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	18d1      	adds	r1, r2, r3
 800610a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800610e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006110:	f7ff ff04 	bl	8005f1c <prvInsertTimerInActiveList>
					break;
 8006114:	e017      	b.n	8006146 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006118:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b00      	cmp	r3, #0
 8006122:	d103      	bne.n	800612c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006124:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006126:	f000 fbe7 	bl	80068f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800612a:	e00c      	b.n	8006146 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800612c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006132:	f023 0301 	bic.w	r3, r3, #1
 8006136:	b2da      	uxtb	r2, r3
 8006138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800613e:	e002      	b.n	8006146 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006140:	bf00      	nop
 8006142:	e000      	b.n	8006146 <prvProcessReceivedCommands+0x1a6>
					break;
 8006144:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006146:	4b08      	ldr	r3, [pc, #32]	@ (8006168 <prvProcessReceivedCommands+0x1c8>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	1d39      	adds	r1, r7, #4
 800614c:	2200      	movs	r2, #0
 800614e:	4618      	mov	r0, r3
 8006150:	f7fe f9a6 	bl	80044a0 <xQueueReceive>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	f47f af26 	bne.w	8005fa8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800615c:	bf00      	nop
 800615e:	bf00      	nop
 8006160:	3730      	adds	r7, #48	@ 0x30
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20001234 	.word	0x20001234

0800616c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006172:	e049      	b.n	8006208 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006174:	4b2e      	ldr	r3, [pc, #184]	@ (8006230 <prvSwitchTimerLists+0xc4>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800617e:	4b2c      	ldr	r3, [pc, #176]	@ (8006230 <prvSwitchTimerLists+0xc4>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3304      	adds	r3, #4
 800618c:	4618      	mov	r0, r3
 800618e:	f7fd fe45 	bl	8003e1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d02f      	beq.n	8006208 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	4413      	add	r3, r2
 80061b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d90e      	bls.n	80061d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006230 <prvSwitchTimerLists+0xc4>)
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3304      	adds	r3, #4
 80061ce:	4619      	mov	r1, r3
 80061d0:	4610      	mov	r0, r2
 80061d2:	f7fd fdea 	bl	8003daa <vListInsert>
 80061d6:	e017      	b.n	8006208 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061d8:	2300      	movs	r3, #0
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	2300      	movs	r3, #0
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	2100      	movs	r1, #0
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f7ff fd58 	bl	8005c98 <xTimerGenericCommand>
 80061e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10b      	bne.n	8006208 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	603b      	str	r3, [r7, #0]
}
 8006202:	bf00      	nop
 8006204:	bf00      	nop
 8006206:	e7fd      	b.n	8006204 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006208:	4b09      	ldr	r3, [pc, #36]	@ (8006230 <prvSwitchTimerLists+0xc4>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1b0      	bne.n	8006174 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006212:	4b07      	ldr	r3, [pc, #28]	@ (8006230 <prvSwitchTimerLists+0xc4>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006218:	4b06      	ldr	r3, [pc, #24]	@ (8006234 <prvSwitchTimerLists+0xc8>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a04      	ldr	r2, [pc, #16]	@ (8006230 <prvSwitchTimerLists+0xc4>)
 800621e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006220:	4a04      	ldr	r2, [pc, #16]	@ (8006234 <prvSwitchTimerLists+0xc8>)
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	6013      	str	r3, [r2, #0]
}
 8006226:	bf00      	nop
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	2000122c 	.word	0x2000122c
 8006234:	20001230 	.word	0x20001230

08006238 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800623e:	f000 f96b 	bl	8006518 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006242:	4b15      	ldr	r3, [pc, #84]	@ (8006298 <prvCheckForValidListAndQueue+0x60>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d120      	bne.n	800628c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800624a:	4814      	ldr	r0, [pc, #80]	@ (800629c <prvCheckForValidListAndQueue+0x64>)
 800624c:	f7fd fd5c 	bl	8003d08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006250:	4813      	ldr	r0, [pc, #76]	@ (80062a0 <prvCheckForValidListAndQueue+0x68>)
 8006252:	f7fd fd59 	bl	8003d08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006256:	4b13      	ldr	r3, [pc, #76]	@ (80062a4 <prvCheckForValidListAndQueue+0x6c>)
 8006258:	4a10      	ldr	r2, [pc, #64]	@ (800629c <prvCheckForValidListAndQueue+0x64>)
 800625a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800625c:	4b12      	ldr	r3, [pc, #72]	@ (80062a8 <prvCheckForValidListAndQueue+0x70>)
 800625e:	4a10      	ldr	r2, [pc, #64]	@ (80062a0 <prvCheckForValidListAndQueue+0x68>)
 8006260:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006262:	2300      	movs	r3, #0
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	4b11      	ldr	r3, [pc, #68]	@ (80062ac <prvCheckForValidListAndQueue+0x74>)
 8006268:	4a11      	ldr	r2, [pc, #68]	@ (80062b0 <prvCheckForValidListAndQueue+0x78>)
 800626a:	2110      	movs	r1, #16
 800626c:	200a      	movs	r0, #10
 800626e:	f7fd fe69 	bl	8003f44 <xQueueGenericCreateStatic>
 8006272:	4603      	mov	r3, r0
 8006274:	4a08      	ldr	r2, [pc, #32]	@ (8006298 <prvCheckForValidListAndQueue+0x60>)
 8006276:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006278:	4b07      	ldr	r3, [pc, #28]	@ (8006298 <prvCheckForValidListAndQueue+0x60>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d005      	beq.n	800628c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006280:	4b05      	ldr	r3, [pc, #20]	@ (8006298 <prvCheckForValidListAndQueue+0x60>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	490b      	ldr	r1, [pc, #44]	@ (80062b4 <prvCheckForValidListAndQueue+0x7c>)
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe fc24 	bl	8004ad4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800628c:	f000 f976 	bl	800657c <vPortExitCritical>
}
 8006290:	bf00      	nop
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	20001234 	.word	0x20001234
 800629c:	20001204 	.word	0x20001204
 80062a0:	20001218 	.word	0x20001218
 80062a4:	2000122c 	.word	0x2000122c
 80062a8:	20001230 	.word	0x20001230
 80062ac:	200012e0 	.word	0x200012e0
 80062b0:	20001240 	.word	0x20001240
 80062b4:	08006d88 	.word	0x08006d88

080062b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	3b04      	subs	r3, #4
 80062c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80062d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3b04      	subs	r3, #4
 80062d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	f023 0201 	bic.w	r2, r3, #1
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3b04      	subs	r3, #4
 80062e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062e8:	4a0c      	ldr	r2, [pc, #48]	@ (800631c <pxPortInitialiseStack+0x64>)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3b14      	subs	r3, #20
 80062f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3b04      	subs	r3, #4
 80062fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f06f 0202 	mvn.w	r2, #2
 8006306:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	3b20      	subs	r3, #32
 800630c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800630e:	68fb      	ldr	r3, [r7, #12]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	08006321 	.word	0x08006321

08006320 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006326:	2300      	movs	r3, #0
 8006328:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800632a:	4b13      	ldr	r3, [pc, #76]	@ (8006378 <prvTaskExitError+0x58>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006332:	d00b      	beq.n	800634c <prvTaskExitError+0x2c>
	__asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	60fb      	str	r3, [r7, #12]
}
 8006346:	bf00      	nop
 8006348:	bf00      	nop
 800634a:	e7fd      	b.n	8006348 <prvTaskExitError+0x28>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	60bb      	str	r3, [r7, #8]
}
 800635e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006360:	bf00      	nop
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0fc      	beq.n	8006362 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006368:	bf00      	nop
 800636a:	bf00      	nop
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	20000028 	.word	0x20000028
 800637c:	00000000 	.word	0x00000000

08006380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006380:	4b07      	ldr	r3, [pc, #28]	@ (80063a0 <pxCurrentTCBConst2>)
 8006382:	6819      	ldr	r1, [r3, #0]
 8006384:	6808      	ldr	r0, [r1, #0]
 8006386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800638a:	f380 8809 	msr	PSP, r0
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f04f 0000 	mov.w	r0, #0
 8006396:	f380 8811 	msr	BASEPRI, r0
 800639a:	4770      	bx	lr
 800639c:	f3af 8000 	nop.w

080063a0 <pxCurrentTCBConst2>:
 80063a0:	20000d04 	.word	0x20000d04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop

080063a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80063a8:	4808      	ldr	r0, [pc, #32]	@ (80063cc <prvPortStartFirstTask+0x24>)
 80063aa:	6800      	ldr	r0, [r0, #0]
 80063ac:	6800      	ldr	r0, [r0, #0]
 80063ae:	f380 8808 	msr	MSP, r0
 80063b2:	f04f 0000 	mov.w	r0, #0
 80063b6:	f380 8814 	msr	CONTROL, r0
 80063ba:	b662      	cpsie	i
 80063bc:	b661      	cpsie	f
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	df00      	svc	0
 80063c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063ca:	bf00      	nop
 80063cc:	e000ed08 	.word	0xe000ed08

080063d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80063d6:	4b47      	ldr	r3, [pc, #284]	@ (80064f4 <xPortStartScheduler+0x124>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a47      	ldr	r2, [pc, #284]	@ (80064f8 <xPortStartScheduler+0x128>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d10b      	bne.n	80063f8 <xPortStartScheduler+0x28>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	613b      	str	r3, [r7, #16]
}
 80063f2:	bf00      	nop
 80063f4:	bf00      	nop
 80063f6:	e7fd      	b.n	80063f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063f8:	4b3e      	ldr	r3, [pc, #248]	@ (80064f4 <xPortStartScheduler+0x124>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a3f      	ldr	r2, [pc, #252]	@ (80064fc <xPortStartScheduler+0x12c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d10b      	bne.n	800641a <xPortStartScheduler+0x4a>
	__asm volatile
 8006402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	60fb      	str	r3, [r7, #12]
}
 8006414:	bf00      	nop
 8006416:	bf00      	nop
 8006418:	e7fd      	b.n	8006416 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800641a:	4b39      	ldr	r3, [pc, #228]	@ (8006500 <xPortStartScheduler+0x130>)
 800641c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	b2db      	uxtb	r3, r3
 8006424:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	22ff      	movs	r2, #255	@ 0xff
 800642a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	b2db      	uxtb	r3, r3
 8006432:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	b2db      	uxtb	r3, r3
 8006438:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800643c:	b2da      	uxtb	r2, r3
 800643e:	4b31      	ldr	r3, [pc, #196]	@ (8006504 <xPortStartScheduler+0x134>)
 8006440:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006442:	4b31      	ldr	r3, [pc, #196]	@ (8006508 <xPortStartScheduler+0x138>)
 8006444:	2207      	movs	r2, #7
 8006446:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006448:	e009      	b.n	800645e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800644a:	4b2f      	ldr	r3, [pc, #188]	@ (8006508 <xPortStartScheduler+0x138>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3b01      	subs	r3, #1
 8006450:	4a2d      	ldr	r2, [pc, #180]	@ (8006508 <xPortStartScheduler+0x138>)
 8006452:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006454:	78fb      	ldrb	r3, [r7, #3]
 8006456:	b2db      	uxtb	r3, r3
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	b2db      	uxtb	r3, r3
 800645c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800645e:	78fb      	ldrb	r3, [r7, #3]
 8006460:	b2db      	uxtb	r3, r3
 8006462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006466:	2b80      	cmp	r3, #128	@ 0x80
 8006468:	d0ef      	beq.n	800644a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800646a:	4b27      	ldr	r3, [pc, #156]	@ (8006508 <xPortStartScheduler+0x138>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f1c3 0307 	rsb	r3, r3, #7
 8006472:	2b04      	cmp	r3, #4
 8006474:	d00b      	beq.n	800648e <xPortStartScheduler+0xbe>
	__asm volatile
 8006476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	60bb      	str	r3, [r7, #8]
}
 8006488:	bf00      	nop
 800648a:	bf00      	nop
 800648c:	e7fd      	b.n	800648a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800648e:	4b1e      	ldr	r3, [pc, #120]	@ (8006508 <xPortStartScheduler+0x138>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	021b      	lsls	r3, r3, #8
 8006494:	4a1c      	ldr	r2, [pc, #112]	@ (8006508 <xPortStartScheduler+0x138>)
 8006496:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006498:	4b1b      	ldr	r3, [pc, #108]	@ (8006508 <xPortStartScheduler+0x138>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80064a0:	4a19      	ldr	r2, [pc, #100]	@ (8006508 <xPortStartScheduler+0x138>)
 80064a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80064ac:	4b17      	ldr	r3, [pc, #92]	@ (800650c <xPortStartScheduler+0x13c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a16      	ldr	r2, [pc, #88]	@ (800650c <xPortStartScheduler+0x13c>)
 80064b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80064b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80064b8:	4b14      	ldr	r3, [pc, #80]	@ (800650c <xPortStartScheduler+0x13c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a13      	ldr	r2, [pc, #76]	@ (800650c <xPortStartScheduler+0x13c>)
 80064be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80064c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80064c4:	f000 f8da 	bl	800667c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80064c8:	4b11      	ldr	r3, [pc, #68]	@ (8006510 <xPortStartScheduler+0x140>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80064ce:	f000 f8f9 	bl	80066c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80064d2:	4b10      	ldr	r3, [pc, #64]	@ (8006514 <xPortStartScheduler+0x144>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a0f      	ldr	r2, [pc, #60]	@ (8006514 <xPortStartScheduler+0x144>)
 80064d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80064dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80064de:	f7ff ff63 	bl	80063a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80064e2:	f7fe ff2f 	bl	8005344 <vTaskSwitchContext>
	prvTaskExitError();
 80064e6:	f7ff ff1b 	bl	8006320 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	e000ed00 	.word	0xe000ed00
 80064f8:	410fc271 	.word	0x410fc271
 80064fc:	410fc270 	.word	0x410fc270
 8006500:	e000e400 	.word	0xe000e400
 8006504:	20001330 	.word	0x20001330
 8006508:	20001334 	.word	0x20001334
 800650c:	e000ed20 	.word	0xe000ed20
 8006510:	20000028 	.word	0x20000028
 8006514:	e000ef34 	.word	0xe000ef34

08006518 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	607b      	str	r3, [r7, #4]
}
 8006530:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006532:	4b10      	ldr	r3, [pc, #64]	@ (8006574 <vPortEnterCritical+0x5c>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3301      	adds	r3, #1
 8006538:	4a0e      	ldr	r2, [pc, #56]	@ (8006574 <vPortEnterCritical+0x5c>)
 800653a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800653c:	4b0d      	ldr	r3, [pc, #52]	@ (8006574 <vPortEnterCritical+0x5c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d110      	bne.n	8006566 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006544:	4b0c      	ldr	r3, [pc, #48]	@ (8006578 <vPortEnterCritical+0x60>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00b      	beq.n	8006566 <vPortEnterCritical+0x4e>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	603b      	str	r3, [r7, #0]
}
 8006560:	bf00      	nop
 8006562:	bf00      	nop
 8006564:	e7fd      	b.n	8006562 <vPortEnterCritical+0x4a>
	}
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	20000028 	.word	0x20000028
 8006578:	e000ed04 	.word	0xe000ed04

0800657c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006582:	4b12      	ldr	r3, [pc, #72]	@ (80065cc <vPortExitCritical+0x50>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10b      	bne.n	80065a2 <vPortExitCritical+0x26>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	607b      	str	r3, [r7, #4]
}
 800659c:	bf00      	nop
 800659e:	bf00      	nop
 80065a0:	e7fd      	b.n	800659e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80065a2:	4b0a      	ldr	r3, [pc, #40]	@ (80065cc <vPortExitCritical+0x50>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	4a08      	ldr	r2, [pc, #32]	@ (80065cc <vPortExitCritical+0x50>)
 80065aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80065ac:	4b07      	ldr	r3, [pc, #28]	@ (80065cc <vPortExitCritical+0x50>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d105      	bne.n	80065c0 <vPortExitCritical+0x44>
 80065b4:	2300      	movs	r3, #0
 80065b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	f383 8811 	msr	BASEPRI, r3
}
 80065be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	20000028 	.word	0x20000028

080065d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065d0:	f3ef 8009 	mrs	r0, PSP
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	4b15      	ldr	r3, [pc, #84]	@ (8006630 <pxCurrentTCBConst>)
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	f01e 0f10 	tst.w	lr, #16
 80065e0:	bf08      	it	eq
 80065e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ea:	6010      	str	r0, [r2, #0]
 80065ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80065f4:	f380 8811 	msr	BASEPRI, r0
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f7fe fea0 	bl	8005344 <vTaskSwitchContext>
 8006604:	f04f 0000 	mov.w	r0, #0
 8006608:	f380 8811 	msr	BASEPRI, r0
 800660c:	bc09      	pop	{r0, r3}
 800660e:	6819      	ldr	r1, [r3, #0]
 8006610:	6808      	ldr	r0, [r1, #0]
 8006612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006616:	f01e 0f10 	tst.w	lr, #16
 800661a:	bf08      	it	eq
 800661c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006620:	f380 8809 	msr	PSP, r0
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	f3af 8000 	nop.w

08006630 <pxCurrentTCBConst>:
 8006630:	20000d04 	.word	0x20000d04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop

08006638 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
	__asm volatile
 800663e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	607b      	str	r3, [r7, #4]
}
 8006650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006652:	f7fe fdbd 	bl	80051d0 <xTaskIncrementTick>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800665c:	4b06      	ldr	r3, [pc, #24]	@ (8006678 <xPortSysTickHandler+0x40>)
 800665e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	2300      	movs	r3, #0
 8006666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	f383 8811 	msr	BASEPRI, r3
}
 800666e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	e000ed04 	.word	0xe000ed04

0800667c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006680:	4b0b      	ldr	r3, [pc, #44]	@ (80066b0 <vPortSetupTimerInterrupt+0x34>)
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006686:	4b0b      	ldr	r3, [pc, #44]	@ (80066b4 <vPortSetupTimerInterrupt+0x38>)
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800668c:	4b0a      	ldr	r3, [pc, #40]	@ (80066b8 <vPortSetupTimerInterrupt+0x3c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a0a      	ldr	r2, [pc, #40]	@ (80066bc <vPortSetupTimerInterrupt+0x40>)
 8006692:	fba2 2303 	umull	r2, r3, r2, r3
 8006696:	099b      	lsrs	r3, r3, #6
 8006698:	4a09      	ldr	r2, [pc, #36]	@ (80066c0 <vPortSetupTimerInterrupt+0x44>)
 800669a:	3b01      	subs	r3, #1
 800669c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800669e:	4b04      	ldr	r3, [pc, #16]	@ (80066b0 <vPortSetupTimerInterrupt+0x34>)
 80066a0:	2207      	movs	r2, #7
 80066a2:	601a      	str	r2, [r3, #0]
}
 80066a4:	bf00      	nop
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	e000e010 	.word	0xe000e010
 80066b4:	e000e018 	.word	0xe000e018
 80066b8:	2000001c 	.word	0x2000001c
 80066bc:	10624dd3 	.word	0x10624dd3
 80066c0:	e000e014 	.word	0xe000e014

080066c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80066c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80066d4 <vPortEnableVFP+0x10>
 80066c8:	6801      	ldr	r1, [r0, #0]
 80066ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80066ce:	6001      	str	r1, [r0, #0]
 80066d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80066d2:	bf00      	nop
 80066d4:	e000ed88 	.word	0xe000ed88

080066d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80066de:	f3ef 8305 	mrs	r3, IPSR
 80066e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b0f      	cmp	r3, #15
 80066e8:	d915      	bls.n	8006716 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80066ea:	4a18      	ldr	r2, [pc, #96]	@ (800674c <vPortValidateInterruptPriority+0x74>)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4413      	add	r3, r2
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066f4:	4b16      	ldr	r3, [pc, #88]	@ (8006750 <vPortValidateInterruptPriority+0x78>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	7afa      	ldrb	r2, [r7, #11]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d20b      	bcs.n	8006716 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	607b      	str	r3, [r7, #4]
}
 8006710:	bf00      	nop
 8006712:	bf00      	nop
 8006714:	e7fd      	b.n	8006712 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006716:	4b0f      	ldr	r3, [pc, #60]	@ (8006754 <vPortValidateInterruptPriority+0x7c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800671e:	4b0e      	ldr	r3, [pc, #56]	@ (8006758 <vPortValidateInterruptPriority+0x80>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	429a      	cmp	r2, r3
 8006724:	d90b      	bls.n	800673e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	603b      	str	r3, [r7, #0]
}
 8006738:	bf00      	nop
 800673a:	bf00      	nop
 800673c:	e7fd      	b.n	800673a <vPortValidateInterruptPriority+0x62>
	}
 800673e:	bf00      	nop
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	e000e3f0 	.word	0xe000e3f0
 8006750:	20001330 	.word	0x20001330
 8006754:	e000ed0c 	.word	0xe000ed0c
 8006758:	20001334 	.word	0x20001334

0800675c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08a      	sub	sp, #40	@ 0x28
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006764:	2300      	movs	r3, #0
 8006766:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006768:	f7fe fc76 	bl	8005058 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800676c:	4b5c      	ldr	r3, [pc, #368]	@ (80068e0 <pvPortMalloc+0x184>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006774:	f000 f924 	bl	80069c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006778:	4b5a      	ldr	r3, [pc, #360]	@ (80068e4 <pvPortMalloc+0x188>)
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4013      	ands	r3, r2
 8006780:	2b00      	cmp	r3, #0
 8006782:	f040 8095 	bne.w	80068b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d01e      	beq.n	80067ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800678c:	2208      	movs	r2, #8
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4413      	add	r3, r2
 8006792:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f003 0307 	and.w	r3, r3, #7
 800679a:	2b00      	cmp	r3, #0
 800679c:	d015      	beq.n	80067ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f023 0307 	bic.w	r3, r3, #7
 80067a4:	3308      	adds	r3, #8
 80067a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f003 0307 	and.w	r3, r3, #7
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00b      	beq.n	80067ca <pvPortMalloc+0x6e>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	617b      	str	r3, [r7, #20]
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop
 80067c8:	e7fd      	b.n	80067c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d06f      	beq.n	80068b0 <pvPortMalloc+0x154>
 80067d0:	4b45      	ldr	r3, [pc, #276]	@ (80068e8 <pvPortMalloc+0x18c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d86a      	bhi.n	80068b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80067da:	4b44      	ldr	r3, [pc, #272]	@ (80068ec <pvPortMalloc+0x190>)
 80067dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80067de:	4b43      	ldr	r3, [pc, #268]	@ (80068ec <pvPortMalloc+0x190>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067e4:	e004      	b.n	80067f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80067e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d903      	bls.n	8006802 <pvPortMalloc+0xa6>
 80067fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1f1      	bne.n	80067e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006802:	4b37      	ldr	r3, [pc, #220]	@ (80068e0 <pvPortMalloc+0x184>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006808:	429a      	cmp	r2, r3
 800680a:	d051      	beq.n	80068b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2208      	movs	r2, #8
 8006812:	4413      	add	r3, r2
 8006814:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800681e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	1ad2      	subs	r2, r2, r3
 8006826:	2308      	movs	r3, #8
 8006828:	005b      	lsls	r3, r3, #1
 800682a:	429a      	cmp	r2, r3
 800682c:	d920      	bls.n	8006870 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800682e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4413      	add	r3, r2
 8006834:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	f003 0307 	and.w	r3, r3, #7
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00b      	beq.n	8006858 <pvPortMalloc+0xfc>
	__asm volatile
 8006840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	613b      	str	r3, [r7, #16]
}
 8006852:	bf00      	nop
 8006854:	bf00      	nop
 8006856:	e7fd      	b.n	8006854 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	1ad2      	subs	r2, r2, r3
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800686a:	69b8      	ldr	r0, [r7, #24]
 800686c:	f000 f90a 	bl	8006a84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006870:	4b1d      	ldr	r3, [pc, #116]	@ (80068e8 <pvPortMalloc+0x18c>)
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	4a1b      	ldr	r2, [pc, #108]	@ (80068e8 <pvPortMalloc+0x18c>)
 800687c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800687e:	4b1a      	ldr	r3, [pc, #104]	@ (80068e8 <pvPortMalloc+0x18c>)
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	4b1b      	ldr	r3, [pc, #108]	@ (80068f0 <pvPortMalloc+0x194>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d203      	bcs.n	8006892 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800688a:	4b17      	ldr	r3, [pc, #92]	@ (80068e8 <pvPortMalloc+0x18c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a18      	ldr	r2, [pc, #96]	@ (80068f0 <pvPortMalloc+0x194>)
 8006890:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	4b13      	ldr	r3, [pc, #76]	@ (80068e4 <pvPortMalloc+0x188>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	431a      	orrs	r2, r3
 800689c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80068a6:	4b13      	ldr	r3, [pc, #76]	@ (80068f4 <pvPortMalloc+0x198>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3301      	adds	r3, #1
 80068ac:	4a11      	ldr	r2, [pc, #68]	@ (80068f4 <pvPortMalloc+0x198>)
 80068ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80068b0:	f7fe fbe0 	bl	8005074 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00b      	beq.n	80068d6 <pvPortMalloc+0x17a>
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	60fb      	str	r3, [r7, #12]
}
 80068d0:	bf00      	nop
 80068d2:	bf00      	nop
 80068d4:	e7fd      	b.n	80068d2 <pvPortMalloc+0x176>
	return pvReturn;
 80068d6:	69fb      	ldr	r3, [r7, #28]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3728      	adds	r7, #40	@ 0x28
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	20004f40 	.word	0x20004f40
 80068e4:	20004f54 	.word	0x20004f54
 80068e8:	20004f44 	.word	0x20004f44
 80068ec:	20004f38 	.word	0x20004f38
 80068f0:	20004f48 	.word	0x20004f48
 80068f4:	20004f4c 	.word	0x20004f4c

080068f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d04f      	beq.n	80069aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800690a:	2308      	movs	r3, #8
 800690c:	425b      	negs	r3, r3
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	4413      	add	r3, r2
 8006912:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	4b25      	ldr	r3, [pc, #148]	@ (80069b4 <vPortFree+0xbc>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4013      	ands	r3, r2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10b      	bne.n	800693e <vPortFree+0x46>
	__asm volatile
 8006926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	60fb      	str	r3, [r7, #12]
}
 8006938:	bf00      	nop
 800693a:	bf00      	nop
 800693c:	e7fd      	b.n	800693a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00b      	beq.n	800695e <vPortFree+0x66>
	__asm volatile
 8006946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	60bb      	str	r3, [r7, #8]
}
 8006958:	bf00      	nop
 800695a:	bf00      	nop
 800695c:	e7fd      	b.n	800695a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	4b14      	ldr	r3, [pc, #80]	@ (80069b4 <vPortFree+0xbc>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4013      	ands	r3, r2
 8006968:	2b00      	cmp	r3, #0
 800696a:	d01e      	beq.n	80069aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d11a      	bne.n	80069aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	4b0e      	ldr	r3, [pc, #56]	@ (80069b4 <vPortFree+0xbc>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	43db      	mvns	r3, r3
 800697e:	401a      	ands	r2, r3
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006984:	f7fe fb68 	bl	8005058 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	4b0a      	ldr	r3, [pc, #40]	@ (80069b8 <vPortFree+0xc0>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4413      	add	r3, r2
 8006992:	4a09      	ldr	r2, [pc, #36]	@ (80069b8 <vPortFree+0xc0>)
 8006994:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006996:	6938      	ldr	r0, [r7, #16]
 8006998:	f000 f874 	bl	8006a84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800699c:	4b07      	ldr	r3, [pc, #28]	@ (80069bc <vPortFree+0xc4>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3301      	adds	r3, #1
 80069a2:	4a06      	ldr	r2, [pc, #24]	@ (80069bc <vPortFree+0xc4>)
 80069a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80069a6:	f7fe fb65 	bl	8005074 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069aa:	bf00      	nop
 80069ac:	3718      	adds	r7, #24
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	20004f54 	.word	0x20004f54
 80069b8:	20004f44 	.word	0x20004f44
 80069bc:	20004f50 	.word	0x20004f50

080069c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80069ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80069cc:	4b27      	ldr	r3, [pc, #156]	@ (8006a6c <prvHeapInit+0xac>)
 80069ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f003 0307 	and.w	r3, r3, #7
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00c      	beq.n	80069f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3307      	adds	r3, #7
 80069de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0307 	bic.w	r3, r3, #7
 80069e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	4a1f      	ldr	r2, [pc, #124]	@ (8006a6c <prvHeapInit+0xac>)
 80069f0:	4413      	add	r3, r2
 80069f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006a70 <prvHeapInit+0xb0>)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006a70 <prvHeapInit+0xb0>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	4413      	add	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a0c:	2208      	movs	r2, #8
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	1a9b      	subs	r3, r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0307 	bic.w	r3, r3, #7
 8006a1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4a15      	ldr	r2, [pc, #84]	@ (8006a74 <prvHeapInit+0xb4>)
 8006a20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a22:	4b14      	ldr	r3, [pc, #80]	@ (8006a74 <prvHeapInit+0xb4>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2200      	movs	r2, #0
 8006a28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a2a:	4b12      	ldr	r3, [pc, #72]	@ (8006a74 <prvHeapInit+0xb4>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	1ad2      	subs	r2, r2, r3
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a40:	4b0c      	ldr	r3, [pc, #48]	@ (8006a74 <prvHeapInit+0xb4>)
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8006a78 <prvHeapInit+0xb8>)
 8006a4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	4a09      	ldr	r2, [pc, #36]	@ (8006a7c <prvHeapInit+0xbc>)
 8006a56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a58:	4b09      	ldr	r3, [pc, #36]	@ (8006a80 <prvHeapInit+0xc0>)
 8006a5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006a5e:	601a      	str	r2, [r3, #0]
}
 8006a60:	bf00      	nop
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	20001338 	.word	0x20001338
 8006a70:	20004f38 	.word	0x20004f38
 8006a74:	20004f40 	.word	0x20004f40
 8006a78:	20004f48 	.word	0x20004f48
 8006a7c:	20004f44 	.word	0x20004f44
 8006a80:	20004f54 	.word	0x20004f54

08006a84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a8c:	4b28      	ldr	r3, [pc, #160]	@ (8006b30 <prvInsertBlockIntoFreeList+0xac>)
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	e002      	b.n	8006a98 <prvInsertBlockIntoFreeList+0x14>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	60fb      	str	r3, [r7, #12]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d8f7      	bhi.n	8006a92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	4413      	add	r3, r2
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d108      	bne.n	8006ac6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	441a      	add	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	441a      	add	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d118      	bne.n	8006b0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	4b15      	ldr	r3, [pc, #84]	@ (8006b34 <prvInsertBlockIntoFreeList+0xb0>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d00d      	beq.n	8006b02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	441a      	add	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	e008      	b.n	8006b14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b02:	4b0c      	ldr	r3, [pc, #48]	@ (8006b34 <prvInsertBlockIntoFreeList+0xb0>)
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	e003      	b.n	8006b14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d002      	beq.n	8006b22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b22:	bf00      	nop
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	20004f38 	.word	0x20004f38
 8006b34:	20004f40 	.word	0x20004f40

08006b38 <memset>:
 8006b38:	4402      	add	r2, r0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d100      	bne.n	8006b42 <memset+0xa>
 8006b40:	4770      	bx	lr
 8006b42:	f803 1b01 	strb.w	r1, [r3], #1
 8006b46:	e7f9      	b.n	8006b3c <memset+0x4>

08006b48 <_reclaim_reent>:
 8006b48:	4b29      	ldr	r3, [pc, #164]	@ (8006bf0 <_reclaim_reent+0xa8>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4283      	cmp	r3, r0
 8006b4e:	b570      	push	{r4, r5, r6, lr}
 8006b50:	4604      	mov	r4, r0
 8006b52:	d04b      	beq.n	8006bec <_reclaim_reent+0xa4>
 8006b54:	69c3      	ldr	r3, [r0, #28]
 8006b56:	b1ab      	cbz	r3, 8006b84 <_reclaim_reent+0x3c>
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	b16b      	cbz	r3, 8006b78 <_reclaim_reent+0x30>
 8006b5c:	2500      	movs	r5, #0
 8006b5e:	69e3      	ldr	r3, [r4, #28]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	5959      	ldr	r1, [r3, r5]
 8006b64:	2900      	cmp	r1, #0
 8006b66:	d13b      	bne.n	8006be0 <_reclaim_reent+0x98>
 8006b68:	3504      	adds	r5, #4
 8006b6a:	2d80      	cmp	r5, #128	@ 0x80
 8006b6c:	d1f7      	bne.n	8006b5e <_reclaim_reent+0x16>
 8006b6e:	69e3      	ldr	r3, [r4, #28]
 8006b70:	4620      	mov	r0, r4
 8006b72:	68d9      	ldr	r1, [r3, #12]
 8006b74:	f000 f87a 	bl	8006c6c <_free_r>
 8006b78:	69e3      	ldr	r3, [r4, #28]
 8006b7a:	6819      	ldr	r1, [r3, #0]
 8006b7c:	b111      	cbz	r1, 8006b84 <_reclaim_reent+0x3c>
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f000 f874 	bl	8006c6c <_free_r>
 8006b84:	6961      	ldr	r1, [r4, #20]
 8006b86:	b111      	cbz	r1, 8006b8e <_reclaim_reent+0x46>
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f000 f86f 	bl	8006c6c <_free_r>
 8006b8e:	69e1      	ldr	r1, [r4, #28]
 8006b90:	b111      	cbz	r1, 8006b98 <_reclaim_reent+0x50>
 8006b92:	4620      	mov	r0, r4
 8006b94:	f000 f86a 	bl	8006c6c <_free_r>
 8006b98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006b9a:	b111      	cbz	r1, 8006ba2 <_reclaim_reent+0x5a>
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 f865 	bl	8006c6c <_free_r>
 8006ba2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ba4:	b111      	cbz	r1, 8006bac <_reclaim_reent+0x64>
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f000 f860 	bl	8006c6c <_free_r>
 8006bac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006bae:	b111      	cbz	r1, 8006bb6 <_reclaim_reent+0x6e>
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f000 f85b 	bl	8006c6c <_free_r>
 8006bb6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006bb8:	b111      	cbz	r1, 8006bc0 <_reclaim_reent+0x78>
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f000 f856 	bl	8006c6c <_free_r>
 8006bc0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006bc2:	b111      	cbz	r1, 8006bca <_reclaim_reent+0x82>
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f000 f851 	bl	8006c6c <_free_r>
 8006bca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006bcc:	b111      	cbz	r1, 8006bd4 <_reclaim_reent+0x8c>
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f000 f84c 	bl	8006c6c <_free_r>
 8006bd4:	6a23      	ldr	r3, [r4, #32]
 8006bd6:	b14b      	cbz	r3, 8006bec <_reclaim_reent+0xa4>
 8006bd8:	4620      	mov	r0, r4
 8006bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006bde:	4718      	bx	r3
 8006be0:	680e      	ldr	r6, [r1, #0]
 8006be2:	4620      	mov	r0, r4
 8006be4:	f000 f842 	bl	8006c6c <_free_r>
 8006be8:	4631      	mov	r1, r6
 8006bea:	e7bb      	b.n	8006b64 <_reclaim_reent+0x1c>
 8006bec:	bd70      	pop	{r4, r5, r6, pc}
 8006bee:	bf00      	nop
 8006bf0:	2000002c 	.word	0x2000002c

08006bf4 <__libc_init_array>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	4d0d      	ldr	r5, [pc, #52]	@ (8006c2c <__libc_init_array+0x38>)
 8006bf8:	4c0d      	ldr	r4, [pc, #52]	@ (8006c30 <__libc_init_array+0x3c>)
 8006bfa:	1b64      	subs	r4, r4, r5
 8006bfc:	10a4      	asrs	r4, r4, #2
 8006bfe:	2600      	movs	r6, #0
 8006c00:	42a6      	cmp	r6, r4
 8006c02:	d109      	bne.n	8006c18 <__libc_init_array+0x24>
 8006c04:	4d0b      	ldr	r5, [pc, #44]	@ (8006c34 <__libc_init_array+0x40>)
 8006c06:	4c0c      	ldr	r4, [pc, #48]	@ (8006c38 <__libc_init_array+0x44>)
 8006c08:	f000 f886 	bl	8006d18 <_init>
 8006c0c:	1b64      	subs	r4, r4, r5
 8006c0e:	10a4      	asrs	r4, r4, #2
 8006c10:	2600      	movs	r6, #0
 8006c12:	42a6      	cmp	r6, r4
 8006c14:	d105      	bne.n	8006c22 <__libc_init_array+0x2e>
 8006c16:	bd70      	pop	{r4, r5, r6, pc}
 8006c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c1c:	4798      	blx	r3
 8006c1e:	3601      	adds	r6, #1
 8006c20:	e7ee      	b.n	8006c00 <__libc_init_array+0xc>
 8006c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c26:	4798      	blx	r3
 8006c28:	3601      	adds	r6, #1
 8006c2a:	e7f2      	b.n	8006c12 <__libc_init_array+0x1e>
 8006c2c:	08007bc0 	.word	0x08007bc0
 8006c30:	08007bc0 	.word	0x08007bc0
 8006c34:	08007bc0 	.word	0x08007bc0
 8006c38:	08007bc4 	.word	0x08007bc4

08006c3c <__retarget_lock_acquire_recursive>:
 8006c3c:	4770      	bx	lr

08006c3e <__retarget_lock_release_recursive>:
 8006c3e:	4770      	bx	lr

08006c40 <strcpy>:
 8006c40:	4603      	mov	r3, r0
 8006c42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c46:	f803 2b01 	strb.w	r2, [r3], #1
 8006c4a:	2a00      	cmp	r2, #0
 8006c4c:	d1f9      	bne.n	8006c42 <strcpy+0x2>
 8006c4e:	4770      	bx	lr

08006c50 <memcpy>:
 8006c50:	440a      	add	r2, r1
 8006c52:	4291      	cmp	r1, r2
 8006c54:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c58:	d100      	bne.n	8006c5c <memcpy+0xc>
 8006c5a:	4770      	bx	lr
 8006c5c:	b510      	push	{r4, lr}
 8006c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c66:	4291      	cmp	r1, r2
 8006c68:	d1f9      	bne.n	8006c5e <memcpy+0xe>
 8006c6a:	bd10      	pop	{r4, pc}

08006c6c <_free_r>:
 8006c6c:	b538      	push	{r3, r4, r5, lr}
 8006c6e:	4605      	mov	r5, r0
 8006c70:	2900      	cmp	r1, #0
 8006c72:	d041      	beq.n	8006cf8 <_free_r+0x8c>
 8006c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c78:	1f0c      	subs	r4, r1, #4
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	bfb8      	it	lt
 8006c7e:	18e4      	addlt	r4, r4, r3
 8006c80:	f000 f83e 	bl	8006d00 <__malloc_lock>
 8006c84:	4a1d      	ldr	r2, [pc, #116]	@ (8006cfc <_free_r+0x90>)
 8006c86:	6813      	ldr	r3, [r2, #0]
 8006c88:	b933      	cbnz	r3, 8006c98 <_free_r+0x2c>
 8006c8a:	6063      	str	r3, [r4, #4]
 8006c8c:	6014      	str	r4, [r2, #0]
 8006c8e:	4628      	mov	r0, r5
 8006c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c94:	f000 b83a 	b.w	8006d0c <__malloc_unlock>
 8006c98:	42a3      	cmp	r3, r4
 8006c9a:	d908      	bls.n	8006cae <_free_r+0x42>
 8006c9c:	6820      	ldr	r0, [r4, #0]
 8006c9e:	1821      	adds	r1, r4, r0
 8006ca0:	428b      	cmp	r3, r1
 8006ca2:	bf01      	itttt	eq
 8006ca4:	6819      	ldreq	r1, [r3, #0]
 8006ca6:	685b      	ldreq	r3, [r3, #4]
 8006ca8:	1809      	addeq	r1, r1, r0
 8006caa:	6021      	streq	r1, [r4, #0]
 8006cac:	e7ed      	b.n	8006c8a <_free_r+0x1e>
 8006cae:	461a      	mov	r2, r3
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	b10b      	cbz	r3, 8006cb8 <_free_r+0x4c>
 8006cb4:	42a3      	cmp	r3, r4
 8006cb6:	d9fa      	bls.n	8006cae <_free_r+0x42>
 8006cb8:	6811      	ldr	r1, [r2, #0]
 8006cba:	1850      	adds	r0, r2, r1
 8006cbc:	42a0      	cmp	r0, r4
 8006cbe:	d10b      	bne.n	8006cd8 <_free_r+0x6c>
 8006cc0:	6820      	ldr	r0, [r4, #0]
 8006cc2:	4401      	add	r1, r0
 8006cc4:	1850      	adds	r0, r2, r1
 8006cc6:	4283      	cmp	r3, r0
 8006cc8:	6011      	str	r1, [r2, #0]
 8006cca:	d1e0      	bne.n	8006c8e <_free_r+0x22>
 8006ccc:	6818      	ldr	r0, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	6053      	str	r3, [r2, #4]
 8006cd2:	4408      	add	r0, r1
 8006cd4:	6010      	str	r0, [r2, #0]
 8006cd6:	e7da      	b.n	8006c8e <_free_r+0x22>
 8006cd8:	d902      	bls.n	8006ce0 <_free_r+0x74>
 8006cda:	230c      	movs	r3, #12
 8006cdc:	602b      	str	r3, [r5, #0]
 8006cde:	e7d6      	b.n	8006c8e <_free_r+0x22>
 8006ce0:	6820      	ldr	r0, [r4, #0]
 8006ce2:	1821      	adds	r1, r4, r0
 8006ce4:	428b      	cmp	r3, r1
 8006ce6:	bf04      	itt	eq
 8006ce8:	6819      	ldreq	r1, [r3, #0]
 8006cea:	685b      	ldreq	r3, [r3, #4]
 8006cec:	6063      	str	r3, [r4, #4]
 8006cee:	bf04      	itt	eq
 8006cf0:	1809      	addeq	r1, r1, r0
 8006cf2:	6021      	streq	r1, [r4, #0]
 8006cf4:	6054      	str	r4, [r2, #4]
 8006cf6:	e7ca      	b.n	8006c8e <_free_r+0x22>
 8006cf8:	bd38      	pop	{r3, r4, r5, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20005094 	.word	0x20005094

08006d00 <__malloc_lock>:
 8006d00:	4801      	ldr	r0, [pc, #4]	@ (8006d08 <__malloc_lock+0x8>)
 8006d02:	f7ff bf9b 	b.w	8006c3c <__retarget_lock_acquire_recursive>
 8006d06:	bf00      	nop
 8006d08:	20005090 	.word	0x20005090

08006d0c <__malloc_unlock>:
 8006d0c:	4801      	ldr	r0, [pc, #4]	@ (8006d14 <__malloc_unlock+0x8>)
 8006d0e:	f7ff bf96 	b.w	8006c3e <__retarget_lock_release_recursive>
 8006d12:	bf00      	nop
 8006d14:	20005090 	.word	0x20005090

08006d18 <_init>:
 8006d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1a:	bf00      	nop
 8006d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d1e:	bc08      	pop	{r3}
 8006d20:	469e      	mov	lr, r3
 8006d22:	4770      	bx	lr

08006d24 <_fini>:
 8006d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d26:	bf00      	nop
 8006d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d2a:	bc08      	pop	{r3}
 8006d2c:	469e      	mov	lr, r3
 8006d2e:	4770      	bx	lr
